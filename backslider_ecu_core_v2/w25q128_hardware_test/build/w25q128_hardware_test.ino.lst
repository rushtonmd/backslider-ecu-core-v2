
/Users/rushtonmd/Library/Caches/arduino/sketches/7778CF8944326B4E91E36BB42D1B3ECD/w25q128_hardware_test.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20003ac0 	.word	0x20003ac0
6000142c:	200042e0 	.word	0x200042e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc71 	bl	60001e48 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc44 	bl	60001e40 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc45 	bl	60001e68 <____libc_init_array_veneer>
	main();
600015de:	f000 fc47 	bl	60001e70 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001399c 	.word	0x0001399c
600015f0:	60001f94 	.word	0x60001f94
600015f4:	00000000 	.word	0x00000000
600015f8:	20003ac0 	.word	0x20003ac0
600015fc:	60015934 	.word	0x60015934
60001600:	20000000 	.word	0x20000000
60001604:	20003800 	.word	0x20003800
60001608:	000030fd 	.word	0x000030fd
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00002c39 	.word	0x00002c39
6000161c:	20004264 	.word	0x20004264
60001620:	00002c3d 	.word	0x00002c3d
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20004268 	.word	0x20004268
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaabf 	.word	0xaaaaaabf
6000166c:	00200007 	.word	0x00200007
60001670:	20068000 	.word	0x20068000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	200042e0 	.word	0x200042e0
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9fe 	bl	60001e60 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	200042af 	.word	0x200042af
60001ae4:	200040f0 	.word	0x200040f0
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	20004154 	.word	0x20004154
60001c88:	20004150 	.word	0x20004150
60001c8c:	20004158 	.word	0x20004158
60001c90:	2000415c 	.word	0x2000415c
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20003800 	.word	0x20003800
60001ca0:	000032e5 	.word	0x000032e5

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8e0 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f89d 	bl	60001e50 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f891 	bl	60001e58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20003800 	.word	0x20003800
60001d88:	000034cd 	.word	0x000034cd

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	200042ae 	.word	0x200042ae

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__pwm_init_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__pwm_init_veneer+0x4>
60001e44:	0000484d 	.word	0x0000484d

60001e48 <__set_arm_clock_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__set_arm_clock_veneer+0x4>
60001e4c:	000044e1 	.word	0x000044e1

60001e50 <__delay_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__delay_veneer+0x4>
60001e54:	00002d5d 	.word	0x00002d5d

60001e58 <__memset_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__memset_veneer+0x4>
60001e5c:	0000e045 	.word	0x0000e045

60001e60 <__sm_set_pool_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__sm_set_pool_veneer+0x4>
60001e64:	000049b1 	.word	0x000049b1

60001e68 <____libc_init_array_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <____libc_init_array_veneer+0x4>
60001e6c:	0000e53d 	.word	0x0000e53d

60001e70 <__main_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__main_veneer+0x4>
60001e74:	00002f41 	.word	0x00002f41

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	00003c3d 	.word	0x00003c3d

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045 000000b1 00004db1              E........M..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20003ac0 	.word	0x20003ac0
      3c:	20003ac0 	.word	0x20003ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20004100 	.word	0x20004100
      64:	6001a000 	.word	0x6001a000

00000068 <loop>:
    
    test_stats.end_time = millis();
    printFinalResults();
}

void loop() {
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	4d0f      	ldr	r5, [pc, #60]	; (a8 <loop+0x40>)
    // Keep alive - blink LED to show it's running
    static uint32_t last_blink = 0;
    if (millis() - last_blink >= 1000) {
      6c:	4c0f      	ldr	r4, [pc, #60]	; (ac <loop+0x44>)
      6e:	682b      	ldr	r3, [r5, #0]
      70:	6822      	ldr	r2, [r4, #0]
      72:	1a9b      	subs	r3, r3, r2
      74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      78:	d204      	bcs.n	84 <loop+0x1c>
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
        last_blink = millis();
    }
    delay(100);
      7a:	2064      	movs	r0, #100	; 0x64
}
      7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(100);
      80:	f002 be6c 	b.w	2d5c <delay>
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
      84:	200d      	movs	r0, #13
      86:	f002 ff11 	bl	2eac <digitalRead>
      8a:	4601      	mov	r1, r0
      8c:	200d      	movs	r0, #13
      8e:	fab1 f181 	clz	r1, r1
      92:	0949      	lsrs	r1, r1, #5
      94:	f002 fee0 	bl	2e58 <digitalWrite>
      98:	682b      	ldr	r3, [r5, #0]
    delay(100);
      9a:	2064      	movs	r0, #100	; 0x64
        last_blink = millis();
      9c:	6023      	str	r3, [r4, #0]
}
      9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(100);
      a2:	f002 be5b 	b.w	2d5c <delay>
      a6:	bf00      	nop
      a8:	20004268 	.word	0x20004268
      ac:	20003ce4 	.word	0x20003ce4

000000b0 <_GLOBAL__sub_I_ecu_config>:
    } else {
        Serial.println("\n⚠️  Some tests failed. Check the output above for details.");
    }
    
    Serial.println("==========================");
      b0:	b510      	push	{r4, lr}
W25Q128StorageBackend storage_backend(ecu_config);
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <_GLOBAL__sub_I_ecu_config+0x1c>)
      b4:	4906      	ldr	r1, [pc, #24]	; (d0 <_GLOBAL__sub_I_ecu_config+0x20>)
      b6:	4620      	mov	r0, r4
      b8:	f002 fb0e 	bl	26d8 <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)>
      bc:	4620      	mov	r0, r4
      be:	4a05      	ldr	r2, [pc, #20]	; (d4 <_GLOBAL__sub_I_ecu_config+0x24>)
      c0:	4905      	ldr	r1, [pc, #20]	; (d8 <_GLOBAL__sub_I_ecu_config+0x28>)
      c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
W25Q128StorageBackend storage_backend(ecu_config);
      c6:	f004 bcb5 	b.w	4a34 <__aeabi_atexit>
      ca:	bf00      	nop
      cc:	20004164 	.word	0x20004164
      d0:	20003ff8 	.word	0x20003ff8
      d4:	20003010 	.word	0x20003010
      d8:	00001f15 	.word	0x00001f15

000000dc <testInitialization()>:
void testInitialization() {
      dc:	b510      	push	{r4, lr}
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      de:	2116      	movs	r1, #22
    test_stats.total_tests++;
      e0:	4c27      	ldr	r4, [pc, #156]	; (180 <testInitialization()+0xa4>)
      e2:	4828      	ldr	r0, [pc, #160]	; (184 <testInitialization()+0xa8>)
      e4:	f004 f912 	bl	430c <usb_serial_write>
      e8:	4827      	ldr	r0, [pc, #156]	; (188 <testInitialization()+0xac>)
      ea:	f002 fe07 	bl	2cfc <Print::println()>
      ee:	6823      	ldr	r3, [r4, #0]
    if (storage_backend.begin()) {
      f0:	4826      	ldr	r0, [pc, #152]	; (18c <testInitialization()+0xb0>)
    test_stats.total_tests++;
      f2:	3301      	adds	r3, #1
      f4:	6023      	str	r3, [r4, #0]
    if (storage_backend.begin()) {
      f6:	f002 f887 	bl	2208 <W25Q128StorageBackend::begin()>
      fa:	b328      	cbz	r0, 148 <testInitialization()+0x6c>
      fc:	2125      	movs	r1, #37	; 0x25
      fe:	4824      	ldr	r0, [pc, #144]	; (190 <testInitialization()+0xb4>)
     100:	f004 f904 	bl	430c <usb_serial_write>
     104:	4820      	ldr	r0, [pc, #128]	; (188 <testInitialization()+0xac>)
     106:	f002 fdf9 	bl	2cfc <Print::println()>
        storage_backend.printFlashInfo();
     10a:	4820      	ldr	r0, [pc, #128]	; (18c <testInitialization()+0xb0>)
     10c:	f001 f85c 	bl	11c8 <W25Q128StorageBackend::printFlashInfo()>
        test_stats.passed_tests++;
     110:	6863      	ldr	r3, [r4, #4]
     112:	3301      	adds	r3, #1
     114:	6063      	str	r3, [r4, #4]
    uint32_t flash_id = storage_backend.getFlashID();
     116:	481d      	ldr	r0, [pc, #116]	; (18c <testInitialization()+0xb0>)
     118:	f000 ffea 	bl	10f0 <W25Q128StorageBackend::getFlashID()>
    if ((flash_id & 0xFF0000) == 0xEF0000) {
     11c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
     120:	2120      	movs	r1, #32
     122:	f5b0 0f6f 	cmp.w	r0, #15663104	; 0xef0000
     126:	d01d      	beq.n	164 <testInitialization()+0x88>
     128:	481a      	ldr	r0, [pc, #104]	; (194 <testInitialization()+0xb8>)
     12a:	f004 f8ef 	bl	430c <usb_serial_write>
     12e:	4816      	ldr	r0, [pc, #88]	; (188 <testInitialization()+0xac>)
     130:	f002 fde4 	bl	2cfc <Print::println()>
        test_stats.total_errors++;
     134:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     136:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     138:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     13a:	3201      	adds	r2, #1
        test_stats.total_errors++;
     13c:	6163      	str	r3, [r4, #20]
    test_stats.total_tests++;
     13e:	6823      	ldr	r3, [r4, #0]
        test_stats.failed_tests++;
     140:	60a2      	str	r2, [r4, #8]
    test_stats.total_tests++;
     142:	3301      	adds	r3, #1
     144:	6023      	str	r3, [r4, #0]
}
     146:	bd10      	pop	{r4, pc}
     148:	2121      	movs	r1, #33	; 0x21
     14a:	4813      	ldr	r0, [pc, #76]	; (198 <testInitialization()+0xbc>)
     14c:	f004 f8de 	bl	430c <usb_serial_write>
     150:	480d      	ldr	r0, [pc, #52]	; (188 <testInitialization()+0xac>)
     152:	f002 fdd3 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     156:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     158:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     15a:	3201      	adds	r2, #1
        test_stats.total_errors++;
     15c:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     15e:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     160:	6163      	str	r3, [r4, #20]
     162:	e7d8      	b.n	116 <testInitialization()+0x3a>
     164:	480d      	ldr	r0, [pc, #52]	; (19c <testInitialization()+0xc0>)
     166:	f004 f8d1 	bl	430c <usb_serial_write>
     16a:	4807      	ldr	r0, [pc, #28]	; (188 <testInitialization()+0xac>)
     16c:	f002 fdc6 	bl	2cfc <Print::println()>
        test_stats.passed_tests++;
     170:	6863      	ldr	r3, [r4, #4]
     172:	3301      	adds	r3, #1
     174:	6063      	str	r3, [r4, #4]
    test_stats.total_tests++;
     176:	6823      	ldr	r3, [r4, #0]
     178:	3301      	adds	r3, #1
     17a:	6023      	str	r3, [r4, #0]
}
     17c:	bd10      	pop	{r4, pc}
     17e:	bf00      	nop
     180:	20004270 	.word	0x20004270
     184:	200007ac 	.word	0x200007ac
     188:	20002ff0 	.word	0x20002ff0
     18c:	20004164 	.word	0x20004164
     190:	200007c4 	.word	0x200007c4
     194:	20000834 	.word	0x20000834
     198:	200007ec 	.word	0x200007ec
     19c:	20000810 	.word	0x20000810

000001a0 <testMultipleDataTypes()>:
void testMultipleDataTypes() {
     1a0:	b530      	push	{r4, r5, lr}
     1a2:	211b      	movs	r1, #27
     1a4:	b091      	sub	sp, #68	; 0x44
     1a6:	484a      	ldr	r0, [pc, #296]	; (2d0 <testMultipleDataTypes()+0x130>)
     1a8:	f004 f8b0 	bl	430c <usb_serial_write>
     1ac:	4849      	ldr	r0, [pc, #292]	; (2d4 <testMultipleDataTypes()+0x134>)
     1ae:	f002 fda5 	bl	2cfc <Print::println()>
    SensorCalibration cal_data = {
     1b2:	4b49      	ldr	r3, [pc, #292]	; (2d8 <testMultipleDataTypes()+0x138>)
    test_stats.total_tests++;
     1b4:	4c49      	ldr	r4, [pc, #292]	; (2dc <testMultipleDataTypes()+0x13c>)
    SensorCalibration cal_data = {
     1b6:	9303      	str	r3, [sp, #12]
     1b8:	2301      	movs	r3, #1
     1ba:	4d49      	ldr	r5, [pc, #292]	; (2e0 <testMultipleDataTypes()+0x140>)
     1bc:	9304      	str	r3, [sp, #16]
    test_stats.total_tests++;
     1be:	6823      	ldr	r3, [r4, #0]
    SensorCalibration cal_data = {
     1c0:	4a48      	ldr	r2, [pc, #288]	; (2e4 <testMultipleDataTypes()+0x144>)
     1c2:	6828      	ldr	r0, [r5, #0]
    test_stats.total_tests++;
     1c4:	3301      	adds	r3, #1
    SensorCalibration cal_data = {
     1c6:	4948      	ldr	r1, [pc, #288]	; (2e8 <testMultipleDataTypes()+0x148>)
    };
     1c8:	9005      	str	r0, [sp, #20]
    SensorCalibration cal_data = {
     1ca:	9202      	str	r2, [sp, #8]
    if (storage_backend.writeData(cal_data.sensor_id, &cal_data, sizeof(cal_data))) {
     1cc:	aa01      	add	r2, sp, #4
    test_stats.total_tests++;
     1ce:	6023      	str	r3, [r4, #0]
    if (storage_backend.writeData(cal_data.sensor_id, &cal_data, sizeof(cal_data))) {
     1d0:	2314      	movs	r3, #20
     1d2:	4846      	ldr	r0, [pc, #280]	; (2ec <testMultipleDataTypes()+0x14c>)
    SensorCalibration cal_data = {
     1d4:	9101      	str	r1, [sp, #4]
    if (storage_backend.writeData(cal_data.sensor_id, &cal_data, sizeof(cal_data))) {
     1d6:	f001 ff31 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
     1da:	b1f8      	cbz	r0, 21c <testMultipleDataTypes()+0x7c>
        if (storage_backend.readData(cal_data.sensor_id, &read_cal, sizeof(read_cal))) {
     1dc:	2314      	movs	r3, #20
     1de:	9901      	ldr	r1, [sp, #4]
     1e0:	4842      	ldr	r0, [pc, #264]	; (2ec <testMultipleDataTypes()+0x14c>)
     1e2:	aa0b      	add	r2, sp, #44	; 0x2c
     1e4:	f001 fc56 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
     1e8:	2800      	cmp	r0, #0
     1ea:	d06e      	beq.n	2ca <testMultipleDataTypes()+0x12a>
            if (memcmp(&cal_data, &read_cal, sizeof(cal_data)) == 0) {
     1ec:	a90b      	add	r1, sp, #44	; 0x2c
     1ee:	2214      	movs	r2, #20
     1f0:	a801      	add	r0, sp, #4
     1f2:	f00d fe7b 	bl	deec <memcmp>
     1f6:	2127      	movs	r1, #39	; 0x27
     1f8:	2800      	cmp	r0, #0
     1fa:	d15f      	bne.n	2bc <testMultipleDataTypes()+0x11c>
     1fc:	483c      	ldr	r0, [pc, #240]	; (2f0 <testMultipleDataTypes()+0x150>)
     1fe:	f004 f885 	bl	430c <usb_serial_write>
     202:	4834      	ldr	r0, [pc, #208]	; (2d4 <testMultipleDataTypes()+0x134>)
     204:	f002 fd7a 	bl	2cfc <Print::println()>
                test_stats.passed_tests++;
     208:	6861      	ldr	r1, [r4, #4]
                test_stats.total_reads++;
     20a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
                test_stats.passed_tests++;
     20e:	3101      	adds	r1, #1
                test_stats.total_writes++;
     210:	3201      	adds	r2, #1
                test_stats.total_reads++;
     212:	3301      	adds	r3, #1
                test_stats.passed_tests++;
     214:	6061      	str	r1, [r4, #4]
                test_stats.total_reads++;
     216:	e9c4 2303 	strd	r2, r3, [r4, #12]
     21a:	e00c      	b.n	236 <testMultipleDataTypes()+0x96>
     21c:	2123      	movs	r1, #35	; 0x23
     21e:	4835      	ldr	r0, [pc, #212]	; (2f4 <testMultipleDataTypes()+0x154>)
     220:	f004 f874 	bl	430c <usb_serial_write>
     224:	482b      	ldr	r0, [pc, #172]	; (2d4 <testMultipleDataTypes()+0x134>)
     226:	f002 fd69 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     22a:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     22c:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     22e:	3201      	adds	r2, #1
        test_stats.total_errors++;
     230:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     232:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     234:	6163      	str	r3, [r4, #20]
    TransmissionData trans_data = {
     236:	2103      	movs	r1, #3
    test_stats.total_tests++;
     238:	6823      	ldr	r3, [r4, #0]
     23a:	682a      	ldr	r2, [r5, #0]
    TransmissionData trans_data = {
     23c:	9106      	str	r1, [sp, #24]
    test_stats.total_tests++;
     23e:	3301      	adds	r3, #1
    TransmissionData trans_data = {
     240:	492d      	ldr	r1, [pc, #180]	; (2f8 <testMultipleDataTypes()+0x158>)
    };
     242:	920a      	str	r2, [sp, #40]	; 0x28
    if (storage_backend.writeData(0x10300003, &trans_data, sizeof(trans_data))) {
     244:	aa06      	add	r2, sp, #24
    TransmissionData trans_data = {
     246:	9107      	str	r1, [sp, #28]
     248:	492c      	ldr	r1, [pc, #176]	; (2fc <testMultipleDataTypes()+0x15c>)
    test_stats.total_tests++;
     24a:	6023      	str	r3, [r4, #0]
    if (storage_backend.writeData(0x10300003, &trans_data, sizeof(trans_data))) {
     24c:	2314      	movs	r3, #20
    TransmissionData trans_data = {
     24e:	9108      	str	r1, [sp, #32]
     250:	f240 41e2 	movw	r1, #1250	; 0x4e2
    if (storage_backend.writeData(0x10300003, &trans_data, sizeof(trans_data))) {
     254:	4825      	ldr	r0, [pc, #148]	; (2ec <testMultipleDataTypes()+0x14c>)
    TransmissionData trans_data = {
     256:	9109      	str	r1, [sp, #36]	; 0x24
    if (storage_backend.writeData(0x10300003, &trans_data, sizeof(trans_data))) {
     258:	4929      	ldr	r1, [pc, #164]	; (300 <testMultipleDataTypes()+0x160>)
     25a:	f001 feef 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
     25e:	b1f0      	cbz	r0, 29e <testMultipleDataTypes()+0xfe>
        if (storage_backend.readData(0x10300003, &read_trans, sizeof(read_trans))) {
     260:	2314      	movs	r3, #20
     262:	aa0b      	add	r2, sp, #44	; 0x2c
     264:	4926      	ldr	r1, [pc, #152]	; (300 <testMultipleDataTypes()+0x160>)
     266:	4821      	ldr	r0, [pc, #132]	; (2ec <testMultipleDataTypes()+0x14c>)
     268:	f001 fc14 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
     26c:	b350      	cbz	r0, 2c4 <testMultipleDataTypes()+0x124>
            if (memcmp(&trans_data, &read_trans, sizeof(trans_data)) == 0) {
     26e:	a90b      	add	r1, sp, #44	; 0x2c
     270:	2214      	movs	r2, #20
     272:	a806      	add	r0, sp, #24
     274:	f00d fe3a 	bl	deec <memcmp>
     278:	2121      	movs	r1, #33	; 0x21
     27a:	bb08      	cbnz	r0, 2c0 <testMultipleDataTypes()+0x120>
     27c:	4821      	ldr	r0, [pc, #132]	; (304 <testMultipleDataTypes()+0x164>)
     27e:	f004 f845 	bl	430c <usb_serial_write>
     282:	4814      	ldr	r0, [pc, #80]	; (2d4 <testMultipleDataTypes()+0x134>)
     284:	f002 fd3a 	bl	2cfc <Print::println()>
                test_stats.passed_tests++;
     288:	6861      	ldr	r1, [r4, #4]
                test_stats.total_reads++;
     28a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
                test_stats.passed_tests++;
     28e:	3101      	adds	r1, #1
                test_stats.total_writes++;
     290:	3201      	adds	r2, #1
                test_stats.total_reads++;
     292:	3301      	adds	r3, #1
                test_stats.passed_tests++;
     294:	6061      	str	r1, [r4, #4]
                test_stats.total_reads++;
     296:	e9c4 2303 	strd	r2, r3, [r4, #12]
}
     29a:	b011      	add	sp, #68	; 0x44
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	2122      	movs	r1, #34	; 0x22
     2a0:	4819      	ldr	r0, [pc, #100]	; (308 <testMultipleDataTypes()+0x168>)
     2a2:	f004 f833 	bl	430c <usb_serial_write>
     2a6:	480b      	ldr	r0, [pc, #44]	; (2d4 <testMultipleDataTypes()+0x134>)
     2a8:	f002 fd28 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     2ac:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     2ae:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     2b0:	3201      	adds	r2, #1
        test_stats.total_errors++;
     2b2:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     2b4:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     2b6:	6163      	str	r3, [r4, #20]
}
     2b8:	b011      	add	sp, #68	; 0x44
     2ba:	bd30      	pop	{r4, r5, pc}
     2bc:	4813      	ldr	r0, [pc, #76]	; (30c <testMultipleDataTypes()+0x16c>)
     2be:	e7af      	b.n	220 <testMultipleDataTypes()+0x80>
     2c0:	4813      	ldr	r0, [pc, #76]	; (310 <testMultipleDataTypes()+0x170>)
     2c2:	e7ee      	b.n	2a2 <testMultipleDataTypes()+0x102>
     2c4:	2121      	movs	r1, #33	; 0x21
     2c6:	4813      	ldr	r0, [pc, #76]	; (314 <testMultipleDataTypes()+0x174>)
     2c8:	e7eb      	b.n	2a2 <testMultipleDataTypes()+0x102>
     2ca:	2122      	movs	r1, #34	; 0x22
     2cc:	4812      	ldr	r0, [pc, #72]	; (318 <testMultipleDataTypes()+0x178>)
     2ce:	e7a7      	b.n	220 <testMultipleDataTypes()+0x80>
     2d0:	200009d4 	.word	0x200009d4
     2d4:	20002ff0 	.word	0x20002ff0
     2d8:	3f828f5c 	.word	0x3f828f5c
     2dc:	20004270 	.word	0x20004270
     2e0:	20004268 	.word	0x20004268
     2e4:	c0200000 	.word	0xc0200000
     2e8:	10300002 	.word	0x10300002
     2ec:	20004164 	.word	0x20004164
     2f0:	200009f0 	.word	0x200009f0
     2f4:	20000a64 	.word	0x20000a64
     2f8:	42ab0000 	.word	0x42ab0000
     2fc:	40133333 	.word	0x40133333
     300:	10300003 	.word	0x10300003
     304:	20000a88 	.word	0x20000a88
     308:	20000af4 	.word	0x20000af4
     30c:	20000a18 	.word	0x20000a18
     310:	20000aac 	.word	0x20000aac
     314:	20000ad0 	.word	0x20000ad0
     318:	20000a40 	.word	0x20000a40

0000031c <testPerformance()>:
void testPerformance() {
     31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     320:	211e      	movs	r1, #30
     322:	b082      	sub	sp, #8
     324:	4847      	ldr	r0, [pc, #284]	; (444 <testPerformance()+0x128>)
    uint32_t start_time = micros();
     326:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
     32a:	f003 ffef 	bl	430c <usb_serial_write>
     32e:	4846      	ldr	r0, [pc, #280]	; (448 <testPerformance()+0x12c>)
     330:	f002 fce4 	bl	2cfc <Print::println()>
        storage_backend.writeData(0x10400000 + i, &test_data, sizeof(test_data));
     334:	4e45      	ldr	r6, [pc, #276]	; (44c <testPerformance()+0x130>)
    uint32_t start_time = micros();
     336:	f002 fd65 	bl	2e04 <micros>
    for (int i = 0; i < num_writes; i++) {
     33a:	4d45      	ldr	r5, [pc, #276]	; (450 <testPerformance()+0x134>)
    uint32_t start_time = micros();
     33c:	4607      	mov	r7, r0
        storage_backend.writeData(0x10400000 + i, &test_data, sizeof(test_data));
     33e:	2304      	movs	r3, #4
     340:	f504 0180 	add.w	r1, r4, #4194304	; 0x400000
        uint32_t test_data = 0x10000000 + i;
     344:	9401      	str	r4, [sp, #4]
    for (int i = 0; i < num_writes; i++) {
     346:	3401      	adds	r4, #1
        storage_backend.writeData(0x10400000 + i, &test_data, sizeof(test_data));
     348:	eb0d 0203 	add.w	r2, sp, r3
     34c:	4630      	mov	r0, r6
     34e:	f001 fe75 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
    for (int i = 0; i < num_writes; i++) {
     352:	42ac      	cmp	r4, r5
     354:	d1f3      	bne.n	33e <testPerformance()+0x22>
    uint32_t write_time = micros() - start_time;
     356:	f002 fd55 	bl	2e04 <micros>
     35a:	4604      	mov	r4, r0
     35c:	2113      	movs	r1, #19
     35e:	483d      	ldr	r0, [pc, #244]	; (454 <testPerformance()+0x138>)
     360:	1be4      	subs	r4, r4, r7
     362:	f003 ffd3 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     366:	2300      	movs	r3, #0
     368:	220a      	movs	r2, #10
     36a:	4621      	mov	r1, r4
     36c:	4836      	ldr	r0, [pc, #216]	; (448 <testPerformance()+0x12c>)
     36e:	f002 fce1 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     372:	2109      	movs	r1, #9
     374:	4838      	ldr	r0, [pc, #224]	; (458 <testPerformance()+0x13c>)
     376:	f003 ffc9 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     37a:	210a      	movs	r1, #10
     37c:	4832      	ldr	r0, [pc, #200]	; (448 <testPerformance()+0x12c>)
     37e:	f002 fcb1 	bl	2ce4 <Print::print(long)>
     382:	2109      	movs	r1, #9
     384:	4835      	ldr	r0, [pc, #212]	; (45c <testPerformance()+0x140>)
     386:	f003 ffc1 	bl	430c <usb_serial_write>
    Serial.print(write_time / num_writes);
     38a:	4935      	ldr	r1, [pc, #212]	; (460 <testPerformance()+0x144>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     38c:	2300      	movs	r3, #0
     38e:	220a      	movs	r2, #10
     390:	fba1 0104 	umull	r0, r1, r1, r4
     394:	482c      	ldr	r0, [pc, #176]	; (448 <testPerformance()+0x12c>)
    test_stats.total_writes += num_writes;
     396:	4f33      	ldr	r7, [pc, #204]	; (464 <testPerformance()+0x148>)
    start_time = micros();
     398:	f04f 5482 	mov.w	r4, #272629760	; 0x10400000
     39c:	08c9      	lsrs	r1, r1, #3
        storage_backend.readData(0x10400000 + i, &read_data, sizeof(read_data));
     39e:	4e2b      	ldr	r6, [pc, #172]	; (44c <testPerformance()+0x130>)
     3a0:	f002 fcc8 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     3a4:	210f      	movs	r1, #15
     3a6:	4830      	ldr	r0, [pc, #192]	; (468 <testPerformance()+0x14c>)
     3a8:	f003 ffb0 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     3ac:	4826      	ldr	r0, [pc, #152]	; (448 <testPerformance()+0x12c>)
     3ae:	f002 fca5 	bl	2cfc <Print::println()>
    test_stats.total_writes += num_writes;
     3b2:	68fb      	ldr	r3, [r7, #12]
    for (int i = 0; i < num_writes; i++) {
     3b4:	4d2d      	ldr	r5, [pc, #180]	; (46c <testPerformance()+0x150>)
    test_stats.total_writes += num_writes;
     3b6:	330a      	adds	r3, #10
     3b8:	60fb      	str	r3, [r7, #12]
    start_time = micros();
     3ba:	f002 fd23 	bl	2e04 <micros>
     3be:	4680      	mov	r8, r0
        storage_backend.readData(0x10400000 + i, &read_data, sizeof(read_data));
     3c0:	2304      	movs	r3, #4
     3c2:	4621      	mov	r1, r4
    for (int i = 0; i < num_writes; i++) {
     3c4:	3401      	adds	r4, #1
        storage_backend.readData(0x10400000 + i, &read_data, sizeof(read_data));
     3c6:	4630      	mov	r0, r6
     3c8:	eb0d 0203 	add.w	r2, sp, r3
     3cc:	f001 fb62 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
    for (int i = 0; i < num_writes; i++) {
     3d0:	42ac      	cmp	r4, r5
     3d2:	d1f5      	bne.n	3c0 <testPerformance()+0xa4>
    uint32_t read_time = micros() - start_time;
     3d4:	f002 fd16 	bl	2e04 <micros>
     3d8:	4604      	mov	r4, r0
     3da:	2112      	movs	r1, #18
     3dc:	4824      	ldr	r0, [pc, #144]	; (470 <testPerformance()+0x154>)
     3de:	eba4 0408 	sub.w	r4, r4, r8
     3e2:	f003 ff93 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     3e6:	2300      	movs	r3, #0
     3e8:	220a      	movs	r2, #10
     3ea:	4621      	mov	r1, r4
     3ec:	4816      	ldr	r0, [pc, #88]	; (448 <testPerformance()+0x12c>)
     3ee:	f002 fca1 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     3f2:	2109      	movs	r1, #9
     3f4:	4818      	ldr	r0, [pc, #96]	; (458 <testPerformance()+0x13c>)
     3f6:	f003 ff89 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     3fa:	210a      	movs	r1, #10
     3fc:	4812      	ldr	r0, [pc, #72]	; (448 <testPerformance()+0x12c>)
     3fe:	f002 fc71 	bl	2ce4 <Print::print(long)>
     402:	2108      	movs	r1, #8
     404:	481b      	ldr	r0, [pc, #108]	; (474 <testPerformance()+0x158>)
     406:	f003 ff81 	bl	430c <usb_serial_write>
    Serial.print(read_time / num_writes);
     40a:	4915      	ldr	r1, [pc, #84]	; (460 <testPerformance()+0x144>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     40c:	2300      	movs	r3, #0
     40e:	220a      	movs	r2, #10
     410:	fba1 0104 	umull	r0, r1, r1, r4
     414:	480c      	ldr	r0, [pc, #48]	; (448 <testPerformance()+0x12c>)
     416:	08c9      	lsrs	r1, r1, #3
     418:	f002 fc8c 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     41c:	210e      	movs	r1, #14
     41e:	4816      	ldr	r0, [pc, #88]	; (478 <testPerformance()+0x15c>)
     420:	f003 ff74 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     424:	4808      	ldr	r0, [pc, #32]	; (448 <testPerformance()+0x12c>)
     426:	f002 fc69 	bl	2cfc <Print::println()>
    test_stats.total_reads += num_writes;
     42a:	6939      	ldr	r1, [r7, #16]
    test_stats.passed_tests++;
     42c:	e9d7 2300 	ldrd	r2, r3, [r7]
    test_stats.total_reads += num_writes;
     430:	310a      	adds	r1, #10
    test_stats.total_tests++;
     432:	3201      	adds	r2, #1
    test_stats.passed_tests++;
     434:	3301      	adds	r3, #1
    test_stats.total_reads += num_writes;
     436:	6139      	str	r1, [r7, #16]
    test_stats.passed_tests++;
     438:	e9c7 2300 	strd	r2, r3, [r7]
}
     43c:	b002      	add	sp, #8
     43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     442:	bf00      	nop
     444:	200003f0 	.word	0x200003f0
     448:	20002ff0 	.word	0x20002ff0
     44c:	20004164 	.word	0x20004164
     450:	1000000a 	.word	0x1000000a
     454:	20000410 	.word	0x20000410
     458:	20000424 	.word	0x20000424
     45c:	20000430 	.word	0x20000430
     460:	cccccccd 	.word	0xcccccccd
     464:	20004270 	.word	0x20004270
     468:	2000043c 	.word	0x2000043c
     46c:	1040000a 	.word	0x1040000a
     470:	2000044c 	.word	0x2000044c
     474:	20000460 	.word	0x20000460
     478:	2000046c 	.word	0x2000046c

0000047c <testStressTesting()>:
void testStressTesting() {
     47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     480:	2116      	movs	r1, #22
     482:	b082      	sub	sp, #8
     484:	485d      	ldr	r0, [pc, #372]	; (5fc <testStressTesting()+0x180>)
    for (int i = 0; i < stress_writes; i++) {
     486:	2400      	movs	r4, #0
     488:	f003 ff40 	bl	430c <usb_serial_write>
     48c:	485c      	ldr	r0, [pc, #368]	; (600 <testStressTesting()+0x184>)
     48e:	f002 fc35 	bl	2cfc <Print::println()>
        if (!storage_backend.writeData(0x10600000 + i, &test_data, sizeof(test_data))) {
     492:	4e5c      	ldr	r6, [pc, #368]	; (604 <testStressTesting()+0x188>)
    uint32_t start_time = micros();
     494:	f002 fcb6 	bl	2e04 <micros>
     498:	4607      	mov	r7, r0
    for (int i = 0; i < stress_writes; i++) {
     49a:	e003      	b.n	4a4 <testStressTesting()+0x28>
     49c:	3401      	adds	r4, #1
     49e:	2c64      	cmp	r4, #100	; 0x64
     4a0:	f000 80a8 	beq.w	5f4 <testStressTesting()+0x178>
        if (!storage_backend.writeData(0x10600000 + i, &test_data, sizeof(test_data))) {
     4a4:	2304      	movs	r3, #4
        uint32_t test_data = 0x30000000 + i;
     4a6:	f104 5540 	add.w	r5, r4, #805306368	; 0x30000000
        if (!storage_backend.writeData(0x10600000 + i, &test_data, sizeof(test_data))) {
     4aa:	f104 5183 	add.w	r1, r4, #274726912	; 0x10600000
     4ae:	4630      	mov	r0, r6
     4b0:	eb0d 0203 	add.w	r2, sp, r3
        uint32_t test_data = 0x30000000 + i;
     4b4:	9501      	str	r5, [sp, #4]
        if (!storage_backend.writeData(0x10600000 + i, &test_data, sizeof(test_data))) {
     4b6:	f001 fdc1 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
     4ba:	2800      	cmp	r0, #0
     4bc:	d1ee      	bne.n	49c <testStressTesting()+0x20>
     4be:	2121      	movs	r1, #33	; 0x21
     4c0:	4851      	ldr	r0, [pc, #324]	; (608 <testStressTesting()+0x18c>)
     4c2:	f003 ff23 	bl	430c <usb_serial_write>
            test_stats.total_errors++;
     4c6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 638 <testStressTesting()+0x1bc>
	size_t print(int n)				{ return print((long)n); }
     4ca:	4621      	mov	r1, r4
     4cc:	484c      	ldr	r0, [pc, #304]	; (600 <testStressTesting()+0x184>)
     4ce:	f002 fc09 	bl	2ce4 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     4d2:	484b      	ldr	r0, [pc, #300]	; (600 <testStressTesting()+0x184>)
     4d4:	f002 fc12 	bl	2cfc <Print::println()>
     4d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
     4dc:	3301      	adds	r3, #1
     4de:	f8c8 3014 	str.w	r3, [r8, #20]
    uint32_t stress_time = micros() - start_time;
     4e2:	f002 fc8f 	bl	2e04 <micros>
     4e6:	1bc7      	subs	r7, r0, r7
     4e8:	210d      	movs	r1, #13
     4ea:	4848      	ldr	r0, [pc, #288]	; (60c <testStressTesting()+0x190>)
     4ec:	f003 ff0e 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     4f0:	2300      	movs	r3, #0
     4f2:	220a      	movs	r2, #10
     4f4:	4639      	mov	r1, r7
     4f6:	4842      	ldr	r0, [pc, #264]	; (600 <testStressTesting()+0x184>)
	size_t println(const char s[])			{ return print(s) + println(); }
     4f8:	f04f 5483 	mov.w	r4, #274726912	; 0x10600000
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     4fc:	f002 fc1a 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     500:	2109      	movs	r1, #9
     502:	4843      	ldr	r0, [pc, #268]	; (610 <testStressTesting()+0x194>)
     504:	f003 ff02 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     508:	2164      	movs	r1, #100	; 0x64
     50a:	483d      	ldr	r0, [pc, #244]	; (600 <testStressTesting()+0x184>)
     50c:	f002 fbea 	bl	2ce4 <Print::print(long)>
     510:	2109      	movs	r1, #9
     512:	4840      	ldr	r0, [pc, #256]	; (614 <testStressTesting()+0x198>)
     514:	f003 fefa 	bl	430c <usb_serial_write>
    Serial.print(stress_time / stress_writes);
     518:	4a3f      	ldr	r2, [pc, #252]	; (618 <testStressTesting()+0x19c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     51a:	2300      	movs	r3, #0
     51c:	4838      	ldr	r0, [pc, #224]	; (600 <testStressTesting()+0x184>)
     51e:	fba2 2107 	umull	r2, r1, r2, r7
     522:	220a      	movs	r2, #10
    int verified = 0;
     524:	2700      	movs	r7, #0
        if (storage_backend.readData(0x10600000 + i, &read_data, sizeof(read_data))) {
     526:	4e37      	ldr	r6, [pc, #220]	; (604 <testStressTesting()+0x188>)
     528:	0949      	lsrs	r1, r1, #5
    for (int i = 0; i < stress_writes; i++) {
     52a:	4d3c      	ldr	r5, [pc, #240]	; (61c <testStressTesting()+0x1a0>)
     52c:	f002 fc02 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     530:	210f      	movs	r1, #15
     532:	483b      	ldr	r0, [pc, #236]	; (620 <testStressTesting()+0x1a4>)
     534:	f003 feea 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     538:	4831      	ldr	r0, [pc, #196]	; (600 <testStressTesting()+0x184>)
     53a:	f002 fbdf 	bl	2cfc <Print::println()>
        if (storage_backend.readData(0x10600000 + i, &read_data, sizeof(read_data))) {
     53e:	2304      	movs	r3, #4
     540:	4621      	mov	r1, r4
     542:	4630      	mov	r0, r6
     544:	eb0d 0203 	add.w	r2, sp, r3
     548:	f001 faa4 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
            if (read_data == (0x30000000 + i)) {
     54c:	f104 53fd 	add.w	r3, r4, #530579456	; 0x1fa00000
    for (int i = 0; i < stress_writes; i++) {
     550:	3401      	adds	r4, #1
        if (storage_backend.readData(0x10600000 + i, &read_data, sizeof(read_data))) {
     552:	b118      	cbz	r0, 55c <testStressTesting()+0xe0>
            if (read_data == (0x30000000 + i)) {
     554:	9a01      	ldr	r2, [sp, #4]
     556:	429a      	cmp	r2, r3
                verified++;
     558:	bf08      	it	eq
     55a:	3701      	addeq	r7, #1
    for (int i = 0; i < stress_writes; i++) {
     55c:	42ac      	cmp	r4, r5
     55e:	d1ee      	bne.n	53e <testStressTesting()+0xc2>
     560:	2109      	movs	r1, #9
     562:	4830      	ldr	r0, [pc, #192]	; (624 <testStressTesting()+0x1a8>)
     564:	f003 fed2 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     568:	4639      	mov	r1, r7
     56a:	4825      	ldr	r0, [pc, #148]	; (600 <testStressTesting()+0x184>)
     56c:	f002 fbba 	bl	2ce4 <Print::print(long)>
     570:	2108      	movs	r1, #8
     572:	482d      	ldr	r0, [pc, #180]	; (628 <testStressTesting()+0x1ac>)
     574:	f003 feca 	bl	430c <usb_serial_write>
     578:	2164      	movs	r1, #100	; 0x64
     57a:	4821      	ldr	r0, [pc, #132]	; (600 <testStressTesting()+0x184>)
     57c:	f002 fbb2 	bl	2ce4 <Print::print(long)>
     580:	210e      	movs	r1, #14
     582:	482a      	ldr	r0, [pc, #168]	; (62c <testStressTesting()+0x1b0>)
     584:	f003 fec2 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     588:	481d      	ldr	r0, [pc, #116]	; (600 <testStressTesting()+0x184>)
     58a:	f002 fbb7 	bl	2cfc <Print::println()>
    test_stats.total_tests++;
     58e:	f8d8 3000 	ldr.w	r3, [r8]
    if (verified == stress_writes) {
     592:	2f64      	cmp	r7, #100	; 0x64
    test_stats.total_tests++;
     594:	f103 0301 	add.w	r3, r3, #1
    test_stats.total_reads += stress_writes;
     598:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
    test_stats.total_tests++;
     59c:	f8c8 3000 	str.w	r3, [r8]
    test_stats.total_writes += stress_writes;
     5a0:	f101 0164 	add.w	r1, r1, #100	; 0x64
    test_stats.total_reads += stress_writes;
     5a4:	f102 0264 	add.w	r2, r2, #100	; 0x64
     5a8:	e9c8 1203 	strd	r1, r2, [r8, #12]
     5ac:	f04f 0116 	mov.w	r1, #22
    if (verified == stress_writes) {
     5b0:	d012      	beq.n	5d8 <testStressTesting()+0x15c>
     5b2:	481f      	ldr	r0, [pc, #124]	; (630 <testStressTesting()+0x1b4>)
     5b4:	f003 feaa 	bl	430c <usb_serial_write>
     5b8:	4811      	ldr	r0, [pc, #68]	; (600 <testStressTesting()+0x184>)
     5ba:	f002 fb9f 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     5be:	f8d8 2008 	ldr.w	r2, [r8, #8]
        test_stats.total_errors++;
     5c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
        test_stats.failed_tests++;
     5c6:	3201      	adds	r2, #1
        test_stats.total_errors++;
     5c8:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     5ca:	f8c8 2008 	str.w	r2, [r8, #8]
        test_stats.total_errors++;
     5ce:	f8c8 3014 	str.w	r3, [r8, #20]
}
     5d2:	b002      	add	sp, #8
     5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5d8:	4816      	ldr	r0, [pc, #88]	; (634 <testStressTesting()+0x1b8>)
     5da:	f003 fe97 	bl	430c <usb_serial_write>
     5de:	4808      	ldr	r0, [pc, #32]	; (600 <testStressTesting()+0x184>)
     5e0:	f002 fb8c 	bl	2cfc <Print::println()>
        test_stats.passed_tests++;
     5e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
     5e8:	3301      	adds	r3, #1
     5ea:	f8c8 3004 	str.w	r3, [r8, #4]
}
     5ee:	b002      	add	sp, #8
     5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5f4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 638 <testStressTesting()+0x1bc>
     5f8:	e773      	b.n	4e2 <testStressTesting()+0x66>
     5fa:	bf00      	nop
     5fc:	20000708 	.word	0x20000708
     600:	20002ff0 	.word	0x20002ff0
     604:	20004164 	.word	0x20004164
     608:	20000720 	.word	0x20000720
     60c:	20000744 	.word	0x20000744
     610:	20000424 	.word	0x20000424
     614:	20000430 	.word	0x20000430
     618:	51eb851f 	.word	0x51eb851f
     61c:	10600064 	.word	0x10600064
     620:	2000043c 	.word	0x2000043c
     624:	20000754 	.word	0x20000754
     628:	20000760 	.word	0x20000760
     62c:	2000076c 	.word	0x2000076c
     630:	20000794 	.word	0x20000794
     634:	2000077c 	.word	0x2000077c
     638:	20004270 	.word	0x20004270

0000063c <testBasicOperations()>:
void testBasicOperations() {
     63c:	b510      	push	{r4, lr}
     63e:	2118      	movs	r1, #24
     640:	b082      	sub	sp, #8
    test_stats.total_tests++;
     642:	4c37      	ldr	r4, [pc, #220]	; (720 <testBasicOperations()+0xe4>)
     644:	4837      	ldr	r0, [pc, #220]	; (724 <testBasicOperations()+0xe8>)
     646:	f003 fe61 	bl	430c <usb_serial_write>
     64a:	4837      	ldr	r0, [pc, #220]	; (728 <testBasicOperations()+0xec>)
     64c:	f002 fb56 	bl	2cfc <Print::println()>
     650:	6822      	ldr	r2, [r4, #0]
    uint32_t test_data = 0x12345678;
     652:	4836      	ldr	r0, [pc, #216]	; (72c <testBasicOperations()+0xf0>)
    if (storage_backend.writeData(test_key, &test_data, sizeof(test_data))) {
     654:	2304      	movs	r3, #4
    test_stats.total_tests++;
     656:	1c51      	adds	r1, r2, #1
    if (storage_backend.writeData(test_key, &test_data, sizeof(test_data))) {
     658:	466a      	mov	r2, sp
    uint32_t test_data = 0x12345678;
     65a:	9000      	str	r0, [sp, #0]
    test_stats.total_tests++;
     65c:	6021      	str	r1, [r4, #0]
    if (storage_backend.writeData(test_key, &test_data, sizeof(test_data))) {
     65e:	4834      	ldr	r0, [pc, #208]	; (730 <testBasicOperations()+0xf4>)
     660:	4934      	ldr	r1, [pc, #208]	; (734 <testBasicOperations()+0xf8>)
     662:	f001 fceb 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
     666:	2800      	cmp	r0, #0
     668:	d037      	beq.n	6da <testBasicOperations()+0x9e>
     66a:	211e      	movs	r1, #30
     66c:	4832      	ldr	r0, [pc, #200]	; (738 <testBasicOperations()+0xfc>)
     66e:	f003 fe4d 	bl	430c <usb_serial_write>
     672:	482d      	ldr	r0, [pc, #180]	; (728 <testBasicOperations()+0xec>)
     674:	f002 fb42 	bl	2cfc <Print::println()>
        test_stats.total_writes++;
     678:	68e1      	ldr	r1, [r4, #12]
        if (storage_backend.readData(test_key, &read_data, sizeof(read_data))) {
     67a:	2304      	movs	r3, #4
        test_stats.total_writes++;
     67c:	1c48      	adds	r0, r1, #1
        if (storage_backend.readData(test_key, &read_data, sizeof(read_data))) {
     67e:	492d      	ldr	r1, [pc, #180]	; (734 <testBasicOperations()+0xf8>)
     680:	eb0d 0203 	add.w	r2, sp, r3
        test_stats.total_writes++;
     684:	60e0      	str	r0, [r4, #12]
        if (storage_backend.readData(test_key, &read_data, sizeof(read_data))) {
     686:	482a      	ldr	r0, [pc, #168]	; (730 <testBasicOperations()+0xf4>)
     688:	f001 fa04 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
     68c:	2800      	cmp	r0, #0
     68e:	d035      	beq.n	6fc <testBasicOperations()+0xc0>
            if (read_data == test_data) {
     690:	e9dd 3200 	ldrd	r3, r2, [sp]
     694:	429a      	cmp	r2, r3
     696:	d034      	beq.n	702 <testBasicOperations()+0xc6>
     698:	2129      	movs	r1, #41	; 0x29
     69a:	4828      	ldr	r0, [pc, #160]	; (73c <testBasicOperations()+0x100>)
     69c:	f003 fe36 	bl	430c <usb_serial_write>
     6a0:	4821      	ldr	r0, [pc, #132]	; (728 <testBasicOperations()+0xec>)
     6a2:	f002 fb2b 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     6a6:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     6a8:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     6aa:	3201      	adds	r2, #1
        test_stats.total_errors++;
     6ac:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     6ae:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     6b0:	6163      	str	r3, [r4, #20]
    test_stats.total_tests++;
     6b2:	6823      	ldr	r3, [r4, #0]
    if (storage_backend.hasData(test_key)) {
     6b4:	491f      	ldr	r1, [pc, #124]	; (734 <testBasicOperations()+0xf8>)
    test_stats.total_tests++;
     6b6:	3301      	adds	r3, #1
    if (storage_backend.hasData(test_key)) {
     6b8:	481d      	ldr	r0, [pc, #116]	; (730 <testBasicOperations()+0xf4>)
    test_stats.total_tests++;
     6ba:	6023      	str	r3, [r4, #0]
    if (storage_backend.hasData(test_key)) {
     6bc:	f000 fbf2 	bl	ea4 <W25Q128StorageBackend::hasData(unsigned long)>
     6c0:	211f      	movs	r1, #31
     6c2:	b168      	cbz	r0, 6e0 <testBasicOperations()+0xa4>
     6c4:	481e      	ldr	r0, [pc, #120]	; (740 <testBasicOperations()+0x104>)
     6c6:	f003 fe21 	bl	430c <usb_serial_write>
     6ca:	4817      	ldr	r0, [pc, #92]	; (728 <testBasicOperations()+0xec>)
     6cc:	f002 fb16 	bl	2cfc <Print::println()>
        test_stats.passed_tests++;
     6d0:	6863      	ldr	r3, [r4, #4]
     6d2:	3301      	adds	r3, #1
     6d4:	6063      	str	r3, [r4, #4]
}
     6d6:	b002      	add	sp, #8
     6d8:	bd10      	pop	{r4, pc}
     6da:	211a      	movs	r1, #26
     6dc:	4819      	ldr	r0, [pc, #100]	; (744 <testBasicOperations()+0x108>)
     6de:	e7dd      	b.n	69c <testBasicOperations()+0x60>
     6e0:	4819      	ldr	r0, [pc, #100]	; (748 <testBasicOperations()+0x10c>)
     6e2:	f003 fe13 	bl	430c <usb_serial_write>
     6e6:	4810      	ldr	r0, [pc, #64]	; (728 <testBasicOperations()+0xec>)
     6e8:	f002 fb08 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     6ec:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     6ee:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     6f0:	3201      	adds	r2, #1
        test_stats.total_errors++;
     6f2:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     6f4:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     6f6:	6163      	str	r3, [r4, #20]
}
     6f8:	b002      	add	sp, #8
     6fa:	bd10      	pop	{r4, pc}
     6fc:	2119      	movs	r1, #25
     6fe:	4813      	ldr	r0, [pc, #76]	; (74c <testBasicOperations()+0x110>)
     700:	e7cc      	b.n	69c <testBasicOperations()+0x60>
     702:	212c      	movs	r1, #44	; 0x2c
     704:	4812      	ldr	r0, [pc, #72]	; (750 <testBasicOperations()+0x114>)
     706:	f003 fe01 	bl	430c <usb_serial_write>
     70a:	4807      	ldr	r0, [pc, #28]	; (728 <testBasicOperations()+0xec>)
     70c:	f002 faf6 	bl	2cfc <Print::println()>
                test_stats.passed_tests++;
     710:	6862      	ldr	r2, [r4, #4]
                test_stats.total_reads++;
     712:	6923      	ldr	r3, [r4, #16]
                test_stats.passed_tests++;
     714:	3201      	adds	r2, #1
                test_stats.total_reads++;
     716:	3301      	adds	r3, #1
                test_stats.passed_tests++;
     718:	6062      	str	r2, [r4, #4]
                test_stats.total_reads++;
     71a:	6123      	str	r3, [r4, #16]
     71c:	e7c9      	b.n	6b2 <testBasicOperations()+0x76>
     71e:	bf00      	nop
     720:	20004270 	.word	0x20004270
     724:	20000858 	.word	0x20000858
     728:	20002ff0 	.word	0x20002ff0
     72c:	12345678 	.word	0x12345678
     730:	20004164 	.word	0x20004164
     734:	10300001 	.word	0x10300001
     738:	20000874 	.word	0x20000874
     73c:	200008c4 	.word	0x200008c4
     740:	20000928 	.word	0x20000928
     744:	2000090c 	.word	0x2000090c
     748:	20000948 	.word	0x20000948
     74c:	200008f0 	.word	0x200008f0
     750:	20000894 	.word	0x20000894

00000754 <testErrorHandling()>:
void testErrorHandling() {
     754:	b510      	push	{r4, lr}
     756:	2116      	movs	r1, #22
     758:	b082      	sub	sp, #8
    test_stats.total_tests++;
     75a:	4c2f      	ldr	r4, [pc, #188]	; (818 <testErrorHandling()+0xc4>)
     75c:	482f      	ldr	r0, [pc, #188]	; (81c <testErrorHandling()+0xc8>)
     75e:	f003 fdd5 	bl	430c <usb_serial_write>
     762:	482f      	ldr	r0, [pc, #188]	; (820 <testErrorHandling()+0xcc>)
     764:	f002 faca 	bl	2cfc <Print::println()>
     768:	6821      	ldr	r1, [r4, #0]
    if (!storage_backend.readData(0x99999999, &non_existent_data, sizeof(non_existent_data))) {
     76a:	2304      	movs	r3, #4
    test_stats.total_tests++;
     76c:	1c48      	adds	r0, r1, #1
    if (!storage_backend.readData(0x99999999, &non_existent_data, sizeof(non_existent_data))) {
     76e:	f04f 3199 	mov.w	r1, #2576980377	; 0x99999999
     772:	eb0d 0203 	add.w	r2, sp, r3
    test_stats.total_tests++;
     776:	6020      	str	r0, [r4, #0]
    if (!storage_backend.readData(0x99999999, &non_existent_data, sizeof(non_existent_data))) {
     778:	482a      	ldr	r0, [pc, #168]	; (824 <testErrorHandling()+0xd0>)
     77a:	f001 f98b 	bl	1a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>
     77e:	bb78      	cbnz	r0, 7e0 <testErrorHandling()+0x8c>
     780:	2132      	movs	r1, #50	; 0x32
     782:	4829      	ldr	r0, [pc, #164]	; (828 <testErrorHandling()+0xd4>)
     784:	f003 fdc2 	bl	430c <usb_serial_write>
     788:	4825      	ldr	r0, [pc, #148]	; (820 <testErrorHandling()+0xcc>)
     78a:	f002 fab7 	bl	2cfc <Print::println()>
        test_stats.passed_tests++;
     78e:	6863      	ldr	r3, [r4, #4]
     790:	3301      	adds	r3, #1
     792:	6063      	str	r3, [r4, #4]
    test_stats.total_tests++;
     794:	6823      	ldr	r3, [r4, #0]
    if (!storage_backend.hasData(0x99999999)) {
     796:	f04f 3199 	mov.w	r1, #2576980377	; 0x99999999
     79a:	4822      	ldr	r0, [pc, #136]	; (824 <testErrorHandling()+0xd0>)
    test_stats.total_tests++;
     79c:	3301      	adds	r3, #1
     79e:	6023      	str	r3, [r4, #0]
    if (!storage_backend.hasData(0x99999999)) {
     7a0:	f000 fb80 	bl	ea4 <W25Q128StorageBackend::hasData(unsigned long)>
     7a4:	bb50      	cbnz	r0, 7fc <testErrorHandling()+0xa8>
     7a6:	2133      	movs	r1, #51	; 0x33
     7a8:	4820      	ldr	r0, [pc, #128]	; (82c <testErrorHandling()+0xd8>)
     7aa:	f003 fdaf 	bl	430c <usb_serial_write>
     7ae:	481c      	ldr	r0, [pc, #112]	; (820 <testErrorHandling()+0xcc>)
     7b0:	f002 faa4 	bl	2cfc <Print::println()>
        test_stats.passed_tests++;
     7b4:	6863      	ldr	r3, [r4, #4]
     7b6:	3301      	adds	r3, #1
     7b8:	6063      	str	r3, [r4, #4]
    uint32_t error_count = storage_backend.getErrorCount();
     7ba:	481a      	ldr	r0, [pc, #104]	; (824 <testErrorHandling()+0xd0>)
     7bc:	f000 fd92 	bl	12e4 <W25Q128StorageBackend::getErrorCount()>
     7c0:	4604      	mov	r4, r0
     7c2:	2115      	movs	r1, #21
     7c4:	481a      	ldr	r0, [pc, #104]	; (830 <testErrorHandling()+0xdc>)
     7c6:	f003 fda1 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     7ca:	2300      	movs	r3, #0
     7cc:	220a      	movs	r2, #10
     7ce:	4621      	mov	r1, r4
     7d0:	4813      	ldr	r0, [pc, #76]	; (820 <testErrorHandling()+0xcc>)
     7d2:	f002 faaf 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     7d6:	4812      	ldr	r0, [pc, #72]	; (820 <testErrorHandling()+0xcc>)
     7d8:	f002 fa90 	bl	2cfc <Print::println()>
}
     7dc:	b002      	add	sp, #8
     7de:	bd10      	pop	{r4, pc}
     7e0:	2134      	movs	r1, #52	; 0x34
     7e2:	4814      	ldr	r0, [pc, #80]	; (834 <testErrorHandling()+0xe0>)
     7e4:	f003 fd92 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     7e8:	480d      	ldr	r0, [pc, #52]	; (820 <testErrorHandling()+0xcc>)
     7ea:	f002 fa87 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     7ee:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     7f0:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     7f2:	3201      	adds	r2, #1
        test_stats.total_errors++;
     7f4:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     7f6:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     7f8:	6163      	str	r3, [r4, #20]
     7fa:	e7cb      	b.n	794 <testErrorHandling()+0x40>
     7fc:	2135      	movs	r1, #53	; 0x35
     7fe:	480e      	ldr	r0, [pc, #56]	; (838 <testErrorHandling()+0xe4>)
     800:	f003 fd84 	bl	430c <usb_serial_write>
     804:	4806      	ldr	r0, [pc, #24]	; (820 <testErrorHandling()+0xcc>)
     806:	f002 fa79 	bl	2cfc <Print::println()>
        test_stats.failed_tests++;
     80a:	68a2      	ldr	r2, [r4, #8]
        test_stats.total_errors++;
     80c:	6963      	ldr	r3, [r4, #20]
        test_stats.failed_tests++;
     80e:	3201      	adds	r2, #1
        test_stats.total_errors++;
     810:	3301      	adds	r3, #1
        test_stats.failed_tests++;
     812:	60a2      	str	r2, [r4, #8]
        test_stats.total_errors++;
     814:	6163      	str	r3, [r4, #20]
     816:	e7d0      	b.n	7ba <testErrorHandling()+0x66>
     818:	20004270 	.word	0x20004270
     81c:	20000600 	.word	0x20000600
     820:	20002ff0 	.word	0x20002ff0
     824:	20004164 	.word	0x20004164
     828:	20000618 	.word	0x20000618
     82c:	20000684 	.word	0x20000684
     830:	200006f0 	.word	0x200006f0
     834:	2000064c 	.word	0x2000064c
     838:	200006b8 	.word	0x200006b8

0000083c <testCachePerformance()>:
void testCachePerformance() {
     83c:	b5f0      	push	{r4, r5, r6, r7, lr}
     83e:	2119      	movs	r1, #25
     840:	b083      	sub	sp, #12
     842:	4844      	ldr	r0, [pc, #272]	; (954 <testCachePerformance()+0x118>)
    uint32_t start_time = micros();
     844:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
     848:	f003 fd60 	bl	430c <usb_serial_write>
     84c:	4842      	ldr	r0, [pc, #264]	; (958 <testCachePerformance()+0x11c>)
     84e:	f002 fa55 	bl	2cfc <Print::println()>
    storage_backend.enableWriteCache(true);
     852:	2101      	movs	r1, #1
     854:	4841      	ldr	r0, [pc, #260]	; (95c <testCachePerformance()+0x120>)
     856:	f001 fbd5 	bl	2004 <W25Q128StorageBackend::enableWriteCache(bool)>
    storage_backend.setCacheSize(1024 * 1024); // 1MB cache
     85a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     85e:	483f      	ldr	r0, [pc, #252]	; (95c <testCachePerformance()+0x120>)
     860:	f000 fd2e 	bl	12c0 <W25Q128StorageBackend::setCacheSize(unsigned long)>
        storage_backend.writeData(0x10500000 + i, &test_data, sizeof(test_data));
     864:	4e3d      	ldr	r6, [pc, #244]	; (95c <testCachePerformance()+0x120>)
    uint32_t start_time = micros();
     866:	f002 facd 	bl	2e04 <micros>
    for (int i = 0; i < cache_writes; i++) {
     86a:	4d3d      	ldr	r5, [pc, #244]	; (960 <testCachePerformance()+0x124>)
    uint32_t start_time = micros();
     86c:	4607      	mov	r7, r0
        storage_backend.writeData(0x10500000 + i, &test_data, sizeof(test_data));
     86e:	2304      	movs	r3, #4
     870:	f1a4 617b 	sub.w	r1, r4, #263192576	; 0xfb00000
        uint32_t test_data = 0x20000000 + i;
     874:	9401      	str	r4, [sp, #4]
    for (int i = 0; i < cache_writes; i++) {
     876:	3401      	adds	r4, #1
        storage_backend.writeData(0x10500000 + i, &test_data, sizeof(test_data));
     878:	eb0d 0203 	add.w	r2, sp, r3
     87c:	4630      	mov	r0, r6
     87e:	f001 fbdd 	bl	203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>
    for (int i = 0; i < cache_writes; i++) {
     882:	42ac      	cmp	r4, r5
     884:	d1f3      	bne.n	86e <testCachePerformance()+0x32>
    uint32_t cache_write_time = micros() - start_time;
     886:	f002 fabd 	bl	2e04 <micros>
     88a:	4604      	mov	r4, r0
     88c:	2119      	movs	r1, #25
     88e:	4835      	ldr	r0, [pc, #212]	; (964 <testCachePerformance()+0x128>)
     890:	1be4      	subs	r4, r4, r7
     892:	f003 fd3b 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     896:	2300      	movs	r3, #0
     898:	220a      	movs	r2, #10
     89a:	4621      	mov	r1, r4
     89c:	482e      	ldr	r0, [pc, #184]	; (958 <testCachePerformance()+0x11c>)
     89e:	f002 fa49 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     8a2:	2109      	movs	r1, #9
     8a4:	4830      	ldr	r0, [pc, #192]	; (968 <testCachePerformance()+0x12c>)
     8a6:	f003 fd31 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     8aa:	2132      	movs	r1, #50	; 0x32
     8ac:	482a      	ldr	r0, [pc, #168]	; (958 <testCachePerformance()+0x11c>)
     8ae:	f002 fa19 	bl	2ce4 <Print::print(long)>
     8b2:	2109      	movs	r1, #9
     8b4:	482d      	ldr	r0, [pc, #180]	; (96c <testCachePerformance()+0x130>)
     8b6:	f003 fd29 	bl	430c <usb_serial_write>
    Serial.print(cache_write_time / cache_writes);
     8ba:	492d      	ldr	r1, [pc, #180]	; (970 <testCachePerformance()+0x134>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     8bc:	2300      	movs	r3, #0
     8be:	220a      	movs	r2, #10
     8c0:	fba1 0104 	umull	r0, r1, r1, r4
     8c4:	4824      	ldr	r0, [pc, #144]	; (958 <testCachePerformance()+0x11c>)
     8c6:	0909      	lsrs	r1, r1, #4
     8c8:	f002 fa34 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     8cc:	210f      	movs	r1, #15
     8ce:	4829      	ldr	r0, [pc, #164]	; (974 <testCachePerformance()+0x138>)
     8d0:	f003 fd1c 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8d4:	4820      	ldr	r0, [pc, #128]	; (958 <testCachePerformance()+0x11c>)
     8d6:	f002 fa11 	bl	2cfc <Print::println()>
    start_time = micros();
     8da:	f002 fa93 	bl	2e04 <micros>
     8de:	4605      	mov	r5, r0
    storage_backend.flush();
     8e0:	481e      	ldr	r0, [pc, #120]	; (95c <testCachePerformance()+0x120>)
     8e2:	f001 fb11 	bl	1f08 <W25Q128StorageBackend::flush()>
    uint32_t flush_time = micros() - start_time;
     8e6:	f002 fa8d 	bl	2e04 <micros>
     8ea:	4604      	mov	r4, r0
     8ec:	2112      	movs	r1, #18
     8ee:	4822      	ldr	r0, [pc, #136]	; (978 <testCachePerformance()+0x13c>)
     8f0:	1b64      	subs	r4, r4, r5
     8f2:	f003 fd0b 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     8f6:	2300      	movs	r3, #0
     8f8:	220a      	movs	r2, #10
     8fa:	4621      	mov	r1, r4
     8fc:	4816      	ldr	r0, [pc, #88]	; (958 <testCachePerformance()+0x11c>)
     8fe:	f002 fa19 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     902:	2104      	movs	r1, #4
     904:	481d      	ldr	r0, [pc, #116]	; (97c <testCachePerformance()+0x140>)
     906:	f003 fd01 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     90a:	4813      	ldr	r0, [pc, #76]	; (958 <testCachePerformance()+0x11c>)
     90c:	f002 f9f6 	bl	2cfc <Print::println()>
    uint32_t hit_rate = storage_backend.getCacheHitRate();
     910:	4812      	ldr	r0, [pc, #72]	; (95c <testCachePerformance()+0x120>)
     912:	f000 fcdd 	bl	12d0 <W25Q128StorageBackend::getCacheHitRate()>
     916:	4604      	mov	r4, r0
     918:	2110      	movs	r1, #16
     91a:	4819      	ldr	r0, [pc, #100]	; (980 <testCachePerformance()+0x144>)
     91c:	f003 fcf6 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     920:	2300      	movs	r3, #0
     922:	220a      	movs	r2, #10
     924:	4621      	mov	r1, r4
     926:	480c      	ldr	r0, [pc, #48]	; (958 <testCachePerformance()+0x11c>)
     928:	f002 fa04 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     92c:	2101      	movs	r1, #1
     92e:	4815      	ldr	r0, [pc, #84]	; (984 <testCachePerformance()+0x148>)
     930:	f003 fcec 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     934:	4808      	ldr	r0, [pc, #32]	; (958 <testCachePerformance()+0x11c>)
     936:	f002 f9e1 	bl	2cfc <Print::println()>
    test_stats.total_writes += cache_writes;
     93a:	4b13      	ldr	r3, [pc, #76]	; (988 <testCachePerformance()+0x14c>)
    test_stats.passed_tests++;
     93c:	e9d3 1200 	ldrd	r1, r2, [r3]
    test_stats.total_writes += cache_writes;
     940:	68d8      	ldr	r0, [r3, #12]
    test_stats.total_tests++;
     942:	3101      	adds	r1, #1
    test_stats.passed_tests++;
     944:	3201      	adds	r2, #1
    test_stats.total_writes += cache_writes;
     946:	3032      	adds	r0, #50	; 0x32
    test_stats.passed_tests++;
     948:	e9c3 1200 	strd	r1, r2, [r3]
    test_stats.total_writes += cache_writes;
     94c:	60d8      	str	r0, [r3, #12]
}
     94e:	b003      	add	sp, #12
     950:	bdf0      	pop	{r4, r5, r6, r7, pc}
     952:	bf00      	nop
     954:	20000968 	.word	0x20000968
     958:	20002ff0 	.word	0x20002ff0
     95c:	20004164 	.word	0x20004164
     960:	20000032 	.word	0x20000032
     964:	20000984 	.word	0x20000984
     968:	20000424 	.word	0x20000424
     96c:	20000430 	.word	0x20000430
     970:	51eb851f 	.word	0x51eb851f
     974:	2000043c 	.word	0x2000043c
     978:	200009a0 	.word	0x200009a0
     97c:	200009b4 	.word	0x200009b4
     980:	200009bc 	.word	0x200009bc
     984:	200009d0 	.word	0x200009d0
     988:	20004270 	.word	0x20004270

0000098c <printFinalResults()>:
void printFinalResults() {
     98c:	b538      	push	{r3, r4, r5, lr}
     98e:	211b      	movs	r1, #27
     990:	4881      	ldr	r0, [pc, #516]	; (b98 <printFinalResults()+0x20c>)
    Serial.println(test_stats.total_tests);
     992:	4c82      	ldr	r4, [pc, #520]	; (b9c <printFinalResults()+0x210>)
     994:	f003 fcba 	bl	430c <usb_serial_write>
     998:	4881      	ldr	r0, [pc, #516]	; (ba0 <printFinalResults()+0x214>)
     99a:	f002 f9af 	bl	2cfc <Print::println()>
     99e:	210d      	movs	r1, #13
     9a0:	4880      	ldr	r0, [pc, #512]	; (ba4 <printFinalResults()+0x218>)
     9a2:	f003 fcb3 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9a6:	2300      	movs	r3, #0
     9a8:	220a      	movs	r2, #10
     9aa:	6821      	ldr	r1, [r4, #0]
     9ac:	487c      	ldr	r0, [pc, #496]	; (ba0 <printFinalResults()+0x214>)
     9ae:	f002 f9c1 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     9b2:	487b      	ldr	r0, [pc, #492]	; (ba0 <printFinalResults()+0x214>)
     9b4:	f002 f9a2 	bl	2cfc <Print::println()>
     9b8:	2108      	movs	r1, #8
     9ba:	487b      	ldr	r0, [pc, #492]	; (ba8 <printFinalResults()+0x21c>)
     9bc:	f003 fca6 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9c0:	2300      	movs	r3, #0
     9c2:	220a      	movs	r2, #10
     9c4:	6861      	ldr	r1, [r4, #4]
     9c6:	4876      	ldr	r0, [pc, #472]	; (ba0 <printFinalResults()+0x214>)
     9c8:	f002 f9b4 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     9cc:	4874      	ldr	r0, [pc, #464]	; (ba0 <printFinalResults()+0x214>)
     9ce:	f002 f995 	bl	2cfc <Print::println()>
     9d2:	2108      	movs	r1, #8
     9d4:	4875      	ldr	r0, [pc, #468]	; (bac <printFinalResults()+0x220>)
     9d6:	f003 fc99 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9da:	2300      	movs	r3, #0
     9dc:	220a      	movs	r2, #10
     9de:	68a1      	ldr	r1, [r4, #8]
     9e0:	486f      	ldr	r0, [pc, #444]	; (ba0 <printFinalResults()+0x214>)
     9e2:	f002 f9a7 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     9e6:	486e      	ldr	r0, [pc, #440]	; (ba0 <printFinalResults()+0x214>)
     9e8:	f002 f988 	bl	2cfc <Print::println()>
     9ec:	210e      	movs	r1, #14
     9ee:	4870      	ldr	r0, [pc, #448]	; (bb0 <printFinalResults()+0x224>)
     9f0:	f003 fc8c 	bl	430c <usb_serial_write>
    Serial.print((test_stats.passed_tests * 100) / test_stats.total_tests);
     9f4:	6862      	ldr	r2, [r4, #4]
     9f6:	2064      	movs	r0, #100	; 0x64
     9f8:	6821      	ldr	r1, [r4, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9fa:	2300      	movs	r3, #0
     9fc:	fb00 f202 	mul.w	r2, r0, r2
     a00:	4867      	ldr	r0, [pc, #412]	; (ba0 <printFinalResults()+0x214>)
     a02:	fbb2 f1f1 	udiv	r1, r2, r1
     a06:	220a      	movs	r2, #10
     a08:	f002 f994 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a0c:	2101      	movs	r1, #1
     a0e:	4869      	ldr	r0, [pc, #420]	; (bb4 <printFinalResults()+0x228>)
     a10:	f003 fc7c 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     a14:	4862      	ldr	r0, [pc, #392]	; (ba0 <printFinalResults()+0x214>)
     a16:	f002 f971 	bl	2cfc <Print::println()>
     a1a:	210e      	movs	r1, #14
     a1c:	4866      	ldr	r0, [pc, #408]	; (bb8 <printFinalResults()+0x22c>)
     a1e:	f003 fc75 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     a22:	2300      	movs	r3, #0
     a24:	220a      	movs	r2, #10
     a26:	68e1      	ldr	r1, [r4, #12]
     a28:	485d      	ldr	r0, [pc, #372]	; (ba0 <printFinalResults()+0x214>)
     a2a:	f002 f983 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     a2e:	485c      	ldr	r0, [pc, #368]	; (ba0 <printFinalResults()+0x214>)
     a30:	f002 f964 	bl	2cfc <Print::println()>
     a34:	210d      	movs	r1, #13
     a36:	4861      	ldr	r0, [pc, #388]	; (bbc <printFinalResults()+0x230>)
     a38:	f003 fc68 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     a3c:	2300      	movs	r3, #0
     a3e:	220a      	movs	r2, #10
     a40:	6921      	ldr	r1, [r4, #16]
     a42:	4857      	ldr	r0, [pc, #348]	; (ba0 <printFinalResults()+0x214>)
     a44:	f002 f976 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     a48:	4855      	ldr	r0, [pc, #340]	; (ba0 <printFinalResults()+0x214>)
     a4a:	f002 f957 	bl	2cfc <Print::println()>
     a4e:	210e      	movs	r1, #14
     a50:	485b      	ldr	r0, [pc, #364]	; (bc0 <printFinalResults()+0x234>)
     a52:	f003 fc5b 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     a56:	2300      	movs	r3, #0
     a58:	220a      	movs	r2, #10
     a5a:	6961      	ldr	r1, [r4, #20]
     a5c:	4850      	ldr	r0, [pc, #320]	; (ba0 <printFinalResults()+0x214>)
     a5e:	f002 f969 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     a62:	484f      	ldr	r0, [pc, #316]	; (ba0 <printFinalResults()+0x214>)
     a64:	f002 f94a 	bl	2cfc <Print::println()>
     a68:	210f      	movs	r1, #15
     a6a:	4856      	ldr	r0, [pc, #344]	; (bc4 <printFinalResults()+0x238>)
    uint32_t test_duration = test_stats.end_time - test_stats.start_time;
     a6c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
     a70:	1a9d      	subs	r5, r3, r2
     a72:	f003 fc4b 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     a76:	2300      	movs	r3, #0
     a78:	220a      	movs	r2, #10
     a7a:	4629      	mov	r1, r5
     a7c:	4848      	ldr	r0, [pc, #288]	; (ba0 <printFinalResults()+0x214>)
     a7e:	f002 f959 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a82:	2103      	movs	r1, #3
     a84:	4850      	ldr	r0, [pc, #320]	; (bc8 <printFinalResults()+0x23c>)
     a86:	f003 fc41 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     a8a:	4845      	ldr	r0, [pc, #276]	; (ba0 <printFinalResults()+0x214>)
     a8c:	f002 f936 	bl	2cfc <Print::println()>
     a90:	211b      	movs	r1, #27
     a92:	484e      	ldr	r0, [pc, #312]	; (bcc <printFinalResults()+0x240>)
     a94:	f003 fc3a 	bl	430c <usb_serial_write>
     a98:	4841      	ldr	r0, [pc, #260]	; (ba0 <printFinalResults()+0x214>)
     a9a:	f002 f92f 	bl	2cfc <Print::println()>
     a9e:	210d      	movs	r1, #13
     aa0:	484b      	ldr	r0, [pc, #300]	; (bd0 <printFinalResults()+0x244>)
     aa2:	f003 fc33 	bl	430c <usb_serial_write>
    Serial.print(storage_backend.getTotalSpace() / 1024 / 1024);
     aa6:	484b      	ldr	r0, [pc, #300]	; (bd4 <printFinalResults()+0x248>)
     aa8:	f000 f95e 	bl	d68 <W25Q128StorageBackend::getTotalSpace()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     aac:	2300      	movs	r3, #0
     aae:	220a      	movs	r2, #10
     ab0:	0d01      	lsrs	r1, r0, #20
     ab2:	483b      	ldr	r0, [pc, #236]	; (ba0 <printFinalResults()+0x214>)
     ab4:	f002 f93e 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ab8:	2103      	movs	r1, #3
     aba:	4847      	ldr	r0, [pc, #284]	; (bd8 <printFinalResults()+0x24c>)
     abc:	f003 fc26 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     ac0:	4837      	ldr	r0, [pc, #220]	; (ba0 <printFinalResults()+0x214>)
     ac2:	f002 f91b 	bl	2cfc <Print::println()>
     ac6:	210c      	movs	r1, #12
     ac8:	4844      	ldr	r0, [pc, #272]	; (bdc <printFinalResults()+0x250>)
     aca:	f003 fc1f 	bl	430c <usb_serial_write>
    Serial.print(storage_backend.getUsedSpace() / 1024);
     ace:	4841      	ldr	r0, [pc, #260]	; (bd4 <printFinalResults()+0x248>)
     ad0:	f000 f954 	bl	d7c <W25Q128StorageBackend::getUsedSpace()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ad4:	220a      	movs	r2, #10
     ad6:	2300      	movs	r3, #0
     ad8:	fa20 f102 	lsr.w	r1, r0, r2
     adc:	4830      	ldr	r0, [pc, #192]	; (ba0 <printFinalResults()+0x214>)
     ade:	f002 f929 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ae2:	2103      	movs	r1, #3
     ae4:	483e      	ldr	r0, [pc, #248]	; (be0 <printFinalResults()+0x254>)
     ae6:	f003 fc11 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     aea:	482d      	ldr	r0, [pc, #180]	; (ba0 <printFinalResults()+0x214>)
     aec:	f002 f906 	bl	2cfc <Print::println()>
     af0:	210c      	movs	r1, #12
     af2:	483c      	ldr	r0, [pc, #240]	; (be4 <printFinalResults()+0x258>)
     af4:	f003 fc0a 	bl	430c <usb_serial_write>
    Serial.print(storage_backend.getFreeSpace() / 1024);
     af8:	4836      	ldr	r0, [pc, #216]	; (bd4 <printFinalResults()+0x248>)
     afa:	f000 f939 	bl	d70 <W25Q128StorageBackend::getFreeSpace()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     afe:	220a      	movs	r2, #10
     b00:	2300      	movs	r3, #0
     b02:	fa20 f102 	lsr.w	r1, r0, r2
     b06:	4826      	ldr	r0, [pc, #152]	; (ba0 <printFinalResults()+0x214>)
     b08:	f002 f914 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b0c:	2103      	movs	r1, #3
     b0e:	4834      	ldr	r0, [pc, #208]	; (be0 <printFinalResults()+0x254>)
     b10:	f003 fbfc 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b14:	4822      	ldr	r0, [pc, #136]	; (ba0 <printFinalResults()+0x214>)
     b16:	f002 f8f1 	bl	2cfc <Print::println()>
     b1a:	210d      	movs	r1, #13
     b1c:	4832      	ldr	r0, [pc, #200]	; (be8 <printFinalResults()+0x25c>)
     b1e:	f003 fbf5 	bl	430c <usb_serial_write>
    Serial.println(storage_backend.getStoredKeyCount());
     b22:	482c      	ldr	r0, [pc, #176]	; (bd4 <printFinalResults()+0x248>)
     b24:	f000 f930 	bl	d88 <W25Q128StorageBackend::getStoredKeyCount()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     b28:	2300      	movs	r3, #0
     b2a:	220a      	movs	r2, #10
     b2c:	4601      	mov	r1, r0
     b2e:	481c      	ldr	r0, [pc, #112]	; (ba0 <printFinalResults()+0x214>)
     b30:	f002 f900 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     b34:	481a      	ldr	r0, [pc, #104]	; (ba0 <printFinalResults()+0x214>)
     b36:	f002 f8e1 	bl	2cfc <Print::println()>
     b3a:	2110      	movs	r1, #16
     b3c:	482b      	ldr	r0, [pc, #172]	; (bec <printFinalResults()+0x260>)
     b3e:	f003 fbe5 	bl	430c <usb_serial_write>
    Serial.print(storage_backend.getCacheHitRate());
     b42:	4824      	ldr	r0, [pc, #144]	; (bd4 <printFinalResults()+0x248>)
     b44:	f000 fbc4 	bl	12d0 <W25Q128StorageBackend::getCacheHitRate()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     b48:	2300      	movs	r3, #0
     b4a:	4601      	mov	r1, r0
     b4c:	220a      	movs	r2, #10
     b4e:	4814      	ldr	r0, [pc, #80]	; (ba0 <printFinalResults()+0x214>)
     b50:	f002 f8f0 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b54:	2101      	movs	r1, #1
     b56:	4817      	ldr	r0, [pc, #92]	; (bb4 <printFinalResults()+0x228>)
     b58:	f003 fbd8 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b5c:	4810      	ldr	r0, [pc, #64]	; (ba0 <printFinalResults()+0x214>)
     b5e:	f002 f8cd 	bl	2cfc <Print::println()>
    if (test_stats.failed_tests == 0) {
     b62:	68a3      	ldr	r3, [r4, #8]
     b64:	b97b      	cbnz	r3, b86 <printFinalResults()+0x1fa>
     b66:	2145      	movs	r1, #69	; 0x45
     b68:	4821      	ldr	r0, [pc, #132]	; (bf0 <printFinalResults()+0x264>)
     b6a:	f003 fbcf 	bl	430c <usb_serial_write>
     b6e:	480c      	ldr	r0, [pc, #48]	; (ba0 <printFinalResults()+0x214>)
     b70:	f002 f8c4 	bl	2cfc <Print::println()>
     b74:	211a      	movs	r1, #26
     b76:	481f      	ldr	r0, [pc, #124]	; (bf4 <printFinalResults()+0x268>)
     b78:	f003 fbc8 	bl	430c <usb_serial_write>
     b7c:	4808      	ldr	r0, [pc, #32]	; (ba0 <printFinalResults()+0x214>)
     b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b82:	f002 b8bb 	b.w	2cfc <Print::println()>
     b86:	213f      	movs	r1, #63	; 0x3f
     b88:	481b      	ldr	r0, [pc, #108]	; (bf8 <printFinalResults()+0x26c>)
     b8a:	f003 fbbf 	bl	430c <usb_serial_write>
     b8e:	4804      	ldr	r0, [pc, #16]	; (ba0 <printFinalResults()+0x214>)
     b90:	f002 f8b4 	bl	2cfc <Print::println()>
     b94:	e7ee      	b.n	b74 <printFinalResults()+0x1e8>
     b96:	bf00      	nop
     b98:	2000047c 	.word	0x2000047c
     b9c:	20004270 	.word	0x20004270
     ba0:	20002ff0 	.word	0x20002ff0
     ba4:	20000498 	.word	0x20000498
     ba8:	200004a8 	.word	0x200004a8
     bac:	200004b4 	.word	0x200004b4
     bb0:	200004c0 	.word	0x200004c0
     bb4:	200009d0 	.word	0x200009d0
     bb8:	200004d0 	.word	0x200004d0
     bbc:	200004e0 	.word	0x200004e0
     bc0:	200004f0 	.word	0x200004f0
     bc4:	20000500 	.word	0x20000500
     bc8:	20000510 	.word	0x20000510
     bcc:	20000514 	.word	0x20000514
     bd0:	20000530 	.word	0x20000530
     bd4:	20004164 	.word	0x20004164
     bd8:	20000540 	.word	0x20000540
     bdc:	20000544 	.word	0x20000544
     be0:	20000554 	.word	0x20000554
     be4:	20000558 	.word	0x20000558
     be8:	20000568 	.word	0x20000568
     bec:	200009bc 	.word	0x200009bc
     bf0:	20000578 	.word	0x20000578
     bf4:	20000bd8 	.word	0x20000bd8
     bf8:	200005c0 	.word	0x200005c0

00000bfc <setup>:
void setup() {
     bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     c00:	4d4b      	ldr	r5, [pc, #300]	; (d30 <setup+0x134>)
				if (elapsed > 750) break;
     c02:	f240 28ee 	movw	r8, #750	; 0x2ee
     c06:	4c4b      	ldr	r4, [pc, #300]	; (d34 <setup+0x138>)
     c08:	4f4b      	ldr	r7, [pc, #300]	; (d38 <setup+0x13c>)
     c0a:	f8df 9150 	ldr.w	r9, [pc, #336]	; d5c <setup+0x160>
		uint32_t millis_begin = systick_millis_count;
     c0e:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     c10:	f003 fbfa 	bl	4408 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c14:	7823      	ldrb	r3, [r4, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d07a      	beq.n	d10 <setup+0x114>
     c1a:	783b      	ldrb	r3, [r7, #0]
     c1c:	07da      	lsls	r2, r3, #31
     c1e:	d577      	bpl.n	d10 <setup+0x114>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     c20:	682b      	ldr	r3, [r5, #0]
     c22:	f8d9 2000 	ldr.w	r2, [r9]
     c26:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c28:	2b0e      	cmp	r3, #14
     c2a:	d971      	bls.n	d10 <setup+0x114>
		yield();
     c2c:	f003 fbec 	bl	4408 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c30:	7823      	ldrb	r3, [r4, #0]
    while (!Serial) delay(10);
     c32:	200a      	movs	r0, #10
     c34:	2b00      	cmp	r3, #0
     c36:	d075      	beq.n	d24 <setup+0x128>
     c38:	783b      	ldrb	r3, [r7, #0]
     c3a:	07db      	lsls	r3, r3, #31
     c3c:	d572      	bpl.n	d24 <setup+0x128>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     c3e:	682b      	ldr	r3, [r5, #0]
     c40:	f8d9 2000 	ldr.w	r2, [r9]
     c44:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c46:	2b0e      	cmp	r3, #14
     c48:	d96c      	bls.n	d24 <setup+0x128>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c4a:	211d      	movs	r1, #29
     c4c:	483b      	ldr	r0, [pc, #236]	; (d3c <setup+0x140>)
     c4e:	f003 fb5d 	bl	430c <usb_serial_write>
     c52:	483b      	ldr	r0, [pc, #236]	; (d40 <setup+0x144>)
    ecu_config.ecu_type = ECU_TRANSMISSION;
     c54:	4c3b      	ldr	r4, [pc, #236]	; (d44 <setup+0x148>)
     c56:	f002 f851 	bl	2cfc <Print::println()>
     c5a:	2127      	movs	r1, #39	; 0x27
     c5c:	483a      	ldr	r0, [pc, #232]	; (d48 <setup+0x14c>)
     c5e:	f003 fb55 	bl	430c <usb_serial_write>
     c62:	4837      	ldr	r0, [pc, #220]	; (d40 <setup+0x144>)
     c64:	f002 f84a 	bl	2cfc <Print::println()>
     c68:	4626      	mov	r6, r4
     c6a:	2301      	movs	r3, #1
    strcpy(ecu_config.firmware_version, "1.0.0");
     c6c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; d60 <setup+0x164>
    test_stats.start_time = millis();
     c70:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d64 <setup+0x168>
    ecu_config.ecu_type = ECU_TRANSMISSION;
     c74:	f806 3b01 	strb.w	r3, [r6], #1
    ecu_config.spi.qspi_flash.enabled = true;
     c78:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
     c7c:	682b      	ldr	r3, [r5, #0]
    strcpy(ecu_config.ecu_name, "Transmission ECU");
     c7e:	4f33      	ldr	r7, [pc, #204]	; (d4c <setup+0x150>)
    test_stats.start_time = millis();
     c80:	f8c8 3018 	str.w	r3, [r8, #24]
    strcpy(ecu_config.firmware_version, "1.0.0");
     c84:	f8bc 3004 	ldrh.w	r3, [ip, #4]
     c88:	f8a4 3025 	strh.w	r3, [r4, #37]	; 0x25
    ecu_config.serial_number = 12345;
     c8c:	f243 0339 	movw	r3, #12345	; 0x3039
     c90:	6363      	str	r3, [r4, #52]	; 0x34
    ecu_config.spi.mosi_pin = 11;
     c92:	f640 430b 	movw	r3, #3083	; 0xc0b
     c96:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    ecu_config.spi.sck_pin = 13;
     c9a:	230d      	movs	r3, #13
     c9c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    ecu_config.spi.qspi_flash.cs_pin = 10;
     ca0:	230a      	movs	r3, #10
     ca2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    ecu_config.spi.qspi_flash.frequency = 10000000; // 10MHz
     ca6:	4b2a      	ldr	r3, [pc, #168]	; (d50 <setup+0x154>)
     ca8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ecu_config.spi.qspi_flash.mode = 0;
     cac:	2300      	movs	r3, #0
     cae:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    strcpy(ecu_config.ecu_name, "Transmission ECU");
     cb2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     cb4:	f8c4 0001 	str.w	r0, [r4, #1]
    strcpy(ecu_config.firmware_version, "1.0.0");
     cb8:	f8dc 0000 	ldr.w	r0, [ip]
    strcpy(ecu_config.ecu_name, "Transmission ECU");
     cbc:	60f3      	str	r3, [r6, #12]
     cbe:	783b      	ldrb	r3, [r7, #0]
     cc0:	60b2      	str	r2, [r6, #8]
     cc2:	7433      	strb	r3, [r6, #16]
     cc4:	6071      	str	r1, [r6, #4]
     cc6:	211c      	movs	r1, #28
    strcpy(ecu_config.firmware_version, "1.0.0");
     cc8:	f8c4 0021 	str.w	r0, [r4, #33]	; 0x21
     ccc:	4821      	ldr	r0, [pc, #132]	; (d54 <setup+0x158>)
     cce:	f003 fb1d 	bl	430c <usb_serial_write>
     cd2:	481b      	ldr	r0, [pc, #108]	; (d40 <setup+0x144>)
     cd4:	f002 f812 	bl	2cfc <Print::println()>
    testInitialization();
     cd8:	f7ff fa00 	bl	dc <testInitialization()>
    testBasicOperations();
     cdc:	f7ff fcae 	bl	63c <testBasicOperations()>
    testMultipleDataTypes();
     ce0:	f7ff fa5e 	bl	1a0 <testMultipleDataTypes()>
    testPerformance();
     ce4:	f7ff fb1a 	bl	31c <testPerformance()>
    testErrorHandling();
     ce8:	f7ff fd34 	bl	754 <testErrorHandling()>
    testCachePerformance();
     cec:	f7ff fda6 	bl	83c <testCachePerformance()>
    testStressTesting();
     cf0:	f7ff fbc4 	bl	47c <testStressTesting()>
     cf4:	211c      	movs	r1, #28
     cf6:	4818      	ldr	r0, [pc, #96]	; (d58 <setup+0x15c>)
     cf8:	f003 fb08 	bl	430c <usb_serial_write>
     cfc:	4810      	ldr	r0, [pc, #64]	; (d40 <setup+0x144>)
     cfe:	f001 fffd 	bl	2cfc <Print::println()>
     d02:	682b      	ldr	r3, [r5, #0]
    test_stats.end_time = millis();
     d04:	f8c8 301c 	str.w	r3, [r8, #28]
}
     d08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printFinalResults();
     d0c:	f7ff be3e 	b.w	98c <printFinalResults()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     d10:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     d12:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     d14:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     d16:	b142      	cbz	r2, d2a <setup+0x12e>
				if (elapsed > 2000) break;
     d18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     d1c:	d886      	bhi.n	c2c <setup+0x30>
			yield();
     d1e:	f003 fb73 	bl	4408 <yield>
     d22:	e775      	b.n	c10 <setup+0x14>
    while (!Serial) delay(10);
     d24:	f002 f81a 	bl	2d5c <delay>
     d28:	e780      	b.n	c2c <setup+0x30>
				if (elapsed > 750) break;
     d2a:	4543      	cmp	r3, r8
     d2c:	d9f7      	bls.n	d1e <setup+0x122>
     d2e:	e77d      	b.n	c2c <setup+0x30>
     d30:	20004268 	.word	0x20004268
     d34:	200042b7 	.word	0x200042b7
     d38:	200042b6 	.word	0x200042b6
     d3c:	2000274c 	.word	0x2000274c
     d40:	20002ff0 	.word	0x20002ff0
     d44:	20003ff8 	.word	0x20003ff8
     d48:	2000276c 	.word	0x2000276c
     d4c:	20002794 	.word	0x20002794
     d50:	00989680 	.word	0x00989680
     d54:	200003b0 	.word	0x200003b0
     d58:	200003d0 	.word	0x200003d0
     d5c:	20004298 	.word	0x20004298
     d60:	200027a8 	.word	0x200027a8
     d64:	20004270 	.word	0x20004270

00000d68 <W25Q128StorageBackend::getTotalSpace()>:
    return key_to_sector.find(storage_key) != key_to_sector.end();
}

uint32_t W25Q128StorageBackend::getTotalSpace() {
    return W25Q128_FLASH_SIZE;
}
     d68:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <W25Q128StorageBackend::getFreeSpace()>:

uint32_t W25Q128StorageBackend::getFreeSpace() {
    return (total_sectors - used_sectors) * W25Q128_SECTOR_SIZE;
     d70:	e9d0 3006 	ldrd	r3, r0, [r0, #24]
     d74:	1a18      	subs	r0, r3, r0
}
     d76:	0300      	lsls	r0, r0, #12
     d78:	4770      	bx	lr
     d7a:	bf00      	nop

00000d7c <W25Q128StorageBackend::getUsedSpace()>:

uint32_t W25Q128StorageBackend::getUsedSpace() {
    return used_sectors * W25Q128_SECTOR_SIZE;
     d7c:	69c0      	ldr	r0, [r0, #28]
}
     d7e:	0300      	lsls	r0, r0, #12
     d80:	4770      	bx	lr
     d82:	bf00      	nop

00000d84 <W25Q128StorageBackend::updateSectorMap()>:

void W25Q128StorageBackend::sync() {
    // No-op for SPI flash (no filesystem sync needed)
}
     d84:	4770      	bx	lr
     d86:	bf00      	nop

00000d88 <W25Q128StorageBackend::getStoredKeyCount()>:
    }
#endif
}

uint32_t W25Q128StorageBackend::getStoredKeyCount() {
    return key_to_sector.size() + write_cache.size();
     d88:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
     d8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     d8e:	4410      	add	r0, r2
     d90:	4770      	bx	lr
     d92:	bf00      	nop

00000d94 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]>:
      _M_base_alloc() { return *this; }

      __buckets_ptr
      _M_allocate_buckets(size_type __bkt_count)
      {
	if (__builtin_expect(__bkt_count == 1, false))
     d94:	2901      	cmp	r1, #1
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     d96:	b5f0      	push	{r4, r5, r6, r7, lr}
     d98:	460d      	mov	r5, r1
     d9a:	b083      	sub	sp, #12
     d9c:	4607      	mov	r7, r0
	if (__builtin_expect(__bkt_count == 1, false))
     d9e:	d041      	beq.n	e24 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x90>
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__builtin_expect(__n > this->_M_max_size(), false))
     da0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
     da4:	d244      	bcs.n	e30 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x9c>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     da6:	008a      	lsls	r2, r1, #2
     da8:	4610      	mov	r0, r2
     daa:	9201      	str	r2, [sp, #4]
     dac:	f002 f96a 	bl	3084 <operator new(unsigned int)>
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
     db0:	9a01      	ldr	r2, [sp, #4]
     db2:	2100      	movs	r1, #0
     db4:	4606      	mov	r6, r0
     db6:	f00d f945 	bl	e044 <memset>
	    return &_M_single_bucket;
     dba:	f107 0e18 	add.w	lr, r7, #24
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
     dbe:	68bc      	ldr	r4, [r7, #8]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
     dc0:	2000      	movs	r0, #0
     dc2:	60b8      	str	r0, [r7, #8]
      std::size_t __bbegin_bkt = 0;
      while (__p)
     dc4:	b194      	cbz	r4, dec <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x58>
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
     dc6:	f107 0c08 	add.w	ip, r7, #8
      _M_next() const noexcept
     dca:	4622      	mov	r2, r4
      { return static_cast<_Hash_node*>(this->_M_nxt); }
     dcc:	6824      	ldr	r4, [r4, #0]
    { return __num % __den; }
     dce:	6853      	ldr	r3, [r2, #4]
     dd0:	fbb3 f1f5 	udiv	r1, r3, r5
     dd4:	fb05 3311 	mls	r3, r5, r1, r3
	  if (!__new_buckets[__bkt])
     dd8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     ddc:	b189      	cbz	r1, e02 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x6e>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
     dde:	6809      	ldr	r1, [r1, #0]
     de0:	6011      	str	r1, [r2, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
     de2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     de6:	601a      	str	r2, [r3, #0]
      while (__p)
     de8:	2c00      	cmp	r4, #0
     dea:	d1ee      	bne.n	dca <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x36>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
     dec:	e9d7 0100 	ldrd	r0, r1, [r7]
	if (_M_uses_single_bucket(__bkts))
     df0:	4586      	cmp	lr, r0
     df2:	d002      	beq.n	dfa <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x66>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
     df4:	0089      	lsls	r1, r1, #2
     df6:	f002 f94d 	bl	3094 <operator delete(void*, unsigned int)>
	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
      _M_buckets = __new_buckets;
     dfa:	e9c7 6500 	strd	r6, r5, [r7]
    }
     dfe:	b003      	add	sp, #12
     e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      __p->_M_nxt = _M_before_begin._M_nxt;
     e02:	68b9      	ldr	r1, [r7, #8]
     e04:	6011      	str	r1, [r2, #0]
	      _M_before_begin._M_nxt = __p;
     e06:	60ba      	str	r2, [r7, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
     e08:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
	      if (__p->_M_nxt)
     e0c:	6811      	ldr	r1, [r2, #0]
     e0e:	b129      	cbz	r1, e1c <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x88>
		__new_buckets[__bbegin_bkt] = __p;
     e10:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
	      __bbegin_bkt = __bkt;
     e14:	4618      	mov	r0, r3
      while (__p)
     e16:	2c00      	cmp	r4, #0
     e18:	d1d7      	bne.n	dca <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x36>
     e1a:	e7e7      	b.n	dec <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x58>
	      __bbegin_bkt = __bkt;
     e1c:	4618      	mov	r0, r3
      while (__p)
     e1e:	2c00      	cmp	r4, #0
     e20:	d1d3      	bne.n	dca <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x36>
     e22:	e7e3      	b.n	dec <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x58>
	    _M_single_bucket = nullptr;
     e24:	4606      	mov	r6, r0
     e26:	2300      	movs	r3, #0
     e28:	f846 3f18 	str.w	r3, [r6, #24]!
	    return &_M_single_bucket;
     e2c:	46b6      	mov	lr, r6
     e2e:	e7c6      	b.n	dbe <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0x2a>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
     e30:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
     e34:	d301      	bcc.n	e3a <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]+0xa6>
	      std::__throw_bad_array_new_length();
     e36:	f003 fe13 	bl	4a60 <std::__throw_bad_array_new_length()>
	    std::__throw_bad_alloc();
     e3a:	f003 fe01 	bl	4a40 <std::__throw_bad_alloc()>
     e3e:	bf00      	nop

00000e40 <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)>:

bool W25Q128StorageBackend::getStoredKey(uint32_t index, uint32_t* storage_key) {
    if (index >= getStoredKeyCount()) return false;
     e40:	6803      	ldr	r3, [r0, #0]
bool W25Q128StorageBackend::getStoredKey(uint32_t index, uint32_t* storage_key) {
     e42:	b570      	push	{r4, r5, r6, lr}
    if (index >= getStoredKeyCount()) return false;
     e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
bool W25Q128StorageBackend::getStoredKey(uint32_t index, uint32_t* storage_key) {
     e46:	4616      	mov	r6, r2
     e48:	4a15      	ldr	r2, [pc, #84]	; (ea0 <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x60>)
     e4a:	4604      	mov	r4, r0
     e4c:	460d      	mov	r5, r1
     e4e:	4293      	cmp	r3, r2
     e50:	d123      	bne.n	e9a <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x5a>
    return key_to_sector.size() + write_cache.size();
     e52:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
     e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e58:	4418      	add	r0, r3
    if (index >= getStoredKeyCount()) return false;
     e5a:	42a8      	cmp	r0, r5
     e5c:	d91b      	bls.n	e96 <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x56>
      { return _M_element_count; }
     e5e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    
    // Return keys from flash first, then cache
    if (index < key_to_sector.size()) {
     e62:	429d      	cmp	r5, r3
     e64:	d30b      	bcc.n	e7e <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x3e>
        *storage_key = it->first;
        return true;
    }
    
    // Return from cache
    index -= key_to_sector.size();
     e66:	1aed      	subs	r5, r5, r3
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
     e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_assert(__n >= 0);
      while (__n--)
     e6a:	1e6b      	subs	r3, r5, #1
     e6c:	b11d      	cbz	r5, e76 <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x36>
     e6e:	3b01      	subs	r3, #1
      { return static_cast<_Hash_node*>(this->_M_nxt); }
     e70:	6800      	ldr	r0, [r0, #0]
     e72:	1c5a      	adds	r2, r3, #1
     e74:	d1fb      	bne.n	e6e <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x2e>
    auto it = write_cache.begin();
    std::advance(it, index);
    *storage_key = it->first;
     e76:	6843      	ldr	r3, [r0, #4]
    return true;
     e78:	2001      	movs	r0, #1
    *storage_key = it->first;
     e7a:	6033      	str	r3, [r6, #0]
}
     e7c:	bd70      	pop	{r4, r5, r6, pc}
     e7e:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
     e82:	1e6b      	subs	r3, r5, #1
     e84:	b11d      	cbz	r5, e8e <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x4e>
     e86:	3b01      	subs	r3, #1
     e88:	6809      	ldr	r1, [r1, #0]
     e8a:	1c58      	adds	r0, r3, #1
     e8c:	d1fb      	bne.n	e86 <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x46>
        *storage_key = it->first;
     e8e:	684b      	ldr	r3, [r1, #4]
     e90:	2001      	movs	r0, #1
     e92:	6033      	str	r3, [r6, #0]
}
     e94:	bd70      	pop	{r4, r5, r6, pc}
    if (index >= getStoredKeyCount()) return false;
     e96:	2000      	movs	r0, #0
}
     e98:	bd70      	pop	{r4, r5, r6, pc}
    if (index >= getStoredKeyCount()) return false;
     e9a:	4798      	blx	r3
     e9c:	e7dd      	b.n	e5a <W25Q128StorageBackend::getStoredKey(unsigned long, unsigned long*)+0x1a>
     e9e:	bf00      	nop
     ea0:	00000d89 	.word	0x00000d89

00000ea4 <W25Q128StorageBackend::hasData(unsigned long)>:
bool W25Q128StorageBackend::hasData(uint32_t storage_key) {
     ea4:	4603      	mov	r3, r0
    if (!flash_initialized) return false;
     ea6:	7c00      	ldrb	r0, [r0, #16]
     ea8:	2800      	cmp	r0, #0
     eaa:	d036      	beq.n	f1a <W25Q128StorageBackend::hasData(unsigned long)+0x76>
      __node_base_ptr __prev_p = _M_buckets[__bkt];
     eac:	6a1a      	ldr	r2, [r3, #32]
bool W25Q128StorageBackend::hasData(uint32_t storage_key) {
     eae:	b570      	push	{r4, r5, r6, lr}
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
     eb0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    { return __num % __den; }
     eb2:	fbb1 fef5 	udiv	lr, r1, r5
     eb6:	fb05 1e1e 	mls	lr, r5, lr, r1
      __node_base_ptr __prev_p = _M_buckets[__bkt];
     eba:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
      if (!__prev_p)
     ebe:	b176      	cbz	r6, ede <W25Q128StorageBackend::hasData(unsigned long)+0x3a>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
     ec0:	6834      	ldr	r4, [r6, #0]
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
     ec2:	6862      	ldr	r2, [r4, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
     ec4:	428a      	cmp	r2, r1
     ec6:	d024      	beq.n	f12 <W25Q128StorageBackend::hasData(unsigned long)+0x6e>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
     ec8:	6822      	ldr	r2, [r4, #0]
      _M_hash_code(const _Key& __k) const
     eca:	4626      	mov	r6, r4
     ecc:	4614      	mov	r4, r2
     ece:	b132      	cbz	r2, ede <W25Q128StorageBackend::hasData(unsigned long)+0x3a>
	return _M_hash()(__k);
     ed0:	6852      	ldr	r2, [r2, #4]
    { return __num % __den; }
     ed2:	fbb2 fcf5 	udiv	ip, r2, r5
     ed6:	fb05 2c1c 	mls	ip, r5, ip, r2
     eda:	45e6      	cmp	lr, ip
     edc:	d0f2      	beq.n	ec4 <W25Q128StorageBackend::hasData(unsigned long)+0x20>
      __node_base_ptr __prev_p = _M_buckets[__bkt];
     ede:	e9d3 3539 	ldrd	r3, r5, [r3, #228]	; 0xe4
     ee2:	fbb1 f6f5 	udiv	r6, r1, r5
     ee6:	fb05 1616 	mls	r6, r5, r6, r1
     eea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
      if (!__prev_p)
     eee:	b178      	cbz	r0, f10 <W25Q128StorageBackend::hasData(unsigned long)+0x6c>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
     ef0:	6802      	ldr	r2, [r0, #0]
     ef2:	6853      	ldr	r3, [r2, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
     ef4:	4299      	cmp	r1, r3
     ef6:	d011      	beq.n	f1c <W25Q128StorageBackend::hasData(unsigned long)+0x78>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
     ef8:	6814      	ldr	r4, [r2, #0]
      _M_hash_code(const _Key& __k) const
     efa:	4610      	mov	r0, r2
     efc:	b13c      	cbz	r4, f0e <W25Q128StorageBackend::hasData(unsigned long)+0x6a>
	return _M_hash()(__k);
     efe:	6863      	ldr	r3, [r4, #4]
    { return __num % __den; }
     f00:	4622      	mov	r2, r4
     f02:	fbb3 f4f5 	udiv	r4, r3, r5
     f06:	fb05 3414 	mls	r4, r5, r4, r3
     f0a:	42a6      	cmp	r6, r4
     f0c:	d0f2      	beq.n	ef4 <W25Q128StorageBackend::hasData(unsigned long)+0x50>
     f0e:	2000      	movs	r0, #0
}
     f10:	bd70      	pop	{r4, r5, r6, pc}
    if (write_cache.find(storage_key) != write_cache.end()) {
     f12:	6832      	ldr	r2, [r6, #0]
     f14:	2a00      	cmp	r2, #0
     f16:	d0e2      	beq.n	ede <W25Q128StorageBackend::hasData(unsigned long)+0x3a>
}
     f18:	bd70      	pop	{r4, r5, r6, pc}
     f1a:	4770      	bx	lr
      { return __x._M_cur != __y._M_cur; }
     f1c:	6800      	ldr	r0, [r0, #0]
     f1e:	3800      	subs	r0, #0
     f20:	bf18      	it	ne
     f22:	2001      	movne	r0, #1
     f24:	bd70      	pop	{r4, r5, r6, pc}
     f26:	bf00      	nop

00000f28 <W25Q128StorageBackend::printDebugInfo()>:

void W25Q128StorageBackend::printDebugInfo() {
     f28:	b510      	push	{r4, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f2a:	212a      	movs	r1, #42	; 0x2a
     f2c:	4604      	mov	r4, r0
     f2e:	485d      	ldr	r0, [pc, #372]	; (10a4 <W25Q128StorageBackend::printDebugInfo()+0x17c>)
     f30:	f003 f9ec 	bl	430c <usb_serial_write>
     f34:	485c      	ldr	r0, [pc, #368]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     f36:	f001 fee1 	bl	2cfc <Print::println()>
     f3a:	210c      	movs	r1, #12
     f3c:	485b      	ldr	r0, [pc, #364]	; (10ac <W25Q128StorageBackend::printDebugInfo()+0x184>)
     f3e:	f003 f9e5 	bl	430c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     f42:	2300      	movs	r3, #0
     f44:	2210      	movs	r2, #16
     f46:	6961      	ldr	r1, [r4, #20]
     f48:	4857      	ldr	r0, [pc, #348]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     f4a:	f001 fef3 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     f4e:	4856      	ldr	r0, [pc, #344]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     f50:	f001 fed4 	bl	2cfc <Print::println()>
     f54:	210d      	movs	r1, #13
     f56:	4856      	ldr	r0, [pc, #344]	; (10b0 <W25Q128StorageBackend::printDebugInfo()+0x188>)
     f58:	f003 f9d8 	bl	430c <usb_serial_write>
    Serial.println("=== W25Q128 Storage Backend Debug Info ===");
    Serial.print("Flash ID: 0x");
    Serial.println(flash_id, HEX);
    Serial.print("Total Space: ");
    Serial.print(getTotalSpace() / 1024 / 1024);
     f5c:	6823      	ldr	r3, [r4, #0]
     f5e:	4a55      	ldr	r2, [pc, #340]	; (10b4 <W25Q128StorageBackend::printDebugInfo()+0x18c>)
     f60:	6a1b      	ldr	r3, [r3, #32]
     f62:	4293      	cmp	r3, r2
     f64:	f040 8093 	bne.w	108e <W25Q128StorageBackend::printDebugInfo()+0x166>
     f68:	2110      	movs	r1, #16
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f6a:	2300      	movs	r3, #0
     f6c:	220a      	movs	r2, #10
     f6e:	484e      	ldr	r0, [pc, #312]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     f70:	f001 fee0 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f74:	2103      	movs	r1, #3
     f76:	4850      	ldr	r0, [pc, #320]	; (10b8 <W25Q128StorageBackend::printDebugInfo()+0x190>)
     f78:	f003 f9c8 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     f7c:	484a      	ldr	r0, [pc, #296]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     f7e:	f001 febd 	bl	2cfc <Print::println()>
     f82:	210c      	movs	r1, #12
     f84:	484d      	ldr	r0, [pc, #308]	; (10bc <W25Q128StorageBackend::printDebugInfo()+0x194>)
     f86:	f003 f9c1 	bl	430c <usb_serial_write>
    Serial.println(" MB");
    Serial.print("Used Space: ");
    Serial.print(getUsedSpace() / 1024);
     f8a:	6823      	ldr	r3, [r4, #0]
     f8c:	4a4c      	ldr	r2, [pc, #304]	; (10c0 <W25Q128StorageBackend::printDebugInfo()+0x198>)
     f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f90:	4293      	cmp	r3, r2
     f92:	f040 8083 	bne.w	109c <W25Q128StorageBackend::printDebugInfo()+0x174>
    return used_sectors * W25Q128_SECTOR_SIZE;
     f96:	69e0      	ldr	r0, [r4, #28]
     f98:	0300      	lsls	r0, r0, #12
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f9a:	220a      	movs	r2, #10
     f9c:	2300      	movs	r3, #0
     f9e:	fa20 f102 	lsr.w	r1, r0, r2
     fa2:	4841      	ldr	r0, [pc, #260]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     fa4:	f001 fec6 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fa8:	2103      	movs	r1, #3
     faa:	4846      	ldr	r0, [pc, #280]	; (10c4 <W25Q128StorageBackend::printDebugInfo()+0x19c>)
     fac:	f003 f9ae 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     fb0:	483d      	ldr	r0, [pc, #244]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     fb2:	f001 fea3 	bl	2cfc <Print::println()>
     fb6:	210c      	movs	r1, #12
     fb8:	4843      	ldr	r0, [pc, #268]	; (10c8 <W25Q128StorageBackend::printDebugInfo()+0x1a0>)
     fba:	f003 f9a7 	bl	430c <usb_serial_write>
    Serial.println(" KB");
    Serial.print("Free Space: ");
    Serial.print(getFreeSpace() / 1024);
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	4a42      	ldr	r2, [pc, #264]	; (10cc <W25Q128StorageBackend::printDebugInfo()+0x1a4>)
     fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fc4:	4293      	cmp	r3, r2
     fc6:	d166      	bne.n	1096 <W25Q128StorageBackend::printDebugInfo()+0x16e>
    return (total_sectors - used_sectors) * W25Q128_SECTOR_SIZE;
     fc8:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
     fcc:	1ac0      	subs	r0, r0, r3
     fce:	0300      	lsls	r0, r0, #12
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     fd0:	220a      	movs	r2, #10
     fd2:	2300      	movs	r3, #0
     fd4:	fa20 f102 	lsr.w	r1, r0, r2
     fd8:	4833      	ldr	r0, [pc, #204]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     fda:	f001 feab 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fde:	2103      	movs	r1, #3
     fe0:	4838      	ldr	r0, [pc, #224]	; (10c4 <W25Q128StorageBackend::printDebugInfo()+0x19c>)
     fe2:	f003 f993 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     fe6:	4830      	ldr	r0, [pc, #192]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
     fe8:	f001 fe88 	bl	2cfc <Print::println()>
     fec:	210f      	movs	r1, #15
     fee:	4838      	ldr	r0, [pc, #224]	; (10d0 <W25Q128StorageBackend::printDebugInfo()+0x1a8>)
     ff0:	f003 f98c 	bl	430c <usb_serial_write>
    Serial.println(" KB");
    Serial.print("Cache Enabled: ");
    Serial.println(cache_enabled ? "Yes" : "No");
     ff4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     ff8:	4b36      	ldr	r3, [pc, #216]	; (10d4 <W25Q128StorageBackend::printDebugInfo()+0x1ac>)
     ffa:	2a00      	cmp	r2, #0
     ffc:	4836      	ldr	r0, [pc, #216]	; (10d8 <W25Q128StorageBackend::printDebugInfo()+0x1b0>)
     ffe:	bf12      	itee	ne
    1000:	2103      	movne	r1, #3
    1002:	2102      	moveq	r1, #2
    1004:	4618      	moveq	r0, r3
    1006:	f003 f981 	bl	430c <usb_serial_write>
    100a:	4827      	ldr	r0, [pc, #156]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    100c:	f001 fe76 	bl	2cfc <Print::println()>
    1010:	2110      	movs	r1, #16
    1012:	4832      	ldr	r0, [pc, #200]	; (10dc <W25Q128StorageBackend::printDebugInfo()+0x1b4>)
    1014:	f003 f97a 	bl	430c <usb_serial_write>
void W25Q128StorageBackend::setCacheSize(uint32_t size) {
    cache_size_limit = std::min(size, MAX_CACHE_SIZE);
}

uint32_t W25Q128StorageBackend::getCacheHitRate() {
    uint32_t total = cache_hits + cache_misses;
    1018:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
    if (total == 0) return 0;
    101c:	1859      	adds	r1, r3, r1
    101e:	d004      	beq.n	102a <W25Q128StorageBackend::printDebugInfo()+0x102>
    return (cache_hits * 100) / total;
    1020:	2264      	movs	r2, #100	; 0x64
    1022:	fb02 f303 	mul.w	r3, r2, r3
    1026:	fbb3 f1f1 	udiv	r1, r3, r1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    102a:	2300      	movs	r3, #0
    102c:	220a      	movs	r2, #10
    102e:	481e      	ldr	r0, [pc, #120]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    Serial.println(last_error);
    1030:	3450      	adds	r4, #80	; 0x50
    1032:	f001 fe7f 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1036:	2101      	movs	r1, #1
    1038:	4829      	ldr	r0, [pc, #164]	; (10e0 <W25Q128StorageBackend::printDebugInfo()+0x1b8>)
    103a:	f003 f967 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    103e:	481a      	ldr	r0, [pc, #104]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    1040:	f001 fe5c 	bl	2cfc <Print::println()>
    1044:	210d      	movs	r1, #13
    1046:	4827      	ldr	r0, [pc, #156]	; (10e4 <W25Q128StorageBackend::printDebugInfo()+0x1bc>)
    1048:	f003 f960 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    104c:	2300      	movs	r3, #0
    104e:	220a      	movs	r2, #10
    1050:	f854 1c04 	ldr.w	r1, [r4, #-4]
    1054:	4814      	ldr	r0, [pc, #80]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    1056:	f001 fe6d 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    105a:	4813      	ldr	r0, [pc, #76]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    105c:	f001 fe4e 	bl	2cfc <Print::println()>
    1060:	210c      	movs	r1, #12
    1062:	4821      	ldr	r0, [pc, #132]	; (10e8 <W25Q128StorageBackend::printDebugInfo()+0x1c0>)
    1064:	f003 f952 	bl	430c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1068:	4620      	mov	r0, r4
    106a:	f00d fae9 	bl	e640 <strlen>
    106e:	4601      	mov	r1, r0
    1070:	4620      	mov	r0, r4
    1072:	f003 f94b 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1076:	480c      	ldr	r0, [pc, #48]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
    1078:	f001 fe40 	bl	2cfc <Print::println()>
    107c:	212a      	movs	r1, #42	; 0x2a
    107e:	481b      	ldr	r0, [pc, #108]	; (10ec <W25Q128StorageBackend::printDebugInfo()+0x1c4>)
    1080:	f003 f944 	bl	430c <usb_serial_write>
    1084:	4808      	ldr	r0, [pc, #32]	; (10a8 <W25Q128StorageBackend::printDebugInfo()+0x180>)
}
    1086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    108a:	f001 be37 	b.w	2cfc <Print::println()>
    Serial.print(getTotalSpace() / 1024 / 1024);
    108e:	4620      	mov	r0, r4
    1090:	4798      	blx	r3
    1092:	0d01      	lsrs	r1, r0, #20
    1094:	e769      	b.n	f6a <W25Q128StorageBackend::printDebugInfo()+0x42>
    Serial.print(getFreeSpace() / 1024);
    1096:	4620      	mov	r0, r4
    1098:	4798      	blx	r3
    109a:	e799      	b.n	fd0 <W25Q128StorageBackend::printDebugInfo()+0xa8>
    Serial.print(getUsedSpace() / 1024);
    109c:	4620      	mov	r0, r4
    109e:	4798      	blx	r3
    10a0:	e77b      	b.n	f9a <W25Q128StorageBackend::printDebugInfo()+0x72>
    10a2:	bf00      	nop
    10a4:	20000b2c 	.word	0x20000b2c
    10a8:	20002ff0 	.word	0x20002ff0
    10ac:	20000b58 	.word	0x20000b58
    10b0:	20000b68 	.word	0x20000b68
    10b4:	00000d69 	.word	0x00000d69
    10b8:	20000540 	.word	0x20000540
    10bc:	20000b78 	.word	0x20000b78
    10c0:	00000d7d 	.word	0x00000d7d
    10c4:	20000554 	.word	0x20000554
    10c8:	20000b88 	.word	0x20000b88
    10cc:	00000d71 	.word	0x00000d71
    10d0:	20000b98 	.word	0x20000b98
    10d4:	20000b24 	.word	0x20000b24
    10d8:	20000b28 	.word	0x20000b28
    10dc:	20000bf4 	.word	0x20000bf4
    10e0:	200009d0 	.word	0x200009d0
    10e4:	20000ba8 	.word	0x20000ba8
    10e8:	20000bb8 	.word	0x20000bb8
    10ec:	20000bc8 	.word	0x20000bc8

000010f0 <W25Q128StorageBackend::getFlashID()>:
uint32_t W25Q128StorageBackend::getFlashID() {
    10f0:	b538      	push	{r3, r4, r5, lr}
// =============================================================================
// Private SPI Communication Methods
// =============================================================================

void W25Q128StorageBackend::selectChip() {
    digitalWrite(cs_pin, LOW);
    10f2:	2100      	movs	r1, #0
uint32_t W25Q128StorageBackend::getFlashID() {
    10f4:	4605      	mov	r5, r0
    digitalWrite(cs_pin, LOW);
    10f6:	7a00      	ldrb	r0, [r0, #8]
    10f8:	f001 feae 	bl	2e58 <digitalWrite>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    10fc:	4b17      	ldr	r3, [pc, #92]	; (115c <W25Q128StorageBackend::getFlashID()+0x6c>)
		port().TDR = data;
    10fe:	229f      	movs	r2, #159	; 0x9f
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1100:	681b      	ldr	r3, [r3, #0]
		port().TDR = data;
    1102:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1106:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    110a:	d0fb      	beq.n	1104 <W25Q128StorageBackend::getFlashID()+0x14>
		port().TDR = data;
    110c:	2200      	movs	r2, #0
			if (fifo > 0) return port().RDR;
    110e:	6f59      	ldr	r1, [r3, #116]	; 0x74
		port().TDR = data;
    1110:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1114:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    1118:	d0fb      	beq.n	1112 <W25Q128StorageBackend::getFlashID()+0x22>
    111a:	6f59      	ldr	r1, [r3, #116]	; 0x74
		port().TDR = data;
    111c:	2200      	movs	r2, #0
    uint32_t id = (spiTransfer(0) << 16) | (spiTransfer(0) << 8) | spiTransfer(0);
    111e:	0409      	lsls	r1, r1, #16
    1120:	665a      	str	r2, [r3, #100]	; 0x64
    1122:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1128:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    112c:	d0fb      	beq.n	1126 <W25Q128StorageBackend::getFlashID()+0x36>
    112e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		port().TDR = data;
    1130:	2000      	movs	r0, #0
    1132:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    1136:	6658      	str	r0, [r3, #100]	; 0x64
    1138:	fa1f fc8c 	uxth.w	ip, ip
    113c:	ea4c 0c01 	orr.w	ip, ip, r1
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1142:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    1146:	d0fb      	beq.n	1140 <W25Q128StorageBackend::getFlashID()+0x50>
    1148:	6f5c      	ldr	r4, [r3, #116]	; 0x74
}

void W25Q128StorageBackend::deselectChip() {
    digitalWrite(cs_pin, HIGH);
    114a:	2101      	movs	r1, #1
    114c:	7a28      	ldrb	r0, [r5, #8]
    uint32_t id = (spiTransfer(0) << 16) | (spiTransfer(0) << 8) | spiTransfer(0);
    114e:	b2e4      	uxtb	r4, r4
    1150:	ea44 040c 	orr.w	r4, r4, ip
    digitalWrite(cs_pin, HIGH);
    1154:	f001 fe80 	bl	2e58 <digitalWrite>
}
    1158:	4620      	mov	r0, r4
    115a:	bd38      	pop	{r3, r4, r5, pc}
    115c:	20002fa0 	.word	0x20002fa0

00001160 <W25Q128StorageBackend::initializeFlash()>:
bool W25Q128StorageBackend::initializeFlash() {
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    SPI.begin();
    1164:	4816      	ldr	r0, [pc, #88]	; (11c0 <W25Q128StorageBackend::initializeFlash()+0x60>)
    1166:	f001 fbe5 	bl	2934 <SPIClass::begin()>
    pinMode(cs_pin, OUTPUT);
    116a:	2101      	movs	r1, #1
    116c:	7a20      	ldrb	r0, [r4, #8]
    116e:	f001 feaf 	bl	2ed0 <pinMode>
    digitalWrite(cs_pin, HIGH);
    1172:	2101      	movs	r1, #1
    1174:	7a20      	ldrb	r0, [r4, #8]
    1176:	f001 fe6f 	bl	2e58 <digitalWrite>
    flash_id = getFlashID();
    117a:	4620      	mov	r0, r4
    117c:	f7ff ffb8 	bl	10f0 <W25Q128StorageBackend::getFlashID()>
    if ((flash_id & 0xFF0000) != 0xEF0000) {
    1180:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
    flash_id = getFlashID();
    1184:	6160      	str	r0, [r4, #20]
    if ((flash_id & 0xFF0000) != 0xEF0000) {
    1186:	f5b3 0f6f 	cmp.w	r3, #15663104	; 0xef0000
    118a:	d104      	bne.n	1196 <W25Q128StorageBackend::initializeFlash()+0x36>
    flash_initialized = true;
    118c:	2301      	movs	r3, #1
    return true;
    118e:	469c      	mov	ip, r3
    flash_initialized = true;
    1190:	7423      	strb	r3, [r4, #16]
}
    1192:	4660      	mov	r0, ip
    1194:	bd38      	pop	{r3, r4, r5, pc}
        strcpy(last_error, "Invalid flash ID - not W25Q128");
    1196:	4d0b      	ldr	r5, [pc, #44]	; (11c4 <W25Q128StorageBackend::initializeFlash()+0x64>)
    1198:	f04f 0c00 	mov.w	ip, #0
    119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    119e:	6520      	str	r0, [r4, #80]	; 0x50
    11a0:	6561      	str	r1, [r4, #84]	; 0x54
    11a2:	65a2      	str	r2, [r4, #88]	; 0x58
    11a4:	65e3      	str	r3, [r4, #92]	; 0x5c
    11a6:	cd07      	ldmia	r5!, {r0, r1, r2}
    11a8:	882b      	ldrh	r3, [r5, #0]
    11aa:	6620      	str	r0, [r4, #96]	; 0x60
}
    11ac:	4660      	mov	r0, ip
        strcpy(last_error, "Invalid flash ID - not W25Q128");
    11ae:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    11b2:	78ab      	ldrb	r3, [r5, #2]
    11b4:	6661      	str	r1, [r4, #100]	; 0x64
    11b6:	66a2      	str	r2, [r4, #104]	; 0x68
    11b8:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
}
    11bc:	bd38      	pop	{r3, r4, r5, pc}
    11be:	bf00      	nop
    11c0:	20002fa0 	.word	0x20002fa0
    11c4:	20000ca0 	.word	0x20000ca0

000011c8 <W25Q128StorageBackend::printFlashInfo()>:
void W25Q128StorageBackend::printFlashInfo() {
    11c8:	b538      	push	{r3, r4, r5, lr}
    11ca:	4c33      	ldr	r4, [pc, #204]	; (1298 <W25Q128StorageBackend::printFlashInfo()+0xd0>)
    11cc:	4605      	mov	r5, r0
    11ce:	2121      	movs	r1, #33	; 0x21
    11d0:	4832      	ldr	r0, [pc, #200]	; (129c <W25Q128StorageBackend::printFlashInfo()+0xd4>)
    11d2:	f003 f89b 	bl	430c <usb_serial_write>
    11d6:	4620      	mov	r0, r4
    11d8:	f001 fd90 	bl	2cfc <Print::println()>
    11dc:	210c      	movs	r1, #12
    11de:	4830      	ldr	r0, [pc, #192]	; (12a0 <W25Q128StorageBackend::printFlashInfo()+0xd8>)
    11e0:	f003 f894 	bl	430c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    11e4:	2300      	movs	r3, #0
    11e6:	2210      	movs	r2, #16
    11e8:	6969      	ldr	r1, [r5, #20]
    11ea:	4620      	mov	r0, r4
    11ec:	f001 fda2 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    11f0:	4620      	mov	r0, r4
    11f2:	f001 fd83 	bl	2cfc <Print::println()>
    11f6:	210e      	movs	r1, #14
    11f8:	482a      	ldr	r0, [pc, #168]	; (12a4 <W25Q128StorageBackend::printFlashInfo()+0xdc>)
    11fa:	f003 f887 	bl	430c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    11fe:	2300      	movs	r3, #0
    1200:	2210      	movs	r2, #16
    1202:	7da9      	ldrb	r1, [r5, #22]
    1204:	4620      	mov	r0, r4
    1206:	f001 fd95 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    120a:	4620      	mov	r0, r4
    120c:	f001 fd76 	bl	2cfc <Print::println()>
    1210:	210b      	movs	r1, #11
    1212:	4825      	ldr	r0, [pc, #148]	; (12a8 <W25Q128StorageBackend::printFlashInfo()+0xe0>)
    1214:	f003 f87a 	bl	430c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1218:	2300      	movs	r3, #0
    121a:	2210      	movs	r2, #16
    121c:	8aa9      	ldrh	r1, [r5, #20]
    121e:	4620      	mov	r0, r4
    1220:	f001 fd88 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    1224:	4620      	mov	r0, r4
    1226:	f001 fd69 	bl	2cfc <Print::println()>
    122a:	210f      	movs	r1, #15
    122c:	481f      	ldr	r0, [pc, #124]	; (12ac <W25Q128StorageBackend::printFlashInfo()+0xe4>)
    122e:	f003 f86d 	bl	430c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1232:	2300      	movs	r3, #0
    1234:	220a      	movs	r2, #10
    1236:	69a9      	ldr	r1, [r5, #24]
    1238:	4620      	mov	r0, r4
    123a:	4d1d      	ldr	r5, [pc, #116]	; (12b0 <W25Q128StorageBackend::printFlashInfo()+0xe8>)
    123c:	f001 fd7a 	bl	2d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1240:	4620      	mov	r0, r4
    1242:	f001 fd5b 	bl	2cfc <Print::println()>
    1246:	210d      	movs	r1, #13
    1248:	481a      	ldr	r0, [pc, #104]	; (12b4 <W25Q128StorageBackend::printFlashInfo()+0xec>)
    124a:	f003 f85f 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    124e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1252:	4620      	mov	r0, r4
    1254:	f001 fd46 	bl	2ce4 <Print::print(long)>
    1258:	2106      	movs	r1, #6
    125a:	4628      	mov	r0, r5
    125c:	f003 f856 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1260:	4620      	mov	r0, r4
    1262:	f001 fd4b 	bl	2cfc <Print::println()>
    1266:	210b      	movs	r1, #11
    1268:	4813      	ldr	r0, [pc, #76]	; (12b8 <W25Q128StorageBackend::printFlashInfo()+0xf0>)
    126a:	f003 f84f 	bl	430c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    126e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1272:	4620      	mov	r0, r4
    1274:	f001 fd36 	bl	2ce4 <Print::print(long)>
    1278:	2106      	movs	r1, #6
    127a:	4628      	mov	r0, r5
    127c:	f003 f846 	bl	430c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1280:	4620      	mov	r0, r4
    1282:	f001 fd3b 	bl	2cfc <Print::println()>
    1286:	2121      	movs	r1, #33	; 0x21
    1288:	480c      	ldr	r0, [pc, #48]	; (12bc <W25Q128StorageBackend::printFlashInfo()+0xf4>)
    128a:	f003 f83f 	bl	430c <usb_serial_write>
    128e:	4620      	mov	r0, r4
}
    1290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1294:	f001 bd32 	b.w	2cfc <Print::println()>
    1298:	20002ff0 	.word	0x20002ff0
    129c:	20000c08 	.word	0x20000c08
    12a0:	20000b58 	.word	0x20000b58
    12a4:	20000c2c 	.word	0x20000c2c
    12a8:	20000c3c 	.word	0x20000c3c
    12ac:	20000c48 	.word	0x20000c48
    12b0:	20000c68 	.word	0x20000c68
    12b4:	20000c58 	.word	0x20000c58
    12b8:	20000c70 	.word	0x20000c70
    12bc:	20000c7c 	.word	0x20000c7c

000012c0 <W25Q128StorageBackend::setCacheSize(unsigned long)>:
    cache_size_limit = std::min(size, MAX_CACHE_SIZE);
    12c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    12c4:	bf28      	it	cs
    12c6:	f44f 1180 	movcs.w	r1, #1048576	; 0x100000
    12ca:	6401      	str	r1, [r0, #64]	; 0x40
}
    12cc:	4770      	bx	lr
    12ce:	bf00      	nop

000012d0 <W25Q128StorageBackend::getCacheHitRate()>:
    uint32_t total = cache_hits + cache_misses;
    12d0:	e9d0 3011 	ldrd	r3, r0, [r0, #68]	; 0x44
    if (total == 0) return 0;
    12d4:	1818      	adds	r0, r3, r0
    12d6:	d004      	beq.n	12e2 <W25Q128StorageBackend::getCacheHitRate()+0x12>
    return (cache_hits * 100) / total;
    12d8:	2264      	movs	r2, #100	; 0x64
    12da:	fb02 f303 	mul.w	r3, r2, r3
    12de:	fbb3 f0f0 	udiv	r0, r3, r0
}
    12e2:	4770      	bx	lr

000012e4 <W25Q128StorageBackend::getErrorCount()>:
}
    12e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    12e6:	4770      	bx	lr

000012e8 <W25Q128StorageBackend::readStatus()>:
    }
    
    return false;
}

uint8_t W25Q128StorageBackend::readStatus() {
    12e8:	b538      	push	{r3, r4, r5, lr}
    digitalWrite(cs_pin, LOW);
    12ea:	2100      	movs	r1, #0
uint8_t W25Q128StorageBackend::readStatus() {
    12ec:	4604      	mov	r4, r0
    digitalWrite(cs_pin, LOW);
    12ee:	7a00      	ldrb	r0, [r0, #8]
    12f0:	f001 fdb2 	bl	2e58 <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    12f4:	4b0a      	ldr	r3, [pc, #40]	; (1320 <W25Q128StorageBackend::readStatus()+0x38>)
		port().TDR = data;
    12f6:	2205      	movs	r2, #5
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    12f8:	681b      	ldr	r3, [r3, #0]
		port().TDR = data;
    12fa:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    12fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    12fe:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    1302:	d0fb      	beq.n	12fc <W25Q128StorageBackend::readStatus()+0x14>
		port().TDR = data;
    1304:	2200      	movs	r2, #0
			if (fifo > 0) return port().RDR;
    1306:	6f59      	ldr	r1, [r3, #116]	; 0x74
		port().TDR = data;
    1308:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    130a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    130c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    1310:	d0fb      	beq.n	130a <W25Q128StorageBackend::readStatus()+0x22>
    1312:	6f5d      	ldr	r5, [r3, #116]	; 0x74
    digitalWrite(cs_pin, HIGH);
    1314:	2101      	movs	r1, #1
    1316:	7a20      	ldrb	r0, [r4, #8]
    1318:	f001 fd9e 	bl	2e58 <digitalWrite>
    selectChip();
    spiTransfer(W25Q128_CMD_READ_STATUS1);
    uint8_t status = spiTransfer(0);
    deselectChip();
    return status;
}
    131c:	b2e8      	uxtb	r0, r5
    131e:	bd38      	pop	{r3, r4, r5, pc}
    1320:	20002fa0 	.word	0x20002fa0

00001324 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]>:
    memcpy(buffer, temp_buffer, length);
    delete[] temp_buffer;
    return true;
}

bool W25Q128StorageBackend::writePage(uint32_t page_address, const uint8_t* buffer, size_t length) {
    1324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1328:	4c2f      	ldr	r4, [pc, #188]	; (13e8 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xc4>)
    132a:	4689      	mov	r9, r1
    132c:	4606      	mov	r6, r0
    digitalWrite(cs_pin, LOW);
    132e:	2100      	movs	r1, #0
    1330:	7a00      	ldrb	r0, [r0, #8]
bool W25Q128StorageBackend::writePage(uint32_t page_address, const uint8_t* buffer, size_t length) {
    1332:	4617      	mov	r7, r2
    1334:	4698      	mov	r8, r3
    digitalWrite(cs_pin, LOW);
    1336:	f001 fd8f 	bl	2e58 <digitalWrite>
    133a:	6823      	ldr	r3, [r4, #0]
		port().TDR = data;
    133c:	2206      	movs	r2, #6
    133e:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1340:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1342:	f410 1ff8 	tst.w	r0, #2031616	; 0x1f0000
    1346:	d0fb      	beq.n	1340 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x1c>
    digitalWrite(cs_pin, HIGH);
    1348:	2101      	movs	r1, #1
    134a:	7a30      	ldrb	r0, [r6, #8]
    134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    134e:	f001 fd83 	bl	2e58 <digitalWrite>
    digitalWrite(cs_pin, LOW);
    1352:	2100      	movs	r1, #0
    1354:	7a30      	ldrb	r0, [r6, #8]
    1356:	f001 fd7f 	bl	2e58 <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    135a:	6824      	ldr	r4, [r4, #0]
		port().TDR = data;
    135c:	2302      	movs	r3, #2
    135e:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1360:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1362:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1366:	d0fb      	beq.n	1360 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x3c>
    1368:	6f63      	ldr	r3, [r4, #116]	; 0x74
		port().TDR = data;
    136a:	f3c9 4307 	ubfx	r3, r9, #16, #8
    136e:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1370:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1372:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1376:	d0fb      	beq.n	1370 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x4c>
    1378:	6f63      	ldr	r3, [r4, #116]	; 0x74
		port().TDR = data;
    137a:	f3c9 2307 	ubfx	r3, r9, #8, #8
    137e:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1380:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1382:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1386:	d0fb      	beq.n	1380 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x5c>
    1388:	fa5f f389 	uxtb.w	r3, r9
    138c:	6f62      	ldr	r2, [r4, #116]	; 0x74
		port().TDR = data;
    138e:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1390:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1392:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1396:	d0fb      	beq.n	1390 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x6c>
    SPI.transfer(data, nullptr, length);
    1398:	4643      	mov	r3, r8
    139a:	4639      	mov	r1, r7
    139c:	6f60      	ldr	r0, [r4, #116]	; 0x74
    139e:	2200      	movs	r2, #0
    13a0:	4811      	ldr	r0, [pc, #68]	; (13e8 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xc4>)
    while ((millis() - start) < timeout) {
    13a2:	f242 750f 	movw	r5, #9999	; 0x270f
    13a6:	4c11      	ldr	r4, [pc, #68]	; (13ec <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xc8>)
    SPI.transfer(data, nullptr, length);
    13a8:	f001 fbde 	bl	2b68 <SPIClass::transfer(void const*, void*, unsigned int)>
    digitalWrite(cs_pin, HIGH);
    13ac:	2101      	movs	r1, #1
    13ae:	7a30      	ldrb	r0, [r6, #8]
    13b0:	f001 fd52 	bl	2e58 <digitalWrite>
    13b4:	6827      	ldr	r7, [r4, #0]
    13b6:	6823      	ldr	r3, [r4, #0]
    while ((millis() - start) < timeout) {
    13b8:	1bdb      	subs	r3, r3, r7
    13ba:	42ab      	cmp	r3, r5
    13bc:	d906      	bls.n	13cc <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xa8>
    13be:	e00f      	b.n	13e0 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xbc>
        delay(1);
    13c0:	f001 fccc 	bl	2d5c <delay>
    13c4:	6823      	ldr	r3, [r4, #0]
    while ((millis() - start) < timeout) {
    13c6:	1bdb      	subs	r3, r3, r7
    13c8:	42ab      	cmp	r3, r5
    13ca:	d809      	bhi.n	13e0 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0xbc>
        uint8_t status = readStatus();
    13cc:	4630      	mov	r0, r6
    13ce:	f7ff ff8b 	bl	12e8 <W25Q128StorageBackend::readStatus()>
    13d2:	4603      	mov	r3, r0
        delay(1);
    13d4:	2001      	movs	r0, #1
        if (!(status & 0x01)) { // WIP bit clear
    13d6:	07db      	lsls	r3, r3, #31
    13d8:	d4f2      	bmi.n	13c0 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]+0x9c>
            return true;
    13da:	2001      	movs	r0, #1
    
    spiWrite(buffer, length);
    deselectChip();
    
    return waitForWriteComplete();
}
    13dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    13e0:	2000      	movs	r0, #0
}
    13e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13e6:	bf00      	nop
    13e8:	20002fa0 	.word	0x20002fa0
    13ec:	20004268 	.word	0x20004268

000013f0 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)>:
bool W25Q128StorageBackend::readPage(uint32_t page_address, uint8_t* buffer, size_t length) {
    13f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    13f4:	460e      	mov	r6, r1
    13f6:	4607      	mov	r7, r0
    digitalWrite(cs_pin, LOW);
    13f8:	2100      	movs	r1, #0
    13fa:	7a00      	ldrb	r0, [r0, #8]
bool W25Q128StorageBackend::readPage(uint32_t page_address, uint8_t* buffer, size_t length) {
    13fc:	4699      	mov	r9, r3
    13fe:	4690      	mov	r8, r2
    digitalWrite(cs_pin, LOW);
    1400:	f001 fd2a 	bl	2e58 <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1404:	4b1c      	ldr	r3, [pc, #112]	; (1478 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x88>)
    1406:	681c      	ldr	r4, [r3, #0]
		port().TDR = data;
    1408:	2303      	movs	r3, #3
    140a:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    140c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    140e:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1412:	d0fb      	beq.n	140c <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x1c>
    1414:	6f63      	ldr	r3, [r4, #116]	; 0x74
		port().TDR = data;
    1416:	f3c6 4307 	ubfx	r3, r6, #16, #8
    141a:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    141c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    141e:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1422:	d0fb      	beq.n	141c <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x2c>
    1424:	6f63      	ldr	r3, [r4, #116]	; 0x74
		port().TDR = data;
    1426:	f3c6 2307 	ubfx	r3, r6, #8, #8
    142a:	6663      	str	r3, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    142c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    142e:	f415 1ff8 	tst.w	r5, #2031616	; 0x1f0000
    1432:	d0fb      	beq.n	142c <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x3c>
    1434:	b2f6      	uxtb	r6, r6
    1436:	6f63      	ldr	r3, [r4, #116]	; 0x74
		port().TDR = data;
    1438:	6666      	str	r6, [r4, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    143a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    143c:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
    1440:	d0fb      	beq.n	143a <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x4a>
    uint8_t* temp_buffer = new uint8_t[length];
    1442:	4648      	mov	r0, r9
    1444:	6f63      	ldr	r3, [r4, #116]	; 0x74
    1446:	f001 fe1f 	bl	3088 <operator new[](unsigned int)>
    144a:	4604      	mov	r4, r0
    SPI.transfer(data, result, length);
    144c:	464b      	mov	r3, r9
    144e:	480a      	ldr	r0, [pc, #40]	; (1478 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)+0x88>)
    1450:	4622      	mov	r2, r4
    1452:	4621      	mov	r1, r4
    1454:	f001 fb88 	bl	2b68 <SPIClass::transfer(void const*, void*, unsigned int)>
    digitalWrite(cs_pin, HIGH);
    1458:	7a38      	ldrb	r0, [r7, #8]
    145a:	2101      	movs	r1, #1
    145c:	f001 fcfc 	bl	2e58 <digitalWrite>
    memcpy(buffer, temp_buffer, length);
    1460:	464a      	mov	r2, r9
    1462:	4621      	mov	r1, r4
    1464:	4640      	mov	r0, r8
    1466:	f001 fd73 	bl	2f50 <memcpy>
    delete[] temp_buffer;
    146a:	4620      	mov	r0, r4
    146c:	f001 fe10 	bl	3090 <operator delete[](void*)>
}
    1470:	2001      	movs	r0, #1
    1472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1476:	bf00      	nop
    1478:	20002fa0 	.word	0x20002fa0

0000147c <W25Q128StorageBackend::findFreeSector()>:
    }
    
    return ~crc;
}

uint32_t W25Q128StorageBackend::findFreeSector() {
    147c:	b430      	push	{r4, r5}
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    147e:	6984      	ldr	r4, [r0, #24]
    1480:	b34c      	cbz	r4, 14d6 <W25Q128StorageBackend::findFreeSector()+0x5a>
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
#endif

      iterator
      begin() _GLIBCXX_NOEXCEPT
      { return iterator(this->_M_impl._M_start._M_p, 0); }
    1482:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
    1486:	2000      	movs	r0, #0
    { return reference(_M_p, 1UL << _M_offset); }
    1488:	f04f 0c01 	mov.w	ip, #1
      _M_p += __n / int(_S_word_bit);
    148c:	462a      	mov	r2, r5
      __n = __n % int(_S_word_bit);
    148e:	4603      	mov	r3, r0
    { return reference(_M_p, 1UL << _M_offset); }
    1490:	fa0c f303 	lsl.w	r3, ip, r3
    { return !!(*_M_p & _M_mask); }
    1494:	6812      	ldr	r2, [r2, #0]
        if (!sector_allocated[sector]) {
    1496:	4213      	tst	r3, r2
    1498:	d01b      	beq.n	14d2 <W25Q128StorageBackend::findFreeSector()+0x56>
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    149a:	3001      	adds	r0, #1
    149c:	42a0      	cmp	r0, r4
      __n = __n % int(_S_word_bit);
    149e:	f000 031f 	and.w	r3, r0, #31
      _M_p += __n / int(_S_word_bit);
    14a2:	4602      	mov	r2, r0
    14a4:	d017      	beq.n	14d6 <W25Q128StorageBackend::findFreeSector()+0x5a>
    14a6:	2800      	cmp	r0, #0
    14a8:	bfb8      	it	lt
    14aa:	f100 021f 	addlt.w	r2, r0, #31
      __n = __n % int(_S_word_bit);
    14ae:	4241      	negs	r1, r0
    14b0:	f001 011f 	and.w	r1, r1, #31
      _M_p += __n / int(_S_word_bit);
    14b4:	ea4f 1262 	mov.w	r2, r2, asr #5
      __n = __n % int(_S_word_bit);
    14b8:	bf58      	it	pl
    14ba:	424b      	negpl	r3, r1
      _M_p += __n / int(_S_word_bit);
    14bc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
      if (__n < 0)
    14c0:	2b00      	cmp	r3, #0
    14c2:	dae5      	bge.n	1490 <W25Q128StorageBackend::findFreeSector()+0x14>
	  __n += int(_S_word_bit);
    14c4:	3320      	adds	r3, #32
	  --_M_p;
    14c6:	3a04      	subs	r2, #4
    { return reference(_M_p, 1UL << _M_offset); }
    14c8:	fa0c f303 	lsl.w	r3, ip, r3
    { return !!(*_M_p & _M_mask); }
    14cc:	6812      	ldr	r2, [r2, #0]
        if (!sector_allocated[sector]) {
    14ce:	4213      	tst	r3, r2
    14d0:	d1e3      	bne.n	149a <W25Q128StorageBackend::findFreeSector()+0x1e>
            return sector;
        }
    }
    return 0xFFFFFFFF; // No free sectors
}
    14d2:	bc30      	pop	{r4, r5}
    14d4:	4770      	bx	lr
    return 0xFFFFFFFF; // No free sectors
    14d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    14da:	bc30      	pop	{r4, r5}
    14dc:	4770      	bx	lr
    14de:	bf00      	nop

000014e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
    14e0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
    14e2:	6884      	ldr	r4, [r0, #8]
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
    14e4:	4606      	mov	r6, r0
      while (__n)
    14e6:	b174      	cbz	r4, 1506 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x26>
      _M_next() const noexcept
    14e8:	4625      	mov	r5, r4
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    14ea:	6824      	ldr	r4, [r4, #0]
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
    14ec:	68eb      	ldr	r3, [r5, #12]
	::operator delete(__p
    14ee:	4618      	mov	r0, r3

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    14f0:	b11b      	cbz	r3, 14fa <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x1a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    14f2:	6969      	ldr	r1, [r5, #20]
    14f4:	1ac9      	subs	r1, r1, r3
    14f6:	f001 fdcd 	bl	3094 <operator delete(void*, unsigned int)>
    14fa:	2120      	movs	r1, #32
    14fc:	4628      	mov	r0, r5
    14fe:	f001 fdc9 	bl	3094 <operator delete(void*, unsigned int)>
      while (__n)
    1502:	2c00      	cmp	r4, #0
    1504:	d1f0      	bne.n	14e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x8>
      __builtin_memset(_M_buckets, 0,
    1506:	6872      	ldr	r2, [r6, #4]
    1508:	2100      	movs	r1, #0
    150a:	6830      	ldr	r0, [r6, #0]
    150c:	0092      	lsls	r2, r2, #2
    150e:	f00c fd99 	bl	e044 <memset>
      _M_element_count = 0;
    1512:	2300      	movs	r3, #0
      _M_before_begin._M_nxt = nullptr;
    1514:	e9c6 3302 	strd	r3, r3, [r6, #8]
    }
    1518:	bd70      	pop	{r4, r5, r6, pc}
    151a:	bf00      	nop

0000151c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1520:	4688      	mov	r8, r1
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
    1522:	6841      	ldr	r1, [r0, #4]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    1524:	6803      	ldr	r3, [r0, #0]
    1526:	b084      	sub	sp, #16
	return _M_hash()(__k);
    1528:	f8d8 6000 	ldr.w	r6, [r8]
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    152c:	4605      	mov	r5, r0
    { return __num % __den; }
    152e:	fbb6 f2f1 	udiv	r2, r6, r1
    1532:	fb01 6212 	mls	r2, r1, r2, r6
    1536:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    153a:	0097      	lsls	r7, r2, #2
      if (!__prev_p)
    153c:	f1bc 0f00 	cmp.w	ip, #0
    1540:	d00f      	beq.n	1562 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x46>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1542:	f8dc 0000 	ldr.w	r0, [ip]
    1546:	6843      	ldr	r3, [r0, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    1548:	429e      	cmp	r6, r3
    154a:	d035      	beq.n	15b8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x9c>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    154c:	6804      	ldr	r4, [r0, #0]
      _M_hash_code(const _Key& __k) const
    154e:	4684      	mov	ip, r0
    1550:	b13c      	cbz	r4, 1562 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x46>
	return _M_hash()(__k);
    1552:	6863      	ldr	r3, [r4, #4]
    { return __num % __den; }
    1554:	4620      	mov	r0, r4
    1556:	fbb3 f4f1 	udiv	r4, r3, r1
    155a:	fb01 3414 	mls	r4, r1, r4, r3
    155e:	42a2      	cmp	r2, r4
    1560:	d0f2      	beq.n	1548 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x2c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    1562:	2020      	movs	r0, #32
    1564:	f001 fd8e 	bl	3084 <operator new(unsigned int)>
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
    1568:	f8d8 3000 	ldr.w	r3, [r8]
    156c:	4604      	mov	r4, r0
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
    156e:	f105 0110 	add.w	r1, r5, #16
    1572:	6043      	str	r3, [r0, #4]
    1574:	2301      	movs	r3, #1
    1576:	9300      	str	r3, [sp, #0]
    _Hash_node_base() noexcept : _M_nxt() { }
    1578:	2300      	movs	r3, #0
    157a:	686a      	ldr	r2, [r5, #4]
    157c:	6003      	str	r3, [r0, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
    157e:	6083      	str	r3, [r0, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
    1580:	6143      	str	r3, [r0, #20]
    1582:	e9c0 3306 	strd	r3, r3, [r0, #24]
    1586:	e9c0 3303 	strd	r3, r3, [r0, #12]
    158a:	68eb      	ldr	r3, [r5, #12]
    158c:	a802      	add	r0, sp, #8
    158e:	f003 faf5 	bl	4b7c <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const>
      if (__do_rehash.first)
    1592:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1596:	b9bb      	cbnz	r3, 15c8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xac>
      if (_M_buckets[__bkt])
    1598:	682b      	ldr	r3, [r5, #0]
    159a:	59da      	ldr	r2, [r3, r7]
    159c:	19d9      	adds	r1, r3, r7
    159e:	b312      	cbz	r2, 15e6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xca>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
    15a0:	6812      	ldr	r2, [r2, #0]
    15a2:	6022      	str	r2, [r4, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
    15a4:	59db      	ldr	r3, [r3, r7]
    15a6:	601c      	str	r4, [r3, #0]
      ++_M_element_count;
    15a8:	68eb      	ldr	r3, [r5, #12]
      return __pos->second;
    15aa:	f104 0008 	add.w	r0, r4, #8
    15ae:	3301      	adds	r3, #1
    15b0:	60eb      	str	r3, [r5, #12]
    }
    15b2:	b004      	add	sp, #16
    15b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
    15b8:	f8dc 0000 	ldr.w	r0, [ip]
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
    15bc:	2800      	cmp	r0, #0
    15be:	d0d0      	beq.n	1562 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x46>
	return __node->_M_v().second;
    15c0:	3008      	adds	r0, #8
    }
    15c2:	b004      	add	sp, #16
    15c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_rehash_aux(__bkt_count, __unique_keys{});
    15c8:	9903      	ldr	r1, [sp, #12]
    15ca:	4628      	mov	r0, r5
    15cc:	f7ff fbe2 	bl	d94 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]>
    { return __num % __den; }
    15d0:	686b      	ldr	r3, [r5, #4]
    15d2:	fbb6 f7f3 	udiv	r7, r6, r3
    15d6:	fb03 6717 	mls	r7, r3, r7, r6
      if (_M_buckets[__bkt])
    15da:	682b      	ldr	r3, [r5, #0]
    15dc:	00bf      	lsls	r7, r7, #2
    15de:	59da      	ldr	r2, [r3, r7]
    15e0:	19d9      	adds	r1, r3, r7
    15e2:	2a00      	cmp	r2, #0
    15e4:	d1dc      	bne.n	15a0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
    15e6:	68aa      	ldr	r2, [r5, #8]
	  _M_before_begin._M_nxt = __node;
    15e8:	60ac      	str	r4, [r5, #8]
	  __node->_M_nxt = _M_before_begin._M_nxt;
    15ea:	6022      	str	r2, [r4, #0]
	  if (__node->_M_nxt)
    15ec:	b13a      	cbz	r2, 15fe <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xe2>
    15ee:	6852      	ldr	r2, [r2, #4]
    15f0:	6868      	ldr	r0, [r5, #4]
    15f2:	fbb2 f6f0 	udiv	r6, r2, r0
    15f6:	fb00 2216 	mls	r2, r0, r6, r2
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
    15fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	  _M_buckets[__bkt] = &_M_before_begin;
    15fe:	f105 0308 	add.w	r3, r5, #8
    1602:	600b      	str	r3, [r1, #0]
    1604:	e7d0      	b.n	15a8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x8c>
    1606:	bf00      	nop

00001608 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)>:
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
    1608:	2900      	cmp	r1, #0
    160a:	d03b      	beq.n	1684 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x7c>
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
    160c:	6882      	ldr	r2, [r0, #8]
    vector<_Tp, _Alloc>::
    160e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1612:	e9d0 5300 	ldrd	r5, r3, [r0]
    1616:	460c      	mov	r4, r1

	  if (__size > max_size() || __navail > max_size() - __size)
    1618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
					 - this->_M_impl._M_finish);
    161c:	1ad2      	subs	r2, r2, r3
    161e:	1b5d      	subs	r5, r3, r5
    1620:	4606      	mov	r6, r0
	    __builtin_unreachable();

	  if (__navail >= __n)
    1622:	4294      	cmp	r4, r2
	  if (__size > max_size() || __navail > max_size() - __size)
    1624:	eba1 0005 	sub.w	r0, r1, r5
	  if (__navail >= __n)
    1628:	d923      	bls.n	1672 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x6a>

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    162a:	42a0      	cmp	r0, r4
    162c:	d351      	bcc.n	16d2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xca>
    162e:	42ac      	cmp	r4, r5
    1630:	4623      	mov	r3, r4
    1632:	bf38      	it	cc
    1634:	462b      	movcc	r3, r5
    1636:	18ef      	adds	r7, r5, r3
    1638:	d24e      	bcs.n	16d8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xd0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    163a:	bb57      	cbnz	r7, 1692 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x8a>
    163c:	46b8      	mov	r8, r7
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    163e:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
    1640:	2c01      	cmp	r4, #1
	      pointer __new_start(this->_M_allocate(__len));
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
		{
		  __try
		    {
		      std::__uninitialized_default_n_a(__new_start + __size,
    1642:	eb08 0005 	add.w	r0, r8, r5
    1646:	f808 1005 	strb.w	r1, [r8, r5]
    164a:	d001      	beq.n	1650 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x48>
      if (const size_t __len = __last - __first)
    164c:	1e62      	subs	r2, r4, #1
    164e:	d138      	bne.n	16c2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xba>
  template <typename _Tp, typename _Up>
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
    1650:	e9d6 9200 	ldrd	r9, r2, [r6]
    1654:	eba2 0209 	sub.w	r2, r2, r9
      if (__count > 0)
    1658:	2a00      	cmp	r2, #0
    165a:	dc23      	bgt.n	16a4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x9c>
	if (__p)
    165c:	f1b9 0f00 	cmp.w	r9, #0
    1660:	d133      	bne.n	16ca <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xc2>
	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
    1662:	4425      	add	r5, r4
	      this->_M_impl._M_start = __new_start;
    1664:	f8c6 8000 	str.w	r8, [r6]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
    1668:	60b7      	str	r7, [r6, #8]
	      this->_M_impl._M_finish = __new_start + __size + __n;
    166a:	4445      	add	r5, r8
    166c:	6075      	str	r5, [r6, #4]
	    }
	}
    }
    166e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1672:	2100      	movs	r1, #0
    1674:	4618      	mov	r0, r3
      if (__n <= 0)
    1676:	2c01      	cmp	r4, #1
    1678:	f800 1b01 	strb.w	r1, [r0], #1
    167c:	d103      	bne.n	1686 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x7e>
	      this->_M_impl._M_finish =
    167e:	6070      	str	r0, [r6, #4]
    }
    1680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1684:	4770      	bx	lr
      if (const size_t __len = __last - __first)
    1686:	1e62      	subs	r2, r4, #1
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
    1688:	eb03 0504 	add.w	r5, r3, r4
      if (const size_t __len = __last - __first)
    168c:	d115      	bne.n	16ba <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xb2>
      return __first + __n;
    168e:	4628      	mov	r0, r5
    1690:	e7f5      	b.n	167e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x76>
    1692:	428f      	cmp	r7, r1
    1694:	bf28      	it	cs
    1696:	460f      	movcs	r7, r1
    1698:	4638      	mov	r0, r7
    169a:	f001 fcf3 	bl	3084 <operator new(unsigned int)>
    169e:	4680      	mov	r8, r0
	      this->_M_impl._M_end_of_storage = __new_start + __len;
    16a0:	4407      	add	r7, r0
    16a2:	e7cc      	b.n	163e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x36>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    16a4:	4649      	mov	r1, r9
    16a6:	4640      	mov	r0, r8
    16a8:	f00c fc50 	bl	df4c <memmove>
			    - this->_M_impl._M_start);
    16ac:	68b1      	ldr	r1, [r6, #8]
    16ae:	eba1 0109 	sub.w	r1, r1, r9
	::operator delete(__p
    16b2:	4648      	mov	r0, r9
    16b4:	f001 fcee 	bl	3094 <operator delete(void*, unsigned int)>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
    16b8:	e7d3      	b.n	1662 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x5a>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    16ba:	f00c fcc3 	bl	e044 <memset>
      return __first + __n;
    16be:	4628      	mov	r0, r5
    16c0:	e7dd      	b.n	167e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x76>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    16c2:	3001      	adds	r0, #1
    16c4:	f00c fcbe 	bl	e044 <memset>
    16c8:	e7c2      	b.n	1650 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x48>
    16ca:	68b1      	ldr	r1, [r6, #8]
    16cc:	eba1 0109 	sub.w	r1, r1, r9
    16d0:	e7ef      	b.n	16b2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xaa>
	  __throw_length_error(__N(__s));
    16d2:	4802      	ldr	r0, [pc, #8]	; (16dc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0xd4>)
    16d4:	f003 f9ec 	bl	4ab0 <std::__throw_length_error(char const*)>

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    16d8:	460f      	mov	r7, r1
    16da:	e7dd      	b.n	1698 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)+0x90>
    16dc:	20000f98 	.word	0x20000f98

000016e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    16e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16e4:	4688      	mov	r8, r1
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
    16e6:	6841      	ldr	r1, [r0, #4]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    16e8:	6803      	ldr	r3, [r0, #0]
    16ea:	b087      	sub	sp, #28
	return _M_hash()(__k);
    16ec:	f8d8 6000 	ldr.w	r6, [r8]
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    16f0:	4604      	mov	r4, r0
    { return __num % __den; }
    16f2:	fbb6 f2f1 	udiv	r2, r6, r1
    16f6:	fb01 6212 	mls	r2, r1, r2, r6
    16fa:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    16fe:	0097      	lsls	r7, r2, #2
      if (!__prev_p)
    1700:	f1bc 0f00 	cmp.w	ip, #0
    1704:	d018      	beq.n	1738 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1706:	f8dc 0000 	ldr.w	r0, [ip]
    170a:	6843      	ldr	r3, [r0, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    170c:	429e      	cmp	r6, r3
    170e:	d00c      	beq.n	172a <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x4a>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    1710:	6805      	ldr	r5, [r0, #0]
    1712:	b18d      	cbz	r5, 1738 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	return _M_hash()(__k);
    1714:	686b      	ldr	r3, [r5, #4]
    { return __num % __den; }
    1716:	4684      	mov	ip, r0
    1718:	fbb3 f0f1 	udiv	r0, r3, r1
    171c:	fb01 3010 	mls	r0, r1, r0, r3
    1720:	4282      	cmp	r2, r0
    1722:	d109      	bne.n	1738 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    1724:	429e      	cmp	r6, r3
    1726:	4628      	mov	r0, r5
    1728:	d1f2      	bne.n	1710 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x30>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
    172a:	f8dc 0000 	ldr.w	r0, [ip]
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
    172e:	b118      	cbz	r0, 1738 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	return __node->_M_v().second;
    1730:	3008      	adds	r0, #8
    }
    1732:	b007      	add	sp, #28
    1734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    1738:	200c      	movs	r0, #12
    _Hash_node_base() noexcept : _M_nxt() { }
    173a:	f04f 0900 	mov.w	r9, #0
    173e:	f001 fca1 	bl	3084 <operator new(unsigned int)>
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
    1742:	f8d8 3000 	ldr.w	r3, [r8]
    1746:	4605      	mov	r5, r0
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
    1748:	f104 0110 	add.w	r1, r4, #16
    174c:	6043      	str	r3, [r0, #4]
    174e:	2301      	movs	r3, #1
    1750:	9300      	str	r3, [sp, #0]
    1752:	f8c0 9000 	str.w	r9, [r0]
    1756:	68e3      	ldr	r3, [r4, #12]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
    1758:	f8c0 9008 	str.w	r9, [r0, #8]
    175c:	a804      	add	r0, sp, #16
    175e:	6862      	ldr	r2, [r4, #4]
    1760:	f003 fa0c 	bl	4b7c <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const>
      if (__do_rehash.first)
    1764:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1768:	b9a3      	cbnz	r3, 1794 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xb4>
      if (_M_buckets[__bkt])
    176a:	f8d4 8000 	ldr.w	r8, [r4]
    176e:	f858 3007 	ldr.w	r3, [r8, r7]
    1772:	eb08 0207 	add.w	r2, r8, r7
    1776:	2b00      	cmp	r3, #0
    1778:	d04a      	beq.n	1810 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x130>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	602b      	str	r3, [r5, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
    177e:	f858 3007 	ldr.w	r3, [r8, r7]
    1782:	601d      	str	r5, [r3, #0]
      ++_M_element_count;
    1784:	68e3      	ldr	r3, [r4, #12]
      return __pos->second;
    1786:	f105 0008 	add.w	r0, r5, #8
    178a:	3301      	adds	r3, #1
    178c:	60e3      	str	r3, [r4, #12]
    }
    178e:	b007      	add	sp, #28
    1790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  _M_rehash(__do_rehash.second, __saved_state);
    1794:	9f05      	ldr	r7, [sp, #20]
	if (__builtin_expect(__bkt_count == 1, false))
    1796:	2f01      	cmp	r7, #1
    1798:	d057      	beq.n	184a <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x16a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    179a:	f1b7 5f00 	cmp.w	r7, #536870912	; 0x20000000
    179e:	d259      	bcs.n	1854 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x174>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    17a0:	00ba      	lsls	r2, r7, #2
    17a2:	4610      	mov	r0, r2
    17a4:	9203      	str	r2, [sp, #12]
    17a6:	f001 fc6d 	bl	3084 <operator new(unsigned int)>
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
    17aa:	4649      	mov	r1, r9
	    return &_M_single_bucket;
    17ac:	f104 0918 	add.w	r9, r4, #24
    17b0:	9a03      	ldr	r2, [sp, #12]
    17b2:	4680      	mov	r8, r0
    17b4:	f00c fc46 	bl	e044 <memset>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
    17b8:	68a0      	ldr	r0, [r4, #8]
      _M_before_begin._M_nxt = nullptr;
    17ba:	2300      	movs	r3, #0
    17bc:	60a3      	str	r3, [r4, #8]
      while (__p)
    17be:	b198      	cbz	r0, 17e8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x108>
      std::size_t __bbegin_bkt = 0;
    17c0:	469c      	mov	ip, r3
	      __new_buckets[__bkt] = &_M_before_begin;
    17c2:	f104 0e08 	add.w	lr, r4, #8
      _M_next() const noexcept
    17c6:	4602      	mov	r2, r0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    17c8:	6800      	ldr	r0, [r0, #0]
    { return __num % __den; }
    17ca:	6853      	ldr	r3, [r2, #4]
    17cc:	fbb3 f1f7 	udiv	r1, r3, r7
    17d0:	fb07 3311 	mls	r3, r7, r1, r3
	  if (!__new_buckets[__bkt])
    17d4:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    17d8:	b351      	cbz	r1, 1830 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x150>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
    17da:	6809      	ldr	r1, [r1, #0]
    17dc:	6011      	str	r1, [r2, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
    17de:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
    17e2:	601a      	str	r2, [r3, #0]
      while (__p)
    17e4:	2800      	cmp	r0, #0
    17e6:	d1ee      	bne.n	17c6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xe6>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    17e8:	e9d4 0100 	ldrd	r0, r1, [r4]
	if (_M_uses_single_bucket(__bkts))
    17ec:	4581      	cmp	r9, r0
    17ee:	d002      	beq.n	17f6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x116>
	::operator delete(__p
    17f0:	0089      	lsls	r1, r1, #2
    17f2:	f001 fc4f 	bl	3094 <operator delete(void*, unsigned int)>
    17f6:	fbb6 f3f7 	udiv	r3, r6, r7
      _M_buckets = __new_buckets;
    17fa:	e9c4 8700 	strd	r8, r7, [r4]
    17fe:	fb07 6713 	mls	r7, r7, r3, r6
      if (_M_buckets[__bkt])
    1802:	00bf      	lsls	r7, r7, #2
    1804:	f858 3007 	ldr.w	r3, [r8, r7]
    1808:	eb08 0207 	add.w	r2, r8, r7
    180c:	2b00      	cmp	r3, #0
    180e:	d1b4      	bne.n	177a <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x9a>
	  __node->_M_nxt = _M_before_begin._M_nxt;
    1810:	68a3      	ldr	r3, [r4, #8]
	  _M_before_begin._M_nxt = __node;
    1812:	60a5      	str	r5, [r4, #8]
	  __node->_M_nxt = _M_before_begin._M_nxt;
    1814:	602b      	str	r3, [r5, #0]
	  if (__node->_M_nxt)
    1816:	b13b      	cbz	r3, 1828 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x148>
    1818:	685b      	ldr	r3, [r3, #4]
    181a:	6861      	ldr	r1, [r4, #4]
    181c:	fbb3 f0f1 	udiv	r0, r3, r1
    1820:	fb01 3310 	mls	r3, r1, r0, r3
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
    1824:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	  _M_buckets[__bkt] = &_M_before_begin;
    1828:	f104 0308 	add.w	r3, r4, #8
    182c:	6013      	str	r3, [r2, #0]
    182e:	e7a9      	b.n	1784 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xa4>
	      __p->_M_nxt = _M_before_begin._M_nxt;
    1830:	68a1      	ldr	r1, [r4, #8]
    1832:	6011      	str	r1, [r2, #0]
	      _M_before_begin._M_nxt = __p;
    1834:	60a2      	str	r2, [r4, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
    1836:	f848 e023 	str.w	lr, [r8, r3, lsl #2]
	      if (__p->_M_nxt)
    183a:	6811      	ldr	r1, [r2, #0]
    183c:	b119      	cbz	r1, 1846 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x166>
		__new_buckets[__bbegin_bkt] = __p;
    183e:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
	      __bbegin_bkt = __bkt;
    1842:	469c      	mov	ip, r3
    1844:	e7ce      	b.n	17e4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x104>
    1846:	469c      	mov	ip, r3
    1848:	e7cc      	b.n	17e4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x104>
	    _M_single_bucket = nullptr;
    184a:	46a0      	mov	r8, r4
    184c:	f848 9f18 	str.w	r9, [r8, #24]!
	    return &_M_single_bucket;
    1850:	46c1      	mov	r9, r8
    1852:	e7b1      	b.n	17b8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xd8>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    1854:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
    1858:	d301      	bcc.n	185e <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x17e>
	      std::__throw_bad_array_new_length();
    185a:	f003 f901 	bl	4a60 <std::__throw_bad_array_new_length()>
	    std::__throw_bad_alloc();
    185e:	f003 f8ef 	bl	4a40 <std::__throw_bad_alloc()>
    1862:	bf00      	nop

00001864 <W25Q128StorageBackend::findStorageEntry(unsigned long)>:
uint32_t W25Q128StorageBackend::findStorageEntry(uint32_t storage_key) {
    1864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1868:	4605      	mov	r5, r0
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
    186a:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
    186e:	b0c3      	sub	sp, #268	; 0x10c
	return _M_hash()(__k);
    1870:	460e      	mov	r6, r1
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    1872:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    1876:	9101      	str	r1, [sp, #4]
    { return __num % __den; }
    1878:	fbb1 f4f0 	udiv	r4, r1, r0
    187c:	fb00 1414 	mls	r4, r0, r4, r1
    1880:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
      if (!__prev_p)
    1884:	b177      	cbz	r7, 18a4 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x40>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1886:	683a      	ldr	r2, [r7, #0]
    1888:	6853      	ldr	r3, [r2, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    188a:	429e      	cmp	r6, r3
    188c:	d044      	beq.n	1918 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xb4>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    188e:	6813      	ldr	r3, [r2, #0]
      _M_hash_code(const _Key& __k) const
    1890:	4617      	mov	r7, r2
    1892:	461a      	mov	r2, r3
    1894:	b133      	cbz	r3, 18a4 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x40>
	return _M_hash()(__k);
    1896:	685b      	ldr	r3, [r3, #4]
    { return __num % __den; }
    1898:	fbb3 f1f0 	udiv	r1, r3, r0
    189c:	fb00 3111 	mls	r1, r0, r1, r3
    18a0:	428c      	cmp	r4, r1
    18a2:	d0f2      	beq.n	188a <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x26>
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    18a4:	f8d5 c018 	ldr.w	ip, [r5, #24]
    18a8:	f1bc 0f00 	cmp.w	ip, #0
    18ac:	d04c      	beq.n	1948 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xe4>
      { return iterator(this->_M_impl._M_start._M_p, 0); }
    18ae:	2400      	movs	r4, #0
    18b0:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
    { return reference(_M_p, 1UL << _M_offset); }
    18b4:	2701      	movs	r7, #1
            if (entry->magic == STORAGE_MAGIC && entry->storage_key == storage_key) {
    18b6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1954 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xf0>
      __n = __n % int(_S_word_bit);
    18ba:	4623      	mov	r3, r4
    { return reference(_M_p, 1UL << _M_offset); }
    18bc:	fa07 f303 	lsl.w	r3, r7, r3
    { return !!(*_M_p & _M_mask); }
    18c0:	6812      	ldr	r2, [r2, #0]
        if (!sector_allocated[sector]) continue;
    18c2:	4213      	tst	r3, r2
    18c4:	d00e      	beq.n	18e4 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x80>
        if (readPage(sector * W25Q128_SECTORS_PER_BLOCK, buffer, W25Q128_PAGE_SIZE)) {
    18c6:	ea4f 1904 	mov.w	r9, r4, lsl #4
    18ca:	f44f 7380 	mov.w	r3, #256	; 0x100
    18ce:	aa02      	add	r2, sp, #8
    18d0:	4628      	mov	r0, r5
    18d2:	4649      	mov	r1, r9
    18d4:	f7ff fd8c 	bl	13f0 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)>
    18d8:	b110      	cbz	r0, 18e0 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x7c>
            if (entry->magic == STORAGE_MAGIC && entry->storage_key == storage_key) {
    18da:	9b02      	ldr	r3, [sp, #8]
    18dc:	4543      	cmp	r3, r8
    18de:	d022      	beq.n	1926 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xc2>
    18e0:	f8d5 c018 	ldr.w	ip, [r5, #24]
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    18e4:	3401      	adds	r4, #1
    18e6:	45a4      	cmp	ip, r4
    18e8:	d92e      	bls.n	1948 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xe4>
      _M_p += __n / int(_S_word_bit);
    18ea:	2c00      	cmp	r4, #0
    18ec:	4622      	mov	r2, r4
      __n = __n % int(_S_word_bit);
    18ee:	f004 031f 	and.w	r3, r4, #31
      _M_p += __n / int(_S_word_bit);
    18f2:	bfb8      	it	lt
    18f4:	f104 021f 	addlt.w	r2, r4, #31
      __n = __n % int(_S_word_bit);
    18f8:	4260      	negs	r0, r4
    18fa:	f000 001f 	and.w	r0, r0, #31
      _M_p += __n / int(_S_word_bit);
    18fe:	ea4f 1162 	mov.w	r1, r2, asr #5
    1902:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
      __n = __n % int(_S_word_bit);
    1906:	bf58      	it	pl
    1908:	4243      	negpl	r3, r0
      _M_p += __n / int(_S_word_bit);
    190a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
      if (__n < 0)
    190e:	2b00      	cmp	r3, #0
    1910:	dad4      	bge.n	18bc <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x58>
	  __n += int(_S_word_bit);
    1912:	3320      	adds	r3, #32
	  --_M_p;
    1914:	3a04      	subs	r2, #4
    1916:	e7d1      	b.n	18bc <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x58>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
    1918:	683b      	ldr	r3, [r7, #0]
    if (it != key_to_sector.end()) {
    191a:	2b00      	cmp	r3, #0
    191c:	d0c2      	beq.n	18a4 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x40>
        return it->second;
    191e:	6898      	ldr	r0, [r3, #8]
}
    1920:	b043      	add	sp, #268	; 0x10c
    1922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (entry->magic == STORAGE_MAGIC && entry->storage_key == storage_key) {
    1926:	9b03      	ldr	r3, [sp, #12]
    1928:	42b3      	cmp	r3, r6
    192a:	d1d9      	bne.n	18e0 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0x7c>
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
    192c:	35e4      	adds	r5, #228	; 0xe4
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
      { return _M_h[__k]; }
    192e:	a901      	add	r1, sp, #4
    1930:	4628      	mov	r0, r5
    1932:	f7ff fed5 	bl	16e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>
    1936:	4603      	mov	r3, r0
    1938:	a901      	add	r1, sp, #4
    193a:	4628      	mov	r0, r5
                key_to_sector[storage_key] = sector * W25Q128_SECTORS_PER_BLOCK;
    193c:	f8c3 9000 	str.w	r9, [r3]
    1940:	f7ff fece 	bl	16e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>
                return key_to_sector[storage_key];
    1944:	6800      	ldr	r0, [r0, #0]
    1946:	e7eb      	b.n	1920 <W25Q128StorageBackend::findStorageEntry(unsigned long)+0xbc>
    return 0xFFFFFFFF; // Not found
    1948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    194c:	b043      	add	sp, #268	; 0x10c
    194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1952:	bf00      	nop
    1954:	57463132 	.word	0x57463132

00001958 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)>:
bool W25Q128StorageBackend::readStorageEntry(uint32_t storage_key, void* data, size_t dataSize) {
    1958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    195c:	b0c0      	sub	sp, #256	; 0x100
    195e:	4604      	mov	r4, r0
    1960:	4617      	mov	r7, r2
    1962:	461e      	mov	r6, r3
    1964:	4688      	mov	r8, r1
    uint32_t page_address = findStorageEntry(storage_key);
    1966:	f7ff ff7d 	bl	1864 <W25Q128StorageBackend::findStorageEntry(unsigned long)>
    if (page_address == 0xFFFFFFFF) {
    196a:	1c45      	adds	r5, r0, #1
    196c:	d057      	beq.n	1a1e <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xc6>
    if (!readPage(page_address, buffer, W25Q128_PAGE_SIZE)) {
    196e:	4601      	mov	r1, r0
    1970:	f44f 7380 	mov.w	r3, #256	; 0x100
    1974:	4620      	mov	r0, r4
    1976:	466a      	mov	r2, sp
    1978:	f7ff fd3a 	bl	13f0 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)>
    197c:	4605      	mov	r5, r0
    197e:	2800      	cmp	r0, #0
    1980:	d06f      	beq.n	1a62 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x10a>
    if (entry->magic != STORAGE_MAGIC || entry->storage_key != storage_key) {
    1982:	4b3d      	ldr	r3, [pc, #244]	; (1a78 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x120>)
    1984:	9a00      	ldr	r2, [sp, #0]
    1986:	429a      	cmp	r2, r3
    1988:	d136      	bne.n	19f8 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xa0>
    198a:	9b01      	ldr	r3, [sp, #4]
    198c:	4543      	cmp	r3, r8
    198e:	d133      	bne.n	19f8 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xa0>
    if (entry->data_size != dataSize) {
    1990:	9b02      	ldr	r3, [sp, #8]
    1992:	42b3      	cmp	r3, r6
    1994:	d154      	bne.n	1a40 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xe8>
    for (size_t i = 0; i < length; i++) {
    1996:	2e00      	cmp	r6, #0
    1998:	d06c      	beq.n	1a74 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x11c>
    199a:	f10d 0213 	add.w	r2, sp, #19
    uint32_t crc = 0xFFFFFFFF;
    199e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
                crc = (crc >> 1) ^ 0xEDB88320;
    19a2:	4b36      	ldr	r3, [pc, #216]	; (1a7c <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x124>)
    19a4:	eb02 0e06 	add.w	lr, r2, r6
        crc ^= bytes[i];
    19a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    19ac:	f04f 0c08 	mov.w	ip, #8
    19b0:	4041      	eors	r1, r0
            if (crc & 1) {
    19b2:	07c8      	lsls	r0, r1, #31
                crc = (crc >> 1) ^ 0xEDB88320;
    19b4:	bf4c      	ite	mi
    19b6:	ea83 0151 	eormi.w	r1, r3, r1, lsr #1
                crc >>= 1;
    19ba:	0849      	lsrpl	r1, r1, #1
        for (int j = 0; j < 8; j++) {
    19bc:	f1bc 0c01 	subs.w	ip, ip, #1
    19c0:	d1f7      	bne.n	19b2 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x5a>
    for (size_t i = 0; i < length; i++) {
    19c2:	4572      	cmp	r2, lr
    19c4:	d1f0      	bne.n	19a8 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x50>
    return ~crc;
    19c6:	43c9      	mvns	r1, r1
    if (entry->checksum != calculated_checksum) {
    19c8:	9b03      	ldr	r3, [sp, #12]
    19ca:	428b      	cmp	r3, r1
    19cc:	d04c      	beq.n	1a68 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x110>
        strcpy(last_error, "Checksum verification failed");
    19ce:	4e2c      	ldr	r6, [pc, #176]	; (1a80 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x128>)
        return false;
    19d0:	2500      	movs	r5, #0
        error_count++;
    19d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    19d4:	3301      	adds	r3, #1
    19d6:	64e3      	str	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Checksum verification failed");
    19d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    19da:	6520      	str	r0, [r4, #80]	; 0x50
    19dc:	6561      	str	r1, [r4, #84]	; 0x54
    19de:	65a2      	str	r2, [r4, #88]	; 0x58
    19e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    19e2:	ce07      	ldmia	r6!, {r0, r1, r2}
    19e4:	7833      	ldrb	r3, [r6, #0]
    19e6:	6620      	str	r0, [r4, #96]	; 0x60
}
    19e8:	4628      	mov	r0, r5
        strcpy(last_error, "Checksum verification failed");
    19ea:	6661      	str	r1, [r4, #100]	; 0x64
    19ec:	66a2      	str	r2, [r4, #104]	; 0x68
    19ee:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    19f2:	b040      	add	sp, #256	; 0x100
    19f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error_count++;
    19f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return false;
    19fa:	2500      	movs	r5, #0
        strcpy(last_error, "Invalid storage entry");
    19fc:	4e21      	ldr	r6, [pc, #132]	; (1a84 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x12c>)
        error_count++;
    19fe:	3301      	adds	r3, #1
    1a00:	64e3      	str	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Invalid storage entry");
    1a02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1a04:	6520      	str	r0, [r4, #80]	; 0x50
    1a06:	65a2      	str	r2, [r4, #88]	; 0x58
    1a08:	6830      	ldr	r0, [r6, #0]
    1a0a:	88b2      	ldrh	r2, [r6, #4]
    1a0c:	6561      	str	r1, [r4, #84]	; 0x54
    1a0e:	65e3      	str	r3, [r4, #92]	; 0x5c
    1a10:	6620      	str	r0, [r4, #96]	; 0x60
    1a12:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    1a16:	4628      	mov	r0, r5
    1a18:	b040      	add	sp, #256	; 0x100
    1a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error_count++;
    1a1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return false;
    1a20:	2500      	movs	r5, #0
        strcpy(last_error, "Storage entry not found");
    1a22:	4e19      	ldr	r6, [pc, #100]	; (1a88 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x130>)
        error_count++;
    1a24:	3301      	adds	r3, #1
    1a26:	64e3      	str	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Storage entry not found");
    1a28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1a2a:	6520      	str	r0, [r4, #80]	; 0x50
    1a2c:	6561      	str	r1, [r4, #84]	; 0x54
    1a2e:	65a2      	str	r2, [r4, #88]	; 0x58
    1a30:	65e3      	str	r3, [r4, #92]	; 0x5c
    1a32:	ce03      	ldmia	r6!, {r0, r1}
    1a34:	6620      	str	r0, [r4, #96]	; 0x60
}
    1a36:	4628      	mov	r0, r5
        strcpy(last_error, "Storage entry not found");
    1a38:	6661      	str	r1, [r4, #100]	; 0x64
}
    1a3a:	b040      	add	sp, #256	; 0x100
    1a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error_count++;
    1a40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return false;
    1a42:	2500      	movs	r5, #0
        strcpy(last_error, "Data size mismatch");
    1a44:	4e11      	ldr	r6, [pc, #68]	; (1a8c <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x134>)
        error_count++;
    1a46:	3301      	adds	r3, #1
    1a48:	64e3      	str	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Data size mismatch");
    1a4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1a4c:	65a2      	str	r2, [r4, #88]	; 0x58
    1a4e:	8832      	ldrh	r2, [r6, #0]
    1a50:	6520      	str	r0, [r4, #80]	; 0x50
    1a52:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    1a56:	78b2      	ldrb	r2, [r6, #2]
    1a58:	6561      	str	r1, [r4, #84]	; 0x54
    1a5a:	65e3      	str	r3, [r4, #92]	; 0x5c
    1a5c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
        return false;
    1a60:	e7d9      	b.n	1a16 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xbe>
        strcpy(last_error, "Failed to read storage entry");
    1a62:	4e0b      	ldr	r6, [pc, #44]	; (1a90 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x138>)
        error_count++;
    1a64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1a66:	e7b5      	b.n	19d4 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x7c>
    memcpy(data, entry->data, dataSize);
    1a68:	4632      	mov	r2, r6
    1a6a:	a905      	add	r1, sp, #20
    1a6c:	4638      	mov	r0, r7
    1a6e:	f001 fa6f 	bl	2f50 <memcpy>
    return true;
    1a72:	e7d0      	b.n	1a16 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0xbe>
    for (size_t i = 0; i < length; i++) {
    1a74:	4631      	mov	r1, r6
    1a76:	e7a7      	b.n	19c8 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)+0x70>
    1a78:	57463132 	.word	0x57463132
    1a7c:	edb88320 	.word	0xedb88320
    1a80:	20000d24 	.word	0x20000d24
    1a84:	20000cf8 	.word	0x20000cf8
    1a88:	20000cc0 	.word	0x20000cc0
    1a8c:	20000d10 	.word	0x20000d10
    1a90:	20000cd8 	.word	0x20000cd8

00001a94 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)>:
bool W25Q128StorageBackend::readData(uint32_t storage_key, void* data, size_t dataSize) {
    1a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!flash_initialized) {
    1a98:	7c07      	ldrb	r7, [r0, #16]
bool W25Q128StorageBackend::readData(uint32_t storage_key, void* data, size_t dataSize) {
    1a9a:	4684      	mov	ip, r0
    if (!flash_initialized) {
    1a9c:	2f00      	cmp	r7, #0
    1a9e:	d052      	beq.n	1b46 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0xb2>
      _M_bucket_index(__hash_code __c) const
    1aa0:	4690      	mov	r8, r2
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    1aa2:	e9d0 4008 	ldrd	r4, r0, [r0, #32]
    1aa6:	fbb1 fef0 	udiv	lr, r1, r0
    1aaa:	fb00 1e1e 	mls	lr, r0, lr, r1
    1aae:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
      if (!__prev_p)
    1ab2:	b172      	cbz	r2, 1ad2 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0x3e>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1ab4:	6815      	ldr	r5, [r2, #0]
    1ab6:	686c      	ldr	r4, [r5, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    1ab8:	42a1      	cmp	r1, r4
    1aba:	d015      	beq.n	1ae8 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0x54>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    1abc:	682e      	ldr	r6, [r5, #0]
      _M_hash_code(const _Key& __k) const
    1abe:	462a      	mov	r2, r5
    1ac0:	b13e      	cbz	r6, 1ad2 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0x3e>
	return _M_hash()(__k);
    1ac2:	6874      	ldr	r4, [r6, #4]
    { return __num % __den; }
    1ac4:	4635      	mov	r5, r6
    1ac6:	fbb4 f6f0 	udiv	r6, r4, r0
    1aca:	fb00 4616 	mls	r6, r0, r6, r4
    1ace:	45b6      	cmp	lr, r6
    1ad0:	d0f2      	beq.n	1ab8 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0x24>
    cache_misses++;
    1ad2:	f8dc 0048 	ldr.w	r0, [ip, #72]	; 0x48
    return readStorageEntry(storage_key, data, dataSize);
    1ad6:	4642      	mov	r2, r8
    cache_misses++;
    1ad8:	3001      	adds	r0, #1
}
    1ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cache_misses++;
    1ade:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
    return readStorageEntry(storage_key, data, dataSize);
    1ae2:	4660      	mov	r0, ip
    1ae4:	f7ff bf38 	b.w	1958 <W25Q128StorageBackend::readStorageEntry(unsigned long, void*, unsigned int)>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
    1ae8:	6810      	ldr	r0, [r2, #0]
    if (cache_it != write_cache.end()) {
    1aea:	2800      	cmp	r0, #0
    1aec:	d0f1      	beq.n	1ad2 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0x3e>
        cache_hits++;
    1aee:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
    1af2:	3201      	adds	r2, #1
    1af4:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1af8:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    1afc:	1a52      	subs	r2, r2, r1
        if (entry.data.size() == dataSize) {
    1afe:	4293      	cmp	r3, r2
    1b00:	d01a      	beq.n	1b38 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0xa4>
            error_count++;
    1b02:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
            return false;
    1b06:	2700      	movs	r7, #0
            strcpy(last_error, "Cache data size mismatch");
    1b08:	4c1a      	ldr	r4, [pc, #104]	; (1b74 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0xe0>)
            error_count++;
    1b0a:	3301      	adds	r3, #1
    1b0c:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
            strcpy(last_error, "Cache data size mismatch");
    1b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1b12:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
    1b16:	f8cc 1054 	str.w	r1, [ip, #84]	; 0x54
    1b1a:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    1b1e:	f8cc 2058 	str.w	r2, [ip, #88]	; 0x58
    1b22:	cc03      	ldmia	r4!, {r0, r1}
    1b24:	7823      	ldrb	r3, [r4, #0]
    1b26:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
}
    1b2a:	4638      	mov	r0, r7
            strcpy(last_error, "Cache data size mismatch");
    1b2c:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
    1b30:	f88c 3068 	strb.w	r3, [ip, #104]	; 0x68
}
    1b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            memcpy(data, entry.data.data(), dataSize);
    1b38:	461a      	mov	r2, r3
    1b3a:	4640      	mov	r0, r8
    1b3c:	f001 fa08 	bl	2f50 <memcpy>
}
    1b40:	4638      	mov	r0, r7
    1b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error_count++;
    1b46:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    1b48:	4c0b      	ldr	r4, [pc, #44]	; (1b78 <W25Q128StorageBackend::readData(unsigned long, void*, unsigned int)+0xe4>)
        error_count++;
    1b4a:	3301      	adds	r3, #1
    1b4c:	64c3      	str	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    1b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1b50:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
    1b54:	f8cc 2058 	str.w	r2, [ip, #88]	; 0x58
    1b58:	6820      	ldr	r0, [r4, #0]
    1b5a:	88a2      	ldrh	r2, [r4, #4]
    1b5c:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
}
    1b60:	4638      	mov	r0, r7
        strcpy(last_error, "Flash not initialized");
    1b62:	f8cc 1054 	str.w	r1, [ip, #84]	; 0x54
    1b66:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    1b6a:	f8ac 2064 	strh.w	r2, [ip, #100]	; 0x64
}
    1b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b72:	bf00      	nop
    1b74:	20000db4 	.word	0x20000db4
    1b78:	20000d9c 	.word	0x20000d9c

00001b7c <W25Q128StorageBackend::deleteStorageEntry(unsigned long)>:
bool W25Q128StorageBackend::deleteStorageEntry(uint32_t storage_key) {
    1b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b7e:	4604      	mov	r4, r0
    1b80:	460d      	mov	r5, r1
    uint32_t page_address = findStorageEntry(storage_key);
    1b82:	f7ff fe6f 	bl	1864 <W25Q128StorageBackend::findStorageEntry(unsigned long)>
    if (page_address == 0xFFFFFFFF) {
    1b86:	1c43      	adds	r3, r0, #1
    1b88:	d049      	beq.n	1c1e <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0xa2>
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
    1b8a:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
      _M_p += __n / int(_S_word_bit);
    1b8e:	0a47      	lsrs	r7, r0, #9
    1b90:	f8d4 60d0 	ldr.w	r6, [r4, #208]	; 0xd0
      __n = __n % int(_S_word_bit);
    1b94:	f3c0 1004 	ubfx	r0, r0, #4, #5
    { return reference(_M_p, 1UL << _M_offset); }
    1b98:	2101      	movs	r1, #1
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    1b9a:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	; 0xe4
	*_M_p &= ~_M_mask;
    1b9e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    { return reference(_M_p, 1UL << _M_offset); }
    1ba2:	4081      	lsls	r1, r0
    1ba4:	fbb5 fcf2 	udiv	ip, r5, r2
	*_M_p &= ~_M_mask;
    1ba8:	ea23 0301 	bic.w	r3, r3, r1
    1bac:	fb02 5c1c 	mls	ip, r2, ip, r5
    1bb0:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
    1bb4:	f85e 702c 	ldr.w	r7, [lr, ip, lsl #2]
      if (!__prev_p)
    1bb8:	b17f      	cbz	r7, 1bda <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x5e>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1bba:	6839      	ldr	r1, [r7, #0]
    1bbc:	463e      	mov	r6, r7
    1bbe:	684b      	ldr	r3, [r1, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    1bc0:	429d      	cmp	r5, r3
    1bc2:	d00f      	beq.n	1be4 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x68>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    1bc4:	6808      	ldr	r0, [r1, #0]
      _M_hash_code(const _Key& __k) const
    1bc6:	460e      	mov	r6, r1
    1bc8:	b138      	cbz	r0, 1bda <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x5e>
	return _M_hash()(__k);
    1bca:	6843      	ldr	r3, [r0, #4]
    { return __num % __den; }
    1bcc:	4601      	mov	r1, r0
    1bce:	fbb3 f0f2 	udiv	r0, r3, r2
    1bd2:	fb02 3010 	mls	r0, r2, r0, r3
    1bd6:	4584      	cmp	ip, r0
    1bd8:	d0f2      	beq.n	1bc0 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x44>
    used_sectors--;
    1bda:	69e3      	ldr	r3, [r4, #28]
    return true;
    1bdc:	2001      	movs	r0, #1
    used_sectors--;
    1bde:	3b01      	subs	r3, #1
    1be0:	61e3      	str	r3, [r4, #28]
}
    1be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__prev_n == _M_buckets[__bkt])
    1be4:	42b7      	cmp	r7, r6
      __node_ptr __n = static_cast<__node_ptr>(__prev_n->_M_nxt);
    1be6:	6830      	ldr	r0, [r6, #0]
      if (__prev_n == _M_buckets[__bkt])
    1be8:	d01b      	beq.n	1c22 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0xa6>
      else if (__n->_M_nxt)
    1bea:	6803      	ldr	r3, [r0, #0]
    1bec:	b14b      	cbz	r3, 1c02 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x86>
    1bee:	6859      	ldr	r1, [r3, #4]
    1bf0:	fbb1 f5f2 	udiv	r5, r1, r2
    1bf4:	fb02 1115 	mls	r1, r2, r5, r1
	  if (__next_bkt != __bkt)
    1bf8:	458c      	cmp	ip, r1
    1bfa:	d002      	beq.n	1c02 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x86>
	    _M_buckets[__next_bkt] = __prev_n;
    1bfc:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
      __prev_n->_M_nxt = __n->_M_nxt;
    1c00:	6803      	ldr	r3, [r0, #0]
    1c02:	6033      	str	r3, [r6, #0]
	::operator delete(__p
    1c04:	210c      	movs	r1, #12
    1c06:	f001 fa45 	bl	3094 <operator delete(void*, unsigned int)>
      --_M_element_count;
    1c0a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    return true;
    1c0e:	2001      	movs	r0, #1
    1c10:	3b01      	subs	r3, #1
    1c12:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    used_sectors--;
    1c16:	69e3      	ldr	r3, [r4, #28]
    1c18:	3b01      	subs	r3, #1
    1c1a:	61e3      	str	r3, [r4, #28]
    return true;
    1c1c:	e7e1      	b.n	1be2 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x66>
        return false; // Not found
    1c1e:	2000      	movs	r0, #0
}
    1c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    1c22:	6803      	ldr	r3, [r0, #0]
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
    1c24:	b1ab      	cbz	r3, 1c52 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0xd6>
    { return __num % __den; }
    1c26:	6859      	ldr	r1, [r3, #4]
    1c28:	fbb1 f5f2 	udiv	r5, r1, r2
    1c2c:	fb02 1115 	mls	r1, r2, r5, r1
      if (!__next || __next_bkt != __bkt)
    1c30:	458c      	cmp	ip, r1
    1c32:	d0e6      	beq.n	1c02 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x86>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
    1c34:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
	  if (&_M_before_begin == _M_buckets[__bkt])
    1c38:	f85e 202c 	ldr.w	r2, [lr, ip, lsl #2]
    1c3c:	f104 01ec 	add.w	r1, r4, #236	; 0xec
    1c40:	428a      	cmp	r2, r1
	    _M_before_begin._M_nxt = __next;
    1c42:	bf08      	it	eq
    1c44:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	  _M_buckets[__bkt] = nullptr;
    1c48:	2300      	movs	r3, #0
    1c4a:	f84e 302c 	str.w	r3, [lr, ip, lsl #2]
      __prev_n->_M_nxt = __n->_M_nxt;
    1c4e:	6803      	ldr	r3, [r0, #0]
    }
    1c50:	e7d7      	b.n	1c02 <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0x86>
    1c52:	4632      	mov	r2, r6
    1c54:	e7f2      	b.n	1c3c <W25Q128StorageBackend::deleteStorageEntry(unsigned long)+0xc0>
    1c56:	bf00      	nop

00001c58 <W25Q128StorageBackend::deleteData(unsigned long)>:
bool W25Q128StorageBackend::deleteData(uint32_t storage_key) {
    1c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!flash_initialized) {
    1c5a:	7c06      	ldrb	r6, [r0, #16]
bool W25Q128StorageBackend::deleteData(uint32_t storage_key) {
    1c5c:	4604      	mov	r4, r0
    if (!flash_initialized) {
    1c5e:	2e00      	cmp	r6, #0
    1c60:	d045      	beq.n	1cee <W25Q128StorageBackend::deleteData(unsigned long)+0x96>
      _M_bucket_index(__hash_code __c) const
    1c62:	460d      	mov	r5, r1
      __node_base_ptr __prev_p = _M_buckets[__bkt];
    1c64:	e9d0 e208 	ldrd	lr, r2, [r0, #32]
    1c68:	fbb1 f0f2 	udiv	r0, r1, r2
    1c6c:	fb02 1010 	mls	r0, r2, r0, r1
    1c70:	f85e c020 	ldr.w	ip, [lr, r0, lsl #2]
      if (!__prev_p)
    1c74:	f1bc 0f00 	cmp.w	ip, #0
    1c78:	d010      	beq.n	1c9c <W25Q128StorageBackend::deleteData(unsigned long)+0x44>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    1c7a:	f8dc 1000 	ldr.w	r1, [ip]
    1c7e:	4667      	mov	r7, ip
    1c80:	684b      	ldr	r3, [r1, #4]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    1c82:	42ab      	cmp	r3, r5
    1c84:	d010      	beq.n	1ca8 <W25Q128StorageBackend::deleteData(unsigned long)+0x50>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
    1c86:	680e      	ldr	r6, [r1, #0]
      _M_hash_code(const _Key& __k) const
    1c88:	460f      	mov	r7, r1
    1c8a:	b13e      	cbz	r6, 1c9c <W25Q128StorageBackend::deleteData(unsigned long)+0x44>
	return _M_hash()(__k);
    1c8c:	6873      	ldr	r3, [r6, #4]
    { return __num % __den; }
    1c8e:	4631      	mov	r1, r6
    1c90:	fbb3 f6f2 	udiv	r6, r3, r2
    1c94:	fb02 3616 	mls	r6, r2, r6, r3
    1c98:	42b0      	cmp	r0, r6
    1c9a:	d0f2      	beq.n	1c82 <W25Q128StorageBackend::deleteData(unsigned long)+0x2a>
    return deleteStorageEntry(storage_key);
    1c9c:	4629      	mov	r1, r5
    1c9e:	4620      	mov	r0, r4
}
    1ca0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return deleteStorageEntry(storage_key);
    1ca4:	f7ff bf6a 	b.w	1b7c <W25Q128StorageBackend::deleteStorageEntry(unsigned long)>
      if (__prev_n == _M_buckets[__bkt])
    1ca8:	45bc      	cmp	ip, r7
      __node_ptr __n = static_cast<__node_ptr>(__prev_n->_M_nxt);
    1caa:	683e      	ldr	r6, [r7, #0]
      if (__prev_n == _M_buckets[__bkt])
    1cac:	d02f      	beq.n	1d0e <W25Q128StorageBackend::deleteData(unsigned long)+0xb6>
      else if (__n->_M_nxt)
    1cae:	6833      	ldr	r3, [r6, #0]
    1cb0:	b14b      	cbz	r3, 1cc6 <W25Q128StorageBackend::deleteData(unsigned long)+0x6e>
    1cb2:	6859      	ldr	r1, [r3, #4]
    1cb4:	fbb1 fcf2 	udiv	ip, r1, r2
    1cb8:	fb02 111c 	mls	r1, r2, ip, r1
	  if (__next_bkt != __bkt)
    1cbc:	4288      	cmp	r0, r1
    1cbe:	d002      	beq.n	1cc6 <W25Q128StorageBackend::deleteData(unsigned long)+0x6e>
	    _M_buckets[__next_bkt] = __prev_n;
    1cc0:	f84e 7021 	str.w	r7, [lr, r1, lsl #2]
      __prev_n->_M_nxt = __n->_M_nxt;
    1cc4:	6833      	ldr	r3, [r6, #0]
	_M_deallocate(_M_impl._M_start,
    1cc6:	68f0      	ldr	r0, [r6, #12]
    1cc8:	603b      	str	r3, [r7, #0]
	if (__p)
    1cca:	b118      	cbz	r0, 1cd4 <W25Q128StorageBackend::deleteData(unsigned long)+0x7c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1ccc:	6971      	ldr	r1, [r6, #20]
    1cce:	1a09      	subs	r1, r1, r0
    1cd0:	f001 f9e0 	bl	3094 <operator delete(void*, unsigned int)>
    1cd4:	4630      	mov	r0, r6
    1cd6:	2120      	movs	r1, #32
    1cd8:	f001 f9dc 	bl	3094 <operator delete(void*, unsigned int)>
      --_M_element_count;
    1cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1cde:	4629      	mov	r1, r5
    1ce0:	4620      	mov	r0, r4
    1ce2:	3b01      	subs	r3, #1
    1ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    1ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return deleteStorageEntry(storage_key);
    1cea:	f7ff bf47 	b.w	1b7c <W25Q128StorageBackend::deleteStorageEntry(unsigned long)>
        error_count++;
    1cee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    1cf0:	4d13      	ldr	r5, [pc, #76]	; (1d40 <W25Q128StorageBackend::deleteData(unsigned long)+0xe8>)
        error_count++;
    1cf2:	3301      	adds	r3, #1
    1cf4:	64c3      	str	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    1cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1cf8:	6520      	str	r0, [r4, #80]	; 0x50
    1cfa:	65a2      	str	r2, [r4, #88]	; 0x58
    1cfc:	6828      	ldr	r0, [r5, #0]
    1cfe:	88aa      	ldrh	r2, [r5, #4]
    1d00:	6620      	str	r0, [r4, #96]	; 0x60
}
    1d02:	4630      	mov	r0, r6
        strcpy(last_error, "Flash not initialized");
    1d04:	6561      	str	r1, [r4, #84]	; 0x54
    1d06:	65e3      	str	r3, [r4, #92]	; 0x5c
    1d08:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    1d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    1d0e:	6833      	ldr	r3, [r6, #0]
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
    1d10:	b1a3      	cbz	r3, 1d3c <W25Q128StorageBackend::deleteData(unsigned long)+0xe4>
    { return __num % __den; }
    1d12:	6859      	ldr	r1, [r3, #4]
    1d14:	fbb1 fcf2 	udiv	ip, r1, r2
    1d18:	fb02 111c 	mls	r1, r2, ip, r1
      if (!__next || __next_bkt != __bkt)
    1d1c:	4288      	cmp	r0, r1
    1d1e:	d0d2      	beq.n	1cc6 <W25Q128StorageBackend::deleteData(unsigned long)+0x6e>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
    1d20:	f84e 7021 	str.w	r7, [lr, r1, lsl #2]
	  if (&_M_before_begin == _M_buckets[__bkt])
    1d24:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
    1d28:	f104 0128 	add.w	r1, r4, #40	; 0x28
    1d2c:	428a      	cmp	r2, r1
	    _M_before_begin._M_nxt = __next;
    1d2e:	bf08      	it	eq
    1d30:	62a3      	streq	r3, [r4, #40]	; 0x28
	  _M_buckets[__bkt] = nullptr;
    1d32:	2300      	movs	r3, #0
    1d34:	f84e 3020 	str.w	r3, [lr, r0, lsl #2]
      __prev_n->_M_nxt = __n->_M_nxt;
    1d38:	6833      	ldr	r3, [r6, #0]
    }
    1d3a:	e7c4      	b.n	1cc6 <W25Q128StorageBackend::deleteData(unsigned long)+0x6e>
    1d3c:	463a      	mov	r2, r7
    1d3e:	e7f3      	b.n	1d28 <W25Q128StorageBackend::deleteData(unsigned long)+0xd0>
    1d40:	20000d9c 	.word	0x20000d9c

00001d44 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)>:
bool W25Q128StorageBackend::writeStorageEntry(uint32_t storage_key, const void* data, size_t dataSize) {
    1d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d48:	b083      	sub	sp, #12
    1d4a:	469b      	mov	fp, r3
    1d4c:	4607      	mov	r7, r0
    1d4e:	4692      	mov	sl, r2
    1d50:	9101      	str	r1, [sp, #4]
    uint32_t sector = findFreeSector();
    1d52:	f7ff fb93 	bl	147c <W25Q128StorageBackend::findFreeSector()>
    if (sector == 0xFFFFFFFF) {
    1d56:	1c43      	adds	r3, r0, #1
    1d58:	f000 8094 	beq.w	1e84 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x140>
    size_t entry_size = sizeof(StorageEntry) + dataSize;
    1d5c:	f10b 0914 	add.w	r9, fp, #20
    uint8_t* entry_buffer = new uint8_t[entry_size];
    1d60:	4680      	mov	r8, r0
    1d62:	4648      	mov	r0, r9
    1d64:	f001 f990 	bl	3088 <operator new[](unsigned int)>
    entry->magic = STORAGE_MAGIC;
    1d68:	2332      	movs	r3, #50	; 0x32
    uint8_t* entry_buffer = new uint8_t[entry_size];
    1d6a:	4606      	mov	r6, r0
    entry->data_size = dataSize;
    1d6c:	f8c0 b008 	str.w	fp, [r0, #8]
    entry->magic = STORAGE_MAGIC;
    1d70:	7003      	strb	r3, [r0, #0]
    1d72:	2331      	movs	r3, #49	; 0x31
    1d74:	7043      	strb	r3, [r0, #1]
    1d76:	2346      	movs	r3, #70	; 0x46
    1d78:	7083      	strb	r3, [r0, #2]
    1d7a:	2357      	movs	r3, #87	; 0x57
    1d7c:	70c3      	strb	r3, [r0, #3]
    entry->storage_key = storage_key;
    1d7e:	9b01      	ldr	r3, [sp, #4]
    1d80:	6043      	str	r3, [r0, #4]
    for (size_t i = 0; i < length; i++) {
    1d82:	f1bb 0f00 	cmp.w	fp, #0
    1d86:	f000 8091 	beq.w	1eac <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x168>
    1d8a:	eb0a 020b 	add.w	r2, sl, fp
    1d8e:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
    uint32_t crc = 0xFFFFFFFF;
    1d92:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
                crc = (crc >> 1) ^ 0xEDB88320;
    1d96:	4c4c      	ldr	r4, [pc, #304]	; (1ec8 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x184>)
    1d98:	3a01      	subs	r2, #1
        crc ^= bytes[i];
    1d9a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    1d9e:	f04f 0e08 	mov.w	lr, #8
    1da2:	ea8c 0c03 	eor.w	ip, ip, r3
            if (crc & 1) {
    1da6:	f01c 0f01 	tst.w	ip, #1
                crc = (crc >> 1) ^ 0xEDB88320;
    1daa:	bf14      	ite	ne
    1dac:	ea84 0c5c 	eorne.w	ip, r4, ip, lsr #1
                crc >>= 1;
    1db0:	ea4f 0c5c 	moveq.w	ip, ip, lsr #1
        for (int j = 0; j < 8; j++) {
    1db4:	f1be 0e01 	subs.w	lr, lr, #1
    1db8:	d1f5      	bne.n	1da6 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x62>
    for (size_t i = 0; i < length; i++) {
    1dba:	42aa      	cmp	r2, r5
    1dbc:	d1ed      	bne.n	1d9a <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x56>
    1dbe:	4b43      	ldr	r3, [pc, #268]	; (1ecc <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x188>)
    return ~crc;
    1dc0:	ea6f 0c0c 	mvn.w	ip, ip
    memcpy(entry->data, data, dataSize);
    1dc4:	465a      	mov	r2, fp
    1dc6:	4651      	mov	r1, sl
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	f106 0014 	add.w	r0, r6, #20
    entry->checksum = calculateChecksum(data, dataSize);
    1dce:	f8c6 c00c 	str.w	ip, [r6, #12]
    entry->timestamp = millis();
    1dd2:	6133      	str	r3, [r6, #16]
    memcpy(entry->data, data, dataSize);
    1dd4:	f001 f8bc 	bl	2f50 <memcpy>
    if (length > W25Q128_PAGE_SIZE) {
    1dd8:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
    1ddc:	d917      	bls.n	1e0e <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0xca>
    delete[] entry_buffer;
    1dde:	4630      	mov	r0, r6
    1de0:	f001 f956 	bl	3090 <operator delete[](void*)>
        error_count++;
    1de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1de6:	2500      	movs	r5, #0
        strcpy(last_error, "Failed to write storage entry");
    1de8:	4c39      	ldr	r4, [pc, #228]	; (1ed0 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x18c>)
        error_count++;
    1dea:	3301      	adds	r3, #1
    1dec:	64fb      	str	r3, [r7, #76]	; 0x4c
        strcpy(last_error, "Failed to write storage entry");
    1dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1df0:	6538      	str	r0, [r7, #80]	; 0x50
    1df2:	6579      	str	r1, [r7, #84]	; 0x54
    1df4:	65ba      	str	r2, [r7, #88]	; 0x58
    1df6:	65fb      	str	r3, [r7, #92]	; 0x5c
    1df8:	cc07      	ldmia	r4!, {r0, r1, r2}
    1dfa:	8823      	ldrh	r3, [r4, #0]
    1dfc:	6638      	str	r0, [r7, #96]	; 0x60
}
    1dfe:	4628      	mov	r0, r5
        strcpy(last_error, "Failed to write storage entry");
    1e00:	6679      	str	r1, [r7, #100]	; 0x64
    1e02:	66ba      	str	r2, [r7, #104]	; 0x68
    1e04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
}
    1e08:	b003      	add	sp, #12
    1e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t page_address = sector * W25Q128_SECTORS_PER_BLOCK;
    1e0e:	ea4f 1408 	mov.w	r4, r8, lsl #4
    1e12:	464b      	mov	r3, r9
    1e14:	4632      	mov	r2, r6
    1e16:	4621      	mov	r1, r4
    1e18:	4638      	mov	r0, r7
    1e1a:	f7ff fa83 	bl	1324 <W25Q128StorageBackend::writePage(unsigned long, unsigned char const*, unsigned int) [clone .part.0]>
    1e1e:	4605      	mov	r5, r0
    delete[] entry_buffer;
    1e20:	4630      	mov	r0, r6
    1e22:	f001 f935 	bl	3090 <operator delete[](void*)>
    if (success) {
    1e26:	2d00      	cmp	r5, #0
    1e28:	d0dc      	beq.n	1de4 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0xa0>
      _M_p += __n / int(_S_word_bit);
    1e2a:	f1b8 0f00 	cmp.w	r8, #0
    1e2e:	4643      	mov	r3, r8
    1e30:	bfb8      	it	lt
    1e32:	f108 031f 	addlt.w	r3, r8, #31
    1e36:	115a      	asrs	r2, r3, #5
      __n = __n % int(_S_word_bit);
    1e38:	f1d8 0300 	rsbs	r3, r8, #0
    1e3c:	f008 081f 	and.w	r8, r8, #31
    1e40:	f003 031f 	and.w	r3, r3, #31
    1e44:	bf58      	it	pl
    1e46:	f1c3 0800 	rsbpl	r8, r3, #0
      _M_p += __n / int(_S_word_bit);
    1e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      if (__n < 0)
    1e4e:	f1b8 0f00 	cmp.w	r8, #0
      _M_p += __n / int(_S_word_bit);
    1e52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      if (__n < 0)
    1e56:	da02      	bge.n	1e5e <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x11a>
	  __n += int(_S_word_bit);
    1e58:	f108 0820 	add.w	r8, r8, #32
	  --_M_p;
    1e5c:	3b04      	subs	r3, #4
    { return reference(_M_p, 1UL << _M_offset); }
    1e5e:	2101      	movs	r1, #1
	*_M_p |= _M_mask;
    1e60:	681a      	ldr	r2, [r3, #0]
    1e62:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
    { return reference(_M_p, 1UL << _M_offset); }
    1e66:	fa01 f108 	lsl.w	r1, r1, r8
	*_M_p |= _M_mask;
    1e6a:	430a      	orrs	r2, r1
    1e6c:	a901      	add	r1, sp, #4
    1e6e:	601a      	str	r2, [r3, #0]
    1e70:	f7ff fc36 	bl	16e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>
        key_to_sector[storage_key] = page_address;
    1e74:	6004      	str	r4, [r0, #0]
        used_sectors++;
    1e76:	69fb      	ldr	r3, [r7, #28]
}
    1e78:	4628      	mov	r0, r5
        used_sectors++;
    1e7a:	3301      	adds	r3, #1
    1e7c:	61fb      	str	r3, [r7, #28]
}
    1e7e:	b003      	add	sp, #12
    1e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        error_count++;
    1e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        return false;
    1e86:	2500      	movs	r5, #0
        strcpy(last_error, "No free sectors available");
    1e88:	4c12      	ldr	r4, [pc, #72]	; (1ed4 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x190>)
        error_count++;
    1e8a:	3301      	adds	r3, #1
    1e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
        strcpy(last_error, "No free sectors available");
    1e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1e90:	6538      	str	r0, [r7, #80]	; 0x50
    1e92:	6579      	str	r1, [r7, #84]	; 0x54
    1e94:	65fb      	str	r3, [r7, #92]	; 0x5c
    1e96:	65ba      	str	r2, [r7, #88]	; 0x58
    1e98:	cc03      	ldmia	r4!, {r0, r1}
    1e9a:	8823      	ldrh	r3, [r4, #0]
    1e9c:	6638      	str	r0, [r7, #96]	; 0x60
}
    1e9e:	4628      	mov	r0, r5
        strcpy(last_error, "No free sectors available");
    1ea0:	6679      	str	r1, [r7, #100]	; 0x64
    1ea2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
}
    1ea6:	b003      	add	sp, #12
    1ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eac:	4b07      	ldr	r3, [pc, #28]	; (1ecc <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0x188>)
    uint32_t page_address = sector * W25Q128_SECTORS_PER_BLOCK;
    1eae:	ea4f 1408 	mov.w	r4, r8, lsl #4
    entry->checksum = calculateChecksum(data, dataSize);
    1eb2:	f880 b00c 	strb.w	fp, [r0, #12]
    1eb6:	681b      	ldr	r3, [r3, #0]
    1eb8:	f880 b00d 	strb.w	fp, [r0, #13]
    1ebc:	f880 b00e 	strb.w	fp, [r0, #14]
    1ec0:	f880 b00f 	strb.w	fp, [r0, #15]
    entry->timestamp = millis();
    1ec4:	6103      	str	r3, [r0, #16]
    if (length > W25Q128_PAGE_SIZE) {
    1ec6:	e7a4      	b.n	1e12 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)+0xce>
    1ec8:	edb88320 	.word	0xedb88320
    1ecc:	20004268 	.word	0x20004268
    1ed0:	20000d60 	.word	0x20000d60
    1ed4:	20000d44 	.word	0x20000d44

00001ed8 <W25Q128StorageBackend::flush() [clone .part.0]>:
void W25Q128StorageBackend::flush() {
    1ed8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
    1eda:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (auto& pair : write_cache) {
    1edc:	b194      	cbz	r4, 1f04 <W25Q128StorageBackend::flush() [clone .part.0]+0x2c>
    1ede:	4605      	mov	r5, r0
            entry.dirty = false;
    1ee0:	2600      	movs	r6, #0
    1ee2:	e001      	b.n	1ee8 <W25Q128StorageBackend::flush() [clone .part.0]+0x10>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    1ee4:	6824      	ldr	r4, [r4, #0]
    for (auto& pair : write_cache) {
    1ee6:	b16c      	cbz	r4, 1f04 <W25Q128StorageBackend::flush() [clone .part.0]+0x2c>
        if (entry.dirty) {
    1ee8:	7f23      	ldrb	r3, [r4, #28]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d0fa      	beq.n	1ee4 <W25Q128StorageBackend::flush() [clone .part.0]+0xc>
            writeStorageEntry(entry.storage_key, entry.data.data(), entry.data.size());
    1eee:	68a1      	ldr	r1, [r4, #8]
    1ef0:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1ef2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1ef6:	1a9b      	subs	r3, r3, r2
    1ef8:	f7ff ff24 	bl	1d44 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)>
            entry.dirty = false;
    1efc:	7726      	strb	r6, [r4, #28]
    1efe:	6824      	ldr	r4, [r4, #0]
    for (auto& pair : write_cache) {
    1f00:	2c00      	cmp	r4, #0
    1f02:	d1f1      	bne.n	1ee8 <W25Q128StorageBackend::flush() [clone .part.0]+0x10>
}
    1f04:	bd70      	pop	{r4, r5, r6, pc}
    1f06:	bf00      	nop

00001f08 <W25Q128StorageBackend::flush()>:
    if (!cache_enabled) return;
    1f08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    1f0c:	b10b      	cbz	r3, 1f12 <W25Q128StorageBackend::flush()+0xa>
    1f0e:	f7ff bfe3 	b.w	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
}
    1f12:	4770      	bx	lr

00001f14 <W25Q128StorageBackend::~W25Q128StorageBackend()>:
W25Q128StorageBackend::~W25Q128StorageBackend() {
    1f14:	4a20      	ldr	r2, [pc, #128]	; (1f98 <W25Q128StorageBackend::~W25Q128StorageBackend()+0x84>)
    if (!cache_enabled) return;
    1f16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
W25Q128StorageBackend::~W25Q128StorageBackend() {
    1f1a:	b570      	push	{r4, r5, r6, lr}
    1f1c:	4605      	mov	r5, r0
    1f1e:	6002      	str	r2, [r0, #0]
    if (!cache_enabled) return;
    1f20:	b10b      	cbz	r3, 1f26 <W25Q128StorageBackend::~W25Q128StorageBackend()+0x12>
    1f22:	f7ff ffd9 	bl	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
      { _M_h.clear(); }
    1f26:	f105 0620 	add.w	r6, r5, #32
    1f2a:	4630      	mov	r0, r6
    1f2c:	f7ff fad8 	bl	14e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>
    1f30:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
      while (__n)
    1f34:	b134      	cbz	r4, 1f44 <W25Q128StorageBackend::~W25Q128StorageBackend()+0x30>
      _M_next() const noexcept
    1f36:	4620      	mov	r0, r4
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    1f38:	6824      	ldr	r4, [r4, #0]
    1f3a:	210c      	movs	r1, #12
    1f3c:	f001 f8aa 	bl	3094 <operator delete(void*, unsigned int)>
      while (__n)
    1f40:	2c00      	cmp	r4, #0
    1f42:	d1f8      	bne.n	1f36 <W25Q128StorageBackend::~W25Q128StorageBackend()+0x22>
      __builtin_memset(_M_buckets, 0,
    1f44:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
    1f48:	2100      	movs	r1, #0
    1f4a:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
    1f4e:	0092      	lsls	r2, r2, #2
    1f50:	f00c f878 	bl	e044 <memset>
      _M_element_count = 0;
    1f54:	2300      	movs	r3, #0
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    1f56:	e9d5 0139 	ldrd	r0, r1, [r5, #228]	; 0xe4
      _M_before_begin._M_nxt = nullptr;
    1f5a:	e9c5 333b 	strd	r3, r3, [r5, #236]	; 0xec
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
    1f5e:	f105 03fc 	add.w	r3, r5, #252	; 0xfc
	if (_M_uses_single_bucket(__bkts))
    1f62:	4298      	cmp	r0, r3
    1f64:	d002      	beq.n	1f6c <W25Q128StorageBackend::~W25Q128StorageBackend()+0x58>
    1f66:	0089      	lsls	r1, r1, #2
    1f68:	f001 f894 	bl	3094 <operator delete(void*, unsigned int)>
	if (_M_impl._M_start._M_p)
    1f6c:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    1f70:	b120      	cbz	r0, 1f7c <W25Q128StorageBackend::~W25Q128StorageBackend()+0x68>
	  if (this->_M_end_of_storage)
    1f72:	f8d5 10e0 	ldr.w	r1, [r5, #224]	; 0xe0
    1f76:	1a09      	subs	r1, r1, r0
    1f78:	f001 f88c 	bl	3094 <operator delete(void*, unsigned int)>
      clear();
    1f7c:	4630      	mov	r0, r6
    1f7e:	f7ff faaf 	bl	14e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    1f82:	6a28      	ldr	r0, [r5, #32]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
    1f84:	f105 0338 	add.w	r3, r5, #56	; 0x38
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    1f88:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (_M_uses_single_bucket(__bkts))
    1f8a:	4298      	cmp	r0, r3
    1f8c:	d002      	beq.n	1f94 <W25Q128StorageBackend::~W25Q128StorageBackend()+0x80>
    1f8e:	0089      	lsls	r1, r1, #2
    1f90:	f001 f880 	bl	3094 <operator delete(void*, unsigned int)>
}
    1f94:	4628      	mov	r0, r5
    1f96:	bd70      	pop	{r4, r5, r6, pc}
    1f98:	20001570 	.word	0x20001570

00001f9c <W25Q128StorageBackend::~W25Q128StorageBackend()>:
W25Q128StorageBackend::~W25Q128StorageBackend() {
    1f9c:	b510      	push	{r4, lr}
    1f9e:	4604      	mov	r4, r0
}
    1fa0:	f7ff ffb8 	bl	1f14 <W25Q128StorageBackend::~W25Q128StorageBackend()>
    1fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
    1fa8:	4620      	mov	r0, r4
    1faa:	f001 f873 	bl	3094 <operator delete(void*, unsigned int)>
    1fae:	4620      	mov	r0, r4
    1fb0:	bd10      	pop	{r4, pc}
    1fb2:	bf00      	nop

00001fb4 <W25Q128StorageBackend::end()>:
bool W25Q128StorageBackend::end() {
    1fb4:	b538      	push	{r3, r4, r5, lr}
    flush();
    1fb6:	6803      	ldr	r3, [r0, #0]
bool W25Q128StorageBackend::end() {
    1fb8:	4604      	mov	r4, r0
    1fba:	4d11      	ldr	r5, [pc, #68]	; (2000 <W25Q128StorageBackend::end()+0x4c>)
    flush();
    1fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fbe:	42ab      	cmp	r3, r5
    1fc0:	d114      	bne.n	1fec <W25Q128StorageBackend::end()+0x38>
    if (!cache_enabled) return;
    1fc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    1fc6:	b15b      	cbz	r3, 1fe0 <W25Q128StorageBackend::end()+0x2c>
    1fc8:	f7ff ff86 	bl	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
    } else if (!enable && cache_enabled) {
    1fcc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    1fd0:	b133      	cbz	r3, 1fe0 <W25Q128StorageBackend::end()+0x2c>
        flush();
    1fd2:	6823      	ldr	r3, [r4, #0]
    1fd4:	4620      	mov	r0, r4
    1fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fd8:	42ab      	cmp	r3, r5
    1fda:	d109      	bne.n	1ff0 <W25Q128StorageBackend::end()+0x3c>
    if (!cache_enabled) return;
    1fdc:	f7ff ff7c 	bl	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
    cache_enabled = enable;
    1fe0:	2300      	movs	r3, #0
}
    1fe2:	2001      	movs	r0, #1
    cache_enabled = enable;
    1fe4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    flash_initialized = false;
    1fe8:	7423      	strb	r3, [r4, #16]
}
    1fea:	bd38      	pop	{r3, r4, r5, pc}
    flush();
    1fec:	4798      	blx	r3
    1fee:	e7ed      	b.n	1fcc <W25Q128StorageBackend::end()+0x18>
        flush();
    1ff0:	4798      	blx	r3
    cache_enabled = enable;
    1ff2:	2300      	movs	r3, #0
}
    1ff4:	2001      	movs	r0, #1
    cache_enabled = enable;
    1ff6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    flash_initialized = false;
    1ffa:	7423      	strb	r3, [r4, #16]
}
    1ffc:	bd38      	pop	{r3, r4, r5, pc}
    1ffe:	bf00      	nop
    2000:	00001f09 	.word	0x00001f09

00002004 <W25Q128StorageBackend::enableWriteCache(bool)>:
void W25Q128StorageBackend::enableWriteCache(bool enable) {
    2004:	b538      	push	{r3, r4, r5, lr}
    2006:	4604      	mov	r4, r0
    if (enable && !cache_enabled) {
    2008:	460d      	mov	r5, r1
    200a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    200e:	b951      	cbnz	r1, 2026 <W25Q128StorageBackend::enableWriteCache(bool)+0x22>
    } else if (!enable && cache_enabled) {
    2010:	b133      	cbz	r3, 2020 <W25Q128StorageBackend::enableWriteCache(bool)+0x1c>
        flush();
    2012:	6803      	ldr	r3, [r0, #0]
    2014:	4a08      	ldr	r2, [pc, #32]	; (2038 <W25Q128StorageBackend::enableWriteCache(bool)+0x34>)
    2016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2018:	4293      	cmp	r3, r2
    201a:	d10b      	bne.n	2034 <W25Q128StorageBackend::enableWriteCache(bool)+0x30>
    if (!cache_enabled) return;
    201c:	f7ff ff5c 	bl	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
    cache_enabled = enable;
    2020:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
    2024:	bd38      	pop	{r3, r4, r5, pc}
    if (enable && !cache_enabled) {
    2026:	2b00      	cmp	r3, #0
    2028:	d1fa      	bne.n	2020 <W25Q128StorageBackend::enableWriteCache(bool)+0x1c>
        flush();
    202a:	6803      	ldr	r3, [r0, #0]
    202c:	4a02      	ldr	r2, [pc, #8]	; (2038 <W25Q128StorageBackend::enableWriteCache(bool)+0x34>)
    202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2030:	4293      	cmp	r3, r2
    2032:	d0f5      	beq.n	2020 <W25Q128StorageBackend::enableWriteCache(bool)+0x1c>
        flush();
    2034:	4798      	blx	r3
    2036:	e7f3      	b.n	2020 <W25Q128StorageBackend::enableWriteCache(bool)+0x1c>
    2038:	00001f09 	.word	0x00001f09

0000203c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)>:
bool W25Q128StorageBackend::writeData(uint32_t storage_key, const void* data, size_t dataSize) {
    203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!flash_initialized) {
    2040:	7c05      	ldrb	r5, [r0, #16]
bool W25Q128StorageBackend::writeData(uint32_t storage_key, const void* data, size_t dataSize) {
    2042:	b082      	sub	sp, #8
    2044:	4604      	mov	r4, r0
    2046:	9101      	str	r1, [sp, #4]
    if (!flash_initialized) {
    2048:	2d00      	cmp	r5, #0
    204a:	d03d      	beq.n	20c8 <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x8c>
    if (dataSize > MAX_DATA_SIZE) {
    204c:	2bec      	cmp	r3, #236	; 0xec
    204e:	461e      	mov	r6, r3
    2050:	d854      	bhi.n	20fc <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0xc0>
    if (cache_enabled) {
    2052:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    2056:	b935      	cbnz	r5, 2066 <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x2a>
    return writeStorageEntry(storage_key, data, dataSize);
    2058:	f7ff fe74 	bl	1d44 <W25Q128StorageBackend::writeStorageEntry(unsigned long, void const*, unsigned int)>
    205c:	4605      	mov	r5, r0
}
    205e:	4628      	mov	r0, r5
    2060:	b002      	add	sp, #8
    2062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return _M_h[__k]; }
    2066:	a901      	add	r1, sp, #4
    2068:	3020      	adds	r0, #32
    206a:	4617      	mov	r7, r2
    206c:	f7ff fa56 	bl	151c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>
        entry.storage_key = storage_key;
    2070:	9b01      	ldr	r3, [sp, #4]
    2072:	4680      	mov	r8, r0
    2074:	6003      	str	r3, [r0, #0]
    2076:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
    207a:	1a19      	subs	r1, r3, r0
	if (__new_size > size())
    207c:	428e      	cmp	r6, r1
    207e:	d835      	bhi.n	20ec <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0xb0>
	else if (__new_size < size())
    2080:	d204      	bcs.n	208c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x50>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
    2082:	1982      	adds	r2, r0, r6
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    2084:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    2086:	bf18      	it	ne
    2088:	f8c8 2008 	strne.w	r2, [r8, #8]
        memcpy(entry.data.data(), data, dataSize);
    208c:	4632      	mov	r2, r6
    208e:	4639      	mov	r1, r7
    2090:	f000 ff5e 	bl	2f50 <memcpy>
    2094:	4b27      	ldr	r3, [pc, #156]	; (2134 <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0xf8>)
        entry.dirty = true;
    2096:	2201      	movs	r2, #1
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	f888 2014 	strb.w	r2, [r8, #20]
        entry.timestamp = millis();
    209e:	f8c8 3010 	str.w	r3, [r8, #16]
        if (write_cache.size() > cache_size_limit / 1024) { // Rough estimate
    20a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    20a6:	ebb3 2f92 	cmp.w	r3, r2, lsr #10
    20aa:	d9d8      	bls.n	205e <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x22>
            flush(); // Flush to make room
    20ac:	6823      	ldr	r3, [r4, #0]
    20ae:	4a22      	ldr	r2, [pc, #136]	; (2138 <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0xfc>)
    20b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    20b2:	4293      	cmp	r3, r2
    20b4:	d13a      	bne.n	212c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0xf0>
    if (!cache_enabled) return;
    20b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    20ba:	2b00      	cmp	r3, #0
    20bc:	d0cf      	beq.n	205e <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x22>
    20be:	4620      	mov	r0, r4
        return true;
    20c0:	461d      	mov	r5, r3
    20c2:	f7ff ff09 	bl	1ed8 <W25Q128StorageBackend::flush() [clone .part.0]>
    20c6:	e7ca      	b.n	205e <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x22>
        error_count++;
    20c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    20ca:	4e1c      	ldr	r6, [pc, #112]	; (213c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x100>)
        error_count++;
    20cc:	3301      	adds	r3, #1
    20ce:	64c3      	str	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Flash not initialized");
    20d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    20d2:	6520      	str	r0, [r4, #80]	; 0x50
    20d4:	6830      	ldr	r0, [r6, #0]
    20d6:	65a2      	str	r2, [r4, #88]	; 0x58
    20d8:	6620      	str	r0, [r4, #96]	; 0x60
}
    20da:	4628      	mov	r0, r5
        strcpy(last_error, "Flash not initialized");
    20dc:	88b2      	ldrh	r2, [r6, #4]
    20de:	6561      	str	r1, [r4, #84]	; 0x54
    20e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    20e2:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    20e6:	b002      	add	sp, #8
    20e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_default_append(__new_size - size());
    20ec:	f108 0004 	add.w	r0, r8, #4
    20f0:	1a71      	subs	r1, r6, r1
    20f2:	f7ff fa89 	bl	1608 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned int)>
      { return _M_data_ptr(this->_M_impl._M_start); }
    20f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    20fa:	e7c7      	b.n	208c <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x50>
        error_count++;
    20fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        return false;
    20fe:	2500      	movs	r5, #0
        strcpy(last_error, "Data too large for single page");
    2100:	4e0f      	ldr	r6, [pc, #60]	; (2140 <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x104>)
        error_count++;
    2102:	3301      	adds	r3, #1
    2104:	64c3      	str	r3, [r0, #76]	; 0x4c
        strcpy(last_error, "Data too large for single page");
    2106:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2108:	6520      	str	r0, [r4, #80]	; 0x50
    210a:	6561      	str	r1, [r4, #84]	; 0x54
    210c:	65a2      	str	r2, [r4, #88]	; 0x58
    210e:	65e3      	str	r3, [r4, #92]	; 0x5c
    2110:	ce07      	ldmia	r6!, {r0, r1, r2}
    2112:	8833      	ldrh	r3, [r6, #0]
    2114:	6620      	str	r0, [r4, #96]	; 0x60
}
    2116:	4628      	mov	r0, r5
        strcpy(last_error, "Data too large for single page");
    2118:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    211c:	78b3      	ldrb	r3, [r6, #2]
    211e:	6661      	str	r1, [r4, #100]	; 0x64
    2120:	66a2      	str	r2, [r4, #104]	; 0x68
    2122:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
}
    2126:	b002      	add	sp, #8
    2128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            flush(); // Flush to make room
    212c:	4620      	mov	r0, r4
    212e:	4798      	blx	r3
    2130:	e795      	b.n	205e <W25Q128StorageBackend::writeData(unsigned long, void const*, unsigned int)+0x22>
    2132:	bf00      	nop
    2134:	20004268 	.word	0x20004268
    2138:	00001f09 	.word	0x00001f09
    213c:	20000d9c 	.word	0x20000d9c
    2140:	20000dd0 	.word	0x20000dd0

00002144 <W25Q128StorageBackend::rebuildIndex()>:
void W25Q128StorageBackend::updateSectorMap() {
    // This would scan flash to rebuild sector allocation map
    // For now, we'll rely on the tracking we maintain
}

void W25Q128StorageBackend::rebuildIndex() {
    2144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
    2148:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
    214c:	b0c3      	sub	sp, #268	; 0x10c
    214e:	4605      	mov	r5, r0
      { _M_h.clear(); }
    2150:	f100 08e4 	add.w	r8, r0, #228	; 0xe4
    2154:	b134      	cbz	r4, 2164 <W25Q128StorageBackend::rebuildIndex()+0x20>
      _M_next() const noexcept
    2156:	4620      	mov	r0, r4
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    2158:	6824      	ldr	r4, [r4, #0]
    215a:	210c      	movs	r1, #12
    215c:	f000 ff9a 	bl	3094 <operator delete(void*, unsigned int)>
      while (__n)
    2160:	2c00      	cmp	r4, #0
    2162:	d1f8      	bne.n	2156 <W25Q128StorageBackend::rebuildIndex()+0x12>
      __builtin_memset(_M_buckets, 0,
    2164:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
    2168:	2100      	movs	r1, #0
    216a:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
      _M_element_count = 0;
    216e:	2400      	movs	r4, #0
      __builtin_memset(_M_buckets, 0,
    2170:	0092      	lsls	r2, r2, #2
    2172:	f00b ff67 	bl	e044 <memset>
    // In test environment, just use the existing mapping
    // Don't scan all sectors as it's too slow with mock SPI
    return;
#else
    // Scan all allocated sectors to rebuild key mapping
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    2176:	f8d5 c018 	ldr.w	ip, [r5, #24]
      _M_before_begin._M_nxt = nullptr;
    217a:	e9c5 443b 	strd	r4, r4, [r5, #236]	; 0xec
    217e:	f1bc 0f00 	cmp.w	ip, #0
    2182:	d032      	beq.n	21ea <W25Q128StorageBackend::rebuildIndex()+0xa6>
      { return iterator(this->_M_impl._M_start._M_p, 0); }
    2184:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
    { return reference(_M_p, 1UL << _M_offset); }
    2188:	2601      	movs	r6, #1
      __n = __n % int(_S_word_bit);
    218a:	4623      	mov	r3, r4
        uint8_t buffer[W25Q128_PAGE_SIZE];
        uint32_t page_address = sector * W25Q128_SECTORS_PER_BLOCK;
        
        if (readPage(page_address, buffer, W25Q128_PAGE_SIZE)) {
            StorageEntry* entry = (StorageEntry*)buffer;
            if (entry->magic == STORAGE_MAGIC) {
    218c:	4f1d      	ldr	r7, [pc, #116]	; (2204 <W25Q128StorageBackend::rebuildIndex()+0xc0>)
    { return reference(_M_p, 1UL << _M_offset); }
    218e:	fa06 f303 	lsl.w	r3, r6, r3
    { return !!(*_M_p & _M_mask); }
    2192:	6812      	ldr	r2, [r2, #0]
        if (!sector_allocated[sector]) continue;
    2194:	4213      	tst	r3, r2
    2196:	d00e      	beq.n	21b6 <W25Q128StorageBackend::rebuildIndex()+0x72>
        uint32_t page_address = sector * W25Q128_SECTORS_PER_BLOCK;
    2198:	ea4f 1904 	mov.w	r9, r4, lsl #4
        if (readPage(page_address, buffer, W25Q128_PAGE_SIZE)) {
    219c:	f44f 7380 	mov.w	r3, #256	; 0x100
    21a0:	aa02      	add	r2, sp, #8
    21a2:	4628      	mov	r0, r5
    21a4:	4649      	mov	r1, r9
    21a6:	f7ff f923 	bl	13f0 <W25Q128StorageBackend::readPage(unsigned long, unsigned char*, unsigned int)>
    21aa:	b110      	cbz	r0, 21b2 <W25Q128StorageBackend::rebuildIndex()+0x6e>
            if (entry->magic == STORAGE_MAGIC) {
    21ac:	9b02      	ldr	r3, [sp, #8]
    21ae:	42bb      	cmp	r3, r7
    21b0:	d01e      	beq.n	21f0 <W25Q128StorageBackend::rebuildIndex()+0xac>
    21b2:	f8d5 c018 	ldr.w	ip, [r5, #24]
    for (uint32_t sector = 0; sector < total_sectors; sector++) {
    21b6:	3401      	adds	r4, #1
    21b8:	45a4      	cmp	ip, r4
    21ba:	d916      	bls.n	21ea <W25Q128StorageBackend::rebuildIndex()+0xa6>
      _M_p += __n / int(_S_word_bit);
    21bc:	2c00      	cmp	r4, #0
    21be:	4622      	mov	r2, r4
      __n = __n % int(_S_word_bit);
    21c0:	f004 031f 	and.w	r3, r4, #31
      _M_p += __n / int(_S_word_bit);
    21c4:	bfb8      	it	lt
    21c6:	f104 021f 	addlt.w	r2, r4, #31
      __n = __n % int(_S_word_bit);
    21ca:	4260      	negs	r0, r4
    21cc:	f000 001f 	and.w	r0, r0, #31
      _M_p += __n / int(_S_word_bit);
    21d0:	ea4f 1162 	mov.w	r1, r2, asr #5
    21d4:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
      __n = __n % int(_S_word_bit);
    21d8:	bf58      	it	pl
    21da:	4243      	negpl	r3, r0
      _M_p += __n / int(_S_word_bit);
    21dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
      if (__n < 0)
    21e0:	2b00      	cmp	r3, #0
    21e2:	dad4      	bge.n	218e <W25Q128StorageBackend::rebuildIndex()+0x4a>
	  __n += int(_S_word_bit);
    21e4:	3320      	adds	r3, #32
	  --_M_p;
    21e6:	3a04      	subs	r2, #4
    21e8:	e7d1      	b.n	218e <W25Q128StorageBackend::rebuildIndex()+0x4a>
                key_to_sector[entry->storage_key] = page_address;
            }
        }
    }
#endif
    21ea:	b043      	add	sp, #268	; 0x10c
    21ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                key_to_sector[entry->storage_key] = page_address;
    21f0:	9b03      	ldr	r3, [sp, #12]
      { return _M_h[__k]; }
    21f2:	a901      	add	r1, sp, #4
    21f4:	4640      	mov	r0, r8
    21f6:	9301      	str	r3, [sp, #4]
    21f8:	f7ff fa72 	bl	16e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>
    21fc:	f8c0 9000 	str.w	r9, [r0]
    2200:	e7d7      	b.n	21b2 <W25Q128StorageBackend::rebuildIndex()+0x6e>
    2202:	bf00      	nop
    2204:	57463132 	.word	0x57463132

00002208 <W25Q128StorageBackend::begin()>:
bool W25Q128StorageBackend::begin() {
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	4604      	mov	r4, r0
    if (!initializeFlash()) {
    220c:	f7fe ffa8 	bl	1160 <W25Q128StorageBackend::initializeFlash()>
    2210:	4605      	mov	r5, r0
    2212:	b190      	cbz	r0, 223a <W25Q128StorageBackend::begin()+0x32>
    rebuildIndex();
    2214:	4620      	mov	r0, r4
    2216:	f7ff ff95 	bl	2144 <W25Q128StorageBackend::rebuildIndex()>
    if (enable && !cache_enabled) {
    221a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    221e:	b123      	cbz	r3, 222a <W25Q128StorageBackend::begin()+0x22>
    cache_enabled = enable;
    2220:	2301      	movs	r3, #1
}
    2222:	4628      	mov	r0, r5
    cache_enabled = enable;
    2224:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
    2228:	bd70      	pop	{r4, r5, r6, pc}
        flush();
    222a:	6823      	ldr	r3, [r4, #0]
    222c:	4a0a      	ldr	r2, [pc, #40]	; (2258 <W25Q128StorageBackend::begin()+0x50>)
    222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2230:	4293      	cmp	r3, r2
    2232:	d0f5      	beq.n	2220 <W25Q128StorageBackend::begin()+0x18>
    2234:	4620      	mov	r0, r4
    2236:	4798      	blx	r3
    2238:	e7f2      	b.n	2220 <W25Q128StorageBackend::begin()+0x18>
        error_count++;
    223a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Flash initialization failed");
    223c:	4e07      	ldr	r6, [pc, #28]	; (225c <W25Q128StorageBackend::begin()+0x54>)
        error_count++;
    223e:	3301      	adds	r3, #1
    2240:	64e3      	str	r3, [r4, #76]	; 0x4c
        strcpy(last_error, "Flash initialization failed");
    2242:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2244:	6520      	str	r0, [r4, #80]	; 0x50
    2246:	6561      	str	r1, [r4, #84]	; 0x54
    2248:	65a2      	str	r2, [r4, #88]	; 0x58
    224a:	65e3      	str	r3, [r4, #92]	; 0x5c
    224c:	ce07      	ldmia	r6!, {r0, r1, r2}
    224e:	6620      	str	r0, [r4, #96]	; 0x60
}
    2250:	4628      	mov	r0, r5
        strcpy(last_error, "Flash initialization failed");
    2252:	6661      	str	r1, [r4, #100]	; 0x64
    2254:	66a2      	str	r2, [r4, #104]	; 0x68
}
    2256:	bd70      	pop	{r4, r5, r6, pc}
    2258:	00001f09 	.word	0x00001f09
    225c:	20000d80 	.word	0x20000d80

00002260 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)>:
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    2260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2264:	b085      	sub	sp, #20
    2266:	ac04      	add	r4, sp, #16
    2268:	e904 0006 	stmdb	r4, {r1, r2}
    226c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2270:	9c03      	ldr	r4, [sp, #12]
    2272:	9200      	str	r2, [sp, #0]
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
    2274:	2b00      	cmp	r3, #0
    2276:	f000 80d3 	beq.w	2420 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x1c0>

      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
    227a:	461d      	mov	r5, r3
    227c:	460f      	mov	r7, r1
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }
    227e:	6803      	ldr	r3, [r0, #0]
    _Bit_const_iterator(const _Bit_iterator& __x)
    2280:	4606      	mov	r6, r0
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    2282:	6901      	ldr	r1, [r0, #16]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
    2284:	e9d0 8202 	ldrd	r8, r2, [r0, #8]
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    2288:	1ac9      	subs	r1, r1, r3
    228a:	eba8 0303 	sub.w	r3, r8, r3
	      + __x._M_offset - __y._M_offset);
    228e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	return;
      if (capacity() - size() >= __n)
    2292:	ebc3 01c1 	rsb	r1, r3, r1, lsl #3
    2296:	42a9      	cmp	r1, r5
    2298:	f080 80c5 	bcs.w	2426 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x1c6>
      _M_insert_aux(iterator __position, bool __x);

      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    229c:	49cf      	ldr	r1, [pc, #828]	; (25dc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x37c>)
    229e:	1aca      	subs	r2, r1, r3
    22a0:	4295      	cmp	r5, r2
    22a2:	f200 8210 	bhi.w	26c6 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x466>
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    22a6:	429d      	cmp	r5, r3
    22a8:	462a      	mov	r2, r5
    22aa:	bf38      	it	cc
    22ac:	461a      	movcc	r2, r3
    22ae:	189b      	adds	r3, r3, r2
    22b0:	f080 8206 	bcs.w	26c0 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x460>
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    22b4:	428b      	cmp	r3, r1
    22b6:	bf28      	it	cs
    22b8:	460b      	movcs	r3, r1
    22ba:	331f      	adds	r3, #31
    22bc:	095b      	lsrs	r3, r3, #5
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    22be:	009b      	lsls	r3, r3, #2
    22c0:	9301      	str	r3, [sp, #4]
    22c2:	9801      	ldr	r0, [sp, #4]
    22c4:	f000 fede 	bl	3084 <operator new(unsigned int)>
      { return iterator(this->_M_impl._M_start._M_p, 0); }
    22c8:	f8d6 9000 	ldr.w	r9, [r6]
    22cc:	4683      	mov	fp, r0
	  if (_Num)
    22ce:	45b9      	cmp	r9, r7
	  const ptrdiff_t _Num = __last - __first;
    22d0:	eba7 0809 	sub.w	r8, r7, r9
	  if (_Num)
    22d4:	d003      	beq.n	22de <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x7e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    22d6:	4642      	mov	r2, r8
    22d8:	4649      	mov	r1, r9
    22da:	f00b fe37 	bl	df4c <memmove>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    22de:	2c00      	cmp	r4, #0
	  return __result + _Num;
    22e0:	eb0b 0008 	add.w	r0, fp, r8
	      + __x._M_offset - __y._M_offset);
    22e4:	4622      	mov	r2, r4
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    22e6:	f340 81e9 	ble.w	26bc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x45c>
    22ea:	46bc      	mov	ip, r7
    22ec:	2100      	movs	r1, #0
    { return _Bit_reference(_M_p, 1UL << _M_offset); }
    22ee:	f04f 0e01 	mov.w	lr, #1
    22f2:	46b8      	mov	r8, r7
    22f4:	e003      	b.n	22fe <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x9e>
    22f6:	3a01      	subs	r2, #1
      if (_M_offset++ == int(_S_word_bit) - 1)
    22f8:	f101 0101 	add.w	r1, r1, #1
    22fc:	d014      	beq.n	2328 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0xc8>
    { return _Bit_reference(_M_p, 1UL << _M_offset); }
    22fe:	fa0e f301 	lsl.w	r3, lr, r1
    { return !!(*_M_p & _M_mask); }
    2302:	f8dc 7000 	ldr.w	r7, [ip]
      if (__x)
    2306:	423b      	tst	r3, r7
	*_M_p |= _M_mask;
    2308:	6807      	ldr	r7, [r0, #0]
    230a:	bf14      	ite	ne
    230c:	433b      	orrne	r3, r7
	*_M_p &= ~_M_mask;
    230e:	ea27 0303 	biceq.w	r3, r7, r3
      if (_M_offset++ == int(_S_word_bit) - 1)
    2312:	291f      	cmp	r1, #31
    2314:	6003      	str	r3, [r0, #0]
    2316:	d1ee      	bne.n	22f6 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x96>
    2318:	3a01      	subs	r2, #1
	  ++_M_p;
    231a:	f10c 0c04 	add.w	ip, ip, #4
    231e:	f100 0004 	add.w	r0, r0, #4
	  _M_offset = 0;
    2322:	f04f 0100 	mov.w	r1, #0
    2326:	d1ea      	bne.n	22fe <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x9e>
      difference_type __n = __i + _M_offset;
    2328:	4647      	mov	r7, r8
    232a:	440d      	add	r5, r1
      _M_p += __n / int(_S_word_bit);
    232c:	2d00      	cmp	r5, #0
    232e:	46a8      	mov	r8, r5
      __n = __n % int(_S_word_bit);
    2330:	f005 0a1f 	and.w	sl, r5, #31
      _M_p += __n / int(_S_word_bit);
    2334:	bfb8      	it	lt
    2336:	f105 081f 	addlt.w	r8, r5, #31
      __n = __n % int(_S_word_bit);
    233a:	426b      	negs	r3, r5
    233c:	f003 031f 	and.w	r3, r3, #31
      _M_p += __n / int(_S_word_bit);
    2340:	ea4f 1868 	mov.w	r8, r8, asr #5
      __n = __n % int(_S_word_bit);
    2344:	bf58      	it	pl
    2346:	f1c3 0a00 	rsbpl	sl, r3, #0
      _M_p += __n / int(_S_word_bit);
    234a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
      if (__n < 0)
    234e:	f1ba 0f00 	cmp.w	sl, #0
    2352:	f2c0 810d 	blt.w	2570 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x310>
  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator __first,
	    _GLIBCXX_STD_C::_Bit_iterator __last, const bool& __x)
  {
    using _GLIBCXX_STD_C::_Bit_type;
    using _GLIBCXX_STD_C::_S_word_bit;
    if (__first._M_p != __last._M_p)
    2356:	4540      	cmp	r0, r8
      _M_offset = static_cast<unsigned int>(__n);
    2358:	4655      	mov	r5, sl
    if (__first._M_p != __last._M_p)
    235a:	f000 8182 	beq.w	2662 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x402>
      {
	_Bit_type* __first_p = __first._M_p;
	if (__first._M_offset != 0)
    235e:	2900      	cmp	r1, #0
    2360:	f000 810b 	beq.w	257a <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x31a>
    const _Bit_type __fmask = ~0ul << __first;
    2364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (__x)
    2368:	9a00      	ldr	r2, [sp, #0]
    const _Bit_type __fmask = ~0ul << __first;
    236a:	408b      	lsls	r3, r1
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    236c:	1d01      	adds	r1, r0, #4
    if (__x)
    236e:	2a00      	cmp	r2, #0
    2370:	f000 8190 	beq.w	2694 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x434>
      *__v |= __mask;
    2374:	6802      	ldr	r2, [r0, #0]
    2376:	431a      	orrs	r2, r3
    2378:	6002      	str	r2, [r0, #0]
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    237a:	4608      	mov	r0, r1

	__builtin_memset(__first_p, __x ? ~0 : 0,
    237c:	eba8 0200 	sub.w	r2, r8, r0
    2380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2384:	f00b fe5e 	bl	e044 <memset>
			 (__last._M_p - __first_p) * sizeof(_Bit_type));

	if (__last._M_offset != 0)
    2388:	f1ba 0f00 	cmp.w	sl, #0
    238c:	d00a      	beq.n	23a4 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x144>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    238e:	f1ca 0a20 	rsb	sl, sl, #32
    2392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      *__v |= __mask;
    2396:	f8d8 3000 	ldr.w	r3, [r8]
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    239a:	fa22 f20a 	lsr.w	r2, r2, sl
      *__v |= __mask;
    239e:	4313      	orrs	r3, r2
    23a0:	f8c8 3000 	str.w	r3, [r8]
	if (_M_impl._M_start._M_p)
    23a4:	f8d6 9000 	ldr.w	r9, [r6]
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    23a8:	68b3      	ldr	r3, [r6, #8]
	      + __x._M_offset - __y._M_offset);
    23aa:	68f2      	ldr	r2, [r6, #12]
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    23ac:	1bdb      	subs	r3, r3, r7
	      + __x._M_offset - __y._M_offset);
    23ae:	1b12      	subs	r2, r2, r4
    23b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    23b4:	2a00      	cmp	r2, #0
    23b6:	dd20      	ble.n	23fa <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x19a>
    { return reference(_M_p, 1UL << _M_offset); }
    23b8:	2101      	movs	r1, #1
    23ba:	e003      	b.n	23c4 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x164>
    23bc:	3a01      	subs	r2, #1
      if (_M_offset++ == int(_S_word_bit) - 1)
    23be:	f105 0501 	add.w	r5, r5, #1
    23c2:	d01a      	beq.n	23fa <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x19a>
    { return !!(*_M_p & _M_mask); }
    23c4:	6838      	ldr	r0, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
    23c6:	fa01 fc04 	lsl.w	ip, r1, r4
    23ca:	fa01 f305 	lsl.w	r3, r1, r5
      if (__x)
    23ce:	ea1c 0f00 	tst.w	ip, r0
	*_M_p |= _M_mask;
    23d2:	f8d8 0000 	ldr.w	r0, [r8]
    23d6:	bf14      	ite	ne
    23d8:	4303      	orrne	r3, r0
	*_M_p &= ~_M_mask;
    23da:	ea20 0303 	biceq.w	r3, r0, r3
      if (_M_offset++ == int(_S_word_bit) - 1)
    23de:	2c1f      	cmp	r4, #31
    23e0:	f8c8 3000 	str.w	r3, [r8]
    23e4:	f000 80fc 	beq.w	25e0 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x380>
    23e8:	3401      	adds	r4, #1
    23ea:	2d1f      	cmp	r5, #31
    23ec:	d1e6      	bne.n	23bc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x15c>
    23ee:	3a01      	subs	r2, #1
	  ++_M_p;
    23f0:	f108 0804 	add.w	r8, r8, #4
	  _M_offset = 0;
    23f4:	f04f 0500 	mov.w	r5, #0
    23f8:	d1e4      	bne.n	23c4 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x164>
	if (_M_impl._M_start._M_p)
    23fa:	f1b9 0f00 	cmp.w	r9, #0
    23fe:	d005      	beq.n	240c <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x1ac>
	  if (this->_M_end_of_storage)
    2400:	6931      	ldr	r1, [r6, #16]
	::operator delete(__p
    2402:	4648      	mov	r0, r9
    2404:	eba1 0109 	sub.w	r1, r1, r9
    2408:	f000 fe44 	bl	3094 <operator delete(void*, unsigned int)>
	  iterator __i = _M_copy_aligned(begin(), __position, __start);
	  std::fill(__i, __i + difference_type(__n), __x);
	  iterator __finish = std::copy(__position, end(),
					__i + difference_type(__n));
	  this->_M_deallocate();
	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
    240c:	9a01      	ldr	r2, [sp, #4]
	  this->_M_impl._M_start = __start;
    240e:	2300      	movs	r3, #0
    2410:	f8c6 b000 	str.w	fp, [r6]
	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
    2414:	445a      	add	r2, fp
	  this->_M_impl._M_finish = __finish;
    2416:	f8c6 8008 	str.w	r8, [r6, #8]
	  this->_M_impl._M_start = __start;
    241a:	6073      	str	r3, [r6, #4]
	  this->_M_impl._M_finish = __finish;
    241c:	e9c6 5203 	strd	r5, r2, [r6, #12]
	}
    }
    2420:	b005      	add	sp, #20
    2422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      difference_type __n = __i + _M_offset;
    2426:	eb05 0902 	add.w	r9, r5, r2
      _M_p += __n / int(_S_word_bit);
    242a:	f1b9 0f00 	cmp.w	r9, #0
    242e:	464b      	mov	r3, r9
      __n = __n % int(_S_word_bit);
    2430:	f009 001f 	and.w	r0, r9, #31
      _M_p += __n / int(_S_word_bit);
    2434:	bfb8      	it	lt
    2436:	f109 031f 	addlt.w	r3, r9, #31
    243a:	115b      	asrs	r3, r3, #5
    243c:	eb08 0183 	add.w	r1, r8, r3, lsl #2
      __n = __n % int(_S_word_bit);
    2440:	f1d9 0300 	rsbs	r3, r9, #0
    2444:	f003 031f 	and.w	r3, r3, #31
      _M_p += __n / int(_S_word_bit);
    2448:	468b      	mov	fp, r1
      __n = __n % int(_S_word_bit);
    244a:	bf58      	it	pl
    244c:	4258      	negpl	r0, r3
      if (__n < 0)
    244e:	2800      	cmp	r0, #0
    2450:	f2c0 8089 	blt.w	2566 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x306>
      _M_p += __n / int(_S_word_bit);
    2454:	468e      	mov	lr, r1
    2456:	4684      	mov	ip, r0
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    2458:	eba8 0307 	sub.w	r3, r8, r7
	      + __x._M_offset - __y._M_offset);
    245c:	1b11      	subs	r1, r2, r4
    245e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	  for (; __n > 0; --__n)
    2462:	2900      	cmp	r1, #0
    2464:	dd21      	ble.n	24aa <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x24a>
    2466:	4663      	mov	r3, ip
    { return reference(_M_p, 1UL << _M_offset); }
    2468:	f04f 0a01 	mov.w	sl, #1
    246c:	46bc      	mov	ip, r7
    246e:	9001      	str	r0, [sp, #4]
    2470:	461f      	mov	r7, r3
      if (_M_offset-- == 0)
    2472:	2a00      	cmp	r2, #0
    2474:	f000 80ab 	beq.w	25ce <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x36e>
    2478:	3a01      	subs	r2, #1
    { return reference(_M_p, 1UL << _M_offset); }
    247a:	fa0a f902 	lsl.w	r9, sl, r2
      if (_M_offset-- == 0)
    247e:	2f00      	cmp	r7, #0
    2480:	f000 809f 	beq.w	25c2 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x362>
    2484:	3f01      	subs	r7, #1
    { return reference(_M_p, 1UL << _M_offset); }
    2486:	fa0a f307 	lsl.w	r3, sl, r7
      if (__x)
    248a:	f8d8 0000 	ldr.w	r0, [r8]
    248e:	ea19 0f00 	tst.w	r9, r0
	*_M_p |= _M_mask;
    2492:	f8de 0000 	ldr.w	r0, [lr]
    2496:	bf14      	ite	ne
    2498:	4303      	orrne	r3, r0
	*_M_p &= ~_M_mask;
    249a:	ea20 0303 	biceq.w	r3, r0, r3
    249e:	3901      	subs	r1, #1
    24a0:	f8ce 3000 	str.w	r3, [lr]
    24a4:	d1e5      	bne.n	2472 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x212>
    24a6:	4667      	mov	r7, ip
    24a8:	9801      	ldr	r0, [sp, #4]
      difference_type __n = __i + _M_offset;
    24aa:	192b      	adds	r3, r5, r4
      _M_p += __n / int(_S_word_bit);
    24ac:	2b00      	cmp	r3, #0
    24ae:	4698      	mov	r8, r3
      __n = __n % int(_S_word_bit);
    24b0:	f003 0a1f 	and.w	sl, r3, #31
      _M_p += __n / int(_S_word_bit);
    24b4:	bfb8      	it	lt
    24b6:	f103 081f 	addlt.w	r8, r3, #31
      __n = __n % int(_S_word_bit);
    24ba:	425a      	negs	r2, r3
    24bc:	f002 031f 	and.w	r3, r2, #31
      _M_p += __n / int(_S_word_bit);
    24c0:	ea4f 1868 	mov.w	r8, r8, asr #5
      __n = __n % int(_S_word_bit);
    24c4:	bf58      	it	pl
    24c6:	f1c3 0a00 	rsbpl	sl, r3, #0
      _M_p += __n / int(_S_word_bit);
    24ca:	eb07 0888 	add.w	r8, r7, r8, lsl #2
      if (__n < 0)
    24ce:	f1ba 0f00 	cmp.w	sl, #0
    24d2:	da03      	bge.n	24dc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x27c>
	  __n += int(_S_word_bit);
    24d4:	f10a 0a20 	add.w	sl, sl, #32
	  --_M_p;
    24d8:	f1a8 0804 	sub.w	r8, r8, #4
    if (__first._M_p != __last._M_p)
    24dc:	45b8      	cmp	r8, r7
    24de:	f000 80ae 	beq.w	263e <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x3de>
	if (__first._M_offset != 0)
    24e2:	2c00      	cmp	r4, #0
    24e4:	d07f      	beq.n	25e6 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x386>
    const _Bit_type __fmask = ~0ul << __first;
    24e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (__x)
    24ea:	9900      	ldr	r1, [sp, #0]
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    24ec:	1d3a      	adds	r2, r7, #4
    const _Bit_type __fmask = ~0ul << __first;
    24ee:	40a3      	lsls	r3, r4
    if (__x)
    24f0:	2900      	cmp	r1, #0
    24f2:	f000 80c9 	beq.w	2688 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x428>
      *__v |= __mask;
    24f6:	6839      	ldr	r1, [r7, #0]
    24f8:	4319      	orrs	r1, r3
    24fa:	6039      	str	r1, [r7, #0]
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    24fc:	4617      	mov	r7, r2
	__builtin_memset(__first_p, __x ? ~0 : 0,
    24fe:	eba8 0207 	sub.w	r2, r8, r7
    2502:	4638      	mov	r0, r7
    2504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2508:	f00b fd9c 	bl	e044 <memset>
	if (__last._M_offset != 0)
    250c:	f1ba 0f00 	cmp.w	sl, #0
    2510:	d04d      	beq.n	25ae <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x34e>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2512:	f1ca 0320 	rsb	r3, sl, #32
    2516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    251a:	40da      	lsrs	r2, r3
      *__v |= __mask;
    251c:	f8d8 3000 	ldr.w	r3, [r8]
    2520:	431a      	orrs	r2, r3
      difference_type __n = __i + _M_offset;
    2522:	68f3      	ldr	r3, [r6, #12]
    2524:	eb05 0903 	add.w	r9, r5, r3
      *__v |= __mask;
    2528:	f8c8 2000 	str.w	r2, [r8]
      _M_p += __n / int(_S_word_bit);
    252c:	f1b9 0f00 	cmp.w	r9, #0
    2530:	464b      	mov	r3, r9
    2532:	db43      	blt.n	25bc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x35c>
      __n = __n % int(_S_word_bit);
    2534:	f1d9 0200 	rsbs	r2, r9, #0
      _M_p += __n / int(_S_word_bit);
    2538:	ea4f 1363 	mov.w	r3, r3, asr #5
    253c:	68b1      	ldr	r1, [r6, #8]
      __n = __n % int(_S_word_bit);
    253e:	f009 001f 	and.w	r0, r9, #31
    2542:	f002 021f 	and.w	r2, r2, #31
      _M_p += __n / int(_S_word_bit);
    2546:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      __n = __n % int(_S_word_bit);
    254a:	bf58      	it	pl
    254c:	4250      	negpl	r0, r2
      _M_p += __n / int(_S_word_bit);
    254e:	469b      	mov	fp, r3
      if (__n < 0)
    2550:	2800      	cmp	r0, #0
	  --_M_p;
    2552:	465b      	mov	r3, fp
	  __n += int(_S_word_bit);
    2554:	bfbc      	itt	lt
    2556:	3020      	addlt	r0, #32
	  --_M_p;
    2558:	f1ab 0304 	sublt.w	r3, fp, #4
      _M_offset = static_cast<unsigned int>(__n);
    255c:	e9c6 3002 	strd	r3, r0, [r6, #8]
    2560:	b005      	add	sp, #20
    2562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __n += int(_S_word_bit);
    2566:	f100 0c20 	add.w	ip, r0, #32
	  --_M_p;
    256a:	f1a1 0e04 	sub.w	lr, r1, #4
    256e:	e773      	b.n	2458 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x1f8>
	  __n += int(_S_word_bit);
    2570:	f10a 0a20 	add.w	sl, sl, #32
	  --_M_p;
    2574:	f1a8 0804 	sub.w	r8, r8, #4
    2578:	e6ed      	b.n	2356 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0xf6>
	__builtin_memset(__first_p, __x ? ~0 : 0,
    257a:	9b00      	ldr	r3, [sp, #0]
    257c:	2b00      	cmp	r3, #0
    257e:	f47f aefd 	bne.w	237c <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x11c>
    2582:	eba8 0200 	sub.w	r2, r8, r0
    2586:	2100      	movs	r1, #0
    2588:	f00b fd5c 	bl	e044 <memset>
	if (__last._M_offset != 0)
    258c:	f1ba 0f00 	cmp.w	sl, #0
    2590:	f43f af08 	beq.w	23a4 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x144>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2594:	f1ca 0a20 	rsb	sl, sl, #32
    2598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      *__v &= ~__mask;
    259c:	f8d8 3000 	ldr.w	r3, [r8]
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    25a0:	fa22 f20a 	lsr.w	r2, r2, sl
      *__v &= ~__mask;
    25a4:	ea23 0302 	bic.w	r3, r3, r2
    25a8:	f8c8 3000 	str.w	r3, [r8]
    25ac:	e6fa      	b.n	23a4 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x144>
      difference_type __n = __i + _M_offset;
    25ae:	68f3      	ldr	r3, [r6, #12]
    25b0:	eb05 0903 	add.w	r9, r5, r3
      _M_p += __n / int(_S_word_bit);
    25b4:	f1b9 0f00 	cmp.w	r9, #0
    25b8:	464b      	mov	r3, r9
    25ba:	dabb      	bge.n	2534 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2d4>
    25bc:	f109 031f 	add.w	r3, r9, #31
    25c0:	e7b8      	b.n	2534 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2d4>
	  --_M_p;
    25c2:	f1ae 0e04 	sub.w	lr, lr, #4
    }
    25c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  _M_offset = int(_S_word_bit) - 1;
    25ca:	271f      	movs	r7, #31
    }
    25cc:	e75d      	b.n	248a <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x22a>
	  --_M_p;
    25ce:	f1a8 0804 	sub.w	r8, r8, #4
    }
    25d2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
	  _M_offset = int(_S_word_bit) - 1;
    25d6:	221f      	movs	r2, #31
    }
    25d8:	e751      	b.n	247e <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x21e>
    25da:	bf00      	nop
    25dc:	7fffffe0 	.word	0x7fffffe0
	  ++_M_p;
    25e0:	3704      	adds	r7, #4
	  _M_offset = 0;
    25e2:	2400      	movs	r4, #0
    }
    25e4:	e701      	b.n	23ea <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x18a>
	__builtin_memset(__first_p, __x ? ~0 : 0,
    25e6:	9b00      	ldr	r3, [sp, #0]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d188      	bne.n	24fe <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x29e>
    25ec:	eba8 0207 	sub.w	r2, r8, r7
    25f0:	4638      	mov	r0, r7
    25f2:	2100      	movs	r1, #0
    25f4:	f00b fd26 	bl	e044 <memset>
	if (__last._M_offset != 0)
    25f8:	f1ba 0f00 	cmp.w	sl, #0
    25fc:	d0d7      	beq.n	25ae <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x34e>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    25fe:	f1ca 0320 	rsb	r3, sl, #32
    2602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      _M_p += __n / int(_S_word_bit);
    2606:	68b1      	ldr	r1, [r6, #8]
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2608:	40da      	lsrs	r2, r3
      *__v &= ~__mask;
    260a:	f8d8 3000 	ldr.w	r3, [r8]
    260e:	ea23 0302 	bic.w	r3, r3, r2
      difference_type __n = __i + _M_offset;
    2612:	68f2      	ldr	r2, [r6, #12]
    2614:	4415      	add	r5, r2
      *__v &= ~__mask;
    2616:	f8c8 3000 	str.w	r3, [r8]
      _M_p += __n / int(_S_word_bit);
    261a:	2d00      	cmp	r5, #0
    261c:	462b      	mov	r3, r5
      __n = __n % int(_S_word_bit);
    261e:	f005 001f 	and.w	r0, r5, #31
      _M_p += __n / int(_S_word_bit);
    2622:	bfb8      	it	lt
    2624:	f105 031f 	addlt.w	r3, r5, #31
      __n = __n % int(_S_word_bit);
    2628:	426a      	negs	r2, r5
      _M_p += __n / int(_S_word_bit);
    262a:	ea4f 1363 	mov.w	r3, r3, asr #5
      __n = __n % int(_S_word_bit);
    262e:	f002 021f 	and.w	r2, r2, #31
      _M_p += __n / int(_S_word_bit);
    2632:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      __n = __n % int(_S_word_bit);
    2636:	bf58      	it	pl
    2638:	4250      	negpl	r0, r2
      _M_p += __n / int(_S_word_bit);
    263a:	469b      	mov	fp, r3
    263c:	e788      	b.n	2550 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2f0>
	  __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
    263e:	45a2      	cmp	sl, r4
    2640:	d086      	beq.n	2550 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2f0>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2646:	f1ca 0320 	rsb	r3, sl, #32
    264a:	fa22 f303 	lsr.w	r3, r2, r3
    const _Bit_type __fmask = ~0ul << __first;
    264e:	40a2      	lsls	r2, r4
    const _Bit_type __mask = __fmask & __lmask;
    2650:	4013      	ands	r3, r2
    if (__x)
    2652:	9a00      	ldr	r2, [sp, #0]
    2654:	b322      	cbz	r2, 26a0 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x440>
      *__v |= __mask;
    2656:	f8d8 2000 	ldr.w	r2, [r8]
    265a:	431a      	orrs	r2, r3
    265c:	f8c8 2000 	str.w	r2, [r8]
    2660:	e776      	b.n	2550 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2f0>
    else if (__first._M_offset != __last._M_offset)
    2662:	4551      	cmp	r1, sl
    2664:	f43f aea0 	beq.w	23a8 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x148>
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    266c:	f1ca 0220 	rsb	r2, sl, #32
    const _Bit_type __fmask = ~0ul << __first;
    2670:	fa03 f101 	lsl.w	r1, r3, r1
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    2674:	40d3      	lsrs	r3, r2
    if (__x)
    2676:	9a00      	ldr	r2, [sp, #0]
    const _Bit_type __mask = __fmask & __lmask;
    2678:	400b      	ands	r3, r1
    if (__x)
    267a:	b1c2      	cbz	r2, 26ae <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x44e>
      *__v |= __mask;
    267c:	f8d8 2000 	ldr.w	r2, [r8]
    2680:	431a      	orrs	r2, r3
    2682:	f8c8 2000 	str.w	r2, [r8]
    2686:	e68f      	b.n	23a8 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x148>
      *__v &= ~__mask;
    2688:	6839      	ldr	r1, [r7, #0]
    268a:	ea21 0103 	bic.w	r1, r1, r3
    268e:	6039      	str	r1, [r7, #0]
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    2690:	4617      	mov	r7, r2
    2692:	e7ab      	b.n	25ec <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x38c>
      *__v &= ~__mask;
    2694:	6802      	ldr	r2, [r0, #0]
    2696:	ea22 0203 	bic.w	r2, r2, r3
    269a:	6002      	str	r2, [r0, #0]
	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
    269c:	4608      	mov	r0, r1
    269e:	e770      	b.n	2582 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x322>
      *__v &= ~__mask;
    26a0:	f8d8 2000 	ldr.w	r2, [r8]
    26a4:	ea22 0203 	bic.w	r2, r2, r3
    26a8:	f8c8 2000 	str.w	r2, [r8]
    26ac:	e750      	b.n	2550 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x2f0>
    26ae:	f8d8 2000 	ldr.w	r2, [r8]
    26b2:	ea22 0203 	bic.w	r2, r2, r3
    26b6:	f8c8 2000 	str.w	r2, [r8]
    26ba:	e675      	b.n	23a8 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x148>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    26bc:	2100      	movs	r1, #0
    26be:	e635      	b.n	232c <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0xcc>
    26c0:	4b02      	ldr	r3, [pc, #8]	; (26cc <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x46c>)
    26c2:	9301      	str	r3, [sp, #4]
    26c4:	e5fd      	b.n	22c2 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x62>
	  __throw_length_error(__N(__s));
    26c6:	4802      	ldr	r0, [pc, #8]	; (26d0 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)+0x470>)
    26c8:	f002 f9f2 	bl	4ab0 <std::__throw_length_error(char const*)>
    26cc:	0ffffffc 	.word	0x0ffffffc
    26d0:	20000f78 	.word	0x20000f78
    26d4:	00000000 	.word	0x00000000

000026d8 <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)>:
      _Hashtable() = default;
    26d8:	f100 0338 	add.w	r3, r0, #56	; 0x38
    : ecu_config(config), flash_initialized(false), flash_id(0), total_sectors(0), used_sectors(0),
    26dc:	2200      	movs	r2, #0
W25Q128StorageBackend::W25Q128StorageBackend(const ECUConfiguration& config) 
    26de:	b570      	push	{r4, r5, r6, lr}
    26e0:	6203      	str	r3, [r0, #32]
    26e2:	2301      	movs	r3, #1
    26e4:	4604      	mov	r4, r0
      error_count(0) {
    26e6:	4d3c      	ldr	r5, [pc, #240]	; (27d8 <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)+0x100>)
    26e8:	6243      	str	r3, [r0, #36]	; 0x24
W25Q128StorageBackend::W25Q128StorageBackend(const ECUConfiguration& config) 
    26ea:	b084      	sub	sp, #16
    26ec:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
      cache_enabled(true), cache_size_limit(MAX_CACHE_SIZE), cache_hits(0), cache_misses(0),
    26f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    26f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    : _M_max_load_factor(__z), _M_next_resize(0) { }
    26f8:	6342      	str	r2, [r0, #52]	; 0x34
    26fa:	6403      	str	r3, [r0, #64]	; 0x40
    26fc:	f100 03fc 	add.w	r3, r0, #252	; 0xfc
    2700:	6382      	str	r2, [r0, #56]	; 0x38
    : _M_p(__x), _M_offset(__y) { }
    2702:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
    : ecu_config(config), flash_initialized(false), flash_id(0), total_sectors(0), used_sectors(0),
    2706:	7402      	strb	r2, [r0, #16]
    2708:	6142      	str	r2, [r0, #20]
    270a:	61c2      	str	r2, [r0, #28]
    270c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
    2710:	e9c0 2235 	strd	r2, r2, [r0, #212]	; 0xd4
	: _M_start(), _M_finish(), _M_end_of_storage()
    2714:	e9c0 2237 	strd	r2, r2, [r0, #220]	; 0xdc
    2718:	e9c0 223b 	strd	r2, r2, [r0, #236]	; 0xec
    271c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
    2720:	e9c0 5100 	strd	r5, r1, [r0]
    spi_frequency = config.spi.qspi_flash.frequency;
    2724:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    2728:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    272c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
      error_count(0) {
    2730:	64e2      	str	r2, [r4, #76]	; 0x4c
    2732:	6323      	str	r3, [r4, #48]	; 0x30
    2734:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    cs_pin = config.spi.qspi_flash.cs_pin;
    2738:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
      cache_enabled(true), cache_size_limit(MAX_CACHE_SIZE), cache_hits(0), cache_misses(0),
    273c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
    cs_pin = config.spi.qspi_flash.cs_pin;
    2740:	7223      	strb	r3, [r4, #8]
    total_sectors = W25Q128_FLASH_SIZE / W25Q128_SECTOR_SIZE;
    2742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    spi_frequency = config.spi.qspi_flash.frequency;
    2746:	60e0      	str	r0, [r4, #12]
	_M_fill_insert(__position._M_const_cast(), __n, __x);
    2748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    total_sectors = W25Q128_FLASH_SIZE / W25Q128_SECTOR_SIZE;
    274c:	61a3      	str	r3, [r4, #24]
    274e:	9200      	str	r2, [sp, #0]
    : _M_p(__x), _M_offset(__y) { }
    2750:	e9cd 2202 	strd	r2, r2, [sp, #8]
	_M_fill_insert(__position._M_const_cast(), __n, __x);
    2754:	aa04      	add	r2, sp, #16
    2756:	e912 0006 	ldmdb	r2, {r1, r2}
    275a:	f7ff fd81 	bl	2260 <std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned int, bool)>
	= std::max(_M_rehash_policy._M_bkt_for_elements(_M_element_count + 1),
    275e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    { return __builtin_ceil(__n / (double)_M_max_load_factor); }
    2760:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
      __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count);
    2764:	f104 0030 	add.w	r0, r4, #48	; 0x30
	= std::max(_M_rehash_policy._M_bkt_for_elements(_M_element_count + 1),
    2768:	3301      	adds	r3, #1
    { return _M_next_resize; }
    276a:	6b66      	ldr	r6, [r4, #52]	; 0x34
    { return __builtin_ceil(__n / (double)_M_max_load_factor); }
    276c:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    2770:	ee06 3a90 	vmov	s13, r3
    2774:	ed9f 7b16 	vldr	d7, [pc, #88]	; 27d0 <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)+0xf8>
    2778:	eeb8 5b66 	vcvt.f64.u32	d5, s13
    277c:	ee87 6b04 	vdiv.f64	d6, d7, d4
    2780:	ee85 7b04 	vdiv.f64	d7, d5, d4
    2784:	feba 6b46 	vrintp.f64	d6, d6
    2788:	eefc 6bc6 	vcvt.u32.f64	s13, d6
    278c:	ee16 1a90 	vmov	r1, s13
    2790:	feba 7b47 	vrintp.f64	d7, d7
    2794:	eebc 7bc7 	vcvt.u32.f64	s14, d7
      __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count);
    2798:	ee17 3a10 	vmov	r3, s14
    279c:	4299      	cmp	r1, r3
    279e:	bf38      	it	cc
    27a0:	4619      	movcc	r1, r3
    27a2:	f002 f99d 	bl	4ae0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const>
      if (__bkt_count != _M_bucket_count)
    27a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27a8:	4298      	cmp	r0, r3
    27aa:	d10a      	bne.n	27c2 <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)+0xea>
    { _M_next_resize = __state; }
    27ac:	6366      	str	r6, [r4, #52]	; 0x34
    strcpy(last_error, "No errors");
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)+0x104>)
    27b0:	cb03      	ldmia	r3!, {r0, r1}
    27b2:	881b      	ldrh	r3, [r3, #0]
    27b4:	6520      	str	r0, [r4, #80]	; 0x50
}
    27b6:	4620      	mov	r0, r4
    strcpy(last_error, "No errors");
    27b8:	6561      	str	r1, [r4, #84]	; 0x54
    27ba:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
}
    27be:	b004      	add	sp, #16
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	f104 0520 	add.w	r5, r4, #32
	  _M_rehash_aux(__bkt_count, __unique_keys{});
    27c6:	4601      	mov	r1, r0
    27c8:	4628      	mov	r0, r5
    27ca:	f7fe fae3 	bl	d94 <std::_Hashtable<unsigned long, std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry>, std::allocator<std::pair<unsigned long const, W25Q128StorageBackend::CacheEntry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned int, std::integral_constant<bool, true>) [clone .isra.0]>
    }
    27ce:	e7ee      	b.n	27ae <W25Q128StorageBackend::W25Q128StorageBackend(ECUConfiguration const&)+0xd6>
    27d0:	00000000 	.word	0x00000000
    27d4:	40700000 	.word	0x40700000
    27d8:	20001570 	.word	0x20001570
    27dc:	20000b18 	.word	0x20000b18

000027e0 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    27e0:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    27e4:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    27e6:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    27ea:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    27ec:	d101      	bne.n	27f2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    27ee:	6883      	ldr	r3, [r0, #8]
    27f0:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    27f2:	f000 b9bd 	b.w	2b70 <EventResponder::triggerEventNotImmediate()>
    27f6:	bf00      	nop

000027f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    27f8:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27fa:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    27fc:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    2800:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2802:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    2804:	b1a3      	cbz	r3, 2830 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2806:	b321      	cbz	r1, 2852 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    2808:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    280c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    280e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2810:	6f25      	ldr	r5, [r4, #112]	; 0x70
    2812:	07af      	lsls	r7, r5, #30
    2814:	d407      	bmi.n	2826 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    2816:	4615      	mov	r5, r2
				count_read--;
    2818:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    281a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    281c:	b11a      	cbz	r2, 2826 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    281e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2822:	462a      	mov	r2, r5
    2824:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    2826:	6965      	ldr	r5, [r4, #20]
    2828:	07ed      	lsls	r5, r5, #31
    282a:	d5f1      	bpl.n	2810 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    282c:	2b00      	cmp	r3, #0
    282e:	d1ea      	bne.n	2806 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2830:	b16e      	cbz	r6, 284e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2832:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2834:	6f19      	ldr	r1, [r3, #112]	; 0x70
    2836:	0789      	lsls	r1, r1, #30
    2838:	d4fa      	bmi.n	2830 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    283a:	4611      	mov	r1, r2
			count_read--;
    283c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2840:	2a00      	cmp	r2, #0
    2842:	d0f5      	beq.n	2830 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2844:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2848:	460a      	mov	r2, r1
	while (count_read) {
    284a:	2e00      	cmp	r6, #0
    284c:	d1f1      	bne.n	2832 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    284e:	bcf0      	pop	{r4, r5, r6, r7}
    2850:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2852:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    2856:	e7d9      	b.n	280c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002858 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2858:	4b32      	ldr	r3, [pc, #200]	; (2924 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    285a:	4933      	ldr	r1, [pc, #204]	; (2928 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    285c:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    285e:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    2862:	7920      	ldrb	r0, [r4, #4]
    2864:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2868:	f895 c004 	ldrb.w	ip, [r5, #4]
    286c:	f881 c01c 	strb.w	ip, [r1, #28]
    2870:	7708      	strb	r0, [r1, #28]
    2872:	b152      	cbz	r2, 288a <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2874:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2878:	d323      	bcc.n	28c2 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    287a:	492c      	ldr	r1, [pc, #176]	; (292c <_spi_dma_rxISR0()+0xd4>)
    287c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    287e:	4a2a      	ldr	r2, [pc, #168]	; (2928 <_spi_dma_rxISR0()+0xd0>)
    2880:	6419      	str	r1, [r3, #64]	; 0x40
    2882:	76d0      	strb	r0, [r2, #27]
    2884:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2888:	bd30      	pop	{r4, r5, pc}
    288a:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    288c:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    288e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2890:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2892:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2896:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2898:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    289a:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    289e:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    28a0:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    28a2:	6804      	ldr	r4, [r0, #0]
    28a4:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    28a6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    28aa:	4b21      	ldr	r3, [pc, #132]	; (2930 <_spi_dma_rxISR0()+0xd8>)
    28ac:	429c      	cmp	r4, r3
    28ae:	d126      	bne.n	28fe <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    28b0:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    28b2:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    28b4:	2b02      	cmp	r3, #2
		_data = data;
    28b6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    28b8:	d126      	bne.n	2908 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    28ba:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    28bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    28c0:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    28c2:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    28c4:	8be9      	ldrh	r1, [r5, #30]
    28c6:	0409      	lsls	r1, r1, #16
    28c8:	d422      	bmi.n	2910 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    28ca:	b292      	uxth	r2, r2
    28cc:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    28ce:	6821      	ldr	r1, [r4, #0]
    28d0:	8bec      	ldrh	r4, [r5, #30]
    28d2:	b2a4      	uxth	r4, r4
    28d4:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    28d6:	8bcc      	ldrh	r4, [r1, #30]
    28d8:	0424      	lsls	r4, r4, #16
    28da:	d505      	bpl.n	28e8 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    28dc:	8bcc      	ldrh	r4, [r1, #30]
    28de:	f3c2 0208 	ubfx	r2, r2, #0, #9
    28e2:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    28e6:	4322      	orrs	r2, r4
    28e8:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    28ea:	8bca      	ldrh	r2, [r1, #30]
    28ec:	b292      	uxth	r2, r2
    28ee:	82ca      	strh	r2, [r1, #22]
    28f0:	2100      	movs	r1, #0
    28f2:	4a0d      	ldr	r2, [pc, #52]	; (2928 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    28f4:	6419      	str	r1, [r3, #64]	; 0x40
    28f6:	76d0      	strb	r0, [r2, #27]
    28f8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    28fc:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    28fe:	4623      	mov	r3, r4
    2900:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2906:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    290c:	f000 b930 	b.w	2b70 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2910:	8be9      	ldrh	r1, [r5, #30]
    2912:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    2916:	b292      	uxth	r2, r2
    2918:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    291c:	ea41 010e 	orr.w	r1, r1, lr
    2920:	83e9      	strh	r1, [r5, #30]
    2922:	e7d4      	b.n	28ce <_spi_dma_rxISR0()+0x76>
    2924:	20002fa0 	.word	0x20002fa0
    2928:	400e8000 	.word	0x400e8000
    292c:	ffff8001 	.word	0xffff8001
    2930:	000027e1 	.word	0x000027e1

00002934 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2934:	6843      	ldr	r3, [r0, #4]
{
    2936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    293a:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    293e:	4d81      	ldr	r5, [pc, #516]	; (2b44 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2940:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2944:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    2946:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    294a:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    294e:	497e      	ldr	r1, [pc, #504]	; (2b48 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2950:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2952:	69aa      	ldr	r2, [r5, #24]
    2954:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    2956:	4a7d      	ldr	r2, [pc, #500]	; (2b4c <SPIClass::begin()+0x218>)
    2958:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    295a:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    295c:	f890 e010 	ldrb.w	lr, [r0, #16]
    2960:	4a7b      	ldr	r2, [pc, #492]	; (2b50 <SPIClass::begin()+0x21c>)
    2962:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2966:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    296a:	7c31      	ldrb	r1, [r6, #16]
    296c:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2970:	6889      	ldr	r1, [r1, #8]
    2972:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2976:	f890 c011 	ldrb.w	ip, [r0, #17]
    297a:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    297e:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2982:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    2986:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    298a:	6889      	ldr	r1, [r1, #8]
    298c:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2990:	7c81      	ldrb	r1, [r0, #18]
    2992:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2996:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    299a:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    299e:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    29a2:	f8db b008 	ldr.w	fp, [fp, #8]
    29a6:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    29aa:	f8d4 a000 	ldr.w	sl, [r4]
    29ae:	685f      	ldr	r7, [r3, #4]
    29b0:	ea4a 0a07 	orr.w	sl, sl, r7
    29b4:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    29b8:	7c34      	ldrb	r4, [r6, #16]
    29ba:	f8de e014 	ldr.w	lr, [lr, #20]
    29be:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    29c2:	6864      	ldr	r4, [r4, #4]
    29c4:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    29c8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    29cc:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    29d0:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    29d4:	6864      	ldr	r4, [r4, #4]
    29d6:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    29da:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    29dc:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    29e0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    29e4:	6852      	ldr	r2, [r2, #4]
    29e6:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    29e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    29ea:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    29ee:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    29f0:	6a1a      	ldr	r2, [r3, #32]
    29f2:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    29f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    29f6:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    29f8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    29fc:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    29fe:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2a00:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    2a02:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2a06:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2a08:	7cc2      	ldrb	r2, [r0, #19]
    2a0a:	2a00      	cmp	r2, #0
    2a0c:	d031      	beq.n	2a72 <SPIClass::begin()+0x13e>
			__disable_irq();
    2a0e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2a10:	7cc3      	ldrb	r3, [r0, #19]
    2a12:	07dc      	lsls	r4, r3, #31
    2a14:	d508      	bpl.n	2a28 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2a16:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a1a:	6944      	ldr	r4, [r0, #20]
    2a1c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    2a20:	4022      	ands	r2, r4
    2a22:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2a24:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    2a28:	0799      	lsls	r1, r3, #30
    2a2a:	d508      	bpl.n	2a3e <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2a2c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a30:	6984      	ldr	r4, [r0, #24]
    2a32:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    2a36:	4022      	ands	r2, r4
    2a38:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2a3a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    2a3e:	075a      	lsls	r2, r3, #29
    2a40:	d508      	bpl.n	2a54 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2a42:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a46:	69c4      	ldr	r4, [r0, #28]
    2a48:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    2a4c:	4022      	ands	r2, r4
    2a4e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2a50:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    2a54:	071f      	lsls	r7, r3, #28
    2a56:	d508      	bpl.n	2a6a <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2a58:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a5c:	6a04      	ldr	r4, [r0, #32]
    2a5e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    2a62:	4022      	ands	r2, r4
    2a64:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2a66:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    2a6a:	06de      	lsls	r6, r3, #27
    2a6c:	d455      	bmi.n	2b1a <SPIClass::begin()+0x1e6>
			__enable_irq();
    2a6e:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2a70:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    2a72:	4c38      	ldr	r4, [pc, #224]	; (2b54 <SPIClass::begin()+0x220>)
    2a74:	6882      	ldr	r2, [r0, #8]
    2a76:	42a2      	cmp	r2, r4
    2a78:	d059      	beq.n	2b2e <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    2a7a:	4a32      	ldr	r2, [pc, #200]	; (2b44 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    2a7c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2a7e:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2a80:	4935      	ldr	r1, [pc, #212]	; (2b58 <SPIClass::begin()+0x224>)
    2a82:	f3c2 1601 	ubfx	r6, r2, #4, #2
    2a86:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    2a8a:	4d34      	ldr	r5, [pc, #208]	; (2b5c <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2a8c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    2a90:	3201      	adds	r2, #1
    2a92:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    2a96:	42aa      	cmp	r2, r5
    2a98:	d831      	bhi.n	2afe <SPIClass::begin()+0x1ca>
    2a9a:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2a9c:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    2a9e:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2aa0:	2103      	movs	r1, #3
		port().CR = 0;
    2aa2:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    2aa4:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2aa6:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2aa8:	2101      	movs	r1, #1
		port().CCR = _ccr;
    2aaa:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2aac:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2aae:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    2ab0:	7cc3      	ldrb	r3, [r0, #19]
    2ab2:	b313      	cbz	r3, 2afa <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2ab4:	07dd      	lsls	r5, r3, #31
    2ab6:	d504      	bpl.n	2ac2 <SPIClass::begin()+0x18e>
    2ab8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2aba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2abe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2ac2:	079c      	lsls	r4, r3, #30
    2ac4:	d504      	bpl.n	2ad0 <SPIClass::begin()+0x19c>
    2ac6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2ac8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2acc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2ad0:	0759      	lsls	r1, r3, #29
    2ad2:	d504      	bpl.n	2ade <SPIClass::begin()+0x1aa>
    2ad4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2ad6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2ada:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2ade:	071a      	lsls	r2, r3, #28
    2ae0:	d504      	bpl.n	2aec <SPIClass::begin()+0x1b8>
    2ae2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2ae4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2ae8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2aec:	06db      	lsls	r3, r3, #27
    2aee:	d504      	bpl.n	2afa <SPIClass::begin()+0x1c6>
    2af0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2af2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2af6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    2afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    2afe:	4918      	ldr	r1, [pc, #96]	; (2b60 <SPIClass::begin()+0x22c>)
    2b00:	fba1 5102 	umull	r5, r1, r1, r2
    2b04:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    2b06:	fbb2 f2f1 	udiv	r2, r2, r1
    2b0a:	42a2      	cmp	r2, r4
    2b0c:	bf88      	it	hi
    2b0e:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    2b10:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2b14:	d30d      	bcc.n	2b32 <SPIClass::begin()+0x1fe>
    2b16:	4a13      	ldr	r2, [pc, #76]	; (2b64 <SPIClass::begin()+0x230>)
				div = d-2;
    2b18:	e7c0      	b.n	2a9c <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2b1a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2b1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2b20:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    2b24:	400b      	ands	r3, r1
    2b26:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2b28:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    2b2c:	e79f      	b.n	2a6e <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    2b2e:	68c2      	ldr	r2, [r0, #12]
    2b30:	e7b5      	b.n	2a9e <SPIClass::begin()+0x16a>
			if (d > 2) {
    2b32:	2902      	cmp	r1, #2
    2b34:	d9b1      	bls.n	2a9a <SPIClass::begin()+0x166>
				div = d-2;
    2b36:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2b38:	084c      	lsrs	r4, r1, #1
    2b3a:	0222      	lsls	r2, r4, #8
    2b3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    2b40:	430a      	orrs	r2, r1
    2b42:	e7ab      	b.n	2a9c <SPIClass::begin()+0x168>
    2b44:	400fc000 	.word	0x400fc000
    2b48:	e3ffffcf 	.word	0xe3ffffcf
    2b4c:	08000010 	.word	0x08000010
    2b50:	200023d0 	.word	0x200023d0
    2b54:	003d0900 	.word	0x003d0900
    2b58:	2000166c 	.word	0x2000166c
    2b5c:	003d08ff 	.word	0x003d08ff
    2b60:	431bde83 	.word	0x431bde83
    2b64:	007f7fff 	.word	0x007f7fff

00002b68 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2b68:	b10b      	cbz	r3, 2b6e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2b6a:	f7ff be45 	b.w	27f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    2b6e:	4770      	bx	lr

00002b70 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2b70:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2b74:	b672      	cpsid	i
// BUGBUG: See if file name order makes difference?

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    2b76:	7f43      	ldrb	r3, [r0, #29]
    2b78:	b95b      	cbnz	r3, 2b92 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    2b7a:	7f01      	ldrb	r1, [r0, #28]
    2b7c:	2901      	cmp	r1, #1
{
    2b7e:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    2b80:	d00b      	beq.n	2b9a <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    2b82:	2903      	cmp	r1, #3
    2b84:	d013      	beq.n	2bae <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    2b86:	2301      	movs	r3, #1
    2b88:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b8a:	b902      	cbnz	r2, 2b8e <EventResponder::triggerEventNotImmediate()+0x1e>
    2b8c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    2b8e:	bc30      	pop	{r4, r5}
    2b90:	4770      	bx	lr
    2b92:	b90a      	cbnz	r2, 2b98 <EventResponder::triggerEventNotImmediate()+0x28>
    2b94:	b662      	cpsie	i
    2b96:	4770      	bx	lr
    2b98:	4770      	bx	lr
			if (firstYield == nullptr) {
    2b9a:	4c12      	ldr	r4, [pc, #72]	; (2be4 <EventResponder::triggerEventNotImmediate()+0x74>)
    2b9c:	6821      	ldr	r1, [r4, #0]
    2b9e:	b1b1      	cbz	r1, 2bce <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    2ba0:	4911      	ldr	r1, [pc, #68]	; (2be8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    2ba2:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    2ba4:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    2ba6:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    2ba8:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2baa:	6158      	str	r0, [r3, #20]
				lastYield = this;
    2bac:	e7eb      	b.n	2b86 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    2bae:	4d0f      	ldr	r5, [pc, #60]	; (2bec <EventResponder::triggerEventNotImmediate()+0x7c>)
    2bb0:	490f      	ldr	r1, [pc, #60]	; (2bf0 <EventResponder::triggerEventNotImmediate()+0x80>)
    2bb2:	682c      	ldr	r4, [r5, #0]
    2bb4:	b18c      	cbz	r4, 2bda <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    2bb6:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2bb8:	680b      	ldr	r3, [r1, #0]
    2bba:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2bbc:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2bbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2bc2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    2bc6:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2bc8:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    2bcc:	e7db      	b.n	2b86 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    2bce:	4b06      	ldr	r3, [pc, #24]	; (2be8 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    2bd0:	6020      	str	r0, [r4, #0]
				lastYield = this;
    2bd2:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    2bd4:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    2bd8:	e7d5      	b.n	2b86 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    2bda:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    2bde:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    2be0:	e7ed      	b.n	2bbe <EventResponder::triggerEventNotImmediate()+0x4e>
    2be2:	bf00      	nop
    2be4:	20003ca4 	.word	0x20003ca4
    2be8:	20003cb0 	.word	0x20003cb0
    2bec:	20003cac 	.word	0x20003cac
    2bf0:	20003ca8 	.word	0x20003ca8

00002bf4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2bf4:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2bf6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2bfa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2bfc:	4c0c      	ldr	r4, [pc, #48]	; (2c30 <EventResponder::runFromInterrupt()+0x3c>)
    2bfe:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2c00:	b180      	cbz	r0, 2c24 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2c02:	4e0c      	ldr	r6, [pc, #48]	; (2c34 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2c04:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2c06:	6943      	ldr	r3, [r0, #20]
    2c08:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    2c0a:	b173      	cbz	r3, 2c2a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2c0c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2c0e:	b902      	cbnz	r2, 2c12 <EventResponder::runFromInterrupt()+0x1e>
    2c10:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    2c12:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2c14:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2c16:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2c18:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2c1c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2c1e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2c20:	2800      	cmp	r0, #0
    2c22:	d1f0      	bne.n	2c06 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2c24:	b902      	cbnz	r2, 2c28 <EventResponder::runFromInterrupt()+0x34>
    2c26:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    2c28:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2c2a:	6033      	str	r3, [r6, #0]
    2c2c:	e7ef      	b.n	2c0e <EventResponder::runFromInterrupt()+0x1a>
    2c2e:	bf00      	nop
    2c30:	20003cac 	.word	0x20003cac
    2c34:	20003ca8 	.word	0x20003ca8

00002c38 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2c38:	f7ff bfdc 	b.w	2bf4 <EventResponder::runFromInterrupt()>

00002c3c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2c3c:	4904      	ldr	r1, [pc, #16]	; (2c50 <systick_isr+0x14>)
	systick_millis_count++;
    2c3e:	4a05      	ldr	r2, [pc, #20]	; (2c54 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2c40:	6849      	ldr	r1, [r1, #4]
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <systick_isr+0x1c>)
    2c44:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2c46:	6813      	ldr	r3, [r2, #0]
    2c48:	3301      	adds	r3, #1
    2c4a:	6013      	str	r3, [r2, #0]
}
    2c4c:	4770      	bx	lr
    2c4e:	bf00      	nop
    2c50:	e0001000 	.word	0xe0001000
    2c54:	20004268 	.word	0x20004268
    2c58:	20004264 	.word	0x20004264

00002c5c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2c5c:	4608      	mov	r0, r1
    2c5e:	f001 bb3f 	b.w	42e0 <usb_serial_putchar>
    2c62:	bf00      	nop

00002c64 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2c64:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    2c66:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    2c68:	bf08      	it	eq
    2c6a:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    2c6c:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    2c6e:	b391      	cbz	r1, 2cd6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    2c70:	f04f 0e21 	mov.w	lr, #33	; 0x21
    2c74:	e001      	b.n	2c7a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2c76:	fa5f fe86 	uxtb.w	lr, r6
    2c7a:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
    2c7e:	fbb1 f5f2 	udiv	r5, r1, r2
    2c82:	fb02 1415 	mls	r4, r2, r5, r1
    2c86:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2c8a:	2c09      	cmp	r4, #9
    2c8c:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    2c90:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    2c94:	bf98      	it	ls
    2c96:	fa5f f48c 	uxtbls.w	r4, ip
    2c9a:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    2c9e:	bf88      	it	hi
    2ca0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    2ca2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2ca4:	44ec      	add	ip, sp
			n /= base;
    2ca6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2ca8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    2cac:	d2e3      	bcs.n	2c76 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    2cae:	b14b      	cbz	r3, 2cc4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    2cb0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
    2cb4:	222d      	movs	r2, #45	; 0x2d
		i--;
    2cb6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    2cba:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    2cbe:	446b      	add	r3, sp
    2cc0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2cc4:	6803      	ldr	r3, [r0, #0]
    2cc6:	a901      	add	r1, sp, #4
    2cc8:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    2ccc:	685b      	ldr	r3, [r3, #4]
    2cce:	4471      	add	r1, lr
    2cd0:	4798      	blx	r3
}
    2cd2:	b00a      	add	sp, #40	; 0x28
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    2cd6:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2cd8:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    2cdc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2ce0:	e7e5      	b.n	2cae <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    2ce2:	bf00      	nop

00002ce4 <Print::print(long)>:
	if (n < 0) {
    2ce4:	2900      	cmp	r1, #0
    2ce6:	db03      	blt.n	2cf0 <Print::print(long)+0xc>
	uint8_t sign=0;
    2ce8:	2300      	movs	r3, #0
	if (base == 0) {
    2cea:	220a      	movs	r2, #10
    2cec:	f7ff bfba 	b.w	2c64 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    2cf0:	4249      	negs	r1, r1
		sign = '-';
    2cf2:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    2cf4:	220a      	movs	r2, #10
    2cf6:	f7ff bfb5 	b.w	2c64 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    2cfa:	bf00      	nop

00002cfc <Print::println()>:
{
    2cfc:	b500      	push	{lr}
	return write(buf, 2);
    2cfe:	6803      	ldr	r3, [r0, #0]
{
    2d00:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    2d02:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    2d06:	2202      	movs	r2, #2
    2d08:	a901      	add	r1, sp, #4
    2d0a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    2d0c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    2d10:	4798      	blx	r3
}
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4

00002d18 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2d18:	4b05      	ldr	r3, [pc, #20]	; (2d30 <_write+0x18>)
    2d1a:	2802      	cmp	r0, #2
    2d1c:	bf88      	it	hi
    2d1e:	4603      	movhi	r3, r0
{
    2d20:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2d22:	681c      	ldr	r4, [r3, #0]
    2d24:	4618      	mov	r0, r3
    2d26:	6863      	ldr	r3, [r4, #4]
}
    2d28:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2d2c:	4718      	bx	r3
    2d2e:	bf00      	nop
    2d30:	20002ff0 	.word	0x20002ff0

00002d34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    2d34:	b95a      	cbnz	r2, 2d4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    2d36:	6803      	ldr	r3, [r0, #0]
    2d38:	b2c9      	uxtb	r1, r1
    2d3a:	4a07      	ldr	r2, [pc, #28]	; (2d58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	4293      	cmp	r3, r2
{
    2d40:	b500      	push	{lr}
    2d42:	d106      	bne.n	2d52 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    2d44:	4608      	mov	r0, r1
}
    2d46:	f85d eb04 	ldr.w	lr, [sp], #4
    2d4a:	f001 bac9 	b.w	42e0 <usb_serial_putchar>
    2d4e:	f7ff bf89 	b.w	2c64 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    2d52:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    2d56:	4718      	bx	r3
    2d58:	00002c5d 	.word	0x00002c5d

00002d5c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2d5c:	b900      	cbnz	r0, 2d60 <delay+0x4>
    2d5e:	4770      	bx	lr
{
    2d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2d64:	2101      	movs	r1, #1
    2d66:	4681      	mov	r9, r0
    2d68:	4c21      	ldr	r4, [pc, #132]	; (2df0 <delay+0x94>)
    2d6a:	4d22      	ldr	r5, [pc, #136]	; (2df4 <delay+0x98>)
    2d6c:	4e22      	ldr	r6, [pc, #136]	; (2df8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2d6e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2d72:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2d74:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2d76:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d1f7      	bne.n	2d6e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2d7e:	491f      	ldr	r1, [pc, #124]	; (2dfc <delay+0xa0>)
    2d80:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2d82:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2d86:	f8df a078 	ldr.w	sl, [pc, #120]	; 2e00 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    2d8a:	1a1b      	subs	r3, r3, r0
    2d8c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    2d8e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2d92:	f8da 2000 	ldr.w	r2, [sl]
    2d96:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    2d9a:	455a      	cmp	r2, fp
    2d9c:	bf94      	ite	ls
    2d9e:	4490      	addls	r8, r2
    2da0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2da2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    2da6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2da8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2daa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2dae:	2b00      	cmp	r3, #0
    2db0:	d1f7      	bne.n	2da2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2db2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2db4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    2db8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    2dba:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2dbe:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    2dc2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    2dc6:	bf94      	ite	ls
    2dc8:	4462      	addls	r2, ip
    2dca:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    2dce:	eba2 0208 	sub.w	r2, r2, r8
    2dd2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    2dd6:	d306      	bcc.n	2de6 <delay+0x8a>
			if (--msec == 0) return;
    2dd8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    2ddc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    2de0:	d1df      	bne.n	2da2 <delay+0x46>
}
    2de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    2de6:	f001 fb0f 	bl	4408 <yield>
		while ((micros() - start) >= 1000) {
    2dea:	4904      	ldr	r1, [pc, #16]	; (2dfc <delay+0xa0>)
    2dec:	e7d9      	b.n	2da2 <delay+0x46>
    2dee:	bf00      	nop
    2df0:	2000426c 	.word	0x2000426c
    2df4:	20004268 	.word	0x20004268
    2df8:	20004264 	.word	0x20004264
    2dfc:	e0001000 	.word	0xe0001000
    2e00:	20004160 	.word	0x20004160

00002e04 <micros>:
{
    2e04:	b430      	push	{r4, r5}
    2e06:	4b0f      	ldr	r3, [pc, #60]	; (2e44 <micros+0x40>)
    2e08:	f04f 0c01 	mov.w	ip, #1
    2e0c:	4d0e      	ldr	r5, [pc, #56]	; (2e48 <micros+0x44>)
    2e0e:	4c0f      	ldr	r4, [pc, #60]	; (2e4c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2e10:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    2e14:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    2e16:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2e18:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    2e1c:	2a00      	cmp	r2, #0
    2e1e:	d1f7      	bne.n	2e10 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2e20:	4b0b      	ldr	r3, [pc, #44]	; (2e50 <micros+0x4c>)
    2e22:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2e24:	4a0b      	ldr	r2, [pc, #44]	; (2e54 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    2e26:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    2e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2e2c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    2e2e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2e32:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    2e36:	bc30      	pop	{r4, r5}
    2e38:	428a      	cmp	r2, r1
    2e3a:	bf94      	ite	ls
    2e3c:	1880      	addls	r0, r0, r2
    2e3e:	1840      	addhi	r0, r0, r1
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop
    2e44:	2000426c 	.word	0x2000426c
    2e48:	20004268 	.word	0x20004268
    2e4c:	20004264 	.word	0x20004264
    2e50:	e0001000 	.word	0xe0001000
    2e54:	20004160 	.word	0x20004160

00002e58 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2e58:	2836      	cmp	r0, #54	; 0x36
    2e5a:	d816      	bhi.n	2e8a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    2e5c:	0102      	lsls	r2, r0, #4
    2e5e:	4b10      	ldr	r3, [pc, #64]	; (2ea0 <digitalWrite+0x48>)
    2e60:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    2e64:	589b      	ldr	r3, [r3, r2]
{
    2e66:	b410      	push	{r4}
	mask = p->mask;
    2e68:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    2e6a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    2e6c:	4214      	tst	r4, r2
    2e6e:	d005      	beq.n	2e7c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    2e70:	b961      	cbnz	r1, 2e8c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    2e72:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    2e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    2e7a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2e7c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    2e7e:	b151      	cbz	r1, 2e96 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2e80:	4a08      	ldr	r2, [pc, #32]	; (2ea4 <digitalWrite+0x4c>)
}
    2e82:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2e86:	601a      	str	r2, [r3, #0]
}
    2e88:	4770      	bx	lr
    2e8a:	4770      	bx	lr
    2e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    2e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2e94:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2e96:	4a04      	ldr	r2, [pc, #16]	; (2ea8 <digitalWrite+0x50>)
}
    2e98:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2e9c:	601a      	str	r2, [r3, #0]
}
    2e9e:	4770      	bx	lr
    2ea0:	200023d0 	.word	0x200023d0
    2ea4:	0001f038 	.word	0x0001f038
    2ea8:	00013038 	.word	0x00013038

00002eac <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    2eac:	2836      	cmp	r0, #54	; 0x36
    2eae:	d80b      	bhi.n	2ec8 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    2eb0:	4b06      	ldr	r3, [pc, #24]	; (2ecc <digitalRead+0x20>)
    2eb2:	0102      	lsls	r2, r0, #4
    2eb4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    2eb8:	589a      	ldr	r2, [r3, r2]
    2eba:	68c3      	ldr	r3, [r0, #12]
    2ebc:	6892      	ldr	r2, [r2, #8]
    2ebe:	421a      	tst	r2, r3
    2ec0:	bf14      	ite	ne
    2ec2:	2001      	movne	r0, #1
    2ec4:	2000      	moveq	r0, #0
    2ec6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2ec8:	2000      	movs	r0, #0
}
    2eca:	4770      	bx	lr
    2ecc:	200023d0 	.word	0x200023d0

00002ed0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2ed0:	2836      	cmp	r0, #54	; 0x36
    2ed2:	d829      	bhi.n	2f28 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    2ed4:	4b16      	ldr	r3, [pc, #88]	; (2f30 <pinMode+0x60>)
    2ed6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2ed8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    2eda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2ede:	589a      	ldr	r2, [r3, r2]
{
    2ee0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2ee2:	6853      	ldr	r3, [r2, #4]
    2ee4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2ee6:	d00e      	beq.n	2f06 <pinMode+0x36>
    2ee8:	2904      	cmp	r1, #4
    2eea:	d00c      	beq.n	2f06 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2eec:	ea23 0304 	bic.w	r3, r3, r4
    2ef0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2ef2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    2ef4:	b1a9      	cbz	r1, 2f22 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    2ef6:	2902      	cmp	r1, #2
    2ef8:	d017      	beq.n	2f2a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2efa:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2efc:	bf0c      	ite	eq
    2efe:	4a0d      	ldreq	r2, [pc, #52]	; (2f34 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2f00:	4a0d      	ldrne	r2, [pc, #52]	; (2f38 <pinMode+0x68>)
    2f02:	601a      	str	r2, [r3, #0]
    2f04:	e007      	b.n	2f16 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2f06:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    2f08:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2f0a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2f0c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    2f0e:	d008      	beq.n	2f22 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2f10:	f640 0238 	movw	r2, #2104	; 0x838
    2f14:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2f16:	6843      	ldr	r3, [r0, #4]
    2f18:	2215      	movs	r2, #21
}
    2f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    2f1e:	601a      	str	r2, [r3, #0]
}
    2f20:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2f22:	2238      	movs	r2, #56	; 0x38
    2f24:	601a      	str	r2, [r3, #0]
    2f26:	e7f6      	b.n	2f16 <pinMode+0x46>
    2f28:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2f2a:	4a04      	ldr	r2, [pc, #16]	; (2f3c <pinMode+0x6c>)
    2f2c:	601a      	str	r2, [r3, #0]
    2f2e:	e7f2      	b.n	2f16 <pinMode+0x46>
    2f30:	200023d0 	.word	0x200023d0
    2f34:	00013038 	.word	0x00013038
    2f38:	00010038 	.word	0x00010038
    2f3c:	0001f038 	.word	0x0001f038

00002f40 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2f40:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2f42:	f7fd fe5b 	bl	bfc <setup>
	while (1) {
		loop();
    2f46:	f7fd f88f 	bl	68 <loop>
		yield();
    2f4a:	f001 fa5d 	bl	4408 <yield>
	while (1) {
    2f4e:	e7fa      	b.n	2f46 <main+0x6>

00002f50 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2f50:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2f52:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2f56:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2f5a:	d16d      	bne.n	3038 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2f5c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2f5e:	d341      	bcc.n	2fe4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2f60:	f851 3b04 	ldr.w	r3, [r1], #4
    2f64:	f840 3b04 	str.w	r3, [r0], #4
    2f68:	f851 3b04 	ldr.w	r3, [r1], #4
    2f6c:	f840 3b04 	str.w	r3, [r0], #4
    2f70:	f851 3b04 	ldr.w	r3, [r1], #4
    2f74:	f840 3b04 	str.w	r3, [r0], #4
    2f78:	f851 3b04 	ldr.w	r3, [r1], #4
    2f7c:	f840 3b04 	str.w	r3, [r0], #4
    2f80:	f851 3b04 	ldr.w	r3, [r1], #4
    2f84:	f840 3b04 	str.w	r3, [r0], #4
    2f88:	f851 3b04 	ldr.w	r3, [r1], #4
    2f8c:	f840 3b04 	str.w	r3, [r0], #4
    2f90:	f851 3b04 	ldr.w	r3, [r1], #4
    2f94:	f840 3b04 	str.w	r3, [r0], #4
    2f98:	f851 3b04 	ldr.w	r3, [r1], #4
    2f9c:	f840 3b04 	str.w	r3, [r0], #4
    2fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fa4:	f840 3b04 	str.w	r3, [r0], #4
    2fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fac:	f840 3b04 	str.w	r3, [r0], #4
    2fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fb4:	f840 3b04 	str.w	r3, [r0], #4
    2fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fbc:	f840 3b04 	str.w	r3, [r0], #4
    2fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fc4:	f840 3b04 	str.w	r3, [r0], #4
    2fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fcc:	f840 3b04 	str.w	r3, [r0], #4
    2fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    2fd4:	f840 3b04 	str.w	r3, [r0], #4
    2fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fdc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2fe0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2fe2:	d2bd      	bcs.n	2f60 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2fe4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2fe6:	d311      	bcc.n	300c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    2fec:	f840 3b04 	str.w	r3, [r0], #4
    2ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    2ff4:	f840 3b04 	str.w	r3, [r0], #4
    2ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    2ffc:	f840 3b04 	str.w	r3, [r0], #4
    3000:	f851 3b04 	ldr.w	r3, [r1], #4
    3004:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3008:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    300a:	d2ed      	bcs.n	2fe8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    300c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    300e:	d305      	bcc.n	301c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3010:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3014:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3018:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    301a:	d2f9      	bcs.n	3010 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    301c:	3204      	adds	r2, #4
	beq	.Ldone
    301e:	d008      	beq.n	3032 <memcpy+0xe2>

	lsls	r2, r2, #31
    3020:	07d2      	lsls	r2, r2, #31
	itt ne
    3022:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3024:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3028:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    302c:	d301      	bcc.n	3032 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    302e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3030:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3032:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3034:	4770      	bx	lr
    3036:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3038:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    303a:	d313      	bcc.n	3064 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    303c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    303e:	d08d      	beq.n	2f5c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3040:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3044:	d08a      	beq.n	2f5c <memcpy+0xc>

	rsb	r3, #4
    3046:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    304a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    304c:	07db      	lsls	r3, r3, #31
	itt ne
    304e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3050:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3054:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3058:	d380      	bcc.n	2f5c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    305a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    305e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3062:	e77b      	b.n	2f5c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3064:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3066:	d3d9      	bcc.n	301c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3068:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    306a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    306e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3072:	d2f9      	bcs.n	3068 <memcpy+0x118>

	ldrb	r3, [r1]
    3074:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3076:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3078:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    307a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    307c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    307e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3080:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3082:	4770      	bx	lr

00003084 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    3084:	f009 bea2 	b.w	cdcc <malloc>

00003088 <operator new[](unsigned int)>:
    3088:	f009 bea0 	b.w	cdcc <malloc>

0000308c <operator delete(void*)>:
	return malloc(size);
}

void operator delete(void * ptr)
{
	free(ptr);
    308c:	f009 bea6 	b.w	cddc <free>

00003090 <operator delete[](void*)>:
    3090:	f009 bea4 	b.w	cddc <free>

00003094 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    3094:	f009 bea2 	b.w	cddc <free>

00003098 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    3098:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    309c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    309e:	4666      	mov	r6, ip
	int i=0, j;
    30a0:	2400      	movs	r4, #0
    30a2:	e000      	b.n	30a6 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    30a4:	3401      	adds	r4, #1
		digit = val % radix;
    30a6:	fbb0 f5f2 	udiv	r5, r0, r2
    30aa:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    30ae:	2b09      	cmp	r3, #9
    30b0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    30b4:	f103 0330 	add.w	r3, r3, #48	; 0x30
    30b8:	fa5f fe8e 	uxtb.w	lr, lr
    30bc:	bf98      	it	ls
    30be:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    30c2:	4290      	cmp	r0, r2
		val /= radix;
    30c4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    30c6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    30ca:	d2eb      	bcs.n	30a4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    30cc:	1c63      	adds	r3, r4, #1
    30ce:	2200      	movs	r2, #0
    30d0:	18c8      	adds	r0, r1, r3
    30d2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    30d4:	b17c      	cbz	r4, 30f6 <ultoa+0x5e>
		t = buf[j];
    30d6:	4662      	mov	r2, ip
    30d8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    30dc:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    30e0:	eba1 030c 	sub.w	r3, r1, ip
    30e4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    30e6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    30ea:	3b01      	subs	r3, #1
    30ec:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    30ee:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    30f0:	4423      	add	r3, r4
    30f2:	429a      	cmp	r2, r3
    30f4:	dbef      	blt.n	30d6 <ultoa+0x3e>
	}
	return buf;
}
    30f6:	4608      	mov	r0, r1
    30f8:	bd70      	pop	{r4, r5, r6, pc}
    30fa:	bf00      	nop

000030fc <unused_interrupt_vector>:
	__disable_irq();
    30fc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    30fe:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    3102:	4c52      	ldr	r4, [pc, #328]	; (324c <unused_interrupt_vector+0x150>)
    3104:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    3108:	f01e 0f04 	tst.w	lr, #4
    310c:	bf0c      	ite	eq
    310e:	f3ef 8208 	mrseq	r2, MSP
    3112:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    3116:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    311a:	4e4d      	ldr	r6, [pc, #308]	; (3250 <unused_interrupt_vector+0x154>)
	while (p < end) {
    311c:	4d4d      	ldr	r5, [pc, #308]	; (3254 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    311e:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    3122:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    3126:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    312a:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    312e:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    3132:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    3136:	6993      	ldr	r3, [r2, #24]
    3138:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    313c:	69d3      	ldr	r3, [r2, #28]
    313e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    3142:	f000 f8d1 	bl	32e8 <tempmonGetTemp>
    3146:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    314a:	f001 fbf9 	bl	4940 <rtc_get>
	info->len = sizeof(*info) / 4;
    314e:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    3150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    3154:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    3158:	460b      	mov	r3, r1
    315a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    315e:	493e      	ldr	r1, [pc, #248]	; (3258 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    3160:	1d30      	adds	r0, r6, #4
    3162:	405a      	eors	r2, r3
    3164:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3166:	f002 0301 	and.w	r3, r2, #1
    316a:	3c01      	subs	r4, #1
    316c:	fb01 f303 	mul.w	r3, r1, r3
    3170:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    3174:	d1f7      	bne.n	3166 <unused_interrupt_vector+0x6a>
	while (p < end) {
    3176:	42a8      	cmp	r0, r5
    3178:	d002      	beq.n	3180 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    317a:	6873      	ldr	r3, [r6, #4]
    317c:	4606      	mov	r6, r0
    317e:	e7ef      	b.n	3160 <unused_interrupt_vector+0x64>
	info->crc = crc;
    3180:	4b32      	ldr	r3, [pc, #200]	; (324c <unused_interrupt_vector+0x150>)
    3182:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3186:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    318a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    318e:	4930      	ldr	r1, [pc, #192]	; (3250 <unused_interrupt_vector+0x154>)
    3190:	4a32      	ldr	r2, [pc, #200]	; (325c <unused_interrupt_vector+0x160>)
    3192:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    3196:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    319a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    319e:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    31a2:	4a2f      	ldr	r2, [pc, #188]	; (3260 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    31a4:	2502      	movs	r5, #2
    31a6:	482f      	ldr	r0, [pc, #188]	; (3264 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    31a8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    31aa:	492f      	ldr	r1, [pc, #188]	; (3268 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    31ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    31b0:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    31b2:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    31b4:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    31b6:	482d      	ldr	r0, [pc, #180]	; (326c <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    31b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    31bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31c0:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    31c2:	680b      	ldr	r3, [r1, #0]
    31c4:	4283      	cmp	r3, r0
    31c6:	d83d      	bhi.n	3244 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    31c8:	4d26      	ldr	r5, [pc, #152]	; (3264 <unused_interrupt_vector+0x168>)
    31ca:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    31cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    31d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    31d4:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    31d6:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    31d8:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    31dc:	4924      	ldr	r1, [pc, #144]	; (3270 <unused_interrupt_vector+0x174>)
    31de:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    31e2:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    31e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    31ea:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    31ee:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    31f2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    31f6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    31fa:	e001      	b.n	3200 <unused_interrupt_vector+0x104>
		usb_isr();
    31fc:	f000 f966 	bl	34cc <usb_isr>
		if (PIT_TFLG0) {
    3200:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3204:	2b00      	cmp	r3, #0
    3206:	d0f9      	beq.n	31fc <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    3208:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    320a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    320e:	2c4f      	cmp	r4, #79	; 0x4f
    3210:	d9f4      	bls.n	31fc <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3212:	4b18      	ldr	r3, [pc, #96]	; (3274 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    3214:	2002      	movs	r0, #2
    3216:	4918      	ldr	r1, [pc, #96]	; (3278 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3218:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    321c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3220:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3222:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3226:	b93b      	cbnz	r3, 3238 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    3228:	4814      	ldr	r0, [pc, #80]	; (327c <unused_interrupt_vector+0x180>)
    322a:	4915      	ldr	r1, [pc, #84]	; (3280 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    322c:	4a0d      	ldr	r2, [pc, #52]	; (3264 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    322e:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3230:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    3234:	2b00      	cmp	r3, #0
    3236:	d0fa      	beq.n	322e <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    3238:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    323c:	4a11      	ldr	r2, [pc, #68]	; (3284 <unused_interrupt_vector+0x188>)
    323e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    3242:	e7fe      	b.n	3242 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3244:	f001 f94c 	bl	44e0 <set_arm_clock>
    3248:	e7be      	b.n	31c8 <unused_interrupt_vector+0xcc>
    324a:	bf00      	nop
    324c:	2027ff00 	.word	0x2027ff00
    3250:	2027ff80 	.word	0x2027ff80
    3254:	2027ffa8 	.word	0x2027ffa8
    3258:	edb88320 	.word	0xedb88320
    325c:	2027ffa0 	.word	0x2027ffa0
    3260:	400fc000 	.word	0x400fc000
    3264:	40084000 	.word	0x40084000
    3268:	20002f9c 	.word	0x20002f9c
    326c:	0bcd3d80 	.word	0x0bcd3d80
    3270:	00249f00 	.word	0x00249f00
    3274:	400d9000 	.word	0x400d9000
    3278:	402e0000 	.word	0x402e0000
    327c:	400f8000 	.word	0x400f8000
    3280:	0bad00f1 	.word	0x0bad00f1
    3284:	05fa0004 	.word	0x05fa0004

00003288 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    3288:	490a      	ldr	r1, [pc, #40]	; (32b4 <_sbrk+0x2c>)
    328a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    328c:	b138      	cbz	r0, 329e <_sbrk+0x16>
{
    328e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    3290:	1813      	adds	r3, r2, r0
    3292:	4809      	ldr	r0, [pc, #36]	; (32b8 <_sbrk+0x30>)
    3294:	4283      	cmp	r3, r0
    3296:	d804      	bhi.n	32a2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3298:	4610      	mov	r0, r2
                __brkval = prev + incr;
    329a:	600b      	str	r3, [r1, #0]
}
    329c:	bd08      	pop	{r3, pc}
    329e:	4610      	mov	r0, r2
    32a0:	4770      	bx	lr
                        errno = ENOMEM;
    32a2:	f00a ffcd 	bl	e240 <__errno>
    32a6:	230c      	movs	r3, #12
                        return (void *)-1;
    32a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    32ac:	6003      	str	r3, [r0, #0]
}
    32ae:	4610      	mov	r0, r2
    32b0:	bd08      	pop	{r3, pc}
    32b2:	bf00      	nop
    32b4:	2000300c 	.word	0x2000300c
    32b8:	20280000 	.word	0x20280000

000032bc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    32bc:	2000      	movs	r0, #0
    32be:	4770      	bx	lr

000032c0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    32c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32c4:	4770      	bx	lr
    32c6:	bf00      	nop

000032c8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    32c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    32cc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    32ce:	604b      	str	r3, [r1, #4]
}
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop

000032d4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    32d4:	2001      	movs	r0, #1
    32d6:	4770      	bx	lr

000032d8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    32d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32dc:	4770      	bx	lr
    32de:	bf00      	nop

000032e0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    32e0:	bf30      	wfi
    32e2:	e7fd      	b.n	32e0 <abort>

000032e4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    32e4:	f7ff bf0a 	b.w	30fc <unused_interrupt_vector>

000032e8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    32e8:	4a12      	ldr	r2, [pc, #72]	; (3334 <tempmonGetTemp+0x4c>)
    32ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    32ee:	075b      	lsls	r3, r3, #29
    32f0:	d5fb      	bpl.n	32ea <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    32f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    32f6:	4810      	ldr	r0, [pc, #64]	; (3338 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    32f8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    32fc:	490f      	ldr	r1, [pc, #60]	; (333c <tempmonGetTemp+0x54>)
    32fe:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3302:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3306:	ed91 6a00 	vldr	s12, [r1]
    330a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    330e:	4a0c      	ldr	r2, [pc, #48]	; (3340 <tempmonGetTemp+0x58>)
    3310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3314:	4b0b      	ldr	r3, [pc, #44]	; (3344 <tempmonGetTemp+0x5c>)
    3316:	edd2 6a00 	vldr	s13, [r2]
    331a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    331e:	ed93 7a00 	vldr	s14, [r3]
    3322:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3326:	ee67 7a86 	vmul.f32	s15, s15, s12
    332a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    332e:	ee37 0a40 	vsub.f32	s0, s14, s0
    3332:	4770      	bx	lr
    3334:	400d8100 	.word	0x400d8100
    3338:	20004150 	.word	0x20004150
    333c:	20004158 	.word	0x20004158
    3340:	2000415c 	.word	0x2000415c
    3344:	20004154 	.word	0x20004154

00003348 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3348:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    334a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    334c:	b11b      	cbz	r3, 3356 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    334e:	6853      	ldr	r3, [r2, #4]
    3350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3354:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3356:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3358:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    335a:	b33c      	cbz	r4, 33ac <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    335c:	4b1a      	ldr	r3, [pc, #104]	; (33c8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    335e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3360:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3364:	420c      	tst	r4, r1
    3366:	d11d      	bne.n	33a4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3368:	4e18      	ldr	r6, [pc, #96]	; (33cc <schedule_transfer+0x84>)
    336a:	6877      	ldr	r7, [r6, #4]
    336c:	e004      	b.n	3378 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    336e:	6874      	ldr	r4, [r6, #4]
    3370:	1be4      	subs	r4, r4, r7
    3372:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3376:	d20b      	bcs.n	3390 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3378:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    337c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3380:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3384:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3388:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    338c:	0464      	lsls	r4, r4, #17
    338e:	d5ee      	bpl.n	336e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3390:	400d      	ands	r5, r1
    3392:	d107      	bne.n	33a4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    3394:	4c0c      	ldr	r4, [pc, #48]	; (33c8 <schedule_transfer+0x80>)
		endpoint->status = 0;
    3396:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    339a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    339e:	430b      	orrs	r3, r1
    33a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    33a4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    33a6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    33a8:	bcf0      	pop	{r4, r5, r6, r7}
    33aa:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    33ac:	4d06      	ldr	r5, [pc, #24]	; (33c8 <schedule_transfer+0x80>)
	endpoint->status = 0;
    33ae:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    33b2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    33b6:	430b      	orrs	r3, r1
    33b8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    33bc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    33be:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    33c0:	b662      	cpsie	i
}
    33c2:	bcf0      	pop	{r4, r5, r6, r7}
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop
    33c8:	402e0000 	.word	0x402e0000
    33cc:	e0001000 	.word	0xe0001000

000033d0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    33d0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    33d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    33d4:	b19d      	cbz	r5, 33fe <run_callbacks+0x2e>
    33d6:	4606      	mov	r6, r0
    33d8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    33da:	2400      	movs	r4, #0
    33dc:	e003      	b.n	33e6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    33de:	6812      	ldr	r2, [r2, #0]
		count++;
    33e0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    33e2:	2a01      	cmp	r2, #1
    33e4:	d00c      	beq.n	3400 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    33e6:	6853      	ldr	r3, [r2, #4]
    33e8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    33ec:	d0f7      	beq.n	33de <run_callbacks+0xe>
			ep->first_transfer = t;
    33ee:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    33f0:	b12c      	cbz	r4, 33fe <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    33f2:	4628      	mov	r0, r5
		ep->callback_function(first);
    33f4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    33f6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    33f8:	4798      	blx	r3
	while (count) {
    33fa:	3c01      	subs	r4, #1
    33fc:	d1f9      	bne.n	33f2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    33fe:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    3400:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    3404:	e7f4      	b.n	33f0 <run_callbacks+0x20>
    3406:	bf00      	nop

00003408 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3408:	b430      	push	{r4, r5}
	if (len > 0) {
    340a:	b9d9      	cbnz	r1, 3444 <endpoint0_transmit.constprop.0+0x3c>
    340c:	4c1f      	ldr	r4, [pc, #124]	; (348c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    340e:	4b20      	ldr	r3, [pc, #128]	; (3490 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    3410:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3412:	4a20      	ldr	r2, [pc, #128]	; (3494 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    3414:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3416:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    341a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    341c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    341e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3422:	2480      	movs	r4, #128	; 0x80
    3424:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3426:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    342a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    342e:	481a      	ldr	r0, [pc, #104]	; (3498 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    3430:	432b      	orrs	r3, r5
    3432:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3436:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    3438:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    343c:	2b00      	cmp	r3, #0
    343e:	d1fb      	bne.n	3438 <endpoint0_transmit.constprop.0+0x30>
}
    3440:	bc30      	pop	{r4, r5}
    3442:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3444:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    3446:	4b15      	ldr	r3, [pc, #84]	; (349c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3448:	4c10      	ldr	r4, [pc, #64]	; (348c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    344a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    344c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3450:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    3452:	4a10      	ldr	r2, [pc, #64]	; (3494 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3454:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3456:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    345a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    345c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    345e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3462:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3464:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3466:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    346a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    346e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    3470:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3472:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3474:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3476:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    347e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3482:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3486:	2b00      	cmp	r3, #0
    3488:	d1fb      	bne.n	3482 <endpoint0_transmit.constprop.0+0x7a>
    348a:	e7c0      	b.n	340e <endpoint0_transmit.constprop.0+0x6>
    348c:	20000000 	.word	0x20000000
    3490:	20003ac0 	.word	0x20003ac0
    3494:	402e0000 	.word	0x402e0000
    3498:	200040e4 	.word	0x200040e4
    349c:	20003ae0 	.word	0x20003ae0

000034a0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    34a0:	4908      	ldr	r1, [pc, #32]	; (34c4 <usb_stop_sof_interrupts+0x24>)
    34a2:	2201      	movs	r2, #1
    34a4:	780b      	ldrb	r3, [r1, #0]
    34a6:	fa02 f000 	lsl.w	r0, r2, r0
    34aa:	ea23 0000 	bic.w	r0, r3, r0
    34ae:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    34b0:	b930      	cbnz	r0, 34c0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    34b2:	4a05      	ldr	r2, [pc, #20]	; (34c8 <usb_stop_sof_interrupts+0x28>)
    34b4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    34b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    34bc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    34c0:	4770      	bx	lr
    34c2:	bf00      	nop
    34c4:	200042b2 	.word	0x200042b2
    34c8:	402e0000 	.word	0x402e0000

000034cc <usb_isr>:
{
    34cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    34d0:	4c97      	ldr	r4, [pc, #604]	; (3730 <usb_isr+0x264>)
{
    34d2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    34d4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    34d8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    34da:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    34de:	d553      	bpl.n	3588 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    34e0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    34e4:	2a00      	cmp	r2, #0
    34e6:	d04a      	beq.n	357e <usb_isr+0xb2>
    34e8:	4e92      	ldr	r6, [pc, #584]	; (3734 <usb_isr+0x268>)
    34ea:	f8df a260 	ldr.w	sl, [pc, #608]	; 374c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    34ee:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3764 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    34f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 3768 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    34f6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 376c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    34fa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    34fe:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3502:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    350a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    350e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3512:	049d      	lsls	r5, r3, #18
    3514:	d5f5      	bpl.n	3502 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3516:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    351a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    351e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3522:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3526:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    352a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    352e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    3532:	d1fa      	bne.n	352a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    3534:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    3536:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    3538:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    353c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    3540:	f000 81cf 	beq.w	38e2 <usb_isr+0x416>
    3544:	f200 80db 	bhi.w	36fe <usb_isr+0x232>
    3548:	f240 3102 	movw	r1, #770	; 0x302
    354c:	428b      	cmp	r3, r1
    354e:	f000 81e7 	beq.w	3920 <usb_isr+0x454>
    3552:	f200 809a 	bhi.w	368a <usb_isr+0x1be>
    3556:	2b82      	cmp	r3, #130	; 0x82
    3558:	f000 81cb 	beq.w	38f2 <usb_isr+0x426>
    355c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3560:	f040 808a 	bne.w	3678 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    3564:	f010 0f78 	tst.w	r0, #120	; 0x78
    3568:	b283      	uxth	r3, r0
    356a:	f000 8203 	beq.w	3974 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    356e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3572:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3576:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    357a:	2a00      	cmp	r2, #0
    357c:	d1bd      	bne.n	34fa <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    357e:	4a6c      	ldr	r2, [pc, #432]	; (3730 <usb_isr+0x264>)
    3580:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    3584:	2b00      	cmp	r3, #0
    3586:	d142      	bne.n	360e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    3588:	067e      	lsls	r6, r7, #25
    358a:	d516      	bpl.n	35ba <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    358c:	4b68      	ldr	r3, [pc, #416]	; (3730 <usb_isr+0x264>)
    358e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    3592:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3596:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    359a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    359e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    35a2:	2c00      	cmp	r4, #0
    35a4:	d1fb      	bne.n	359e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    35a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35aa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    35ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    35b2:	f000 fd2d 	bl	4010 <usb_serial_reset>
		endpointN_notify_mask = 0;
    35b6:	4b60      	ldr	r3, [pc, #384]	; (3738 <usb_isr+0x26c>)
    35b8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    35ba:	01fc      	lsls	r4, r7, #7
    35bc:	d503      	bpl.n	35c6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    35be:	4b5f      	ldr	r3, [pc, #380]	; (373c <usb_isr+0x270>)
    35c0:	681b      	ldr	r3, [r3, #0]
    35c2:	b103      	cbz	r3, 35c6 <usb_isr+0xfa>
    35c4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    35c6:	01b8      	lsls	r0, r7, #6
    35c8:	d503      	bpl.n	35d2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    35ca:	4b5d      	ldr	r3, [pc, #372]	; (3740 <usb_isr+0x274>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	b103      	cbz	r3, 35d2 <usb_isr+0x106>
    35d0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    35d2:	0779      	lsls	r1, r7, #29
    35d4:	d508      	bpl.n	35e8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    35d6:	4b56      	ldr	r3, [pc, #344]	; (3730 <usb_isr+0x264>)
    35d8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    35dc:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    35e0:	d047      	beq.n	3672 <usb_isr+0x1a6>
			usb_high_speed = 1;
    35e2:	4b58      	ldr	r3, [pc, #352]	; (3744 <usb_isr+0x278>)
    35e4:	2201      	movs	r2, #1
    35e6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    35e8:	4b51      	ldr	r3, [pc, #324]	; (3730 <usb_isr+0x264>)
    35ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    35ee:	061a      	lsls	r2, r3, #24
    35f0:	d50a      	bpl.n	3608 <usb_isr+0x13c>
    35f2:	063b      	lsls	r3, r7, #24
    35f4:	d508      	bpl.n	3608 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    35f6:	4a54      	ldr	r2, [pc, #336]	; (3748 <usb_isr+0x27c>)
    35f8:	7813      	ldrb	r3, [r2, #0]
    35fa:	b12b      	cbz	r3, 3608 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    35fc:	3b01      	subs	r3, #1
    35fe:	b2db      	uxtb	r3, r3
    3600:	7013      	strb	r3, [r2, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	f000 8272 	beq.w	3aec <usb_isr+0x620>
}
    3608:	b003      	add	sp, #12
    360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    360e:	494f      	ldr	r1, [pc, #316]	; (374c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    3610:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    3614:	6808      	ldr	r0, [r1, #0]
    3616:	4203      	tst	r3, r0
    3618:	f040 81d1 	bne.w	39be <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    361c:	4a46      	ldr	r2, [pc, #280]	; (3738 <usb_isr+0x26c>)
    361e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    3620:	401c      	ands	r4, r3
    3622:	d0b1      	beq.n	3588 <usb_isr+0xbc>
				while (tx) {
    3624:	ea5f 4814 	movs.w	r8, r4, lsr #16
    3628:	d010      	beq.n	364c <usb_isr+0x180>
    362a:	4e42      	ldr	r6, [pc, #264]	; (3734 <usb_isr+0x268>)
					tx &= ~(1<<p);
    362c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    3630:	fa98 f5a8 	rbit	r5, r8
    3634:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3638:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    363c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3640:	3040      	adds	r0, #64	; 0x40
    3642:	f7ff fec5 	bl	33d0 <run_callbacks>
				while (tx) {
    3646:	ea38 0805 	bics.w	r8, r8, r5
    364a:	d1f1      	bne.n	3630 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    364c:	b2a4      	uxth	r4, r4
				while(rx) {
    364e:	2c00      	cmp	r4, #0
    3650:	d09a      	beq.n	3588 <usb_isr+0xbc>
    3652:	4e38      	ldr	r6, [pc, #224]	; (3734 <usb_isr+0x268>)
					rx &= ~(1<<p);
    3654:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    3658:	fa94 f5a4 	rbit	r5, r4
    365c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3660:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    3664:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3668:	f7ff feb2 	bl	33d0 <run_callbacks>
				while(rx) {
    366c:	43ac      	bics	r4, r5
    366e:	d1f3      	bne.n	3658 <usb_isr+0x18c>
    3670:	e78a      	b.n	3588 <usb_isr+0xbc>
			usb_high_speed = 0;
    3672:	4a34      	ldr	r2, [pc, #208]	; (3744 <usb_isr+0x278>)
    3674:	7013      	strb	r3, [r2, #0]
    3676:	e7b7      	b.n	35e8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    3678:	2b80      	cmp	r3, #128	; 0x80
    367a:	f47f af78 	bne.w	356e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    367e:	4834      	ldr	r0, [pc, #208]	; (3750 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    3680:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    3682:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3684:	f7ff fec0 	bl	3408 <endpoint0_transmit.constprop.0>
		return;
    3688:	e775      	b.n	3576 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    368a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    368e:	f000 810b 	beq.w	38a8 <usb_isr+0x3dc>
    3692:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    3696:	2b01      	cmp	r3, #1
    3698:	f63f af69 	bhi.w	356e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    369c:	4b2d      	ldr	r3, [pc, #180]	; (3754 <usb_isr+0x288>)
    369e:	685d      	ldr	r5, [r3, #4]
    36a0:	2d00      	cmp	r5, #0
    36a2:	f43f af64 	beq.w	356e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    36a6:	fa1f fc8c 	uxth.w	ip, ip
    36aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    36ae:	e004      	b.n	36ba <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    36b0:	691d      	ldr	r5, [r3, #16]
    36b2:	330c      	adds	r3, #12
    36b4:	2d00      	cmp	r5, #0
    36b6:	f43f af5a 	beq.w	356e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    36ba:	881a      	ldrh	r2, [r3, #0]
    36bc:	4572      	cmp	r2, lr
    36be:	d1f7      	bne.n	36b0 <usb_isr+0x1e4>
    36c0:	885a      	ldrh	r2, [r3, #2]
    36c2:	4562      	cmp	r2, ip
    36c4:	d1f4      	bne.n	36b0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    36c6:	ea4f 221e 	mov.w	r2, lr, lsr #8
    36ca:	2a03      	cmp	r2, #3
    36cc:	f000 81a5 	beq.w	3a1a <usb_isr+0x54e>
					datalen = list->length;
    36d0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    36d2:	0c00      	lsrs	r0, r0, #16
    36d4:	4282      	cmp	r2, r0
    36d6:	bf28      	it	cs
    36d8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    36da:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    36de:	f040 81a1 	bne.w	3a24 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    36e2:	4b18      	ldr	r3, [pc, #96]	; (3744 <usb_isr+0x278>)
    36e4:	491c      	ldr	r1, [pc, #112]	; (3758 <usb_isr+0x28c>)
    36e6:	7818      	ldrb	r0, [r3, #0]
    36e8:	4b1c      	ldr	r3, [pc, #112]	; (375c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    36ea:	9201      	str	r2, [sp, #4]
    36ec:	2800      	cmp	r0, #0
    36ee:	bf18      	it	ne
    36f0:	4619      	movne	r1, r3
    36f2:	481b      	ldr	r0, [pc, #108]	; (3760 <usb_isr+0x294>)
    36f4:	f7ff fc2c 	bl	2f50 <memcpy>
    36f8:	4d19      	ldr	r5, [pc, #100]	; (3760 <usb_isr+0x294>)
    36fa:	9a01      	ldr	r2, [sp, #4]
    36fc:	e1e1      	b.n	3ac2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    36fe:	f242 2121 	movw	r1, #8737	; 0x2221
    3702:	428b      	cmp	r3, r1
    3704:	d07c      	beq.n	3800 <usb_isr+0x334>
    3706:	d933      	bls.n	3770 <usb_isr+0x2a4>
    3708:	f242 3121 	movw	r1, #8993	; 0x2321
    370c:	428b      	cmp	r3, r1
    370e:	f000 8081 	beq.w	3814 <usb_isr+0x348>
    3712:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    3716:	428b      	cmp	r3, r1
    3718:	f47f af29 	bne.w	356e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    371c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    3720:	b283      	uxth	r3, r0
    3722:	f47f af24 	bne.w	356e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    3726:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    372a:	f363 0c0f 	bfi	ip, r3, #0, #16
    372e:	e7b5      	b.n	369c <usb_isr+0x1d0>
    3730:	402e0000 	.word	0x402e0000
    3734:	20000000 	.word	0x20000000
    3738:	200040e8 	.word	0x200040e8
    373c:	2000429c 	.word	0x2000429c
    3740:	200042a0 	.word	0x200042a0
    3744:	200042b8 	.word	0x200042b8
    3748:	200042b9 	.word	0x200042b9
    374c:	200040e4 	.word	0x200040e4
    3750:	20004118 	.word	0x20004118
    3754:	20002dd4 	.word	0x20002dd4
    3758:	60001ec0 	.word	0x60001ec0
    375c:	60001f24 	.word	0x60001f24
    3760:	20200000 	.word	0x20200000
    3764:	200040dc 	.word	0x200040dc
    3768:	b8c6cf5d 	.word	0xb8c6cf5d
    376c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    3770:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3774:	d066      	beq.n	3844 <usb_isr+0x378>
    3776:	f242 0121 	movw	r1, #8225	; 0x2021
    377a:	428b      	cmp	r3, r1
    377c:	f47f aef7 	bne.w	356e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    3780:	0c03      	lsrs	r3, r0, #16
    3782:	2b07      	cmp	r3, #7
    3784:	f47f aef3 	bne.w	356e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    3788:	4bb2      	ldr	r3, [pc, #712]	; (3a54 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    378a:	49b3      	ldr	r1, [pc, #716]	; (3a58 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    378c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    378e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    3790:	49b2      	ldr	r1, [pc, #712]	; (3a5c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3792:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3794:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    3798:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    379c:	2201      	movs	r2, #1
    379e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    37a0:	4aaf      	ldr	r2, [pc, #700]	; (3a60 <usb_isr+0x594>)
    37a2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    37a4:	4aaf      	ldr	r2, [pc, #700]	; (3a64 <usb_isr+0x598>)
    37a6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    37a8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    37ac:	f041 0101 	orr.w	r1, r1, #1
    37b0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    37b4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    37b8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    37bc:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    37be:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    37c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    37c4:	2b00      	cmp	r3, #0
    37c6:	d1fb      	bne.n	37c0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    37c8:	4aa7      	ldr	r2, [pc, #668]	; (3a68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    37ca:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    37cc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    37ce:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    37d0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    37d2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    37d4:	f248 0380 	movw	r3, #32896	; 0x8080
    37d8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    37da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    37de:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    37e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    37e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    37ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    37ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37f2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    37f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    37fa:	2b00      	cmp	r3, #0
    37fc:	d1fb      	bne.n	37f6 <usb_isr+0x32a>
    37fe:	e6ba      	b.n	3576 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    3800:	b280      	uxth	r0, r0
    3802:	b938      	cbnz	r0, 3814 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3804:	4b99      	ldr	r3, [pc, #612]	; (3a6c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3806:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    380a:	6819      	ldr	r1, [r3, #0]
    380c:	4b98      	ldr	r3, [pc, #608]	; (3a70 <usb_isr+0x5a4>)
    380e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3810:	4b98      	ldr	r3, [pc, #608]	; (3a74 <usb_isr+0x5a8>)
    3812:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    3814:	4b94      	ldr	r3, [pc, #592]	; (3a68 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    3816:	2200      	movs	r2, #0
    3818:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    381a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    381c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    381e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    3820:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3822:	2280      	movs	r2, #128	; 0x80
    3824:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3826:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    382a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    382e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3836:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    383a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    383e:	2b00      	cmp	r3, #0
    3840:	d1fb      	bne.n	383a <usb_isr+0x36e>
    3842:	e698      	b.n	3576 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    3844:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3848:	4b8b      	ldr	r3, [pc, #556]	; (3a78 <usb_isr+0x5ac>)
    384a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    384c:	4b8b      	ldr	r3, [pc, #556]	; (3a7c <usb_isr+0x5b0>)
    384e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3852:	4b8b      	ldr	r3, [pc, #556]	; (3a80 <usb_isr+0x5b4>)
    3854:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3858:	4b8a      	ldr	r3, [pc, #552]	; (3a84 <usb_isr+0x5b8>)
    385a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    385e:	f000 fbd9 	bl	4014 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    3862:	2280      	movs	r2, #128	; 0x80
    3864:	4629      	mov	r1, r5
    3866:	4888      	ldr	r0, [pc, #544]	; (3a88 <usb_isr+0x5bc>)
    3868:	f00a fbec 	bl	e044 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    386c:	4b87      	ldr	r3, [pc, #540]	; (3a8c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    386e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3870:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3874:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    3878:	4b7b      	ldr	r3, [pc, #492]	; (3a68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    387a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    387c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    387e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3880:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    3882:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3884:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3886:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    388a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    388e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3896:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    389a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    389e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    38a2:	2b00      	cmp	r3, #0
    38a4:	d1fb      	bne.n	389e <usb_isr+0x3d2>
    38a6:	e666      	b.n	3576 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    38a8:	4b6f      	ldr	r3, [pc, #444]	; (3a68 <usb_isr+0x59c>)
    38aa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    38ac:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    38ae:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    38b0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    38b2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    38b4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    38b6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    38b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    38bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    38c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    38c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    38c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    38cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    38d0:	2b00      	cmp	r3, #0
    38d2:	d1fb      	bne.n	38cc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    38d4:	0c13      	lsrs	r3, r2, #16
    38d6:	065b      	lsls	r3, r3, #25
    38d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    38dc:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    38e0:	e649      	b.n	3576 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    38e2:	4b65      	ldr	r3, [pc, #404]	; (3a78 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    38e4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    38e6:	486a      	ldr	r0, [pc, #424]	; (3a90 <usb_isr+0x5c4>)
    38e8:	781b      	ldrb	r3, [r3, #0]
    38ea:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    38ec:	f7ff fd8c 	bl	3408 <endpoint0_transmit.constprop.0>
		return;
    38f0:	e641      	b.n	3576 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    38f2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    38f4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    38f8:	f47f ae39 	bne.w	356e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    38fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    3900:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    3904:	4a62      	ldr	r2, [pc, #392]	; (3a90 <usb_isr+0x5c4>)
    3906:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3908:	0618      	lsls	r0, r3, #24
    390a:	f100 809e 	bmi.w	3a4a <usb_isr+0x57e>
    390e:	07cb      	lsls	r3, r1, #31
    3910:	d501      	bpl.n	3916 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    3912:	2301      	movs	r3, #1
    3914:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3916:	2102      	movs	r1, #2
    3918:	485d      	ldr	r0, [pc, #372]	; (3a90 <usb_isr+0x5c4>)
    391a:	f7ff fd75 	bl	3408 <endpoint0_transmit.constprop.0>
		return;
    391e:	e62a      	b.n	3576 <usb_isr+0xaa>
		if (endpoint > 7) break;
    3920:	f010 0f78 	tst.w	r0, #120	; 0x78
    3924:	b283      	uxth	r3, r0
    3926:	f47f ae22 	bne.w	356e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    392a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    392e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3932:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    3936:	bf14      	ite	ne
    3938:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    393c:	f043 0301 	orreq.w	r3, r3, #1
    3940:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    3944:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    3946:	4b48      	ldr	r3, [pc, #288]	; (3a68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3948:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    394a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    394c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    394e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    3950:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3952:	2280      	movs	r2, #128	; 0x80
    3954:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3956:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    395a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    395e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3966:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    396a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    396e:	2b00      	cmp	r3, #0
    3970:	d1fb      	bne.n	396a <usb_isr+0x49e>
    3972:	e600      	b.n	3576 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    3974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    3978:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    397c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    3980:	bf14      	ite	ne
    3982:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    3986:	f023 0301 	biceq.w	r3, r3, #1
    398a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    398e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    3990:	4b35      	ldr	r3, [pc, #212]	; (3a68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3992:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    3994:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3996:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3998:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    399a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    399c:	2280      	movs	r2, #128	; 0x80
    399e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    39a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    39a4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    39a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    39ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    39b0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    39b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    39b8:	2b00      	cmp	r3, #0
    39ba:	d1fb      	bne.n	39b4 <usb_isr+0x4e8>
    39bc:	e5db      	b.n	3576 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    39be:	2000      	movs	r0, #0
    39c0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    39c2:	4926      	ldr	r1, [pc, #152]	; (3a5c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    39c4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    39c6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    39c8:	f242 0121 	movw	r1, #8225	; 0x2021
    39cc:	428c      	cmp	r4, r1
    39ce:	f47f ae25 	bne.w	361c <usb_isr+0x150>
    39d2:	b280      	uxth	r0, r0
    39d4:	2800      	cmp	r0, #0
    39d6:	f47f ae21 	bne.w	361c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    39da:	492e      	ldr	r1, [pc, #184]	; (3a94 <usb_isr+0x5c8>)
    39dc:	4c2e      	ldr	r4, [pc, #184]	; (3a98 <usb_isr+0x5cc>)
    39de:	c903      	ldmia	r1, {r0, r1}
    39e0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    39e2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    39e4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    39e8:	6020      	str	r0, [r4, #0]
    39ea:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    39ec:	f47f ae16 	bne.w	361c <usb_isr+0x150>
	__disable_irq();
    39f0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    39f2:	482a      	ldr	r0, [pc, #168]	; (3a9c <usb_isr+0x5d0>)
    39f4:	7801      	ldrb	r1, [r0, #0]
    39f6:	f041 0108 	orr.w	r1, r1, #8
    39fa:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    39fc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    3a00:	060d      	lsls	r5, r1, #24
    3a02:	d405      	bmi.n	3a10 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3a04:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3a06:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3a08:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3a0c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    3a10:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    3a12:	4a23      	ldr	r2, [pc, #140]	; (3aa0 <usb_isr+0x5d4>)
    3a14:	2150      	movs	r1, #80	; 0x50
    3a16:	7011      	strb	r1, [r2, #0]
    3a18:	e600      	b.n	361c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    3a1a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    3a1c:	782a      	ldrb	r2, [r5, #0]
    3a1e:	4282      	cmp	r2, r0
    3a20:	bf28      	it	cs
    3a22:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    3a24:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    3a28:	d144      	bne.n	3ab4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    3a2a:	4b1e      	ldr	r3, [pc, #120]	; (3aa4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3a2c:	4d1e      	ldr	r5, [pc, #120]	; (3aa8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    3a2e:	7818      	ldrb	r0, [r3, #0]
    3a30:	491e      	ldr	r1, [pc, #120]	; (3aac <usb_isr+0x5e0>)
    3a32:	4b1f      	ldr	r3, [pc, #124]	; (3ab0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3a34:	9201      	str	r2, [sp, #4]
    3a36:	2800      	cmp	r0, #0
    3a38:	bf18      	it	ne
    3a3a:	4619      	movne	r1, r3
    3a3c:	4628      	mov	r0, r5
    3a3e:	f7ff fa87 	bl	2f50 <memcpy>
					usb_descriptor_buffer[1] = 7;
    3a42:	2307      	movs	r3, #7
    3a44:	706b      	strb	r3, [r5, #1]
    3a46:	9a01      	ldr	r2, [sp, #4]
    3a48:	e03b      	b.n	3ac2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3a4a:	03c9      	lsls	r1, r1, #15
    3a4c:	f53f af61 	bmi.w	3912 <usb_isr+0x446>
    3a50:	e761      	b.n	3916 <usb_isr+0x44a>
    3a52:	bf00      	nop
    3a54:	20003ae0 	.word	0x20003ae0
    3a58:	200050dc 	.word	0x200050dc
    3a5c:	20003c80 	.word	0x20003c80
    3a60:	00070080 	.word	0x00070080
    3a64:	200060dc 	.word	0x200060dc
    3a68:	20003ac0 	.word	0x20003ac0
    3a6c:	20004268 	.word	0x20004268
    3a70:	20004298 	.word	0x20004298
    3a74:	200042b6 	.word	0x200042b6
    3a78:	200042b7 	.word	0x200042b7
    3a7c:	00cc0002 	.word	0x00cc0002
    3a80:	000200c8 	.word	0x000200c8
    3a84:	00c80002 	.word	0x00c80002
    3a88:	20000080 	.word	0x20000080
    3a8c:	74d59319 	.word	0x74d59319
    3a90:	20004118 	.word	0x20004118
    3a94:	200040dc 	.word	0x200040dc
    3a98:	20004290 	.word	0x20004290
    3a9c:	200042b2 	.word	0x200042b2
    3aa0:	200042b9 	.word	0x200042b9
    3aa4:	200042b8 	.word	0x200042b8
    3aa8:	20200000 	.word	0x20200000
    3aac:	60001f24 	.word	0x60001f24
    3ab0:	60001ec0 	.word	0x60001ec0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    3ab4:	4629      	mov	r1, r5
    3ab6:	4d10      	ldr	r5, [pc, #64]	; (3af8 <usb_isr+0x62c>)
    3ab8:	9201      	str	r2, [sp, #4]
    3aba:	4628      	mov	r0, r5
    3abc:	f7ff fa48 	bl	2f50 <memcpy>
    3ac0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3ac2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3ac6:	4415      	add	r5, r2
	asm("dsb");
    3ac8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3acc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3ad0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    3ad4:	3320      	adds	r3, #32
	} while (location < end_addr);
    3ad6:	429d      	cmp	r5, r3
    3ad8:	d8fa      	bhi.n	3ad0 <usb_isr+0x604>
	asm("dsb");
    3ada:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3ade:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    3ae2:	4805      	ldr	r0, [pc, #20]	; (3af8 <usb_isr+0x62c>)
    3ae4:	4611      	mov	r1, r2
    3ae6:	f7ff fc8f 	bl	3408 <endpoint0_transmit.constprop.0>
				return;
    3aea:	e544      	b.n	3576 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    3aec:	2003      	movs	r0, #3
    3aee:	f7ff fcd7 	bl	34a0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    3af2:	f00f fdd1 	bl	13698 <___reboot_Teensyduino__veneer>
    3af6:	bf00      	nop
    3af8:	20200000 	.word	0x20200000

00003afc <usb_config_rx>:
{
    3afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b00:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3b02:	1e83      	subs	r3, r0, #2
    3b04:	2b02      	cmp	r3, #2
    3b06:	d901      	bls.n	3b0c <usb_config_rx+0x10>
}
    3b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3b0c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3b5c <usb_config_rx+0x60>
    3b10:	4615      	mov	r5, r2
    3b12:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    3b14:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3b16:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    3b1a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3b1c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    3b20:	2100      	movs	r1, #0
    3b22:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3b26:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    3b28:	f00a fa8c 	bl	e044 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3b2c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    3b30:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3b32:	0952      	lsrs	r2, r2, #5
    3b34:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    3b38:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    3b3c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    3b40:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    3b44:	2f00      	cmp	r7, #0
    3b46:	d0df      	beq.n	3b08 <usb_config_rx+0xc>
    3b48:	4a03      	ldr	r2, [pc, #12]	; (3b58 <usb_config_rx+0x5c>)
    3b4a:	40b3      	lsls	r3, r6
    3b4c:	6811      	ldr	r1, [r2, #0]
    3b4e:	430b      	orrs	r3, r1
    3b50:	6013      	str	r3, [r2, #0]
}
    3b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b56:	bf00      	nop
    3b58:	200040e8 	.word	0x200040e8
    3b5c:	20000000 	.word	0x20000000

00003b60 <usb_config_tx>:
{
    3b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b64:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3b66:	1e81      	subs	r1, r0, #2
    3b68:	2902      	cmp	r1, #2
    3b6a:	d901      	bls.n	3b70 <usb_config_tx+0x10>
}
    3b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3b70:	01c7      	lsls	r7, r0, #7
    3b72:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3bc0 <usb_config_tx+0x60>
    3b76:	4692      	mov	sl, r2
    3b78:	4604      	mov	r4, r0
    3b7a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    3b7c:	223c      	movs	r2, #60	; 0x3c
    3b7e:	2100      	movs	r1, #0
    3b80:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3b82:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3b86:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    3b88:	f108 0004 	add.w	r0, r8, #4
    3b8c:	f00a fa5a 	bl	e044 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3b90:	faba f28a 	clz	r2, sl
    3b94:	0952      	lsrs	r2, r2, #5
    3b96:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    3b9a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    3b9e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    3ba0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    3ba4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3ba8:	2e00      	cmp	r6, #0
    3baa:	d0df      	beq.n	3b6c <usb_config_tx+0xc>
    3bac:	4b03      	ldr	r3, [pc, #12]	; (3bbc <usb_config_tx+0x5c>)
    3bae:	3410      	adds	r4, #16
    3bb0:	6819      	ldr	r1, [r3, #0]
    3bb2:	40a2      	lsls	r2, r4
    3bb4:	430a      	orrs	r2, r1
    3bb6:	601a      	str	r2, [r3, #0]
}
    3bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bbc:	200040e8 	.word	0x200040e8
    3bc0:	20000000 	.word	0x20000000

00003bc4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    3bc4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    3bc6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    3bc8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    3bca:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    3bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    3bd2:	b410      	push	{r4}
	transfer->next = 1;
    3bd4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    3bd6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    3bd8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    3bdc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    3bde:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    3be2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    3be6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    3be8:	6181      	str	r1, [r0, #24]
}
    3bea:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    3bee:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    3bf2:	4770      	bx	lr

00003bf4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3bf4:	1e83      	subs	r3, r0, #2
{
    3bf6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3bf8:	2b02      	cmp	r3, #2
    3bfa:	d900      	bls.n	3bfe <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    3bfc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3bfe:	4b06      	ldr	r3, [pc, #24]	; (3c18 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    3c00:	f100 0110 	add.w	r1, r0, #16
    3c04:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3c08:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    3c0c:	fa0c f101 	lsl.w	r1, ip, r1
    3c10:	3040      	adds	r0, #64	; 0x40
    3c12:	f7ff bb99 	b.w	3348 <schedule_transfer>
    3c16:	bf00      	nop
    3c18:	20000000 	.word	0x20000000

00003c1c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3c1c:	1e83      	subs	r3, r0, #2
{
    3c1e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3c20:	2b02      	cmp	r3, #2
    3c22:	d900      	bls.n	3c26 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3c24:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    3c26:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    3c28:	4b02      	ldr	r3, [pc, #8]	; (3c34 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    3c2a:	4081      	lsls	r1, r0
    3c2c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    3c30:	f7ff bb8a 	b.w	3348 <schedule_transfer>
    3c34:	20000000 	.word	0x20000000

00003c38 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    3c38:	6840      	ldr	r0, [r0, #4]
#endif
}
    3c3a:	4770      	bx	lr

00003c3c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3c3c:	4a12      	ldr	r2, [pc, #72]	; (3c88 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3c3e:	4b13      	ldr	r3, [pc, #76]	; (3c8c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3c40:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    3c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    3c48:	4298      	cmp	r0, r3
{
    3c4a:	b510      	push	{r4, lr}
    3c4c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    3c4e:	d202      	bcs.n	3c56 <usb_init_serialnumber+0x1a>
    3c50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3c54:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    3c56:	4c0e      	ldr	r4, [pc, #56]	; (3c90 <usb_init_serialnumber+0x54>)
    3c58:	a901      	add	r1, sp, #4
    3c5a:	220a      	movs	r2, #10
    3c5c:	f7ff fa1c 	bl	3098 <ultoa>
	for (i=0; i<10; i++) {
    3c60:	a901      	add	r1, sp, #4
    3c62:	2300      	movs	r3, #0
    3c64:	4620      	mov	r0, r4
		char c = buf[i];
    3c66:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    3c6a:	3301      	adds	r3, #1
		if (!c) break;
    3c6c:	b13a      	cbz	r2, 3c7e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    3c6e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    3c70:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    3c74:	d1f7      	bne.n	3c66 <usb_init_serialnumber+0x2a>
    3c76:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3c78:	7023      	strb	r3, [r4, #0]
}
    3c7a:	b004      	add	sp, #16
    3c7c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3c7e:	005b      	lsls	r3, r3, #1
    3c80:	b2db      	uxtb	r3, r3
    3c82:	7023      	strb	r3, [r4, #0]
}
    3c84:	b004      	add	sp, #16
    3c86:	bd10      	pop	{r4, pc}
    3c88:	401f4400 	.word	0x401f4400
    3c8c:	00989680 	.word	0x00989680
    3c90:	200035f0 	.word	0x200035f0

00003c94 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    3c94:	f000 badc 	b.w	4250 <usb_serial_flush_input>

00003c98 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    3c98:	f000 baac 	b.w	41f4 <usb_serial_peekchar>

00003c9c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    3c9c:	f000 bb10 	b.w	42c0 <usb_serial_getchar>

00003ca0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    3ca0:	f000 baca 	b.w	4238 <usb_serial_available>

00003ca4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3ca4:	f000 bb66 	b.w	4374 <usb_serial_flush_output>

00003ca8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3ca8:	f000 bb3c 	b.w	4324 <usb_serial_write_buffer_free>

00003cac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3cac:	4608      	mov	r0, r1
    3cae:	4611      	mov	r1, r2
    3cb0:	f000 bb2c 	b.w	430c <usb_serial_write>

00003cb4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    3cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3cb6:	4c14      	ldr	r4, [pc, #80]	; (3d08 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3cb8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3cbc:	4e13      	ldr	r6, [pc, #76]	; (3d0c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3cc2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3cc6:	4f12      	ldr	r7, [pc, #72]	; (3d10 <rx_queue_transfer+0x5c>)
    3cc8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    3ccc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3cce:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3cd2:	4621      	mov	r1, r4
    3cd4:	883a      	ldrh	r2, [r7, #0]
    3cd6:	4630      	mov	r0, r6
    3cd8:	f7ff ff74 	bl	3bc4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    3cdc:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    3cde:	4423      	add	r3, r4
	asm("dsb");
    3ce0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    3ce4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    3ce8:	3420      	adds	r4, #32
	} while (location < end_addr);
    3cea:	42a3      	cmp	r3, r4
    3cec:	d8fa      	bhi.n	3ce4 <rx_queue_transfer+0x30>
	asm("dsb");
    3cee:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3cf2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3cf6:	2003      	movs	r0, #3
    3cf8:	4631      	mov	r1, r6
    3cfa:	f7ff ff8f 	bl	3c1c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3d02:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    3d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d08:	20200080 	.word	0x20200080
    3d0c:	20003b00 	.word	0x20003b00
    3d10:	200042a4 	.word	0x200042a4

00003d14 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3d14:	4b24      	ldr	r3, [pc, #144]	; (3da8 <rx_event+0x94>)
{
    3d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3d1a:	881c      	ldrh	r4, [r3, #0]
    3d1c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    3d1e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3d20:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3d24:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    3d26:	2c00      	cmp	r4, #0
    3d28:	dd24      	ble.n	3d74 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    3d2a:	4920      	ldr	r1, [pc, #128]	; (3dac <rx_event+0x98>)
		if (head != rx_tail) {
    3d2c:	4820      	ldr	r0, [pc, #128]	; (3db0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    3d2e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    3d30:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    3d32:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    3d34:	4e1f      	ldr	r6, [pc, #124]	; (3db4 <rx_event+0xa0>)
		if (head != rx_tail) {
    3d36:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    3d38:	481f      	ldr	r0, [pc, #124]	; (3db8 <rx_event+0xa4>)
		if (head != rx_tail) {
    3d3a:	d007      	beq.n	3d4c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    3d3c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    3d40:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3d44:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    3d48:	4294      	cmp	r4, r2
    3d4a:	d918      	bls.n	3d7e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3d4c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    3d4e:	2200      	movs	r2, #0
		rx_count[i] = len;
    3d50:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    3d54:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    3d56:	4e19      	ldr	r6, [pc, #100]	; (3dbc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    3d58:	bf88      	it	hi
    3d5a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    3d5c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    3d60:	bf98      	it	ls
    3d62:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    3d64:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    3d66:	4b16      	ldr	r3, [pc, #88]	; (3dc0 <rx_event+0xac>)
		rx_head = head;
    3d68:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    3d6a:	681a      	ldr	r2, [r3, #0]
    3d6c:	4414      	add	r4, r2
    3d6e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    3d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    3d74:	4628      	mov	r0, r5
}
    3d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    3d7a:	f7ff bf9b 	b.w	3cb4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3d7e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3d82:	4910      	ldr	r1, [pc, #64]	; (3dc4 <rx_event+0xb0>)
    3d84:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    3d86:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3d88:	4408      	add	r0, r1
    3d8a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    3d8e:	f7ff f8df 	bl	2f50 <memcpy>
				rx_available += len;
    3d92:	4a0b      	ldr	r2, [pc, #44]	; (3dc0 <rx_event+0xac>)
				rx_queue_transfer(i);
    3d94:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    3d96:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    3d9a:	6813      	ldr	r3, [r2, #0]
    3d9c:	4423      	add	r3, r4
}
    3d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    3da2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    3da4:	f7ff bf86 	b.w	3cb4 <rx_queue_transfer>
    3da8:	200042a4 	.word	0x200042a4
    3dac:	200042b0 	.word	0x200042b0
    3db0:	200042b1 	.word	0x200042b1
    3db4:	20004124 	.word	0x20004124
    3db8:	20004144 	.word	0x20004144
    3dbc:	20004134 	.word	0x20004134
    3dc0:	20004120 	.word	0x20004120
    3dc4:	20200080 	.word	0x20200080

00003dc8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3dc8:	4b1d      	ldr	r3, [pc, #116]	; (3e40 <usb_serial_flush_callback+0x78>)
    3dca:	781a      	ldrb	r2, [r3, #0]
    3dcc:	2a00      	cmp	r2, #0
    3dce:	d136      	bne.n	3e3e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    3dd0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3dd4:	4a1b      	ldr	r2, [pc, #108]	; (3e44 <usb_serial_flush_callback+0x7c>)
    3dd6:	7812      	ldrb	r2, [r2, #0]
    3dd8:	b38a      	cbz	r2, 3e3e <usb_serial_flush_callback+0x76>
{
    3dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    3dde:	4d1a      	ldr	r5, [pc, #104]	; (3e48 <usb_serial_flush_callback+0x80>)
    3de0:	882a      	ldrh	r2, [r5, #0]
    3de2:	b352      	cbz	r2, 3e3a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3de4:	4e19      	ldr	r6, [pc, #100]	; (3e4c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3de6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    3dea:	4f19      	ldr	r7, [pc, #100]	; (3e50 <usb_serial_flush_callback+0x88>)
    3dec:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3dee:	4c19      	ldr	r4, [pc, #100]	; (3e54 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3df0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3df4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3df8:	4642      	mov	r2, r8
    3dfa:	4638      	mov	r0, r7
    3dfc:	4621      	mov	r1, r4
    3dfe:	f7ff fee1 	bl	3bc4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3e02:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    3e06:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3e0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3e0e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3e12:	3420      	adds	r4, #32
	} while (location < end_addr);
    3e14:	42a2      	cmp	r2, r4
    3e16:	d8fa      	bhi.n	3e0e <usb_serial_flush_callback+0x46>
	asm("dsb");
    3e18:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3e1c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3e20:	2004      	movs	r0, #4
    3e22:	4639      	mov	r1, r7
    3e24:	f7ff fee6 	bl	3bf4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3e28:	7833      	ldrb	r3, [r6, #0]
    3e2a:	3301      	adds	r3, #1
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	2b03      	cmp	r3, #3
    3e30:	bf88      	it	hi
    3e32:	2300      	movhi	r3, #0
    3e34:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3e36:	2300      	movs	r3, #0
    3e38:	802b      	strh	r3, [r5, #0]
}
    3e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e3e:	4770      	bx	lr
    3e40:	200042b5 	.word	0x200042b5
    3e44:	200042b7 	.word	0x200042b7
    3e48:	200042a6 	.word	0x200042a6
    3e4c:	200042b4 	.word	0x200042b4
    3e50:	20003c00 	.word	0x20003c00
    3e54:	20201080 	.word	0x20201080

00003e58 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    3e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e5c:	b085      	sub	sp, #20
	while (size > 0) {
    3e5e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3e62:	2900      	cmp	r1, #0
    3e64:	f000 80bf 	beq.w	3fe6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    3e68:	2300      	movs	r3, #0
    3e6a:	4c60      	ldr	r4, [pc, #384]	; (3fec <usb_serial_write.part.0+0x194>)
    3e6c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4008 <usb_serial_write.part.0+0x1b0>
    3e70:	f8df a198 	ldr.w	sl, [pc, #408]	; 400c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    3e74:	4f5e      	ldr	r7, [pc, #376]	; (3ff0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    3e76:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    3e78:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    3e7a:	4a5e      	ldr	r2, [pc, #376]	; (3ff4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3e7c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    3e7e:	4b5e      	ldr	r3, [pc, #376]	; (3ff8 <usb_serial_write.part.0+0x1a0>)
    3e80:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    3e82:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    3e86:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	f040 80a7 	bne.w	3fde <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    3e90:	461e      	mov	r6, r3
		int waiting=0;
    3e92:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    3e94:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    3e96:	4648      	mov	r0, r9
    3e98:	f7ff fece 	bl	3c38 <usb_transfer_status>
			if (!(status & 0x80)) {
    3e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    3ea0:	f000 808c 	beq.w	3fbc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    3ea4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    3ea8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    3eac:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    3eb0:	b905      	cbnz	r5, 3eb4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    3eb2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d17d      	bne.n	3fb4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3eb8:	683b      	ldr	r3, [r7, #0]
    3eba:	1b9b      	subs	r3, r3, r6
    3ebc:	2b78      	cmp	r3, #120	; 0x78
    3ebe:	f200 8087 	bhi.w	3fd0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    3ec2:	4b4e      	ldr	r3, [pc, #312]	; (3ffc <usb_serial_write.part.0+0x1a4>)
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d074      	beq.n	3fb4 <usb_serial_write.part.0+0x15c>
			yield();
    3eca:	f000 fa9d 	bl	4408 <yield>
			tx_noautoflush = 1;
    3ece:	2201      	movs	r2, #1
		while (!tx_available) {
    3ed0:	f8b8 3000 	ldrh.w	r3, [r8]
    3ed4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    3ed6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d0dc      	beq.n	3e96 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3edc:	4a46      	ldr	r2, [pc, #280]	; (3ff8 <usb_serial_write.part.0+0x1a0>)
    3ede:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3ee2:	7811      	ldrb	r1, [r2, #0]
    3ee4:	461a      	mov	r2, r3
    3ee6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    3eea:	4d45      	ldr	r5, [pc, #276]	; (4000 <usb_serial_write.part.0+0x1a8>)
    3eec:	02c9      	lsls	r1, r1, #11
    3eee:	4428      	add	r0, r5
		if (size >= tx_available) {
    3ef0:	9d01      	ldr	r5, [sp, #4]
    3ef2:	4295      	cmp	r5, r2
    3ef4:	d217      	bcs.n	3f26 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    3ef6:	9303      	str	r3, [sp, #12]
    3ef8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3efc:	462a      	mov	r2, r5
    3efe:	f7ff f827 	bl	2f50 <memcpy>
			tx_available -= size;
    3f02:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3f04:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3f08:	1b5b      	subs	r3, r3, r5
    3f0a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3f0e:	4b3d      	ldr	r3, [pc, #244]	; (4004 <usb_serial_write.part.0+0x1ac>)
    3f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3f14:	f3bf 8f4f 	dsb	sy
			sent += size;
    3f18:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    3f1a:	2300      	movs	r3, #0
			sent += size;
    3f1c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    3f1e:	7023      	strb	r3, [r4, #0]
}
    3f20:	b005      	add	sp, #20
    3f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3f26:	4b36      	ldr	r3, [pc, #216]	; (4000 <usb_serial_write.part.0+0x1a8>)
    3f28:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    3f2a:	9902      	ldr	r1, [sp, #8]
    3f2c:	f7ff f810 	bl	2f50 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3f30:	2300      	movs	r3, #0
    3f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3f36:	4629      	mov	r1, r5
    3f38:	4648      	mov	r0, r9
    3f3a:	f7ff fe43 	bl	3bc4 <usb_prepare_transfer>
	asm("dsb");
    3f3e:	f3bf 8f4f 	dsb	sy
    3f42:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    3f46:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    3f4a:	4293      	cmp	r3, r2
    3f4c:	bf34      	ite	cc
    3f4e:	2301      	movcc	r3, #1
    3f50:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    3f52:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f56:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    3f5a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    3f5e:	3520      	adds	r5, #32
	} while (location < end_addr);
    3f60:	42ab      	cmp	r3, r5
    3f62:	d1fa      	bne.n	3f5a <usb_serial_write.part.0+0x102>
	asm("dsb");
    3f64:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3f68:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3f6c:	2004      	movs	r0, #4
    3f6e:	4649      	mov	r1, r9
    3f70:	f7ff fe40 	bl	3bf4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3f74:	4a20      	ldr	r2, [pc, #128]	; (3ff8 <usb_serial_write.part.0+0x1a0>)
    3f76:	7813      	ldrb	r3, [r2, #0]
    3f78:	3301      	adds	r3, #1
    3f7a:	b2db      	uxtb	r3, r3
    3f7c:	2b03      	cmp	r3, #3
    3f7e:	bf84      	itt	hi
    3f80:	2300      	movhi	r3, #0
    3f82:	4a1d      	ldrhi	r2, [pc, #116]	; (3ff8 <usb_serial_write.part.0+0x1a0>)
    3f84:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3f86:	f8b8 3000 	ldrh.w	r3, [r8]
    3f8a:	9a01      	ldr	r2, [sp, #4]
    3f8c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    3f8e:	9a00      	ldr	r2, [sp, #0]
    3f90:	441a      	add	r2, r3
			size -= tx_available;
    3f92:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    3f94:	9200      	str	r2, [sp, #0]
			data += tx_available;
    3f96:	9a02      	ldr	r2, [sp, #8]
    3f98:	441a      	add	r2, r3
			tx_available = 0;
    3f9a:	2300      	movs	r3, #0
			data += tx_available;
    3f9c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    3f9e:	4a19      	ldr	r2, [pc, #100]	; (4004 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    3fa0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    3fa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    3fa8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    3fac:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    3fae:	2900      	cmp	r1, #0
    3fb0:	f47f af62 	bne.w	3e78 <usb_serial_write.part.0+0x20>
	return sent;
    3fb4:	9800      	ldr	r0, [sp, #0]
}
    3fb6:	b005      	add	sp, #20
    3fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    3fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3fc0:	4b0d      	ldr	r3, [pc, #52]	; (3ff8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    3fc2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3fc6:	7819      	ldrb	r1, [r3, #0]
				break;
    3fc8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    3fca:	f8a8 2000 	strh.w	r2, [r8]
				break;
    3fce:	e78a      	b.n	3ee6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    3fd0:	2301      	movs	r3, #1
				return sent;
    3fd2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    3fd4:	f88a 3000 	strb.w	r3, [sl]
}
    3fd8:	b005      	add	sp, #20
    3fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3fde:	461a      	mov	r2, r3
    3fe0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3fe4:	e77f      	b.n	3ee6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    3fe6:	9801      	ldr	r0, [sp, #4]
	return sent;
    3fe8:	e7e5      	b.n	3fb6 <usb_serial_write.part.0+0x15e>
    3fea:	bf00      	nop
    3fec:	200042b5 	.word	0x200042b5
    3ff0:	20004268 	.word	0x20004268
    3ff4:	20003c00 	.word	0x20003c00
    3ff8:	200042b4 	.word	0x200042b4
    3ffc:	200042b7 	.word	0x200042b7
    4000:	20201080 	.word	0x20201080
    4004:	402e0000 	.word	0x402e0000
    4008:	200042a6 	.word	0x200042a6
    400c:	200042b3 	.word	0x200042b3

00004010 <usb_serial_reset>:
}
    4010:	4770      	bx	lr
    4012:	bf00      	nop

00004014 <usb_serial_configure>:
	if (usb_high_speed) {
    4014:	4b2d      	ldr	r3, [pc, #180]	; (40cc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4016:	2100      	movs	r1, #0
    4018:	2280      	movs	r2, #128	; 0x80
    401a:	482d      	ldr	r0, [pc, #180]	; (40d0 <usb_serial_configure+0xbc>)
{
    401c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    401e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    4020:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    4022:	4d2c      	ldr	r5, [pc, #176]	; (40d4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    4024:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    4026:	4e2c      	ldr	r6, [pc, #176]	; (40d8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    4028:	bf0c      	ite	eq
    402a:	2340      	moveq	r3, #64	; 0x40
    402c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    4030:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4032:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4034:	f00a f806 	bl	e044 <memset>
	tx_head = 0;
    4038:	4a28      	ldr	r2, [pc, #160]	; (40dc <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    403a:	4621      	mov	r1, r4
	tx_available = 0;
    403c:	4b28      	ldr	r3, [pc, #160]	; (40e0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    403e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4040:	f44f 7280 	mov.w	r2, #256	; 0x100
    4044:	4827      	ldr	r0, [pc, #156]	; (40e4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    4046:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4048:	f009 fffc 	bl	e044 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    404c:	4a26      	ldr	r2, [pc, #152]	; (40e8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    404e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    4050:	4b26      	ldr	r3, [pc, #152]	; (40ec <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4052:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    4054:	e9c2 4400 	strd	r4, r4, [r2]
    4058:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    405c:	4a24      	ldr	r2, [pc, #144]	; (40f0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    405e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    4062:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    4064:	4a23      	ldr	r2, [pc, #140]	; (40f4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    4066:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    406a:	4b23      	ldr	r3, [pc, #140]	; (40f8 <usb_serial_configure+0xe4>)
    406c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    406e:	4623      	mov	r3, r4
	rx_available = 0;
    4070:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4072:	4622      	mov	r2, r4
    4074:	f7ff fd74 	bl	3b60 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4078:	4622      	mov	r2, r4
    407a:	8831      	ldrh	r1, [r6, #0]
    407c:	2003      	movs	r0, #3
    407e:	4b1f      	ldr	r3, [pc, #124]	; (40fc <usb_serial_configure+0xe8>)
    4080:	f7ff fd3c 	bl	3afc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4084:	4623      	mov	r3, r4
    4086:	2201      	movs	r2, #1
    4088:	8829      	ldrh	r1, [r5, #0]
    408a:	2004      	movs	r0, #4
    408c:	f7ff fd68 	bl	3b60 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4090:	4620      	mov	r0, r4
    4092:	3401      	adds	r4, #1
    4094:	f7ff fe0e 	bl	3cb4 <rx_queue_transfer>
    4098:	2c08      	cmp	r4, #8
    409a:	d1f9      	bne.n	4090 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    409c:	4b18      	ldr	r3, [pc, #96]	; (4100 <usb_serial_configure+0xec>)
    409e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    40a0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    40a2:	4818      	ldr	r0, [pc, #96]	; (4104 <usb_serial_configure+0xf0>)
    40a4:	4c18      	ldr	r4, [pc, #96]	; (4108 <usb_serial_configure+0xf4>)
    40a6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    40a8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    40ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    40b0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    40b4:	4915      	ldr	r1, [pc, #84]	; (410c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    40b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    40ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    40be:	b121      	cbz	r1, 40ca <usb_serial_configure+0xb6>
    40c0:	4a13      	ldr	r2, [pc, #76]	; (4110 <usb_serial_configure+0xfc>)
    40c2:	7813      	ldrb	r3, [r2, #0]
    40c4:	f043 0301 	orr.w	r3, r3, #1
    40c8:	7013      	strb	r3, [r2, #0]
}
    40ca:	bd70      	pop	{r4, r5, r6, pc}
    40cc:	200042b8 	.word	0x200042b8
    40d0:	20003c00 	.word	0x20003c00
    40d4:	200042a8 	.word	0x200042a8
    40d8:	200042a4 	.word	0x200042a4
    40dc:	200042b4 	.word	0x200042b4
    40e0:	200042a6 	.word	0x200042a6
    40e4:	20003b00 	.word	0x20003b00
    40e8:	20004124 	.word	0x20004124
    40ec:	20004134 	.word	0x20004134
    40f0:	200042b0 	.word	0x200042b0
    40f4:	20004120 	.word	0x20004120
    40f8:	200042b1 	.word	0x200042b1
    40fc:	00003d15 	.word	0x00003d15
    4100:	402e0000 	.word	0x402e0000
    4104:	2000429c 	.word	0x2000429c
    4108:	00003dc9 	.word	0x00003dc9
    410c:	00000000 	.word	0x00000000
    4110:	200042ba 	.word	0x200042ba

00004114 <usb_serial_read>:
{
    4114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4118:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    411c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    4120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 41ec <usb_serial_read+0xd8>
{
    4124:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4126:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    412a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    412c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    4130:	2900      	cmp	r1, #0
    4132:	d04f      	beq.n	41d4 <usb_serial_read+0xc0>
    4134:	4680      	mov	r8, r0
    4136:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    4138:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    413a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 41f0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    413e:	4b26      	ldr	r3, [pc, #152]	; (41d8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    4140:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4144:	4925      	ldr	r1, [pc, #148]	; (41dc <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    4146:	781b      	ldrb	r3, [r3, #0]
    4148:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    414a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    414e:	d03f      	beq.n	41d0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    4150:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    4152:	4b23      	ldr	r3, [pc, #140]	; (41e0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4154:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    4156:	bf28      	it	cs
    4158:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    415a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    415c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4160:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    4164:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    4166:	4b1f      	ldr	r3, [pc, #124]	; (41e4 <usb_serial_read+0xd0>)
    4168:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    416c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    4170:	42aa      	cmp	r2, r5
    4172:	d21c      	bcs.n	41ae <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4174:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    4178:	4918      	ldr	r1, [pc, #96]	; (41dc <usb_serial_read+0xc8>)
			rx_available -= len;
    417a:	4c1b      	ldr	r4, [pc, #108]	; (41e8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    417c:	4461      	add	r1, ip
    417e:	9201      	str	r2, [sp, #4]
    4180:	f7fe fee6 	bl	2f50 <memcpy>
			rx_available -= len;
    4184:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    4186:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    418a:	4658      	mov	r0, fp
			rx_index[i] += len;
    418c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    418e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    4192:	442a      	add	r2, r5
			rx_available -= len;
    4194:	4439      	add	r1, r7
			rx_index[i] += len;
    4196:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    419a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    419c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    41a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    41a8:	b003      	add	sp, #12
    41aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    41ae:	462a      	mov	r2, r5
			count += avail;
    41b0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    41b2:	f7fe fecd 	bl	2f50 <memcpy>
			rx_available -= avail;
    41b6:	490c      	ldr	r1, [pc, #48]	; (41e8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    41b8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    41ba:	4630      	mov	r0, r6
			rx_available -= avail;
    41bc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    41be:	44a8      	add	r8, r5
			rx_available -= avail;
    41c0:	1b52      	subs	r2, r2, r5
    41c2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    41c4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    41c8:	f7ff fd74 	bl	3cb4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    41cc:	45bb      	cmp	fp, r7
    41ce:	d8b6      	bhi.n	413e <usb_serial_read+0x2a>
	return count;
    41d0:	4638      	mov	r0, r7
    41d2:	e7e3      	b.n	419c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    41d4:	4608      	mov	r0, r1
    41d6:	e7e1      	b.n	419c <usb_serial_read+0x88>
    41d8:	200042b0 	.word	0x200042b0
    41dc:	20200080 	.word	0x20200080
    41e0:	20004144 	.word	0x20004144
    41e4:	20004124 	.word	0x20004124
    41e8:	20004120 	.word	0x20004120
    41ec:	200042b1 	.word	0x200042b1
    41f0:	20004134 	.word	0x20004134

000041f4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    41f4:	4b0b      	ldr	r3, [pc, #44]	; (4224 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    41f6:	4a0c      	ldr	r2, [pc, #48]	; (4228 <usb_serial_peekchar+0x34>)
    41f8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    41fa:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    41fc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    41fe:	428a      	cmp	r2, r1
    4200:	d00d      	beq.n	421e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4202:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4204:	4809      	ldr	r0, [pc, #36]	; (422c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4206:	4a0a      	ldr	r2, [pc, #40]	; (4230 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    4208:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    420a:	490a      	ldr	r1, [pc, #40]	; (4234 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    420c:	bf28      	it	cs
    420e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4210:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4212:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4216:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    421a:	5c58      	ldrb	r0, [r3, r1]
    421c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    421e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4222:	4770      	bx	lr
    4224:	200042b0 	.word	0x200042b0
    4228:	200042b1 	.word	0x200042b1
    422c:	20004144 	.word	0x20004144
    4230:	20200080 	.word	0x20200080
    4234:	20004134 	.word	0x20004134

00004238 <usb_serial_available>:
	uint32_t n = rx_available;
    4238:	4b04      	ldr	r3, [pc, #16]	; (424c <usb_serial_available+0x14>)
{
    423a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    423c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    423e:	b10c      	cbz	r4, 4244 <usb_serial_available+0xc>
}
    4240:	4620      	mov	r0, r4
    4242:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    4244:	f000 f8e0 	bl	4408 <yield>
}
    4248:	4620      	mov	r0, r4
    424a:	bd10      	pop	{r4, pc}
    424c:	20004120 	.word	0x20004120

00004250 <usb_serial_flush_input>:
{
    4250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4254:	4e14      	ldr	r6, [pc, #80]	; (42a8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    4256:	4d15      	ldr	r5, [pc, #84]	; (42ac <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    4258:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    425a:	782a      	ldrb	r2, [r5, #0]
    425c:	4293      	cmp	r3, r2
    425e:	d021      	beq.n	42a4 <usb_serial_flush_input+0x54>
    4260:	b2dc      	uxtb	r4, r3
    4262:	f8df 9050 	ldr.w	r9, [pc, #80]	; 42b4 <usb_serial_flush_input+0x64>
    4266:	f8df b050 	ldr.w	fp, [pc, #80]	; 42b8 <usb_serial_flush_input+0x68>
    426a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 42bc <usb_serial_flush_input+0x6c>
    426e:	4f10      	ldr	r7, [pc, #64]	; (42b0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    4270:	3401      	adds	r4, #1
    4272:	2c08      	cmp	r4, #8
		rx_tail = tail;
    4274:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    4278:	d901      	bls.n	427e <usb_serial_flush_input+0x2e>
    427a:	2400      	movs	r4, #0
    427c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    427e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4282:	f8db 3000 	ldr.w	r3, [fp]
    4286:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    428a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    428e:	1a52      	subs	r2, r2, r1
    4290:	1a9b      	subs	r3, r3, r2
    4292:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4296:	f7ff fd0d 	bl	3cb4 <rx_queue_transfer>
		rx_tail = tail;
    429a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    429e:	782b      	ldrb	r3, [r5, #0]
    42a0:	42a3      	cmp	r3, r4
    42a2:	d1e5      	bne.n	4270 <usb_serial_flush_input+0x20>
}
    42a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42a8:	200042b1 	.word	0x200042b1
    42ac:	200042b0 	.word	0x200042b0
    42b0:	20004134 	.word	0x20004134
    42b4:	20004144 	.word	0x20004144
    42b8:	20004120 	.word	0x20004120
    42bc:	20004124 	.word	0x20004124

000042c0 <usb_serial_getchar>:
{
    42c0:	b500      	push	{lr}
    42c2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    42c4:	2101      	movs	r1, #1
    42c6:	f10d 0007 	add.w	r0, sp, #7
    42ca:	f7ff ff23 	bl	4114 <usb_serial_read>
    42ce:	b120      	cbz	r0, 42da <usb_serial_getchar+0x1a>
    42d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    42d4:	b003      	add	sp, #12
    42d6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    42da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42de:	e7f9      	b.n	42d4 <usb_serial_getchar+0x14>

000042e0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    42e0:	4b09      	ldr	r3, [pc, #36]	; (4308 <usb_serial_putchar+0x28>)
{
    42e2:	b500      	push	{lr}
    42e4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    42e6:	781b      	ldrb	r3, [r3, #0]
{
    42e8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    42ec:	b13b      	cbz	r3, 42fe <usb_serial_putchar+0x1e>
    42ee:	2101      	movs	r1, #1
    42f0:	f10d 0007 	add.w	r0, sp, #7
    42f4:	f7ff fdb0 	bl	3e58 <usb_serial_write.part.0>
}
    42f8:	b003      	add	sp, #12
    42fa:	f85d fb04 	ldr.w	pc, [sp], #4
    42fe:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4302:	b003      	add	sp, #12
    4304:	f85d fb04 	ldr.w	pc, [sp], #4
    4308:	200042b7 	.word	0x200042b7

0000430c <usb_serial_write>:
	if (!usb_configuration) return 0;
    430c:	4b04      	ldr	r3, [pc, #16]	; (4320 <usb_serial_write+0x14>)
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4314:	b10b      	cbz	r3, 431a <usb_serial_write+0xe>
    4316:	f7ff bd9f 	b.w	3e58 <usb_serial_write.part.0>
}
    431a:	4610      	mov	r0, r2
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	200042b7 	.word	0x200042b7

00004324 <usb_serial_write_buffer_free>:
{
    4324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    4328:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    432a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4370 <usb_serial_write_buffer_free+0x4c>
    432e:	2301      	movs	r3, #1
    4330:	4d0d      	ldr	r5, [pc, #52]	; (4368 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    4332:	4627      	mov	r7, r4
    4334:	4e0d      	ldr	r6, [pc, #52]	; (436c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    4336:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    433a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    433c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    433e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    4340:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    4342:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4346:	d005      	beq.n	4354 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4348:	f7ff fc76 	bl	3c38 <usb_transfer_status>
    434c:	0603      	lsls	r3, r0, #24
    434e:	bf58      	it	pl
    4350:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    4354:	2c04      	cmp	r4, #4
    4356:	d1f0      	bne.n	433a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    4358:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    435c:	2300      	movs	r3, #0
}
    435e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    4360:	f888 3000 	strb.w	r3, [r8]
}
    4364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4368:	20003c00 	.word	0x20003c00
    436c:	200042b4 	.word	0x200042b4
    4370:	200042b5 	.word	0x200042b5

00004374 <usb_serial_flush_output>:
{
    4374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    4378:	4b1d      	ldr	r3, [pc, #116]	; (43f0 <usb_serial_flush_output+0x7c>)
    437a:	781b      	ldrb	r3, [r3, #0]
    437c:	b113      	cbz	r3, 4384 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    437e:	4d1d      	ldr	r5, [pc, #116]	; (43f4 <usb_serial_flush_output+0x80>)
    4380:	882a      	ldrh	r2, [r5, #0]
    4382:	b90a      	cbnz	r2, 4388 <usb_serial_flush_output+0x14>
}
    4384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    4388:	4e1b      	ldr	r6, [pc, #108]	; (43f8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    438a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    438e:	491b      	ldr	r1, [pc, #108]	; (43fc <usb_serial_flush_output+0x88>)
    4390:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4392:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4394:	4c1a      	ldr	r4, [pc, #104]	; (4400 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4396:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    439a:	4f1a      	ldr	r7, [pc, #104]	; (4404 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    439c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    43a0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    43a2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    43a4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    43a6:	4621      	mov	r1, r4
    43a8:	2300      	movs	r3, #0
    43aa:	f7ff fc0b 	bl	3bc4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    43ae:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    43b2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    43b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    43ba:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    43be:	3420      	adds	r4, #32
	} while (location < end_addr);
    43c0:	42a2      	cmp	r2, r4
    43c2:	d8fa      	bhi.n	43ba <usb_serial_flush_output+0x46>
	asm("dsb");
    43c4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    43c8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    43cc:	2004      	movs	r0, #4
    43ce:	4641      	mov	r1, r8
    43d0:	f7ff fc10 	bl	3bf4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    43d4:	7833      	ldrb	r3, [r6, #0]
    43d6:	3301      	adds	r3, #1
    43d8:	b2db      	uxtb	r3, r3
    43da:	2b03      	cmp	r3, #3
    43dc:	bf88      	it	hi
    43de:	2300      	movhi	r3, #0
    43e0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    43e2:	2300      	movs	r3, #0
    43e4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    43e6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    43ea:	703b      	strb	r3, [r7, #0]
}
    43ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43f0:	200042b7 	.word	0x200042b7
    43f4:	200042a6 	.word	0x200042a6
    43f8:	200042b4 	.word	0x200042b4
    43fc:	20003c00 	.word	0x20003c00
    4400:	20201080 	.word	0x20201080
    4404:	200042b5 	.word	0x200042b5

00004408 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    4408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    440c:	4b2d      	ldr	r3, [pc, #180]	; (44c4 <yield+0xbc>)
    440e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    4410:	b166      	cbz	r6, 442c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    4412:	4f2d      	ldr	r7, [pc, #180]	; (44c8 <yield+0xc0>)
    4414:	783b      	ldrb	r3, [r7, #0]
    4416:	b94b      	cbnz	r3, 442c <yield+0x24>
	running = 1;
    4418:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    441a:	07f1      	lsls	r1, r6, #31
	running = 1;
    441c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    441e:	d443      	bmi.n	44a8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    4420:	07b2      	lsls	r2, r6, #30
    4422:	d426      	bmi.n	4472 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    4424:	2300      	movs	r3, #0
    4426:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    4428:	0773      	lsls	r3, r6, #29
    442a:	d401      	bmi.n	4430 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    4430:	4b26      	ldr	r3, [pc, #152]	; (44cc <yield+0xc4>)
    4432:	681a      	ldr	r2, [r3, #0]
    4434:	2a00      	cmp	r2, #0
    4436:	d0f9      	beq.n	442c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4438:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    443c:	2a00      	cmp	r2, #0
    443e:	d1f5      	bne.n	442c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4440:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    4444:	b672      	cpsid	i
		EventResponder *first = firstYield;
    4446:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4448:	2800      	cmp	r0, #0
    444a:	d034      	beq.n	44b6 <yield+0xae>
		if (runningFromYield) {
    444c:	4c20      	ldr	r4, [pc, #128]	; (44d0 <yield+0xc8>)
    444e:	7821      	ldrb	r1, [r4, #0]
    4450:	2900      	cmp	r1, #0
    4452:	d130      	bne.n	44b6 <yield+0xae>
		runningFromYield = true;
    4454:	2201      	movs	r2, #1
    4456:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    4458:	6942      	ldr	r2, [r0, #20]
    445a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    445c:	2a00      	cmp	r2, #0
    445e:	d02e      	beq.n	44be <yield+0xb6>
			firstYield->_prev = nullptr;
    4460:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    4462:	b905      	cbnz	r5, 4466 <yield+0x5e>
    4464:	b662      	cpsie	i
		first->_triggered = false;
    4466:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4468:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    446a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    446c:	4798      	blx	r3
		runningFromYield = false;
    446e:	7025      	strb	r5, [r4, #0]
    4470:	e7dc      	b.n	442c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4472:	f8df 8064 	ldr.w	r8, [pc, #100]	; 44d8 <yield+0xd0>
    4476:	f898 3000 	ldrb.w	r3, [r8]
    447a:	2b00      	cmp	r3, #0
    447c:	d0d2      	beq.n	4424 <yield+0x1c>
    447e:	2500      	movs	r5, #0
    4480:	f8df 9058 	ldr.w	r9, [pc, #88]	; 44dc <yield+0xd4>
    4484:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    4486:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    448a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    448c:	6823      	ldr	r3, [r4, #0]
    448e:	4620      	mov	r0, r4
    4490:	691b      	ldr	r3, [r3, #16]
    4492:	4798      	blx	r3
    4494:	b110      	cbz	r0, 449c <yield+0x94>
    4496:	6963      	ldr	r3, [r4, #20]
    4498:	689b      	ldr	r3, [r3, #8]
    449a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    449c:	f898 2000 	ldrb.w	r2, [r8]
    44a0:	b2eb      	uxtb	r3, r5
    44a2:	429a      	cmp	r2, r3
    44a4:	d8ef      	bhi.n	4486 <yield+0x7e>
    44a6:	e7bd      	b.n	4424 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    44a8:	f7ff fec6 	bl	4238 <usb_serial_available>
		if (Serial.available()) serialEvent();
    44ac:	2800      	cmp	r0, #0
    44ae:	d0b7      	beq.n	4420 <yield+0x18>
    44b0:	f3af 8000 	nop.w
    44b4:	e7b4      	b.n	4420 <yield+0x18>
		if (doit) __enable_irq();
    44b6:	2d00      	cmp	r5, #0
    44b8:	d1b8      	bne.n	442c <yield+0x24>
    44ba:	b662      	cpsie	i
    44bc:	e7b6      	b.n	442c <yield+0x24>
			lastYield = nullptr;
    44be:	4b05      	ldr	r3, [pc, #20]	; (44d4 <yield+0xcc>)
    44c0:	601a      	str	r2, [r3, #0]
    44c2:	e7ce      	b.n	4462 <yield+0x5a>
    44c4:	200042ba 	.word	0x200042ba
    44c8:	200042ac 	.word	0x200042ac
    44cc:	20003ca4 	.word	0x20003ca4
    44d0:	200042aa 	.word	0x200042aa
    44d4:	20003cb0 	.word	0x20003cb0
    44d8:	200042ab 	.word	0x200042ab
    44dc:	20003cb4 	.word	0x20003cb4

000044e0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    44e0:	49a2      	ldr	r1, [pc, #648]	; (476c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    44e2:	4ba3      	ldr	r3, [pc, #652]	; (4770 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    44e4:	4288      	cmp	r0, r1
{
    44e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    44ea:	4ca2      	ldr	r4, [pc, #648]	; (4774 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    44ec:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    44ee:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    44f0:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    44f4:	d91b      	bls.n	452e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    44f6:	4ba0      	ldr	r3, [pc, #640]	; (4778 <set_arm_clock+0x298>)
    44f8:	4298      	cmp	r0, r3
    44fa:	f240 8102 	bls.w	4702 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    44fe:	1ac3      	subs	r3, r0, r3
    4500:	499e      	ldr	r1, [pc, #632]	; (477c <set_arm_clock+0x29c>)
    4502:	0a1b      	lsrs	r3, r3, #8
    4504:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    4508:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    450c:	09db      	lsrs	r3, r3, #7
    450e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4512:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4516:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    451a:	428b      	cmp	r3, r1
    451c:	bf28      	it	cs
    451e:	460b      	movcs	r3, r1
    4520:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    4524:	4b96      	ldr	r3, [pc, #600]	; (4780 <set_arm_clock+0x2a0>)
    4526:	fba3 3707 	umull	r3, r7, r3, r7
    452a:	08ff      	lsrs	r7, r7, #3
    452c:	e004      	b.n	4538 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    452e:	4f95      	ldr	r7, [pc, #596]	; (4784 <set_arm_clock+0x2a4>)
    4530:	42b8      	cmp	r0, r7
    4532:	bf8c      	ite	hi
    4534:	270e      	movhi	r7, #14
    4536:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    4538:	498d      	ldr	r1, [pc, #564]	; (4770 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    453a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    453e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    4542:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    4544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    4548:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    454c:	d20c      	bcs.n	4568 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    454e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    4552:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    4556:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    455a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    455e:	680b      	ldr	r3, [r1, #0]
    4560:	2b00      	cmp	r3, #0
    4562:	dafc      	bge.n	455e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    4564:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    4568:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    456c:	d124      	bne.n	45b8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    456e:	4986      	ldr	r1, [pc, #536]	; (4788 <set_arm_clock+0x2a8>)
    4570:	690c      	ldr	r4, [r1, #16]
    4572:	4986      	ldr	r1, [pc, #536]	; (478c <set_arm_clock+0x2ac>)
    4574:	43a1      	bics	r1, r4
    4576:	f000 80ea 	beq.w	474e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    457a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    457e:	4634      	mov	r4, r6
    4580:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    4584:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    4588:	d004      	beq.n	4594 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    458a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    458e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    4590:	4b77      	ldr	r3, [pc, #476]	; (4770 <set_arm_clock+0x290>)
    4592:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    4594:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    4598:	d007      	beq.n	45aa <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    459a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    459e:	4974      	ldr	r1, [pc, #464]	; (4770 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    45a0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    45a2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    45a4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    45a6:	071a      	lsls	r2, r3, #28
    45a8:	d4fc      	bmi.n	45a4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    45aa:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    45ae:	4a70      	ldr	r2, [pc, #448]	; (4770 <set_arm_clock+0x290>)
    45b0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    45b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    45b4:	069b      	lsls	r3, r3, #26
    45b6:	d4fc      	bmi.n	45b2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    45b8:	4c75      	ldr	r4, [pc, #468]	; (4790 <set_arm_clock+0x2b0>)
    45ba:	42a0      	cmp	r0, r4
    45bc:	f200 80ce 	bhi.w	475c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    45c0:	f04f 0c01 	mov.w	ip, #1
    45c4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    45c6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    45c8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    45cc:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    45d0:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    45d4:	42a2      	cmp	r2, r4
    45d6:	d818      	bhi.n	460a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    45d8:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    45dc:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    45e0:	f040 808d 	bne.w	46fe <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    45e4:	f1bc 0f04 	cmp.w	ip, #4
    45e8:	f200 8091 	bhi.w	470e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    45ec:	180a      	adds	r2, r1, r0
    45ee:	42a2      	cmp	r2, r4
    45f0:	f200 80a4 	bhi.w	473c <set_arm_clock+0x25c>
    45f4:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    45f8:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    45fa:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    45fe:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    4602:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    4606:	42a2      	cmp	r2, r4
    4608:	d9e6      	bls.n	45d8 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    460a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    460e:	028c      	lsls	r4, r1, #10
    4610:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4614:	485f      	ldr	r0, [pc, #380]	; (4794 <set_arm_clock+0x2b4>)
    4616:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    4618:	4a5f      	ldr	r2, [pc, #380]	; (4798 <set_arm_clock+0x2b8>)
    461a:	4290      	cmp	r0, r2
    461c:	d97f      	bls.n	471e <set_arm_clock+0x23e>
    461e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 47c4 <set_arm_clock+0x2e4>
    4622:	226c      	movs	r2, #108	; 0x6c
    4624:	485d      	ldr	r0, [pc, #372]	; (479c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4626:	4d58      	ldr	r5, [pc, #352]	; (4788 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    4628:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    462c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    4630:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4634:	f8df c190 	ldr.w	ip, [pc, #400]	; 47c8 <set_arm_clock+0x2e8>
    4638:	ea0e 0c0c 	and.w	ip, lr, ip
    463c:	45d4      	cmp	ip, sl
    463e:	d009      	beq.n	4654 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    4640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    4644:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    4648:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    464c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    464e:	682a      	ldr	r2, [r5, #0]
    4650:	2a00      	cmp	r2, #0
    4652:	dafc      	bge.n	464e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    4654:	4a46      	ldr	r2, [pc, #280]	; (4770 <set_arm_clock+0x290>)
    4656:	6915      	ldr	r5, [r2, #16]
    4658:	f005 0507 	and.w	r5, r5, #7
    465c:	429d      	cmp	r5, r3
    465e:	d003      	beq.n	4668 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    4660:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    4662:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4664:	03dd      	lsls	r5, r3, #15
    4666:	d4fc      	bmi.n	4662 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4668:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    466c:	d009      	beq.n	4682 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    466e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    4672:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    4676:	4a3e      	ldr	r2, [pc, #248]	; (4770 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    4678:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    467a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    467c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    467e:	0799      	lsls	r1, r3, #30
    4680:	d4fc      	bmi.n	467c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    4682:	4947      	ldr	r1, [pc, #284]	; (47a0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    4684:	4a47      	ldr	r2, [pc, #284]	; (47a4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    4686:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    4688:	4291      	cmp	r1, r2
    468a:	d83c      	bhi.n	4706 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    468c:	4b46      	ldr	r3, [pc, #280]	; (47a8 <set_arm_clock+0x2c8>)
    468e:	09c9      	lsrs	r1, r1, #7
    4690:	fba3 3101 	umull	r3, r1, r3, r1
    4694:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    4696:	1e4b      	subs	r3, r1, #1
    4698:	021b      	lsls	r3, r3, #8
    469a:	ea86 0203 	eor.w	r2, r6, r3
    469e:	f412 7f40 	tst.w	r2, #768	; 0x300
    46a2:	d006      	beq.n	46b2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    46a4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    46a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    46ac:	4a30      	ldr	r2, [pc, #192]	; (4770 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    46ae:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    46b0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    46b2:	4a2f      	ldr	r2, [pc, #188]	; (4770 <set_arm_clock+0x290>)
    46b4:	6953      	ldr	r3, [r2, #20]
    46b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    46ba:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    46bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    46be:	069b      	lsls	r3, r3, #26
    46c0:	d4fc      	bmi.n	46bc <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    46c2:	4b3a      	ldr	r3, [pc, #232]	; (47ac <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    46c4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    46c6:	fba3 2300 	umull	r2, r3, r3, r0
    46ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46ce:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    46d2:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    46d6:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    46da:	4a35      	ldr	r2, [pc, #212]	; (47b0 <set_arm_clock+0x2d0>)
    46dc:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    46de:	4a35      	ldr	r2, [pc, #212]	; (47b4 <set_arm_clock+0x2d4>)
    46e0:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    46e2:	4a35      	ldr	r2, [pc, #212]	; (47b8 <set_arm_clock+0x2d8>)
    46e4:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    46e6:	d208      	bcs.n	46fa <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    46e8:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    46ec:	4a21      	ldr	r2, [pc, #132]	; (4774 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    46ee:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    46f2:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    46f4:	6813      	ldr	r3, [r2, #0]
    46f6:	2b00      	cmp	r3, #0
    46f8:	dafc      	bge.n	46f4 <set_arm_clock+0x214>
	}

	return frequency;
}
    46fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46fe:	4673      	mov	r3, lr
    4700:	e762      	b.n	45c8 <set_arm_clock+0xe8>
    4702:	2712      	movs	r7, #18
    4704:	e718      	b.n	4538 <set_arm_clock+0x58>
    4706:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    470a:	2104      	movs	r1, #4
    470c:	e7c5      	b.n	469a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    470e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4712:	4820      	ldr	r0, [pc, #128]	; (4794 <set_arm_clock+0x2b4>)
    4714:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4716:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4718:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    471a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    471e:	4a27      	ldr	r2, [pc, #156]	; (47bc <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    4720:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 47cc <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4724:	fba2 2000 	umull	r2, r0, r2, r0
    4728:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    472a:	4825      	ldr	r0, [pc, #148]	; (47c0 <set_arm_clock+0x2e0>)
    472c:	2a36      	cmp	r2, #54	; 0x36
    472e:	bf38      	it	cc
    4730:	2236      	movcc	r2, #54	; 0x36
    4732:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    4736:	ea42 0a0a 	orr.w	sl, r2, sl
    473a:	e774      	b.n	4626 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    473c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    4740:	2300      	movs	r3, #0
    4742:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    4746:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    474a:	46ac      	mov	ip, r5
    474c:	e762      	b.n	4614 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    474e:	461d      	mov	r5, r3
    4750:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    4754:	4611      	mov	r1, r2
    4756:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    475a:	e713      	b.n	4584 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    475c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    475e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    4762:	4602      	mov	r2, r0
    4764:	4631      	mov	r1, r6
    4766:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    4768:	46e6      	mov	lr, ip
    476a:	e753      	b.n	4614 <set_arm_clock+0x134>
    476c:	1f78a400 	.word	0x1f78a400
    4770:	400fc000 	.word	0x400fc000
    4774:	40080000 	.word	0x40080000
    4778:	23c34600 	.word	0x23c34600
    477c:	004cb223 	.word	0x004cb223
    4780:	51eb851f 	.word	0x51eb851f
    4784:	016e3600 	.word	0x016e3600
    4788:	400d8000 	.word	0x400d8000
    478c:	80003040 	.word	0x80003040
    4790:	269fb1ff 	.word	0x269fb1ff
    4794:	005b8d80 	.word	0x005b8d80
    4798:	4df67eff 	.word	0x4df67eff
    479c:	4d3f6400 	.word	0x4d3f6400
    47a0:	08f0d17f 	.word	0x08f0d17f
    47a4:	2cb4177f 	.word	0x2cb4177f
    47a8:	00e5109f 	.word	0x00e5109f
    47ac:	431bde83 	.word	0x431bde83
    47b0:	20002f9c 	.word	0x20002f9c
    47b4:	20002f98 	.word	0x20002f98
    47b8:	20004160 	.word	0x20004160
    47bc:	165e9f81 	.word	0x165e9f81
    47c0:	00b71b00 	.word	0x00b71b00
    47c4:	8000206c 	.word	0x8000206c
    47c8:	8001307f 	.word	0x8001307f
    47cc:	80002000 	.word	0x80002000

000047d0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    47d0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    47d2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    47d4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    47d8:	4619      	mov	r1, r3
{
    47da:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    47dc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    47e0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    47e4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    47e8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    47ec:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    47f0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    47f2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    47f6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    47fa:	b29b      	uxth	r3, r3
    47fc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    4800:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4804:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    4808:	3101      	adds	r1, #1
    480a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    480e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4810:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4812:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    4816:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4818:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    481a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    481c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    481e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    4822:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4824:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4826:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4828:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    482a:	d1eb      	bne.n	4804 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    482c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4830:	b29b      	uxth	r3, r3
    4832:	f043 030f 	orr.w	r3, r3, #15
    4836:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    483a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    483e:	b29b      	uxth	r3, r3
    4840:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    4844:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    4848:	bd10      	pop	{r4, pc}
    484a:	bf00      	nop

0000484c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    484c:	4b37      	ldr	r3, [pc, #220]	; (492c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    484e:	4a38      	ldr	r2, [pc, #224]	; (4930 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4850:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    4852:	4838      	ldr	r0, [pc, #224]	; (4934 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4854:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    4858:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    485a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    485c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4860:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4864:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4868:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    486c:	430a      	orrs	r2, r1
    486e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    4872:	f7ff ffad 	bl	47d0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    4876:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    487a:	f7ff ffa9 	bl	47d0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    487e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4882:	f7ff ffa5 	bl	47d0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    4886:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    488a:	f7ff ffa1 	bl	47d0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    488e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4890:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4894:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    4898:	4611      	mov	r1, r2
    489a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    489e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    48a2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    48a4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    48a6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    48a8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48aa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48ae:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48b0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    48b2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    48b6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48b8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    48ba:	d1ee      	bne.n	489a <pwm_init+0x4e>
    48bc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    48be:	481e      	ldr	r0, [pc, #120]	; (4938 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48c0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48c4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    48c8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48ca:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48ce:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    48d2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    48d6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    48da:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    48dc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    48de:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    48e0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48e2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48e6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48e8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    48ea:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    48ee:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48f0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    48f2:	d1ee      	bne.n	48d2 <pwm_init+0x86>
    48f4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    48f6:	4811      	ldr	r0, [pc, #68]	; (493c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48f8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48fa:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    48fe:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4900:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4904:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    4908:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    490c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4910:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4912:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    4914:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    4916:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4918:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    491a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    491c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    491e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    4922:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4924:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    4928:	d1ee      	bne.n	4908 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    492a:	bd70      	pop	{r4, r5, r6, pc}
    492c:	400fc000 	.word	0x400fc000
    4930:	fc030000 	.word	0xfc030000
    4934:	403dc000 	.word	0x403dc000
    4938:	401e0000 	.word	0x401e0000
    493c:	401e4000 	.word	0x401e4000

00004940 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    4940:	4a07      	ldr	r2, [pc, #28]	; (4960 <rtc_get+0x20>)
    4942:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    4944:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    4946:	4619      	mov	r1, r3
    4948:	4684      	mov	ip, r0
    494a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    494c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    494e:	4299      	cmp	r1, r3
    4950:	d1f9      	bne.n	4946 <rtc_get+0x6>
    4952:	4584      	cmp	ip, r0
    4954:	d1f7      	bne.n	4946 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    4956:	0bdb      	lsrs	r3, r3, #15
}
    4958:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	400d4000 	.word	0x400d4000

00004964 <sm_align_pool>:
{
    4964:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    4966:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    496a:	b15b      	cbz	r3, 4984 <sm_align_pool+0x20>
    496c:	b1ba      	cbz	r2, 499e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    496e:	4b0f      	ldr	r3, [pc, #60]	; (49ac <sm_align_pool+0x48>)
    4970:	fba3 1302 	umull	r1, r3, r3, r2
    4974:	08db      	lsrs	r3, r3, #3
    4976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    497a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    497e:	d10a      	bne.n	4996 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    4980:	2001      	movs	r0, #1
}
    4982:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    4984:	4b09      	ldr	r3, [pc, #36]	; (49ac <sm_align_pool+0x48>)
    4986:	fba3 1302 	umull	r1, r3, r3, r2
    498a:	08db      	lsrs	r3, r3, #3
    498c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    4990:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    4994:	d001      	beq.n	499a <sm_align_pool+0x36>
    4996:	1ad2      	subs	r2, r2, r3
    4998:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    499a:	2af0      	cmp	r2, #240	; 0xf0
    499c:	d8f0      	bhi.n	4980 <sm_align_pool+0x1c>
		errno = ENOSPC;
    499e:	f009 fc4f 	bl	e240 <__errno>
    49a2:	221c      	movs	r2, #28
    49a4:	4603      	mov	r3, r0
    49a6:	2000      	movs	r0, #0
    49a8:	601a      	str	r2, [r3, #0]
}
    49aa:	bd08      	pop	{r3, pc}
    49ac:	aaaaaaab 	.word	0xaaaaaaab

000049b0 <sm_set_pool>:
{
    49b0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    49b2:	4604      	mov	r4, r0
    49b4:	b338      	cbz	r0, 4a06 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    49b6:	b119      	cbz	r1, 49c0 <sm_set_pool+0x10>
    49b8:	fab2 f682 	clz	r6, r2
    49bc:	0976      	lsrs	r6, r6, #5
    49be:	b9a2      	cbnz	r2, 49ea <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    49c0:	6820      	ldr	r0, [r4, #0]
    49c2:	b300      	cbz	r0, 4a06 <sm_set_pool+0x56>
    49c4:	6862      	ldr	r2, [r4, #4]
    49c6:	b1f2      	cbz	r2, 4a06 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    49c8:	4b18      	ldr	r3, [pc, #96]	; (4a2c <sm_set_pool+0x7c>)
    49ca:	4919      	ldr	r1, [pc, #100]	; (4a30 <sm_set_pool+0x80>)
    49cc:	fb02 f303 	mul.w	r3, r2, r3
    49d0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    49d4:	d317      	bcc.n	4a06 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    49d6:	68a3      	ldr	r3, [r4, #8]
    49d8:	b9e3      	cbnz	r3, 4a14 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    49da:	2200      	movs	r2, #0
			return 1;
    49dc:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    49de:	6022      	str	r2, [r4, #0]
    49e0:	6062      	str	r2, [r4, #4]
    49e2:	60a2      	str	r2, [r4, #8]
    49e4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    49e6:	4618      	mov	r0, r3
    49e8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    49ea:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    49ec:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    49ee:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    49f2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    49f4:	f7ff ffb6 	bl	4964 <sm_align_pool>
    49f8:	4603      	mov	r3, r0
    49fa:	2800      	cmp	r0, #0
    49fc:	d0f3      	beq.n	49e6 <sm_set_pool+0x36>
	if (do_zero) {
    49fe:	b96d      	cbnz	r5, 4a1c <sm_set_pool+0x6c>
	return 1;
    4a00:	2301      	movs	r3, #1
}
    4a02:	4618      	mov	r0, r3
    4a04:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    4a06:	f009 fc1b 	bl	e240 <__errno>
    4a0a:	2216      	movs	r2, #22
		return 0;
    4a0c:	2300      	movs	r3, #0
		errno = EINVAL;
    4a0e:	6002      	str	r2, [r0, #0]
}
    4a10:	4618      	mov	r0, r3
    4a12:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    4a14:	2100      	movs	r1, #0
    4a16:	f009 fb15 	bl	e044 <memset>
    4a1a:	e7de      	b.n	49da <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    4a1c:	6862      	ldr	r2, [r4, #4]
    4a1e:	4631      	mov	r1, r6
    4a20:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    4a22:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    4a24:	f009 fb0e 	bl	e044 <memset>
	return 1;
    4a28:	2301      	movs	r3, #1
    4a2a:	e7dc      	b.n	49e6 <sm_set_pool+0x36>
    4a2c:	aaaaaaab 	.word	0xaaaaaaab
    4a30:	15555555 	.word	0x15555555

00004a34 <__aeabi_atexit>:
    4a34:	4603      	mov	r3, r0
    4a36:	4608      	mov	r0, r1
    4a38:	4619      	mov	r1, r3
    4a3a:	f009 bbd3 	b.w	e1e4 <__cxa_atexit>
    4a3e:	bf00      	nop

00004a40 <std::__throw_bad_alloc()>:
    4a40:	b508      	push	{r3, lr}
    4a42:	2004      	movs	r0, #4
    4a44:	f000 f98c 	bl	4d60 <__cxa_allocate_exception>
    4a48:	4b02      	ldr	r3, [pc, #8]	; (4a54 <std::__throw_bad_alloc()+0x14>)
    4a4a:	4a03      	ldr	r2, [pc, #12]	; (4a58 <std::__throw_bad_alloc()+0x18>)
    4a4c:	4903      	ldr	r1, [pc, #12]	; (4a5c <std::__throw_bad_alloc()+0x1c>)
    4a4e:	6003      	str	r3, [r0, #0]
    4a50:	f000 fe3a 	bl	56c8 <__cxa_throw>
    4a54:	20001660 	.word	0x20001660
    4a58:	00004c19 	.word	0x00004c19
    4a5c:	20001410 	.word	0x20001410

00004a60 <std::__throw_bad_array_new_length()>:
    4a60:	b508      	push	{r3, lr}
    4a62:	2004      	movs	r0, #4
    4a64:	f000 f97c 	bl	4d60 <__cxa_allocate_exception>
    4a68:	4b02      	ldr	r3, [pc, #8]	; (4a74 <std::__throw_bad_array_new_length()+0x14>)
    4a6a:	4a03      	ldr	r2, [pc, #12]	; (4a78 <std::__throw_bad_array_new_length()+0x18>)
    4a6c:	4903      	ldr	r1, [pc, #12]	; (4a7c <std::__throw_bad_array_new_length()+0x1c>)
    4a6e:	6003      	str	r3, [r0, #0]
    4a70:	f000 fe2a 	bl	56c8 <__cxa_throw>
    4a74:	2000164c 	.word	0x2000164c
    4a78:	00004c51 	.word	0x00004c51
    4a7c:	20001404 	.word	0x20001404

00004a80 <std::__throw_logic_error(char const*)>:
    4a80:	b510      	push	{r4, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	9001      	str	r0, [sp, #4]
    4a86:	2008      	movs	r0, #8
    4a88:	f000 f96a 	bl	4d60 <__cxa_allocate_exception>
    4a8c:	9901      	ldr	r1, [sp, #4]
    4a8e:	4604      	mov	r4, r0
    4a90:	f001 f822 	bl	5ad8 <std::logic_error::logic_error(char const*)>
    4a94:	4a04      	ldr	r2, [pc, #16]	; (4aa8 <std::__throw_logic_error(char const*)+0x28>)
    4a96:	4905      	ldr	r1, [pc, #20]	; (4aac <std::__throw_logic_error(char const*)+0x2c>)
    4a98:	4620      	mov	r0, r4
    4a9a:	f000 fe15 	bl	56c8 <__cxa_throw>
    4a9e:	4620      	mov	r0, r4
    4aa0:	f000 f976 	bl	4d90 <__cxa_free_exception>
    4aa4:	f000 f998 	bl	4dd8 <__cxa_end_cleanup>
    4aa8:	000059c9 	.word	0x000059c9
    4aac:	200013e0 	.word	0x200013e0

00004ab0 <std::__throw_length_error(char const*)>:
    4ab0:	b510      	push	{r4, lr}
    4ab2:	b082      	sub	sp, #8
    4ab4:	9001      	str	r0, [sp, #4]
    4ab6:	2008      	movs	r0, #8
    4ab8:	f000 f952 	bl	4d60 <__cxa_allocate_exception>
    4abc:	9901      	ldr	r1, [sp, #4]
    4abe:	4604      	mov	r4, r0
    4ac0:	f001 f84a 	bl	5b58 <std::length_error::length_error(char const*)>
    4ac4:	4a04      	ldr	r2, [pc, #16]	; (4ad8 <std::__throw_length_error(char const*)+0x28>)
    4ac6:	4905      	ldr	r1, [pc, #20]	; (4adc <std::__throw_length_error(char const*)+0x2c>)
    4ac8:	4620      	mov	r0, r4
    4aca:	f000 fdfd 	bl	56c8 <__cxa_throw>
    4ace:	4620      	mov	r0, r4
    4ad0:	f000 f95e 	bl	4d90 <__cxa_free_exception>
    4ad4:	f000 f980 	bl	4dd8 <__cxa_end_cleanup>
    4ad8:	00005a09 	.word	0x00005a09
    4adc:	200013ec 	.word	0x200013ec

00004ae0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const>:
    4ae0:	290d      	cmp	r1, #13
    4ae2:	4684      	mov	ip, r0
    4ae4:	d815      	bhi.n	4b12 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x32>
    4ae6:	b909      	cbnz	r1, 4aec <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0xc>
    4ae8:	2001      	movs	r0, #1
    4aea:	4770      	bx	lr
    4aec:	4b20      	ldr	r3, [pc, #128]	; (4b70 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x90>)
    4aee:	ed90 6a00 	vldr	s12, [r0]
    4af2:	5c58      	ldrb	r0, [r3, r1]
    4af4:	ee07 0a90 	vmov	s15, r0
    4af8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4afc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    4b00:	ee27 7b06 	vmul.f64	d7, d7, d6
    4b04:	febb 7b47 	vrintm.f64	d7, d7
    4b08:	eebc 7bc7 	vcvt.u32.f64	s14, d7
    4b0c:	ed8c 7a01 	vstr	s14, [ip, #4]
    4b10:	4770      	bx	lr
    4b12:	b430      	push	{r4, r5}
    4b14:	4c17      	ldr	r4, [pc, #92]	; (4b74 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x94>)
    4b16:	23f9      	movs	r3, #249	; 0xf9
    4b18:	105a      	asrs	r2, r3, #1
    4b1a:	1a9b      	subs	r3, r3, r2
    4b1c:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    4b20:	428d      	cmp	r5, r1
    4b22:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    4b26:	bf36      	itet	cc
    4b28:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
    4b2c:	4613      	movcs	r3, r2
    4b2e:	1d04      	addcc	r4, r0, #4
    4b30:	2b00      	cmp	r3, #0
    4b32:	dcf1      	bgt.n	4b18 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x38>
    4b34:	4b10      	ldr	r3, [pc, #64]	; (4b78 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x98>)
    4b36:	429c      	cmp	r4, r3
    4b38:	d014      	beq.n	4b64 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x84>
    4b3a:	6820      	ldr	r0, [r4, #0]
    4b3c:	ed9c 6a00 	vldr	s12, [ip]
    4b40:	ee07 0a90 	vmov	s15, r0
    4b44:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4b48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
    4b50:	febb 7b47 	vrintm.f64	d7, d7
    4b54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    4b58:	ee17 3a90 	vmov	r3, s15
    4b5c:	bc30      	pop	{r4, r5}
    4b5e:	f8cc 3004 	str.w	r3, [ip, #4]
    4b62:	4770      	bx	lr
    4b64:	f06f 0004 	mvn.w	r0, #4
    4b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b6c:	e7f6      	b.n	4b5c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const+0x7c>
    4b6e:	bf00      	nop
    4b70:	2000167c 	.word	0x2000167c
    4b74:	20000fcc 	.word	0x20000fcc
    4b78:	200013b0 	.word	0x200013b0

00004b7c <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const>:
    4b7c:	b510      	push	{r4, lr}
    4b7e:	468c      	mov	ip, r1
    4b80:	9902      	ldr	r1, [sp, #8]
    4b82:	440b      	add	r3, r1
    4b84:	f8dc 1004 	ldr.w	r1, [ip, #4]
    4b88:	428b      	cmp	r3, r1
    4b8a:	4604      	mov	r4, r0
    4b8c:	d929      	bls.n	4be2 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const+0x66>
    4b8e:	b3d1      	cbz	r1, 4c06 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const+0x8a>
    4b90:	ee05 2a90 	vmov	s11, r2
    4b94:	ed9c 6a00 	vldr	s12, [ip]
    4b98:	ee07 3a90 	vmov	s15, r3
    4b9c:	eeb8 4b65 	vcvt.f64.u32	d4, s11
    4ba0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4ba4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4ba8:	ee87 5b06 	vdiv.f64	d5, d7, d6
    4bac:	eeb4 4bc5 	vcmpe.f64	d4, d5
    4bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bb4:	d81a      	bhi.n	4bec <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const+0x70>
    4bb6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    4bba:	febb 5b45 	vrintm.f64	d5, d5
    4bbe:	ee35 5b07 	vadd.f64	d5, d5, d7
    4bc2:	eefc 7bc5 	vcvt.u32.f64	s15, d5
    4bc6:	0052      	lsls	r2, r2, #1
    4bc8:	ee17 1a90 	vmov	r1, s15
    4bcc:	4291      	cmp	r1, r2
    4bce:	bf38      	it	cc
    4bd0:	4611      	movcc	r1, r2
    4bd2:	4660      	mov	r0, ip
    4bd4:	f7ff ff84 	bl	4ae0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const>
    4bd8:	2301      	movs	r3, #1
    4bda:	6060      	str	r0, [r4, #4]
    4bdc:	7023      	strb	r3, [r4, #0]
    4bde:	4620      	mov	r0, r4
    4be0:	bd10      	pop	{r4, pc}
    4be2:	2300      	movs	r3, #0
    4be4:	e9c0 3300 	strd	r3, r3, [r0]
    4be8:	4620      	mov	r0, r4
    4bea:	bd10      	pop	{r4, pc}
    4bec:	ee26 6b04 	vmul.f64	d6, d6, d4
    4bf0:	febb 6b46 	vrintm.f64	d6, d6
    4bf4:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    4bf8:	2300      	movs	r3, #0
    4bfa:	ed8c 6a01 	vstr	s12, [ip, #4]
    4bfe:	e9c4 3300 	strd	r3, r3, [r4]
    4c02:	4620      	mov	r0, r4
    4c04:	bd10      	pop	{r4, pc}
    4c06:	2b0b      	cmp	r3, #11
    4c08:	bf38      	it	cc
    4c0a:	230b      	movcc	r3, #11
    4c0c:	e7c0      	b.n	4b90 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const+0x14>
    4c0e:	bf00      	nop

00004c10 <std::bad_alloc::what() const>:
    4c10:	4800      	ldr	r0, [pc, #0]	; (4c14 <std::bad_alloc::what() const+0x4>)
    4c12:	4770      	bx	lr
    4c14:	20000f24 	.word	0x20000f24

00004c18 <std::bad_alloc::~bad_alloc()>:
    4c18:	b510      	push	{r4, lr}
    4c1a:	4b03      	ldr	r3, [pc, #12]	; (4c28 <std::bad_alloc::~bad_alloc()+0x10>)
    4c1c:	6003      	str	r3, [r0, #0]
    4c1e:	4604      	mov	r4, r0
    4c20:	f000 f9a2 	bl	4f68 <std::exception::~exception()>
    4c24:	4620      	mov	r0, r4
    4c26:	bd10      	pop	{r4, pc}
    4c28:	20001660 	.word	0x20001660

00004c2c <std::bad_alloc::~bad_alloc()>:
    4c2c:	b510      	push	{r4, lr}
    4c2e:	4b05      	ldr	r3, [pc, #20]	; (4c44 <std::bad_alloc::~bad_alloc()+0x18>)
    4c30:	6003      	str	r3, [r0, #0]
    4c32:	4604      	mov	r4, r0
    4c34:	f000 f998 	bl	4f68 <std::exception::~exception()>
    4c38:	4620      	mov	r0, r4
    4c3a:	2104      	movs	r1, #4
    4c3c:	f7fe fa2a 	bl	3094 <operator delete(void*, unsigned int)>
    4c40:	4620      	mov	r0, r4
    4c42:	bd10      	pop	{r4, pc}
    4c44:	20001660 	.word	0x20001660

00004c48 <std::bad_array_new_length::what() const>:
    4c48:	4800      	ldr	r0, [pc, #0]	; (4c4c <std::bad_array_new_length::what() const+0x4>)
    4c4a:	4770      	bx	lr
    4c4c:	20000f08 	.word	0x20000f08

00004c50 <std::bad_array_new_length::~bad_array_new_length()>:
    4c50:	b510      	push	{r4, lr}
    4c52:	4b03      	ldr	r3, [pc, #12]	; (4c60 <std::bad_array_new_length::~bad_array_new_length()+0x10>)
    4c54:	6003      	str	r3, [r0, #0]
    4c56:	4604      	mov	r4, r0
    4c58:	f7ff ffde 	bl	4c18 <std::bad_alloc::~bad_alloc()>
    4c5c:	4620      	mov	r0, r4
    4c5e:	bd10      	pop	{r4, pc}
    4c60:	2000164c 	.word	0x2000164c

00004c64 <std::bad_array_new_length::~bad_array_new_length()>:
    4c64:	b510      	push	{r4, lr}
    4c66:	4b05      	ldr	r3, [pc, #20]	; (4c7c <std::bad_array_new_length::~bad_array_new_length()+0x18>)
    4c68:	6003      	str	r3, [r0, #0]
    4c6a:	4604      	mov	r4, r0
    4c6c:	f7ff ffd4 	bl	4c18 <std::bad_alloc::~bad_alloc()>
    4c70:	4620      	mov	r0, r4
    4c72:	2104      	movs	r1, #4
    4c74:	f7fe fa0e 	bl	3094 <operator delete(void*, unsigned int)>
    4c78:	4620      	mov	r0, r4
    4c7a:	bd10      	pop	{r4, pc}
    4c7c:	2000164c 	.word	0x2000164c

00004c80 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>:
    4c80:	4920      	ldr	r1, [pc, #128]	; (4d04 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x84>)
    4c82:	684b      	ldr	r3, [r1, #4]
    4c84:	b530      	push	{r4, r5, lr}
    4c86:	f850 5c08 	ldr.w	r5, [r0, #-8]
    4c8a:	f1a0 0408 	sub.w	r4, r0, #8
    4c8e:	b35b      	cbz	r3, 4ce8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
    4c90:	eb04 0e05 	add.w	lr, r4, r5
    4c94:	4573      	cmp	r3, lr
    4c96:	d827      	bhi.n	4ce8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
    4c98:	d021      	beq.n	4cde <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x5e>
    4c9a:	685a      	ldr	r2, [r3, #4]
    4c9c:	f101 0c04 	add.w	ip, r1, #4
    4ca0:	b932      	cbnz	r2, 4cb0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x30>
    4ca2:	e00f      	b.n	4cc4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x44>
    4ca4:	6851      	ldr	r1, [r2, #4]
    4ca6:	f103 0c04 	add.w	ip, r3, #4
    4caa:	b321      	cbz	r1, 4cf6 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x76>
    4cac:	4613      	mov	r3, r2
    4cae:	460a      	mov	r2, r1
    4cb0:	4596      	cmp	lr, r2
    4cb2:	d3f7      	bcc.n	4ca4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x24>
    4cb4:	bf04      	itt	eq
    4cb6:	e9de 2100 	ldrdeq	r2, r1, [lr]
    4cba:	6059      	streq	r1, [r3, #4]
    4cbc:	f8dc 3000 	ldr.w	r3, [ip]
    4cc0:	bf08      	it	eq
    4cc2:	18ad      	addeq	r5, r5, r2
    4cc4:	681a      	ldr	r2, [r3, #0]
    4cc6:	1899      	adds	r1, r3, r2
    4cc8:	428c      	cmp	r4, r1
    4cca:	d011      	beq.n	4cf0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
    4ccc:	685b      	ldr	r3, [r3, #4]
    4cce:	f840 3c04 	str.w	r3, [r0, #-4]
    4cd2:	f8dc 3000 	ldr.w	r3, [ip]
    4cd6:	f840 5c08 	str.w	r5, [r0, #-8]
    4cda:	605c      	str	r4, [r3, #4]
    4cdc:	bd30      	pop	{r4, r5, pc}
    4cde:	681a      	ldr	r2, [r3, #0]
    4ce0:	685b      	ldr	r3, [r3, #4]
    4ce2:	442a      	add	r2, r5
    4ce4:	f840 2c08 	str.w	r2, [r0, #-8]
    4ce8:	f840 3c04 	str.w	r3, [r0, #-4]
    4cec:	604c      	str	r4, [r1, #4]
    4cee:	bd30      	pop	{r4, r5, pc}
    4cf0:	442a      	add	r2, r5
    4cf2:	601a      	str	r2, [r3, #0]
    4cf4:	bd30      	pop	{r4, r5, pc}
    4cf6:	685b      	ldr	r3, [r3, #4]
    4cf8:	681a      	ldr	r2, [r3, #0]
    4cfa:	1899      	adds	r1, r3, r2
    4cfc:	428c      	cmp	r4, r1
    4cfe:	d1e5      	bne.n	4ccc <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x4c>
    4d00:	e7f6      	b.n	4cf0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
    4d02:	bf00      	nop
    4d04:	20003c94 	.word	0x20003c94

00004d08 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>:
    4d08:	4914      	ldr	r1, [pc, #80]	; (4d5c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x54>)
    4d0a:	f100 0308 	add.w	r3, r0, #8
    4d0e:	6848      	ldr	r0, [r1, #4]
    4d10:	2b08      	cmp	r3, #8
    4d12:	bf38      	it	cc
    4d14:	2308      	movcc	r3, #8
    4d16:	b1f8      	cbz	r0, 4d58 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x50>
    4d18:	3307      	adds	r3, #7
    4d1a:	f023 0307 	bic.w	r3, r3, #7
    4d1e:	3104      	adds	r1, #4
    4d20:	e002      	b.n	4d28 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x20>
    4d22:	1d01      	adds	r1, r0, #4
    4d24:	6840      	ldr	r0, [r0, #4]
    4d26:	b180      	cbz	r0, 4d4a <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x42>
    4d28:	6802      	ldr	r2, [r0, #0]
    4d2a:	4293      	cmp	r3, r2
    4d2c:	d8f9      	bhi.n	4d22 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x1a>
    4d2e:	b430      	push	{r4, r5}
    4d30:	1ad4      	subs	r4, r2, r3
    4d32:	2c07      	cmp	r4, #7
    4d34:	d90a      	bls.n	4d4c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x44>
    4d36:	18c5      	adds	r5, r0, r3
    4d38:	6842      	ldr	r2, [r0, #4]
    4d3a:	606a      	str	r2, [r5, #4]
    4d3c:	50c4      	str	r4, [r0, r3]
    4d3e:	6808      	ldr	r0, [r1, #0]
    4d40:	6003      	str	r3, [r0, #0]
    4d42:	600d      	str	r5, [r1, #0]
    4d44:	3008      	adds	r0, #8
    4d46:	bc30      	pop	{r4, r5}
    4d48:	4770      	bx	lr
    4d4a:	4770      	bx	lr
    4d4c:	6845      	ldr	r5, [r0, #4]
    4d4e:	6002      	str	r2, [r0, #0]
    4d50:	600d      	str	r5, [r1, #0]
    4d52:	3008      	adds	r0, #8
    4d54:	bc30      	pop	{r4, r5}
    4d56:	4770      	bx	lr
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop
    4d5c:	20003c94 	.word	0x20003c94

00004d60 <__cxa_allocate_exception>:
    4d60:	b510      	push	{r4, lr}
    4d62:	f100 0480 	add.w	r4, r0, #128	; 0x80
    4d66:	4620      	mov	r0, r4
    4d68:	f008 f830 	bl	cdcc <malloc>
    4d6c:	4603      	mov	r3, r0
    4d6e:	b130      	cbz	r0, 4d7e <__cxa_allocate_exception+0x1e>
    4d70:	2280      	movs	r2, #128	; 0x80
    4d72:	2100      	movs	r1, #0
    4d74:	4618      	mov	r0, r3
    4d76:	f009 f965 	bl	e044 <memset>
    4d7a:	3080      	adds	r0, #128	; 0x80
    4d7c:	bd10      	pop	{r4, pc}
    4d7e:	4620      	mov	r0, r4
    4d80:	f7ff ffc2 	bl	4d08 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>
    4d84:	4603      	mov	r3, r0
    4d86:	2800      	cmp	r0, #0
    4d88:	d1f2      	bne.n	4d70 <__cxa_allocate_exception+0x10>
    4d8a:	f000 fc23 	bl	55d4 <std::terminate()>
    4d8e:	bf00      	nop

00004d90 <__cxa_free_exception>:
    4d90:	4a06      	ldr	r2, [pc, #24]	; (4dac <__cxa_free_exception+0x1c>)
    4d92:	6893      	ldr	r3, [r2, #8]
    4d94:	3880      	subs	r0, #128	; 0x80
    4d96:	4298      	cmp	r0, r3
    4d98:	d905      	bls.n	4da6 <__cxa_free_exception+0x16>
    4d9a:	68d2      	ldr	r2, [r2, #12]
    4d9c:	4413      	add	r3, r2
    4d9e:	4298      	cmp	r0, r3
    4da0:	d201      	bcs.n	4da6 <__cxa_free_exception+0x16>
    4da2:	f7ff bf6d 	b.w	4c80 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>
    4da6:	f008 b819 	b.w	cddc <free>
    4daa:	bf00      	nop
    4dac:	20003c94 	.word	0x20003c94

00004db0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    4db0:	b538      	push	{r3, r4, r5, lr}
    4db2:	4c08      	ldr	r4, [pc, #32]	; (4dd4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
    4db4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
    4db8:	4628      	mov	r0, r5
    4dba:	60e5      	str	r5, [r4, #12]
    4dbc:	f008 f806 	bl	cdcc <malloc>
    4dc0:	60a0      	str	r0, [r4, #8]
    4dc2:	b120      	cbz	r0, 4dce <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
    4dc4:	2300      	movs	r3, #0
    4dc6:	e9c0 5300 	strd	r5, r3, [r0]
    4dca:	6060      	str	r0, [r4, #4]
    4dcc:	bd38      	pop	{r3, r4, r5, pc}
    4dce:	60e0      	str	r0, [r4, #12]
    4dd0:	6060      	str	r0, [r4, #4]
    4dd2:	bd38      	pop	{r3, r4, r5, pc}
    4dd4:	20003c94 	.word	0x20003c94

00004dd8 <__cxa_end_cleanup>:
    4dd8:	b41e      	push	{r1, r2, r3, r4}
    4dda:	f000 f88d 	bl	4ef8 <__gnu_end_cleanup>
    4dde:	bc1e      	pop	{r1, r2, r3, r4}
    4de0:	f007 fe0e 	bl	ca00 <_Unwind_Resume>

00004de4 <__cxa_type_match>:
    4de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4de6:	7802      	ldrb	r2, [r0, #0]
    4de8:	2a47      	cmp	r2, #71	; 0x47
    4dea:	b083      	sub	sp, #12
    4dec:	460c      	mov	r4, r1
    4dee:	461d      	mov	r5, r3
    4df0:	d019      	beq.n	4e26 <__cxa_type_match+0x42>
    4df2:	4e26      	ldr	r6, [pc, #152]	; (4e8c <__cxa_type_match+0xa8>)
    4df4:	2000      	movs	r0, #0
    4df6:	6833      	ldr	r3, [r6, #0]
    4df8:	9001      	str	r0, [sp, #4]
    4dfa:	689b      	ldr	r3, [r3, #8]
    4dfc:	4630      	mov	r0, r6
    4dfe:	4798      	blx	r3
    4e00:	b178      	cbz	r0, 4e22 <__cxa_type_match+0x3e>
    4e02:	9b01      	ldr	r3, [sp, #4]
    4e04:	681b      	ldr	r3, [r3, #0]
    4e06:	9301      	str	r3, [sp, #4]
    4e08:	2702      	movs	r7, #2
    4e0a:	6823      	ldr	r3, [r4, #0]
    4e0c:	4631      	mov	r1, r6
    4e0e:	4620      	mov	r0, r4
    4e10:	691e      	ldr	r6, [r3, #16]
    4e12:	aa01      	add	r2, sp, #4
    4e14:	2301      	movs	r3, #1
    4e16:	47b0      	blx	r6
    4e18:	bb10      	cbnz	r0, 4e60 <__cxa_type_match+0x7c>
    4e1a:	4607      	mov	r7, r0
    4e1c:	4638      	mov	r0, r7
    4e1e:	b003      	add	sp, #12
    4e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e22:	2701      	movs	r7, #1
    4e24:	e7f1      	b.n	4e0a <__cxa_type_match+0x26>
    4e26:	7843      	ldrb	r3, [r0, #1]
    4e28:	2b4e      	cmp	r3, #78	; 0x4e
    4e2a:	d1e2      	bne.n	4df2 <__cxa_type_match+0xe>
    4e2c:	7883      	ldrb	r3, [r0, #2]
    4e2e:	2b55      	cmp	r3, #85	; 0x55
    4e30:	d1df      	bne.n	4df2 <__cxa_type_match+0xe>
    4e32:	78c3      	ldrb	r3, [r0, #3]
    4e34:	2b43      	cmp	r3, #67	; 0x43
    4e36:	d1dc      	bne.n	4df2 <__cxa_type_match+0xe>
    4e38:	7903      	ldrb	r3, [r0, #4]
    4e3a:	2b46      	cmp	r3, #70	; 0x46
    4e3c:	d01a      	beq.n	4e74 <__cxa_type_match+0x90>
    4e3e:	7903      	ldrb	r3, [r0, #4]
    4e40:	2b43      	cmp	r3, #67	; 0x43
    4e42:	d1d6      	bne.n	4df2 <__cxa_type_match+0xe>
    4e44:	7943      	ldrb	r3, [r0, #5]
    4e46:	2b2b      	cmp	r3, #43	; 0x2b
    4e48:	d1d3      	bne.n	4df2 <__cxa_type_match+0xe>
    4e4a:	7983      	ldrb	r3, [r0, #6]
    4e4c:	2b2b      	cmp	r3, #43	; 0x2b
    4e4e:	d1d0      	bne.n	4df2 <__cxa_type_match+0xe>
    4e50:	79c3      	ldrb	r3, [r0, #7]
    4e52:	2b01      	cmp	r3, #1
    4e54:	d8cd      	bhi.n	4df2 <__cxa_type_match+0xe>
    4e56:	d008      	beq.n	4e6a <__cxa_type_match+0x86>
    4e58:	f850 6c20 	ldr.w	r6, [r0, #-32]
    4e5c:	3058      	adds	r0, #88	; 0x58
    4e5e:	e7ca      	b.n	4df6 <__cxa_type_match+0x12>
    4e60:	9b01      	ldr	r3, [sp, #4]
    4e62:	602b      	str	r3, [r5, #0]
    4e64:	4638      	mov	r0, r7
    4e66:	b003      	add	sp, #12
    4e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e6a:	f850 0c20 	ldr.w	r0, [r0, #-32]
    4e6e:	f850 6c78 	ldr.w	r6, [r0, #-120]
    4e72:	e7c0      	b.n	4df6 <__cxa_type_match+0x12>
    4e74:	7943      	ldrb	r3, [r0, #5]
    4e76:	2b4f      	cmp	r3, #79	; 0x4f
    4e78:	d1e1      	bne.n	4e3e <__cxa_type_match+0x5a>
    4e7a:	7983      	ldrb	r3, [r0, #6]
    4e7c:	2b52      	cmp	r3, #82	; 0x52
    4e7e:	d1de      	bne.n	4e3e <__cxa_type_match+0x5a>
    4e80:	79c3      	ldrb	r3, [r0, #7]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d1db      	bne.n	4e3e <__cxa_type_match+0x5a>
    4e86:	4e02      	ldr	r6, [pc, #8]	; (4e90 <__cxa_type_match+0xac>)
    4e88:	4618      	mov	r0, r3
    4e8a:	e7b4      	b.n	4df6 <__cxa_type_match+0x12>
    4e8c:	200013cc 	.word	0x200013cc
    4e90:	200013b8 	.word	0x200013b8

00004e94 <__cxa_begin_cleanup>:
    4e94:	b510      	push	{r4, lr}
    4e96:	4604      	mov	r4, r0
    4e98:	f000 f87a 	bl	4f90 <__cxa_get_globals>
    4e9c:	4622      	mov	r2, r4
    4e9e:	f812 3920 	ldrb.w	r3, [r2], #-32
    4ea2:	2b47      	cmp	r3, #71	; 0x47
    4ea4:	d004      	beq.n	4eb0 <__cxa_begin_cleanup+0x1c>
    4ea6:	6883      	ldr	r3, [r0, #8]
    4ea8:	bb23      	cbnz	r3, 4ef4 <__cxa_begin_cleanup+0x60>
    4eaa:	6082      	str	r2, [r0, #8]
    4eac:	2001      	movs	r0, #1
    4eae:	bd10      	pop	{r4, pc}
    4eb0:	7863      	ldrb	r3, [r4, #1]
    4eb2:	2b4e      	cmp	r3, #78	; 0x4e
    4eb4:	d1f7      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4eb6:	78a3      	ldrb	r3, [r4, #2]
    4eb8:	2b55      	cmp	r3, #85	; 0x55
    4eba:	d1f4      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4ebc:	78e3      	ldrb	r3, [r4, #3]
    4ebe:	2b43      	cmp	r3, #67	; 0x43
    4ec0:	d1f1      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4ec2:	7923      	ldrb	r3, [r4, #4]
    4ec4:	2b43      	cmp	r3, #67	; 0x43
    4ec6:	d1ee      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4ec8:	7963      	ldrb	r3, [r4, #5]
    4eca:	2b2b      	cmp	r3, #43	; 0x2b
    4ecc:	d1eb      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4ece:	79a3      	ldrb	r3, [r4, #6]
    4ed0:	2b2b      	cmp	r3, #43	; 0x2b
    4ed2:	d1e8      	bne.n	4ea6 <__cxa_begin_cleanup+0x12>
    4ed4:	79e3      	ldrb	r3, [r4, #7]
    4ed6:	2b01      	cmp	r3, #1
    4ed8:	d8e5      	bhi.n	4ea6 <__cxa_begin_cleanup+0x12>
    4eda:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4ede:	3301      	adds	r3, #1
    4ee0:	2b01      	cmp	r3, #1
    4ee2:	f844 3c04 	str.w	r3, [r4, #-4]
    4ee6:	d1e1      	bne.n	4eac <__cxa_begin_cleanup+0x18>
    4ee8:	6883      	ldr	r3, [r0, #8]
    4eea:	f844 3c08 	str.w	r3, [r4, #-8]
    4eee:	6082      	str	r2, [r0, #8]
    4ef0:	2001      	movs	r0, #1
    4ef2:	bd10      	pop	{r4, pc}
    4ef4:	f000 fb6e 	bl	55d4 <std::terminate()>

00004ef8 <__gnu_end_cleanup>:
    4ef8:	b508      	push	{r3, lr}
    4efa:	f000 f849 	bl	4f90 <__cxa_get_globals>
    4efe:	6883      	ldr	r3, [r0, #8]
    4f00:	b383      	cbz	r3, 4f64 <__gnu_end_cleanup+0x6c>
    4f02:	f893 2020 	ldrb.w	r2, [r3, #32]
    4f06:	2a47      	cmp	r2, #71	; 0x47
    4f08:	d004      	beq.n	4f14 <__gnu_end_cleanup+0x1c>
    4f0a:	2200      	movs	r2, #0
    4f0c:	6082      	str	r2, [r0, #8]
    4f0e:	f103 0020 	add.w	r0, r3, #32
    4f12:	bd08      	pop	{r3, pc}
    4f14:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    4f18:	2a4e      	cmp	r2, #78	; 0x4e
    4f1a:	d1f6      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f1c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    4f20:	2a55      	cmp	r2, #85	; 0x55
    4f22:	d1f2      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f24:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    4f28:	2a43      	cmp	r2, #67	; 0x43
    4f2a:	d1ee      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f2c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4f30:	2a43      	cmp	r2, #67	; 0x43
    4f32:	d1ea      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f34:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    4f38:	2a2b      	cmp	r2, #43	; 0x2b
    4f3a:	d1e6      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f3c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    4f40:	2a2b      	cmp	r2, #43	; 0x2b
    4f42:	d1e2      	bne.n	4f0a <__gnu_end_cleanup+0x12>
    4f44:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    4f48:	2a01      	cmp	r2, #1
    4f4a:	d8de      	bhi.n	4f0a <__gnu_end_cleanup+0x12>
    4f4c:	69da      	ldr	r2, [r3, #28]
    4f4e:	3a01      	subs	r2, #1
    4f50:	61da      	str	r2, [r3, #28]
    4f52:	2a00      	cmp	r2, #0
    4f54:	d1db      	bne.n	4f0e <__gnu_end_cleanup+0x16>
    4f56:	6999      	ldr	r1, [r3, #24]
    4f58:	6081      	str	r1, [r0, #8]
    4f5a:	2200      	movs	r2, #0
    4f5c:	619a      	str	r2, [r3, #24]
    4f5e:	f103 0020 	add.w	r0, r3, #32
    4f62:	bd08      	pop	{r3, pc}
    4f64:	f000 fb36 	bl	55d4 <std::terminate()>

00004f68 <std::exception::~exception()>:
    4f68:	4770      	bx	lr
    4f6a:	bf00      	nop

00004f6c <std::bad_exception::~bad_exception()>:
    4f6c:	4770      	bx	lr
    4f6e:	bf00      	nop

00004f70 <transaction clone for std::bad_exception::what() const>:
    4f70:	4800      	ldr	r0, [pc, #0]	; (4f74 <transaction clone for std::bad_exception::what() const+0x4>)
    4f72:	4770      	bx	lr
    4f74:	20000ef4 	.word	0x20000ef4

00004f78 <std::bad_exception::~bad_exception()>:
    4f78:	b510      	push	{r4, lr}
    4f7a:	2104      	movs	r1, #4
    4f7c:	4604      	mov	r4, r0
    4f7e:	f7fe f889 	bl	3094 <operator delete(void*, unsigned int)>
    4f82:	4620      	mov	r0, r4
    4f84:	bd10      	pop	{r4, pc}
    4f86:	bf00      	nop

00004f88 <__cxa_get_globals_fast>:
    4f88:	4800      	ldr	r0, [pc, #0]	; (4f8c <__cxa_get_globals_fast+0x4>)
    4f8a:	4770      	bx	lr
    4f8c:	20003c88 	.word	0x20003c88

00004f90 <__cxa_get_globals>:
    4f90:	4800      	ldr	r0, [pc, #0]	; (4f94 <__cxa_get_globals+0x4>)
    4f92:	4770      	bx	lr
    4f94:	20003c88 	.word	0x20003c88

00004f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
    4f98:	2850      	cmp	r0, #80	; 0x50
    4f9a:	b570      	push	{r4, r5, r6, lr}
    4f9c:	d01d      	beq.n	4fda <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x42>
    4f9e:	4684      	mov	ip, r0
    4fa0:	f000 000f 	and.w	r0, r0, #15
    4fa4:	280c      	cmp	r0, #12
    4fa6:	d855      	bhi.n	5054 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xbc>
    4fa8:	e8df f000 	tbb	[pc, r0]
    4fac:	07264407 	.word	0x07264407
    4fb0:	5454541e 	.word	0x5454541e
    4fb4:	07222a54 	.word	0x07222a54
    4fb8:	1e          	.byte	0x1e
    4fb9:	00          	.byte	0x00
    4fba:	4610      	mov	r0, r2
    4fbc:	f850 6b04 	ldr.w	r6, [r0], #4
    4fc0:	b14e      	cbz	r6, 4fd6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x3e>
    4fc2:	f00c 0470 	and.w	r4, ip, #112	; 0x70
    4fc6:	2c10      	cmp	r4, #16
    4fc8:	bf08      	it	eq
    4fca:	4611      	moveq	r1, r2
    4fcc:	440e      	add	r6, r1
    4fce:	f01c 0f80 	tst.w	ip, #128	; 0x80
    4fd2:	bf18      	it	ne
    4fd4:	6836      	ldrne	r6, [r6, #0]
    4fd6:	601e      	str	r6, [r3, #0]
    4fd8:	bd70      	pop	{r4, r5, r6, pc}
    4fda:	1cd0      	adds	r0, r2, #3
    4fdc:	f020 0003 	bic.w	r0, r0, #3
    4fe0:	f850 6b04 	ldr.w	r6, [r0], #4
    4fe4:	601e      	str	r6, [r3, #0]
    4fe6:	bd70      	pop	{r4, r5, r6, pc}
    4fe8:	4610      	mov	r0, r2
    4fea:	f850 6b08 	ldr.w	r6, [r0], #8
    4fee:	e7e7      	b.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    4ff0:	4610      	mov	r0, r2
    4ff2:	f930 6b02 	ldrsh.w	r6, [r0], #2
    4ff6:	e7e3      	b.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    4ff8:	4610      	mov	r0, r2
    4ffa:	f830 6b02 	ldrh.w	r6, [r0], #2
    4ffe:	e7df      	b.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    5000:	2600      	movs	r6, #0
    5002:	4610      	mov	r0, r2
    5004:	4634      	mov	r4, r6
    5006:	f810 5b01 	ldrb.w	r5, [r0], #1
    500a:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
    500e:	fa0e fe04 	lsl.w	lr, lr, r4
    5012:	f015 0f80 	tst.w	r5, #128	; 0x80
    5016:	ea46 060e 	orr.w	r6, r6, lr
    501a:	f104 0407 	add.w	r4, r4, #7
    501e:	d1f2      	bne.n	5006 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
    5020:	2c1f      	cmp	r4, #31
    5022:	d8cd      	bhi.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    5024:	066d      	lsls	r5, r5, #25
    5026:	d5cb      	bpl.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    5028:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    502c:	fa05 f404 	lsl.w	r4, r5, r4
    5030:	4326      	orrs	r6, r4
    5032:	e7c6      	b.n	4fc2 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2a>
    5034:	2600      	movs	r6, #0
    5036:	4610      	mov	r0, r2
    5038:	4634      	mov	r4, r6
    503a:	f810 5b01 	ldrb.w	r5, [r0], #1
    503e:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
    5042:	fa0e fe04 	lsl.w	lr, lr, r4
    5046:	062d      	lsls	r5, r5, #24
    5048:	ea46 060e 	orr.w	r6, r6, lr
    504c:	f104 0407 	add.w	r4, r4, #7
    5050:	d4f3      	bmi.n	503a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xa2>
    5052:	e7b5      	b.n	4fc0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
    5054:	f7fe f944 	bl	32e0 <abort>

00005058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
    5058:	28ff      	cmp	r0, #255	; 0xff
    505a:	b508      	push	{r3, lr}
    505c:	4603      	mov	r3, r0
    505e:	d019      	beq.n	5094 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
    5060:	f003 0270 	and.w	r2, r3, #112	; 0x70
    5064:	2a30      	cmp	r2, #48	; 0x30
    5066:	4608      	mov	r0, r1
    5068:	d016      	beq.n	5098 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
    506a:	d805      	bhi.n	5078 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
    506c:	2a20      	cmp	r2, #32
    506e:	d109      	bne.n	5084 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2c>
    5070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5074:	f007 bea7 	b.w	cdc6 <_Unwind_GetTextRelBase>
    5078:	2a40      	cmp	r2, #64	; 0x40
    507a:	d109      	bne.n	5090 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
    507c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5080:	f007 be8e 	b.w	cda0 <_Unwind_GetRegionStart>
    5084:	d802      	bhi.n	508c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
    5086:	f013 0f60 	tst.w	r3, #96	; 0x60
    508a:	d003      	beq.n	5094 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
    508c:	f7fe f928 	bl	32e0 <abort>
    5090:	2a50      	cmp	r2, #80	; 0x50
    5092:	d1fb      	bne.n	508c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
    5094:	2000      	movs	r0, #0
    5096:	bd08      	pop	{r3, pc}
    5098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    509c:	f007 be90 	b.w	cdc0 <_Unwind_GetDataRelBase>

000050a0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
    50a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a2:	460c      	mov	r4, r1
    50a4:	4615      	mov	r5, r2
    50a6:	4606      	mov	r6, r0
    50a8:	b108      	cbz	r0, 50ae <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0xe>
    50aa:	f007 fe79 	bl	cda0 <_Unwind_GetRegionStart>
    50ae:	6028      	str	r0, [r5, #0]
    50b0:	f814 7b01 	ldrb.w	r7, [r4], #1
    50b4:	2fff      	cmp	r7, #255	; 0xff
    50b6:	d128      	bne.n	510a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x6a>
    50b8:	6068      	str	r0, [r5, #4]
    50ba:	4620      	mov	r0, r4
    50bc:	f810 3b01 	ldrb.w	r3, [r0], #1
    50c0:	2bff      	cmp	r3, #255	; 0xff
    50c2:	d032      	beq.n	512a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8a>
    50c4:	2310      	movs	r3, #16
    50c6:	2400      	movs	r4, #0
    50c8:	752b      	strb	r3, [r5, #20]
    50ca:	4622      	mov	r2, r4
    50cc:	f810 1b01 	ldrb.w	r1, [r0], #1
    50d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    50d4:	4093      	lsls	r3, r2
    50d6:	0609      	lsls	r1, r1, #24
    50d8:	ea44 0403 	orr.w	r4, r4, r3
    50dc:	f102 0207 	add.w	r2, r2, #7
    50e0:	d4f4      	bmi.n	50cc <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x2c>
    50e2:	4404      	add	r4, r0
    50e4:	60ec      	str	r4, [r5, #12]
    50e6:	f810 3b01 	ldrb.w	r3, [r0], #1
    50ea:	756b      	strb	r3, [r5, #21]
    50ec:	2400      	movs	r4, #0
    50ee:	4622      	mov	r2, r4
    50f0:	f810 1b01 	ldrb.w	r1, [r0], #1
    50f4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    50f8:	4093      	lsls	r3, r2
    50fa:	431c      	orrs	r4, r3
    50fc:	060b      	lsls	r3, r1, #24
    50fe:	f102 0207 	add.w	r2, r2, #7
    5102:	d4f5      	bmi.n	50f0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x50>
    5104:	4404      	add	r4, r0
    5106:	612c      	str	r4, [r5, #16]
    5108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    510a:	4631      	mov	r1, r6
    510c:	4638      	mov	r0, r7
    510e:	f7ff ffa3 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    5112:	4622      	mov	r2, r4
    5114:	4601      	mov	r1, r0
    5116:	1d2b      	adds	r3, r5, #4
    5118:	4638      	mov	r0, r7
    511a:	f7ff ff3d 	bl	4f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
    511e:	4604      	mov	r4, r0
    5120:	4620      	mov	r0, r4
    5122:	f810 3b01 	ldrb.w	r3, [r0], #1
    5126:	2bff      	cmp	r3, #255	; 0xff
    5128:	d1cc      	bne.n	50c4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x24>
    512a:	752b      	strb	r3, [r5, #20]
    512c:	2400      	movs	r4, #0
    512e:	e7d9      	b.n	50e4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>

00005130 <__gxx_personality_v0>:
    5130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5134:	f000 0403 	and.w	r4, r0, #3
    5138:	b093      	sub	sp, #76	; 0x4c
    513a:	2300      	movs	r3, #0
    513c:	2c01      	cmp	r4, #1
    513e:	9308      	str	r3, [sp, #32]
    5140:	460f      	mov	r7, r1
    5142:	4690      	mov	r8, r2
    5144:	d013      	beq.n	516e <__gxx_personality_v0+0x3e>
    5146:	2c02      	cmp	r4, #2
    5148:	d108      	bne.n	515c <__gxx_personality_v0+0x2c>
    514a:	4641      	mov	r1, r8
    514c:	4638      	mov	r0, r7
    514e:	f007 fe11 	bl	cd74 <__gnu_unwind_frame>
    5152:	b940      	cbnz	r0, 5166 <__gxx_personality_v0+0x36>
    5154:	2008      	movs	r0, #8
    5156:	b013      	add	sp, #76	; 0x4c
    5158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    515c:	2c00      	cmp	r4, #0
    515e:	f000 8093 	beq.w	5288 <__gxx_personality_v0+0x158>
    5162:	f7fe f8bd 	bl	32e0 <abort>
    5166:	2009      	movs	r0, #9
    5168:	b013      	add	sp, #76	; 0x4c
    516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    516e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    5172:	f010 0408 	ands.w	r4, r0, #8
    5176:	f8cd a000 	str.w	sl, [sp]
    517a:	f000 809a 	beq.w	52b2 <__gxx_personality_v0+0x182>
    517e:	f044 0202 	orr.w	r2, r4, #2
    5182:	9202      	str	r2, [sp, #8]
    5184:	910c      	str	r1, [sp, #48]	; 0x30
    5186:	220c      	movs	r2, #12
    5188:	4619      	mov	r1, r3
    518a:	4640      	mov	r0, r8
    518c:	f007 f88c 	bl	c2a8 <_Unwind_VRS_Set>
    5190:	4640      	mov	r0, r8
    5192:	f007 fe0b 	bl	cdac <_Unwind_GetLanguageSpecificData>
    5196:	4683      	mov	fp, r0
    5198:	2800      	cmp	r0, #0
    519a:	d0d6      	beq.n	514a <__gxx_personality_v0+0x1a>
    519c:	4652      	mov	r2, sl
    519e:	4601      	mov	r1, r0
    51a0:	4640      	mov	r0, r8
    51a2:	f7ff ff7d 	bl	50a0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
    51a6:	4641      	mov	r1, r8
    51a8:	4605      	mov	r5, r0
    51aa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    51ae:	f7ff ff53 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    51b2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    51b6:	2300      	movs	r3, #0
    51b8:	900e      	str	r0, [sp, #56]	; 0x38
    51ba:	4619      	mov	r1, r3
    51bc:	f8cd 9000 	str.w	r9, [sp]
    51c0:	220f      	movs	r2, #15
    51c2:	4640      	mov	r0, r8
    51c4:	f007 f84a 	bl	c25c <_Unwind_VRS_Get>
    51c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    51ca:	f023 0301 	bic.w	r3, r3, #1
    51ce:	1e5e      	subs	r6, r3, #1
    51d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    51d2:	429d      	cmp	r5, r3
    51d4:	f080 80bd 	bcs.w	5352 <__gxx_personality_v0+0x222>
    51d8:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
    51dc:	2100      	movs	r1, #0
    51de:	4620      	mov	r0, r4
    51e0:	f7ff ff3a 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    51e4:	462a      	mov	r2, r5
    51e6:	4601      	mov	r1, r0
    51e8:	ab09      	add	r3, sp, #36	; 0x24
    51ea:	4620      	mov	r0, r4
    51ec:	f7ff fed4 	bl	4f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
    51f0:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
    51f4:	4604      	mov	r4, r0
    51f6:	2100      	movs	r1, #0
    51f8:	4628      	mov	r0, r5
    51fa:	f7ff ff2d 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    51fe:	4622      	mov	r2, r4
    5200:	4601      	mov	r1, r0
    5202:	ab0a      	add	r3, sp, #40	; 0x28
    5204:	4628      	mov	r0, r5
    5206:	f7ff fec7 	bl	4f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
    520a:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
    520e:	4604      	mov	r4, r0
    5210:	2100      	movs	r1, #0
    5212:	4628      	mov	r0, r5
    5214:	f7ff ff20 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    5218:	4622      	mov	r2, r4
    521a:	4601      	mov	r1, r0
    521c:	464b      	mov	r3, r9
    521e:	4628      	mov	r0, r5
    5220:	f7ff feba 	bl	4f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
    5224:	2400      	movs	r4, #0
    5226:	4605      	mov	r5, r0
    5228:	4622      	mov	r2, r4
    522a:	f815 1b01 	ldrb.w	r1, [r5], #1
    522e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    5232:	4093      	lsls	r3, r2
    5234:	431c      	orrs	r4, r3
    5236:	060b      	lsls	r3, r1, #24
    5238:	f102 0207 	add.w	r2, r2, #7
    523c:	d4f5      	bmi.n	522a <__gxx_personality_v0+0xfa>
    523e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5240:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5242:	4413      	add	r3, r2
    5244:	42b3      	cmp	r3, r6
    5246:	d917      	bls.n	5278 <__gxx_personality_v0+0x148>
    5248:	9b02      	ldr	r3, [sp, #8]
    524a:	07d8      	lsls	r0, r3, #31
    524c:	d52d      	bpl.n	52aa <__gxx_personality_v0+0x17a>
    524e:	2400      	movs	r4, #0
    5250:	9403      	str	r4, [sp, #12]
    5252:	2300      	movs	r3, #0
    5254:	4619      	mov	r1, r3
    5256:	f8cd 9000 	str.w	r9, [sp]
    525a:	4640      	mov	r0, r8
    525c:	220d      	movs	r2, #13
    525e:	9d08      	ldr	r5, [sp, #32]
    5260:	f006 fffc 	bl	c25c <_Unwind_VRS_Get>
    5264:	9b03      	ldr	r3, [sp, #12]
    5266:	633b      	str	r3, [r7, #48]	; 0x30
    5268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    526a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
    526e:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
    5272:	2006      	movs	r0, #6
    5274:	623b      	str	r3, [r7, #32]
    5276:	e76e      	b.n	5156 <__gxx_personality_v0+0x26>
    5278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    527a:	4413      	add	r3, r2
    527c:	42b3      	cmp	r3, r6
    527e:	d872      	bhi.n	5366 <__gxx_personality_v0+0x236>
    5280:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5282:	42ab      	cmp	r3, r5
    5284:	d8a8      	bhi.n	51d8 <__gxx_personality_v0+0xa8>
    5286:	e7df      	b.n	5248 <__gxx_personality_v0+0x118>
    5288:	0702      	lsls	r2, r0, #28
    528a:	f53f af5e 	bmi.w	514a <__gxx_personality_v0+0x1a>
    528e:	2301      	movs	r3, #1
    5290:	9302      	str	r3, [sp, #8]
    5292:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    5296:	2300      	movs	r3, #0
    5298:	f8cd a000 	str.w	sl, [sp]
    529c:	220c      	movs	r2, #12
    529e:	4619      	mov	r1, r3
    52a0:	4640      	mov	r0, r8
    52a2:	970c      	str	r7, [sp, #48]	; 0x30
    52a4:	f007 f800 	bl	c2a8 <_Unwind_VRS_Set>
    52a8:	e772      	b.n	5190 <__gxx_personality_v0+0x60>
    52aa:	0719      	lsls	r1, r3, #28
    52ac:	d558      	bpl.n	5360 <__gxx_personality_v0+0x230>
    52ae:	f000 f991 	bl	55d4 <std::terminate()>
    52b2:	6a0d      	ldr	r5, [r1, #32]
    52b4:	4623      	mov	r3, r4
    52b6:	220d      	movs	r2, #13
    52b8:	4621      	mov	r1, r4
    52ba:	4640      	mov	r0, r8
    52bc:	f006 ffce 	bl	c25c <_Unwind_VRS_Get>
    52c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    52c2:	429d      	cmp	r5, r3
    52c4:	d002      	beq.n	52cc <__gxx_personality_v0+0x19c>
    52c6:	2302      	movs	r3, #2
    52c8:	9302      	str	r3, [sp, #8]
    52ca:	e7e4      	b.n	5296 <__gxx_personality_v0+0x166>
    52cc:	4623      	mov	r3, r4
    52ce:	4621      	mov	r1, r4
    52d0:	220c      	movs	r2, #12
    52d2:	f8cd a000 	str.w	sl, [sp]
    52d6:	4640      	mov	r0, r8
    52d8:	970c      	str	r7, [sp, #48]	; 0x30
    52da:	f006 ffe5 	bl	c2a8 <_Unwind_VRS_Set>
    52de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    52e0:	9203      	str	r2, [sp, #12]
    52e2:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
    52e6:	2a00      	cmp	r2, #0
    52e8:	d03a      	beq.n	5360 <__gxx_personality_v0+0x230>
    52ea:	469b      	mov	fp, r3
    52ec:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    52f0:	2c00      	cmp	r4, #0
    52f2:	db54      	blt.n	539e <__gxx_personality_v0+0x26e>
    52f4:	2503      	movs	r5, #3
    52f6:	2300      	movs	r3, #0
    52f8:	461a      	mov	r2, r3
    52fa:	4619      	mov	r1, r3
    52fc:	f8cd 9000 	str.w	r9, [sp]
    5300:	4640      	mov	r0, r8
    5302:	970b      	str	r7, [sp, #44]	; 0x2c
    5304:	f006 ffd0 	bl	c2a8 <_Unwind_VRS_Set>
    5308:	2300      	movs	r3, #0
    530a:	4619      	mov	r1, r3
    530c:	2201      	movs	r2, #1
    530e:	f8cd 9000 	str.w	r9, [sp]
    5312:	4640      	mov	r0, r8
    5314:	940b      	str	r4, [sp, #44]	; 0x2c
    5316:	f006 ffc7 	bl	c2a8 <_Unwind_VRS_Set>
    531a:	2300      	movs	r3, #0
    531c:	4619      	mov	r1, r3
    531e:	220f      	movs	r2, #15
    5320:	f8cd 9000 	str.w	r9, [sp]
    5324:	4640      	mov	r0, r8
    5326:	f006 ff99 	bl	c25c <_Unwind_VRS_Get>
    532a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    532c:	9903      	ldr	r1, [sp, #12]
    532e:	f8cd 9000 	str.w	r9, [sp]
    5332:	f002 0201 	and.w	r2, r2, #1
    5336:	430a      	orrs	r2, r1
    5338:	2300      	movs	r3, #0
    533a:	920b      	str	r2, [sp, #44]	; 0x2c
    533c:	4640      	mov	r0, r8
    533e:	220f      	movs	r2, #15
    5340:	4619      	mov	r1, r3
    5342:	f006 ffb1 	bl	c2a8 <_Unwind_VRS_Set>
    5346:	2d02      	cmp	r5, #2
    5348:	d024      	beq.n	5394 <__gxx_personality_v0+0x264>
    534a:	2007      	movs	r0, #7
    534c:	b013      	add	sp, #76	; 0x4c
    534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5352:	9b02      	ldr	r3, [sp, #8]
    5354:	07de      	lsls	r6, r3, #31
    5356:	f53f af7a 	bmi.w	524e <__gxx_personality_v0+0x11e>
    535a:	9b02      	ldr	r3, [sp, #8]
    535c:	071b      	lsls	r3, r3, #28
    535e:	d4a6      	bmi.n	52ae <__gxx_personality_v0+0x17e>
    5360:	4638      	mov	r0, r7
    5362:	f006 fca7 	bl	bcb4 <__cxa_call_terminate>
    5366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5368:	2b00      	cmp	r3, #0
    536a:	f43f aeee 	beq.w	514a <__gxx_personality_v0+0x1a>
    536e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5370:	4413      	add	r3, r2
    5372:	9303      	str	r3, [sp, #12]
    5374:	2c00      	cmp	r4, #0
    5376:	d136      	bne.n	53e6 <__gxx_personality_v0+0x2b6>
    5378:	2b00      	cmp	r3, #0
    537a:	f43f aee6 	beq.w	514a <__gxx_personality_v0+0x1a>
    537e:	9b02      	ldr	r3, [sp, #8]
    5380:	07dd      	lsls	r5, r3, #31
    5382:	f53f aee2 	bmi.w	514a <__gxx_personality_v0+0x1a>
    5386:	9b02      	ldr	r3, [sp, #8]
    5388:	071a      	lsls	r2, r3, #28
    538a:	f140 8116 	bpl.w	55ba <__gxx_personality_v0+0x48a>
    538e:	2400      	movs	r4, #0
    5390:	2502      	movs	r5, #2
    5392:	e7b0      	b.n	52f6 <__gxx_personality_v0+0x1c6>
    5394:	4638      	mov	r0, r7
    5396:	f7ff fd7d 	bl	4e94 <__cxa_begin_cleanup>
    539a:	2007      	movs	r0, #7
    539c:	e6db      	b.n	5156 <__gxx_personality_v0+0x26>
    539e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    53a2:	1b1b      	subs	r3, r3, r4
    53a4:	461e      	mov	r6, r3
    53a6:	4652      	mov	r2, sl
    53a8:	4659      	mov	r1, fp
    53aa:	4640      	mov	r0, r8
    53ac:	f7ff fe78 	bl	50a0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
    53b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    53b4:	4641      	mov	r1, r8
    53b6:	f7ff fe4f 	bl	5058 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
    53ba:	900e      	str	r0, [sp, #56]	; 0x38
    53bc:	4605      	mov	r5, r0
    53be:	980f      	ldr	r0, [sp, #60]	; 0x3c
    53c0:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    53c4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    53c8:	b133      	cbz	r3, 53d8 <__gxx_personality_v0+0x2a8>
    53ca:	4602      	mov	r2, r0
    53cc:	2300      	movs	r3, #0
    53ce:	f852 1f04 	ldr.w	r1, [r2, #4]!
    53d2:	3301      	adds	r3, #1
    53d4:	2900      	cmp	r1, #0
    53d6:	d1fa      	bne.n	53ce <__gxx_personality_v0+0x29e>
    53d8:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
    53dc:	2304      	movs	r3, #4
    53de:	6378      	str	r0, [r7, #52]	; 0x34
    53e0:	633b      	str	r3, [r7, #48]	; 0x30
    53e2:	2503      	movs	r5, #3
    53e4:	e787      	b.n	52f6 <__gxx_personality_v0+0x1c6>
    53e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    53e8:	9b03      	ldr	r3, [sp, #12]
    53ea:	3c01      	subs	r4, #1
    53ec:	4426      	add	r6, r4
    53ee:	2b00      	cmp	r3, #0
    53f0:	f43f aeab 	beq.w	514a <__gxx_personality_v0+0x1a>
    53f4:	9b02      	ldr	r3, [sp, #8]
    53f6:	2e00      	cmp	r6, #0
    53f8:	f000 80d7 	beq.w	55aa <__gxx_personality_v0+0x47a>
    53fc:	f013 0308 	ands.w	r3, r3, #8
    5400:	9304      	str	r3, [sp, #16]
    5402:	f000 80c9 	beq.w	5598 <__gxx_personality_v0+0x468>
    5406:	2347      	movs	r3, #71	; 0x47
    5408:	703b      	strb	r3, [r7, #0]
    540a:	234e      	movs	r3, #78	; 0x4e
    540c:	707b      	strb	r3, [r7, #1]
    540e:	2355      	movs	r3, #85	; 0x55
    5410:	70bb      	strb	r3, [r7, #2]
    5412:	2343      	movs	r3, #67	; 0x43
    5414:	70fb      	strb	r3, [r7, #3]
    5416:	2346      	movs	r3, #70	; 0x46
    5418:	713b      	strb	r3, [r7, #4]
    541a:	234f      	movs	r3, #79	; 0x4f
    541c:	717b      	strb	r3, [r7, #5]
    541e:	2352      	movs	r3, #82	; 0x52
    5420:	71bb      	strb	r3, [r7, #6]
    5422:	2300      	movs	r3, #0
    5424:	71fb      	strb	r3, [r7, #7]
    5426:	2300      	movs	r3, #0
    5428:	f8cd b018 	str.w	fp, [sp, #24]
    542c:	f8cd 8014 	str.w	r8, [sp, #20]
    5430:	469b      	mov	fp, r3
    5432:	f8cd a01c 	str.w	sl, [sp, #28]
    5436:	2400      	movs	r4, #0
    5438:	4622      	mov	r2, r4
    543a:	f816 1b01 	ldrb.w	r1, [r6], #1
    543e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    5442:	4093      	lsls	r3, r2
    5444:	0608      	lsls	r0, r1, #24
    5446:	ea44 0403 	orr.w	r4, r4, r3
    544a:	f102 0207 	add.w	r2, r2, #7
    544e:	d4f4      	bmi.n	543a <__gxx_personality_v0+0x30a>
    5450:	2a1f      	cmp	r2, #31
    5452:	d805      	bhi.n	5460 <__gxx_personality_v0+0x330>
    5454:	0649      	lsls	r1, r1, #25
    5456:	d503      	bpl.n	5460 <__gxx_personality_v0+0x330>
    5458:	2301      	movs	r3, #1
    545a:	4093      	lsls	r3, r2
    545c:	425b      	negs	r3, r3
    545e:	431c      	orrs	r4, r3
    5460:	2500      	movs	r5, #0
    5462:	4630      	mov	r0, r6
    5464:	462a      	mov	r2, r5
    5466:	f810 1b01 	ldrb.w	r1, [r0], #1
    546a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    546e:	4093      	lsls	r3, r2
    5470:	431d      	orrs	r5, r3
    5472:	060b      	lsls	r3, r1, #24
    5474:	f102 0207 	add.w	r2, r2, #7
    5478:	d4f5      	bmi.n	5466 <__gxx_personality_v0+0x336>
    547a:	2a1f      	cmp	r2, #31
    547c:	d805      	bhi.n	548a <__gxx_personality_v0+0x35a>
    547e:	064b      	lsls	r3, r1, #25
    5480:	d503      	bpl.n	548a <__gxx_personality_v0+0x35a>
    5482:	2301      	movs	r3, #1
    5484:	4093      	lsls	r3, r2
    5486:	425b      	negs	r3, r3
    5488:	431d      	orrs	r5, r3
    548a:	2c00      	cmp	r4, #0
    548c:	d034      	beq.n	54f8 <__gxx_personality_v0+0x3c8>
    548e:	dc36      	bgt.n	54fe <__gxx_personality_v0+0x3ce>
    5490:	b117      	cbz	r7, 5498 <__gxx_personality_v0+0x368>
    5492:	9b04      	ldr	r3, [sp, #16]
    5494:	2b00      	cmp	r3, #0
    5496:	d04f      	beq.n	5538 <__gxx_personality_v0+0x408>
    5498:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
    549c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    549e:	ebaa 0a04 	sub.w	sl, sl, r4
    54a2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    54a6:	b1b3      	cbz	r3, 54d6 <__gxx_personality_v0+0x3a6>
    54a8:	2d00      	cmp	r5, #0
    54aa:	d06a      	beq.n	5582 <__gxx_personality_v0+0x452>
    54ac:	442e      	add	r6, r5
    54ae:	e7c2      	b.n	5436 <__gxx_personality_v0+0x306>
    54b0:	00a3      	lsls	r3, r4, #2
    54b2:	425b      	negs	r3, r3
    54b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    54b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    54b8:	441a      	add	r2, r3
    54ba:	464b      	mov	r3, r9
    54bc:	f7ff fd6c 	bl	4f98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
    54c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    54c2:	b141      	cbz	r1, 54d6 <__gxx_personality_v0+0x3a6>
    54c4:	2f00      	cmp	r7, #0
    54c6:	d0ef      	beq.n	54a8 <__gxx_personality_v0+0x378>
    54c8:	ab08      	add	r3, sp, #32
    54ca:	2200      	movs	r2, #0
    54cc:	4638      	mov	r0, r7
    54ce:	f7ff fc89 	bl	4de4 <__cxa_type_match>
    54d2:	2800      	cmp	r0, #0
    54d4:	d0e8      	beq.n	54a8 <__gxx_personality_v0+0x378>
    54d6:	9b02      	ldr	r3, [sp, #8]
    54d8:	f8dd a01c 	ldr.w	sl, [sp, #28]
    54dc:	07db      	lsls	r3, r3, #31
    54de:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
    54e2:	f53f aeb6 	bmi.w	5252 <__gxx_personality_v0+0x122>
    54e6:	9b04      	ldr	r3, [sp, #16]
    54e8:	2b00      	cmp	r3, #0
    54ea:	f43f af01 	beq.w	52f0 <__gxx_personality_v0+0x1c0>
    54ee:	2c00      	cmp	r4, #0
    54f0:	f6bf af00 	bge.w	52f4 <__gxx_personality_v0+0x1c4>
    54f4:	f000 f87c 	bl	55f0 <std::unexpected()>
    54f8:	f04f 0b01 	mov.w	fp, #1
    54fc:	e7d4      	b.n	54a8 <__gxx_personality_v0+0x378>
    54fe:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5502:	28ff      	cmp	r0, #255	; 0xff
    5504:	d031      	beq.n	556a <__gxx_personality_v0+0x43a>
    5506:	f000 0307 	and.w	r3, r0, #7
    550a:	2b04      	cmp	r3, #4
    550c:	f63f ae29 	bhi.w	5162 <__gxx_personality_v0+0x32>
    5510:	a201      	add	r2, pc, #4	; (adr r2, 5518 <__gxx_personality_v0+0x3e8>)
    5512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5516:	bf00      	nop
    5518:	000054b1 	.word	0x000054b1
    551c:	00005163 	.word	0x00005163
    5520:	00005533 	.word	0x00005533
    5524:	000054b1 	.word	0x000054b1
    5528:	0000552d 	.word	0x0000552d
    552c:	00e3      	lsls	r3, r4, #3
    552e:	425b      	negs	r3, r3
    5530:	e7c0      	b.n	54b4 <__gxx_personality_v0+0x384>
    5532:	0063      	lsls	r3, r4, #1
    5534:	425b      	negs	r3, r3
    5536:	e7bd      	b.n	54b4 <__gxx_personality_v0+0x384>
    5538:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
    553c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    553e:	9a08      	ldr	r2, [sp, #32]
    5540:	920b      	str	r2, [sp, #44]	; 0x2c
    5542:	ebaa 0a04 	sub.w	sl, sl, r4
    5546:	eb03 088a 	add.w	r8, r3, sl, lsl #2
    554a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
    554e:	b919      	cbnz	r1, 5558 <__gxx_personality_v0+0x428>
    5550:	e00d      	b.n	556e <__gxx_personality_v0+0x43e>
    5552:	f858 1f04 	ldr.w	r1, [r8, #4]!
    5556:	b151      	cbz	r1, 556e <__gxx_personality_v0+0x43e>
    5558:	4441      	add	r1, r8
    555a:	464b      	mov	r3, r9
    555c:	2200      	movs	r2, #0
    555e:	4638      	mov	r0, r7
    5560:	f7ff fc40 	bl	4de4 <__cxa_type_match>
    5564:	2800      	cmp	r0, #0
    5566:	d0f4      	beq.n	5552 <__gxx_personality_v0+0x422>
    5568:	e79e      	b.n	54a8 <__gxx_personality_v0+0x378>
    556a:	2300      	movs	r3, #0
    556c:	e7a2      	b.n	54b4 <__gxx_personality_v0+0x384>
    556e:	9b02      	ldr	r3, [sp, #8]
    5570:	07d8      	lsls	r0, r3, #31
    5572:	4656      	mov	r6, sl
    5574:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
    5578:	f8dd a01c 	ldr.w	sl, [sp, #28]
    557c:	f53f ae69 	bmi.w	5252 <__gxx_personality_v0+0x122>
    5580:	e711      	b.n	53a6 <__gxx_personality_v0+0x276>
    5582:	465b      	mov	r3, fp
    5584:	f8dd 8014 	ldr.w	r8, [sp, #20]
    5588:	2b00      	cmp	r3, #0
    558a:	f43f adde 	beq.w	514a <__gxx_personality_v0+0x1a>
    558e:	9b02      	ldr	r3, [sp, #8]
    5590:	07d9      	lsls	r1, r3, #31
    5592:	f53f adda 	bmi.w	514a <__gxx_personality_v0+0x1a>
    5596:	e6fa      	b.n	538e <__gxx_personality_v0+0x25e>
    5598:	79fb      	ldrb	r3, [r7, #7]
    559a:	2b01      	cmp	r3, #1
    559c:	bf0c      	ite	eq
    559e:	f857 3c20 	ldreq.w	r3, [r7, #-32]
    55a2:	f107 0358 	addne.w	r3, r7, #88	; 0x58
    55a6:	9308      	str	r3, [sp, #32]
    55a8:	e73d      	b.n	5426 <__gxx_personality_v0+0x2f6>
    55aa:	07da      	lsls	r2, r3, #31
    55ac:	f53f adcd 	bmi.w	514a <__gxx_personality_v0+0x1a>
    55b0:	9b02      	ldr	r3, [sp, #8]
    55b2:	f013 0408 	ands.w	r4, r3, #8
    55b6:	f47f aeea 	bne.w	538e <__gxx_personality_v0+0x25e>
    55ba:	2502      	movs	r5, #2
    55bc:	e69b      	b.n	52f6 <__gxx_personality_v0+0x1c6>
    55be:	f006 fbfb 	bl	bdb8 <__cxa_begin_catch>
    55c2:	e674      	b.n	52ae <__gxx_personality_v0+0x17e>

000055c4 <__cxxabiv1::__terminate(void (*)())>:
    55c4:	b508      	push	{r3, lr}
    55c6:	4780      	blx	r0
    55c8:	f7fd fe8a 	bl	32e0 <abort>
    55cc:	f006 fbf4 	bl	bdb8 <__cxa_begin_catch>
    55d0:	f7fd fe86 	bl	32e0 <abort>

000055d4 <std::terminate()>:
    55d4:	b508      	push	{r3, lr}
    55d6:	4b03      	ldr	r3, [pc, #12]	; (55e4 <std::terminate()+0x10>)
    55d8:	6818      	ldr	r0, [r3, #0]
    55da:	f3bf 8f5b 	dmb	ish
    55de:	f7ff fff1 	bl	55c4 <__cxxabiv1::__terminate(void (*)())>
    55e2:	bf00      	nop
    55e4:	20003000 	.word	0x20003000

000055e8 <__cxxabiv1::__unexpected(void (*)())>:
    55e8:	b508      	push	{r3, lr}
    55ea:	4780      	blx	r0
    55ec:	f7ff fff2 	bl	55d4 <std::terminate()>

000055f0 <std::unexpected()>:
    55f0:	b508      	push	{r3, lr}
    55f2:	4b03      	ldr	r3, [pc, #12]	; (5600 <std::unexpected()+0x10>)
    55f4:	6818      	ldr	r0, [r3, #0]
    55f6:	f3bf 8f5b 	dmb	ish
    55fa:	f7ff fff5 	bl	55e8 <__cxxabiv1::__unexpected(void (*)())>
    55fe:	bf00      	nop
    5600:	20003004 	.word	0x20003004

00005604 <std::get_terminate()>:
    5604:	4b02      	ldr	r3, [pc, #8]	; (5610 <std::get_terminate()+0xc>)
    5606:	6818      	ldr	r0, [r3, #0]
    5608:	f3bf 8f5b 	dmb	ish
    560c:	4770      	bx	lr
    560e:	bf00      	nop
    5610:	20003000 	.word	0x20003000

00005614 <std::get_unexpected()>:
    5614:	4b02      	ldr	r3, [pc, #8]	; (5620 <std::get_unexpected()+0xc>)
    5616:	6818      	ldr	r0, [r3, #0]
    5618:	f3bf 8f5b 	dmb	ish
    561c:	4770      	bx	lr
    561e:	bf00      	nop
    5620:	20003004 	.word	0x20003004

00005624 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
    5624:	b500      	push	{lr}
    5626:	2801      	cmp	r0, #1
    5628:	b083      	sub	sp, #12
    562a:	d81d      	bhi.n	5668 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x44>
    562c:	f3bf 8f5b 	dmb	ish
    5630:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    5634:	e853 2f00 	ldrex	r2, [r3]
    5638:	3a01      	subs	r2, #1
    563a:	e843 2000 	strex	r0, r2, [r3]
    563e:	2800      	cmp	r0, #0
    5640:	d1f8      	bne.n	5634 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x10>
    5642:	f3bf 8f5b 	dmb	ish
    5646:	b962      	cbnz	r2, 5662 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3e>
    5648:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    564c:	f101 0058 	add.w	r0, r1, #88	; 0x58
    5650:	b113      	cbz	r3, 5658 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x34>
    5652:	9001      	str	r0, [sp, #4]
    5654:	4798      	blx	r3
    5656:	9801      	ldr	r0, [sp, #4]
    5658:	b003      	add	sp, #12
    565a:	f85d eb04 	ldr.w	lr, [sp], #4
    565e:	f7ff bb97 	b.w	4d90 <__cxa_free_exception>
    5662:	b003      	add	sp, #12
    5664:	f85d fb04 	ldr.w	pc, [sp], #4
    5668:	f851 0c14 	ldr.w	r0, [r1, #-20]
    566c:	f7ff ffaa 	bl	55c4 <__cxxabiv1::__terminate(void (*)())>

00005670 <__cxa_init_primary_exception>:
    5670:	b538      	push	{r3, r4, r5, lr}
    5672:	2500      	movs	r5, #0
    5674:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
    5678:	f840 5c80 	str.w	r5, [r0, #-128]
    567c:	4604      	mov	r4, r0
    567e:	f7ff ffc9 	bl	5614 <std::get_unexpected()>
    5682:	f844 0c70 	str.w	r0, [r4, #-112]
    5686:	f7ff ffbd 	bl	5604 <std::get_terminate()>
    568a:	2243      	movs	r2, #67	; 0x43
    568c:	232b      	movs	r3, #43	; 0x2b
    568e:	2147      	movs	r1, #71	; 0x47
    5690:	f804 2c55 	strb.w	r2, [r4, #-85]
    5694:	f804 2c54 	strb.w	r2, [r4, #-84]
    5698:	f804 3c53 	strb.w	r3, [r4, #-83]
    569c:	f804 3c52 	strb.w	r3, [r4, #-82]
    56a0:	224e      	movs	r2, #78	; 0x4e
    56a2:	2355      	movs	r3, #85	; 0x55
    56a4:	f804 1c58 	strb.w	r1, [r4, #-88]
    56a8:	f804 5c51 	strb.w	r5, [r4, #-81]
    56ac:	4905      	ldr	r1, [pc, #20]	; (56c4 <__cxa_init_primary_exception+0x54>)
    56ae:	f804 2c57 	strb.w	r2, [r4, #-87]
    56b2:	f804 3c56 	strb.w	r3, [r4, #-86]
    56b6:	f844 0c6c 	str.w	r0, [r4, #-108]
    56ba:	f844 1c50 	str.w	r1, [r4, #-80]
    56be:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
    56c2:	bd38      	pop	{r3, r4, r5, pc}
    56c4:	00005625 	.word	0x00005625

000056c8 <__cxa_throw>:
    56c8:	b510      	push	{r4, lr}
    56ca:	b082      	sub	sp, #8
    56cc:	e9cd 2100 	strd	r2, r1, [sp]
    56d0:	4604      	mov	r4, r0
    56d2:	f7ff fc5d 	bl	4f90 <__cxa_get_globals>
    56d6:	4603      	mov	r3, r0
    56d8:	6840      	ldr	r0, [r0, #4]
    56da:	9a00      	ldr	r2, [sp, #0]
    56dc:	9901      	ldr	r1, [sp, #4]
    56de:	3001      	adds	r0, #1
    56e0:	6058      	str	r0, [r3, #4]
    56e2:	4620      	mov	r0, r4
    56e4:	f7ff ffc4 	bl	5670 <__cxa_init_primary_exception>
    56e8:	4604      	mov	r4, r0
    56ea:	2301      	movs	r3, #1
    56ec:	f844 3b28 	str.w	r3, [r4], #40
    56f0:	4620      	mov	r0, r4
    56f2:	f007 f973 	bl	c9dc <_Unwind_RaiseException>
    56f6:	4620      	mov	r0, r4
    56f8:	f006 fb5e 	bl	bdb8 <__cxa_begin_catch>
    56fc:	f7ff ff6a 	bl	55d4 <std::terminate()>

00005700 <__cxa_rethrow>:
    5700:	b510      	push	{r4, lr}
    5702:	f7ff fc45 	bl	4f90 <__cxa_get_globals>
    5706:	e9d0 4200 	ldrd	r4, r2, [r0]
    570a:	3201      	adds	r2, #1
    570c:	6042      	str	r2, [r0, #4]
    570e:	b164      	cbz	r4, 572a <__cxa_rethrow+0x2a>
    5710:	f894 2020 	ldrb.w	r2, [r4, #32]
    5714:	2a47      	cmp	r2, #71	; 0x47
    5716:	d00a      	beq.n	572e <__cxa_rethrow+0x2e>
    5718:	2200      	movs	r2, #0
    571a:	6002      	str	r2, [r0, #0]
    571c:	3420      	adds	r4, #32
    571e:	4620      	mov	r0, r4
    5720:	f007 f980 	bl	ca24 <_Unwind_Resume_or_Rethrow>
    5724:	4620      	mov	r0, r4
    5726:	f006 fb47 	bl	bdb8 <__cxa_begin_catch>
    572a:	f7ff ff53 	bl	55d4 <std::terminate()>
    572e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    5732:	2a4e      	cmp	r2, #78	; 0x4e
    5734:	d1f0      	bne.n	5718 <__cxa_rethrow+0x18>
    5736:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    573a:	2a55      	cmp	r2, #85	; 0x55
    573c:	d1ec      	bne.n	5718 <__cxa_rethrow+0x18>
    573e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    5742:	2a43      	cmp	r2, #67	; 0x43
    5744:	d1e8      	bne.n	5718 <__cxa_rethrow+0x18>
    5746:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    574a:	2a43      	cmp	r2, #67	; 0x43
    574c:	d1e4      	bne.n	5718 <__cxa_rethrow+0x18>
    574e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    5752:	2a2b      	cmp	r2, #43	; 0x2b
    5754:	d1e0      	bne.n	5718 <__cxa_rethrow+0x18>
    5756:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    575a:	2a2b      	cmp	r2, #43	; 0x2b
    575c:	d1dc      	bne.n	5718 <__cxa_rethrow+0x18>
    575e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    5762:	2a01      	cmp	r2, #1
    5764:	d8d8      	bhi.n	5718 <__cxa_rethrow+0x18>
    5766:	6962      	ldr	r2, [r4, #20]
    5768:	4252      	negs	r2, r2
    576a:	6162      	str	r2, [r4, #20]
    576c:	e7d6      	b.n	571c <__cxa_rethrow+0x1c>
    576e:	bf00      	nop

00005770 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
    5770:	b510      	push	{r4, lr}
    5772:	4b03      	ldr	r3, [pc, #12]	; (5780 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
    5774:	6003      	str	r3, [r0, #0]
    5776:	4604      	mov	r4, r0
    5778:	f000 fa56 	bl	5c28 <__cxxabiv1::__class_type_info::~__class_type_info()>
    577c:	4620      	mov	r0, r4
    577e:	bd10      	pop	{r4, pc}
    5780:	200015e4 	.word	0x200015e4

00005784 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
    5784:	b510      	push	{r4, lr}
    5786:	4b05      	ldr	r3, [pc, #20]	; (579c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
    5788:	6003      	str	r3, [r0, #0]
    578a:	4604      	mov	r4, r0
    578c:	f000 fa4c 	bl	5c28 <__cxxabiv1::__class_type_info::~__class_type_info()>
    5790:	4620      	mov	r0, r4
    5792:	210c      	movs	r1, #12
    5794:	f7fd fc7e 	bl	3094 <operator delete(void*, unsigned int)>
    5798:	4620      	mov	r0, r4
    579a:	bd10      	pop	{r4, pc}
    579c:	200015e4 	.word	0x200015e4

000057a0 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	b082      	sub	sp, #8
    57a4:	4604      	mov	r4, r0
    57a6:	9e06      	ldr	r6, [sp, #24]
    57a8:	4296      	cmp	r6, r2
    57aa:	460d      	mov	r5, r1
    57ac:	d009      	beq.n	57c2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x22>
    57ae:	68a0      	ldr	r0, [r4, #8]
    57b0:	6804      	ldr	r4, [r0, #0]
    57b2:	9606      	str	r6, [sp, #24]
    57b4:	6a24      	ldr	r4, [r4, #32]
    57b6:	4629      	mov	r1, r5
    57b8:	46a4      	mov	ip, r4
    57ba:	b002      	add	sp, #8
    57bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57c0:	4760      	bx	ip
    57c2:	4619      	mov	r1, r3
    57c4:	9201      	str	r2, [sp, #4]
    57c6:	9300      	str	r3, [sp, #0]
    57c8:	f000 f860 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    57cc:	e9dd 3200 	ldrd	r3, r2, [sp]
    57d0:	2800      	cmp	r0, #0
    57d2:	d0ec      	beq.n	57ae <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
    57d4:	2006      	movs	r0, #6
    57d6:	b002      	add	sp, #8
    57d8:	bd70      	pop	{r4, r5, r6, pc}
    57da:	bf00      	nop

000057dc <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
    57dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57e0:	460c      	mov	r4, r1
    57e2:	b081      	sub	sp, #4
    57e4:	4619      	mov	r1, r3
    57e6:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
    57ea:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
    57ee:	469b      	mov	fp, r3
    57f0:	4605      	mov	r5, r0
    57f2:	4692      	mov	sl, r2
    57f4:	f000 f84a 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    57f8:	b980      	cbnz	r0, 581c <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
    57fa:	4546      	cmp	r6, r8
    57fc:	d022      	beq.n	5844 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x68>
    57fe:	68a8      	ldr	r0, [r5, #8]
    5800:	4621      	mov	r1, r4
    5802:	6804      	ldr	r4, [r0, #0]
    5804:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
    5808:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
    580c:	69e4      	ldr	r4, [r4, #28]
    580e:	465b      	mov	r3, fp
    5810:	4652      	mov	r2, sl
    5812:	46a4      	mov	ip, r4
    5814:	b001      	add	sp, #4
    5816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    581a:	4760      	bx	ip
    581c:	2c00      	cmp	r4, #0
    581e:	603e      	str	r6, [r7, #0]
    5820:	f887 a004 	strb.w	sl, [r7, #4]
    5824:	db09      	blt.n	583a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
    5826:	4426      	add	r6, r4
    5828:	45b0      	cmp	r8, r6
    582a:	bf0c      	ite	eq
    582c:	2606      	moveq	r6, #6
    582e:	2601      	movne	r6, #1
    5830:	71be      	strb	r6, [r7, #6]
    5832:	2000      	movs	r0, #0
    5834:	b001      	add	sp, #4
    5836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    583a:	3402      	adds	r4, #2
    583c:	d1f9      	bne.n	5832 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
    583e:	2301      	movs	r3, #1
    5840:	71bb      	strb	r3, [r7, #6]
    5842:	e7f6      	b.n	5832 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
    5844:	4649      	mov	r1, r9
    5846:	4628      	mov	r0, r5
    5848:	f000 f820 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    584c:	2800      	cmp	r0, #0
    584e:	d0d6      	beq.n	57fe <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x22>
    5850:	f887 a005 	strb.w	sl, [r7, #5]
    5854:	e7ed      	b.n	5832 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
    5856:	bf00      	nop

00005858 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
    5858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    585c:	4606      	mov	r6, r0
    585e:	460f      	mov	r7, r1
    5860:	4614      	mov	r4, r2
    5862:	461d      	mov	r5, r3
    5864:	f000 fa1a 	bl	5c9c <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
    5868:	b948      	cbnz	r0, 587e <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
    586a:	68b0      	ldr	r0, [r6, #8]
    586c:	6801      	ldr	r1, [r0, #0]
    586e:	4622      	mov	r2, r4
    5870:	698c      	ldr	r4, [r1, #24]
    5872:	462b      	mov	r3, r5
    5874:	4639      	mov	r1, r7
    5876:	46a4      	mov	ip, r4
    5878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    587c:	4760      	bx	ip
    587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5882:	bf00      	nop

00005884 <std::type_info::~type_info()>:
    5884:	4770      	bx	lr
    5886:	bf00      	nop

00005888 <std::type_info::__is_pointer_p() const>:
    5888:	2000      	movs	r0, #0
    588a:	4770      	bx	lr

0000588c <std::type_info::operator==(std::type_info const&) const>:
    588c:	4281      	cmp	r1, r0
    588e:	d011      	beq.n	58b4 <std::type_info::operator==(std::type_info const&) const+0x28>
    5890:	b508      	push	{r3, lr}
    5892:	6840      	ldr	r0, [r0, #4]
    5894:	7803      	ldrb	r3, [r0, #0]
    5896:	2b2a      	cmp	r3, #42	; 0x2a
    5898:	d00a      	beq.n	58b0 <std::type_info::operator==(std::type_info const&) const+0x24>
    589a:	6849      	ldr	r1, [r1, #4]
    589c:	780b      	ldrb	r3, [r1, #0]
    589e:	2b2a      	cmp	r3, #42	; 0x2a
    58a0:	bf08      	it	eq
    58a2:	3101      	addeq	r1, #1
    58a4:	f008 fce0 	bl	e268 <strcmp>
    58a8:	fab0 f080 	clz	r0, r0
    58ac:	0940      	lsrs	r0, r0, #5
    58ae:	bd08      	pop	{r3, pc}
    58b0:	2000      	movs	r0, #0
    58b2:	bd08      	pop	{r3, pc}
    58b4:	2001      	movs	r0, #1
    58b6:	4770      	bx	lr

000058b8 <__gnu_cxx::__verbose_terminate_handler()>:
    58b8:	b570      	push	{r4, r5, r6, lr}
    58ba:	4b3b      	ldr	r3, [pc, #236]	; (59a8 <__gnu_cxx::__verbose_terminate_handler()+0xf0>)
    58bc:	781a      	ldrb	r2, [r3, #0]
    58be:	b082      	sub	sp, #8
    58c0:	2a00      	cmp	r2, #0
    58c2:	d141      	bne.n	5948 <__gnu_cxx::__verbose_terminate_handler()+0x90>
    58c4:	2401      	movs	r4, #1
    58c6:	701c      	strb	r4, [r3, #0]
    58c8:	f006 fafa 	bl	bec0 <__cxa_current_exception_type>
    58cc:	2800      	cmp	r0, #0
    58ce:	d031      	beq.n	5934 <__gnu_cxx::__verbose_terminate_handler()+0x7c>
    58d0:	6844      	ldr	r4, [r0, #4]
    58d2:	4d36      	ldr	r5, [pc, #216]	; (59ac <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
    58d4:	7823      	ldrb	r3, [r4, #0]
    58d6:	2b2a      	cmp	r3, #42	; 0x2a
    58d8:	bf08      	it	eq
    58da:	3401      	addeq	r4, #1
    58dc:	2200      	movs	r2, #0
    58de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    58e2:	4611      	mov	r1, r2
    58e4:	ab01      	add	r3, sp, #4
    58e6:	9001      	str	r0, [sp, #4]
    58e8:	4620      	mov	r0, r4
    58ea:	f006 f963 	bl	bbb4 <__cxa_demangle>
    58ee:	682b      	ldr	r3, [r5, #0]
    58f0:	2230      	movs	r2, #48	; 0x30
    58f2:	68db      	ldr	r3, [r3, #12]
    58f4:	4606      	mov	r6, r0
    58f6:	2101      	movs	r1, #1
    58f8:	482d      	ldr	r0, [pc, #180]	; (59b0 <__gnu_cxx::__verbose_terminate_handler()+0xf8>)
    58fa:	f008 fa81 	bl	de00 <fwrite>
    58fe:	9b01      	ldr	r3, [sp, #4]
    5900:	b193      	cbz	r3, 5928 <__gnu_cxx::__verbose_terminate_handler()+0x70>
    5902:	682b      	ldr	r3, [r5, #0]
    5904:	4620      	mov	r0, r4
    5906:	68d9      	ldr	r1, [r3, #12]
    5908:	f008 f87a 	bl	da00 <fputs>
    590c:	682b      	ldr	r3, [r5, #0]
    590e:	4829      	ldr	r0, [pc, #164]	; (59b4 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
    5910:	68db      	ldr	r3, [r3, #12]
    5912:	2202      	movs	r2, #2
    5914:	2101      	movs	r1, #1
    5916:	f008 fa73 	bl	de00 <fwrite>
    591a:	9b01      	ldr	r3, [sp, #4]
    591c:	b913      	cbnz	r3, 5924 <__gnu_cxx::__verbose_terminate_handler()+0x6c>
    591e:	4630      	mov	r0, r6
    5920:	f007 fa5c 	bl	cddc <free>
    5924:	f7ff feec 	bl	5700 <__cxa_rethrow>
    5928:	682b      	ldr	r3, [r5, #0]
    592a:	4630      	mov	r0, r6
    592c:	68d9      	ldr	r1, [r3, #12]
    592e:	f008 f867 	bl	da00 <fputs>
    5932:	e7eb      	b.n	590c <__gnu_cxx::__verbose_terminate_handler()+0x54>
    5934:	4b1d      	ldr	r3, [pc, #116]	; (59ac <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
    5936:	4820      	ldr	r0, [pc, #128]	; (59b8 <__gnu_cxx::__verbose_terminate_handler()+0x100>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	222d      	movs	r2, #45	; 0x2d
    593c:	68db      	ldr	r3, [r3, #12]
    593e:	4621      	mov	r1, r4
    5940:	f008 fa5e 	bl	de00 <fwrite>
    5944:	f7fd fccc 	bl	32e0 <abort>
    5948:	4b18      	ldr	r3, [pc, #96]	; (59ac <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
    594a:	481c      	ldr	r0, [pc, #112]	; (59bc <__gnu_cxx::__verbose_terminate_handler()+0x104>)
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	221d      	movs	r2, #29
    5950:	68db      	ldr	r3, [r3, #12]
    5952:	2101      	movs	r1, #1
    5954:	f008 fa54 	bl	de00 <fwrite>
    5958:	f7fd fcc2 	bl	32e0 <abort>
    595c:	2901      	cmp	r1, #1
    595e:	460c      	mov	r4, r1
    5960:	d119      	bne.n	5996 <__gnu_cxx::__verbose_terminate_handler()+0xde>
    5962:	f006 fa29 	bl	bdb8 <__cxa_begin_catch>
    5966:	6803      	ldr	r3, [r0, #0]
    5968:	689b      	ldr	r3, [r3, #8]
    596a:	4798      	blx	r3
    596c:	682b      	ldr	r3, [r5, #0]
    596e:	4621      	mov	r1, r4
    5970:	68db      	ldr	r3, [r3, #12]
    5972:	4604      	mov	r4, r0
    5974:	220b      	movs	r2, #11
    5976:	4812      	ldr	r0, [pc, #72]	; (59c0 <__gnu_cxx::__verbose_terminate_handler()+0x108>)
    5978:	f008 fa42 	bl	de00 <fwrite>
    597c:	682b      	ldr	r3, [r5, #0]
    597e:	4620      	mov	r0, r4
    5980:	68d9      	ldr	r1, [r3, #12]
    5982:	f008 f83d 	bl	da00 <fputs>
    5986:	682b      	ldr	r3, [r5, #0]
    5988:	200a      	movs	r0, #10
    598a:	68d9      	ldr	r1, [r3, #12]
    598c:	f007 ffc2 	bl	d914 <fputc>
    5990:	f006 fa50 	bl	be34 <__cxa_end_catch>
    5994:	e7d6      	b.n	5944 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
    5996:	f006 fa0f 	bl	bdb8 <__cxa_begin_catch>
    599a:	f006 fa4b 	bl	be34 <__cxa_end_catch>
    599e:	e7d1      	b.n	5944 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
    59a0:	f006 fa48 	bl	be34 <__cxa_end_catch>
    59a4:	f7ff fa18 	bl	4dd8 <__cxa_end_cleanup>
    59a8:	200042ad 	.word	0x200042ad
    59ac:	2000359c 	.word	0x2000359c
    59b0:	20000e80 	.word	0x20000e80
    59b4:	20000eb4 	.word	0x20000eb4
    59b8:	20000eb8 	.word	0x20000eb8
    59bc:	20000e60 	.word	0x20000e60
    59c0:	20000ee8 	.word	0x20000ee8

000059c4 <std::logic_error::what() const>:
    59c4:	6840      	ldr	r0, [r0, #4]
    59c6:	4770      	bx	lr

000059c8 <std::logic_error::~logic_error()>:
    59c8:	b510      	push	{r4, lr}
    59ca:	6843      	ldr	r3, [r0, #4]
    59cc:	4a0c      	ldr	r2, [pc, #48]	; (5a00 <std::logic_error::~logic_error()+0x38>)
    59ce:	490d      	ldr	r1, [pc, #52]	; (5a04 <std::logic_error::~logic_error()+0x3c>)
    59d0:	4604      	mov	r4, r0
    59d2:	f1a3 000c 	sub.w	r0, r3, #12
    59d6:	4290      	cmp	r0, r2
    59d8:	b082      	sub	sp, #8
    59da:	6021      	str	r1, [r4, #0]
    59dc:	d105      	bne.n	59ea <std::logic_error::~logic_error()+0x22>
    59de:	4620      	mov	r0, r4
    59e0:	f7ff fac2 	bl	4f68 <std::exception::~exception()>
    59e4:	4620      	mov	r0, r4
    59e6:	b002      	add	sp, #8
    59e8:	bd10      	pop	{r4, pc}
    59ea:	f853 2c04 	ldr.w	r2, [r3, #-4]
    59ee:	1e51      	subs	r1, r2, #1
    59f0:	2a00      	cmp	r2, #0
    59f2:	f843 1c04 	str.w	r1, [r3, #-4]
    59f6:	dcf2      	bgt.n	59de <std::logic_error::~logic_error()+0x16>
    59f8:	a901      	add	r1, sp, #4
    59fa:	f000 f8f3 	bl	5be4 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
    59fe:	e7ee      	b.n	59de <std::logic_error::~logic_error()+0x16>
    5a00:	20003cd4 	.word	0x20003cd4
    5a04:	20001610 	.word	0x20001610

00005a08 <std::length_error::~length_error()>:
    5a08:	b510      	push	{r4, lr}
    5a0a:	6843      	ldr	r3, [r0, #4]
    5a0c:	4a0c      	ldr	r2, [pc, #48]	; (5a40 <std::length_error::~length_error()+0x38>)
    5a0e:	490d      	ldr	r1, [pc, #52]	; (5a44 <std::length_error::~length_error()+0x3c>)
    5a10:	4604      	mov	r4, r0
    5a12:	f1a3 000c 	sub.w	r0, r3, #12
    5a16:	4290      	cmp	r0, r2
    5a18:	b082      	sub	sp, #8
    5a1a:	6021      	str	r1, [r4, #0]
    5a1c:	d105      	bne.n	5a2a <std::length_error::~length_error()+0x22>
    5a1e:	4620      	mov	r0, r4
    5a20:	f7ff faa2 	bl	4f68 <std::exception::~exception()>
    5a24:	4620      	mov	r0, r4
    5a26:	b002      	add	sp, #8
    5a28:	bd10      	pop	{r4, pc}
    5a2a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    5a2e:	1e51      	subs	r1, r2, #1
    5a30:	2a00      	cmp	r2, #0
    5a32:	f843 1c04 	str.w	r1, [r3, #-4]
    5a36:	dcf2      	bgt.n	5a1e <std::length_error::~length_error()+0x16>
    5a38:	a901      	add	r1, sp, #4
    5a3a:	f000 f8d3 	bl	5be4 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
    5a3e:	e7ee      	b.n	5a1e <std::length_error::~length_error()+0x16>
    5a40:	20003cd4 	.word	0x20003cd4
    5a44:	20001610 	.word	0x20001610

00005a48 <std::logic_error::~logic_error()>:
    5a48:	b510      	push	{r4, lr}
    5a4a:	6843      	ldr	r3, [r0, #4]
    5a4c:	4a0e      	ldr	r2, [pc, #56]	; (5a88 <std::logic_error::~logic_error()+0x40>)
    5a4e:	490f      	ldr	r1, [pc, #60]	; (5a8c <std::logic_error::~logic_error()+0x44>)
    5a50:	4604      	mov	r4, r0
    5a52:	f1a3 000c 	sub.w	r0, r3, #12
    5a56:	4290      	cmp	r0, r2
    5a58:	b082      	sub	sp, #8
    5a5a:	6021      	str	r1, [r4, #0]
    5a5c:	d108      	bne.n	5a70 <std::logic_error::~logic_error()+0x28>
    5a5e:	4620      	mov	r0, r4
    5a60:	f7ff fa82 	bl	4f68 <std::exception::~exception()>
    5a64:	4620      	mov	r0, r4
    5a66:	f7fd fb11 	bl	308c <operator delete(void*)>
    5a6a:	4620      	mov	r0, r4
    5a6c:	b002      	add	sp, #8
    5a6e:	bd10      	pop	{r4, pc}
    5a70:	f853 2c04 	ldr.w	r2, [r3, #-4]
    5a74:	1e51      	subs	r1, r2, #1
    5a76:	2a00      	cmp	r2, #0
    5a78:	f843 1c04 	str.w	r1, [r3, #-4]
    5a7c:	dcef      	bgt.n	5a5e <std::logic_error::~logic_error()+0x16>
    5a7e:	a901      	add	r1, sp, #4
    5a80:	f000 f8b0 	bl	5be4 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
    5a84:	e7eb      	b.n	5a5e <std::logic_error::~logic_error()+0x16>
    5a86:	bf00      	nop
    5a88:	20003cd4 	.word	0x20003cd4
    5a8c:	20001610 	.word	0x20001610

00005a90 <std::length_error::~length_error()>:
    5a90:	b510      	push	{r4, lr}
    5a92:	6843      	ldr	r3, [r0, #4]
    5a94:	4a0e      	ldr	r2, [pc, #56]	; (5ad0 <std::length_error::~length_error()+0x40>)
    5a96:	490f      	ldr	r1, [pc, #60]	; (5ad4 <std::length_error::~length_error()+0x44>)
    5a98:	4604      	mov	r4, r0
    5a9a:	f1a3 000c 	sub.w	r0, r3, #12
    5a9e:	4290      	cmp	r0, r2
    5aa0:	b082      	sub	sp, #8
    5aa2:	6021      	str	r1, [r4, #0]
    5aa4:	d108      	bne.n	5ab8 <std::length_error::~length_error()+0x28>
    5aa6:	4620      	mov	r0, r4
    5aa8:	f7ff fa5e 	bl	4f68 <std::exception::~exception()>
    5aac:	4620      	mov	r0, r4
    5aae:	f7fd faed 	bl	308c <operator delete(void*)>
    5ab2:	4620      	mov	r0, r4
    5ab4:	b002      	add	sp, #8
    5ab6:	bd10      	pop	{r4, pc}
    5ab8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    5abc:	1e51      	subs	r1, r2, #1
    5abe:	2a00      	cmp	r2, #0
    5ac0:	f843 1c04 	str.w	r1, [r3, #-4]
    5ac4:	dcef      	bgt.n	5aa6 <std::length_error::~length_error()+0x16>
    5ac6:	a901      	add	r1, sp, #4
    5ac8:	f000 f88c 	bl	5be4 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
    5acc:	e7eb      	b.n	5aa6 <std::length_error::~length_error()+0x16>
    5ace:	bf00      	nop
    5ad0:	20003cd4 	.word	0x20003cd4
    5ad4:	20001610 	.word	0x20001610

00005ad8 <std::logic_error::logic_error(char const*)>:
    5ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ada:	4b1b      	ldr	r3, [pc, #108]	; (5b48 <std::logic_error::logic_error(char const*)+0x70>)
    5adc:	6003      	str	r3, [r0, #0]
    5ade:	b083      	sub	sp, #12
    5ae0:	4604      	mov	r4, r0
    5ae2:	b349      	cbz	r1, 5b38 <std::logic_error::logic_error(char const*)+0x60>
    5ae4:	4608      	mov	r0, r1
    5ae6:	460d      	mov	r5, r1
    5ae8:	f008 fdaa 	bl	e640 <strlen>
    5aec:	4607      	mov	r7, r0
    5aee:	b1a8      	cbz	r0, 5b1c <std::logic_error::logic_error(char const*)+0x44>
    5af0:	aa01      	add	r2, sp, #4
    5af2:	2100      	movs	r1, #0
    5af4:	f000 f83a 	bl	5b6c <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
    5af8:	2f01      	cmp	r7, #1
    5afa:	4606      	mov	r6, r0
    5afc:	f100 030c 	add.w	r3, r0, #12
    5b00:	d011      	beq.n	5b26 <std::logic_error::logic_error(char const*)+0x4e>
    5b02:	4618      	mov	r0, r3
    5b04:	4629      	mov	r1, r5
    5b06:	463a      	mov	r2, r7
    5b08:	f7fd fa22 	bl	2f50 <memcpy>
    5b0c:	4603      	mov	r3, r0
    5b0e:	4a0f      	ldr	r2, [pc, #60]	; (5b4c <std::logic_error::logic_error(char const*)+0x74>)
    5b10:	4296      	cmp	r6, r2
    5b12:	d10b      	bne.n	5b2c <std::logic_error::logic_error(char const*)+0x54>
    5b14:	4620      	mov	r0, r4
    5b16:	6063      	str	r3, [r4, #4]
    5b18:	b003      	add	sp, #12
    5b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b1c:	4b0c      	ldr	r3, [pc, #48]	; (5b50 <std::logic_error::logic_error(char const*)+0x78>)
    5b1e:	6063      	str	r3, [r4, #4]
    5b20:	4620      	mov	r0, r4
    5b22:	b003      	add	sp, #12
    5b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b26:	782a      	ldrb	r2, [r5, #0]
    5b28:	7302      	strb	r2, [r0, #12]
    5b2a:	e7f0      	b.n	5b0e <std::logic_error::logic_error(char const*)+0x36>
    5b2c:	2200      	movs	r2, #0
    5b2e:	60b2      	str	r2, [r6, #8]
    5b30:	6037      	str	r7, [r6, #0]
    5b32:	443e      	add	r6, r7
    5b34:	7332      	strb	r2, [r6, #12]
    5b36:	e7ed      	b.n	5b14 <std::logic_error::logic_error(char const*)+0x3c>
    5b38:	4806      	ldr	r0, [pc, #24]	; (5b54 <std::logic_error::logic_error(char const*)+0x7c>)
    5b3a:	f7fe ffa1 	bl	4a80 <std::__throw_logic_error(char const*)>
    5b3e:	4620      	mov	r0, r4
    5b40:	f7ff fa12 	bl	4f68 <std::exception::~exception()>
    5b44:	f7ff f948 	bl	4dd8 <__cxa_end_cleanup>
    5b48:	20001610 	.word	0x20001610
    5b4c:	20003cd4 	.word	0x20003cd4
    5b50:	20003ce0 	.word	0x20003ce0
    5b54:	20000f4c 	.word	0x20000f4c

00005b58 <std::length_error::length_error(char const*)>:
    5b58:	b510      	push	{r4, lr}
    5b5a:	4604      	mov	r4, r0
    5b5c:	f7ff ffbc 	bl	5ad8 <std::logic_error::logic_error(char const*)>
    5b60:	4b01      	ldr	r3, [pc, #4]	; (5b68 <std::length_error::length_error(char const*)+0x10>)
    5b62:	6023      	str	r3, [r4, #0]
    5b64:	4620      	mov	r0, r4
    5b66:	bd10      	pop	{r4, pc}
    5b68:	20001624 	.word	0x20001624

00005b6c <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>:
    5b6c:	4b1b      	ldr	r3, [pc, #108]	; (5bdc <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x70>)
    5b6e:	4298      	cmp	r0, r3
    5b70:	b510      	push	{r4, lr}
    5b72:	d830      	bhi.n	5bd6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x6a>
    5b74:	4288      	cmp	r0, r1
    5b76:	4604      	mov	r4, r0
    5b78:	d91c      	bls.n	5bb4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x48>
    5b7a:	004a      	lsls	r2, r1, #1
    5b7c:	4290      	cmp	r0, r2
    5b7e:	bf38      	it	cc
    5b80:	4614      	movcc	r4, r2
    5b82:	f104 021d 	add.w	r2, r4, #29
    5b86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    5b8a:	f104 000d 	add.w	r0, r4, #13
    5b8e:	d918      	bls.n	5bc2 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
    5b90:	428c      	cmp	r4, r1
    5b92:	d916      	bls.n	5bc2 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
    5b94:	f3c2 020b 	ubfx	r2, r2, #0, #12
    5b98:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    5b9c:	1aa4      	subs	r4, r4, r2
    5b9e:	429c      	cmp	r4, r3
    5ba0:	bf28      	it	cs
    5ba2:	461c      	movcs	r4, r3
    5ba4:	f104 000d 	add.w	r0, r4, #13
    5ba8:	f7fd fa6c 	bl	3084 <operator new(unsigned int)>
    5bac:	2200      	movs	r2, #0
    5bae:	e9c0 4201 	strd	r4, r2, [r0, #4]
    5bb2:	bd10      	pop	{r4, pc}
    5bb4:	f100 031d 	add.w	r3, r0, #29
    5bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    5bbc:	f100 000d 	add.w	r0, r0, #13
    5bc0:	d901      	bls.n	5bc6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x5a>
    5bc2:	2800      	cmp	r0, #0
    5bc4:	db05      	blt.n	5bd2 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x66>
    5bc6:	f7fd fa5d 	bl	3084 <operator new(unsigned int)>
    5bca:	2200      	movs	r2, #0
    5bcc:	e9c0 4201 	strd	r4, r2, [r0, #4]
    5bd0:	bd10      	pop	{r4, pc}
    5bd2:	f7fe ff35 	bl	4a40 <std::__throw_bad_alloc()>
    5bd6:	4802      	ldr	r0, [pc, #8]	; (5be0 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x74>)
    5bd8:	f7fe ff6a 	bl	4ab0 <std::__throw_length_error(char const*)>
    5bdc:	3ffffffc 	.word	0x3ffffffc
    5be0:	20000f34 	.word	0x20000f34

00005be4 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
    5be4:	f7fd ba52 	b.w	308c <operator delete(void*)>

00005be8 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
    5be8:	b570      	push	{r4, r5, r6, lr}
    5bea:	6803      	ldr	r3, [r0, #0]
    5bec:	b084      	sub	sp, #16
    5bee:	2400      	movs	r4, #0
    5bf0:	699e      	ldr	r6, [r3, #24]
    5bf2:	9403      	str	r4, [sp, #12]
    5bf4:	2310      	movs	r3, #16
    5bf6:	4615      	mov	r5, r2
    5bf8:	9302      	str	r3, [sp, #8]
    5bfa:	e9cd 4400 	strd	r4, r4, [sp]
    5bfe:	466b      	mov	r3, sp
    5c00:	6812      	ldr	r2, [r2, #0]
    5c02:	47b0      	blx	r6
    5c04:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5c08:	f003 0306 	and.w	r3, r3, #6
    5c0c:	2b06      	cmp	r3, #6
    5c0e:	bf03      	ittte	eq
    5c10:	9b00      	ldreq	r3, [sp, #0]
    5c12:	602b      	streq	r3, [r5, #0]
    5c14:	2001      	moveq	r0, #1
    5c16:	4620      	movne	r0, r4
    5c18:	b004      	add	sp, #16
    5c1a:	bd70      	pop	{r4, r5, r6, pc}

00005c1c <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
    5c1c:	9800      	ldr	r0, [sp, #0]
    5c1e:	4290      	cmp	r0, r2
    5c20:	bf14      	ite	ne
    5c22:	2001      	movne	r0, #1
    5c24:	2006      	moveq	r0, #6
    5c26:	4770      	bx	lr

00005c28 <__cxxabiv1::__class_type_info::~__class_type_info()>:
    5c28:	b510      	push	{r4, lr}
    5c2a:	4b03      	ldr	r3, [pc, #12]	; (5c38 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
    5c2c:	6003      	str	r3, [r0, #0]
    5c2e:	4604      	mov	r4, r0
    5c30:	f7ff fe28 	bl	5884 <std::type_info::~type_info()>
    5c34:	4620      	mov	r0, r4
    5c36:	bd10      	pop	{r4, pc}
    5c38:	200015b8 	.word	0x200015b8

00005c3c <__cxxabiv1::__class_type_info::~__class_type_info()>:
    5c3c:	b510      	push	{r4, lr}
    5c3e:	4b05      	ldr	r3, [pc, #20]	; (5c54 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
    5c40:	6003      	str	r3, [r0, #0]
    5c42:	4604      	mov	r4, r0
    5c44:	f7ff fe1e 	bl	5884 <std::type_info::~type_info()>
    5c48:	4620      	mov	r0, r4
    5c4a:	2108      	movs	r1, #8
    5c4c:	f7fd fa22 	bl	3094 <operator delete(void*, unsigned int)>
    5c50:	4620      	mov	r0, r4
    5c52:	bd10      	pop	{r4, pc}
    5c54:	200015b8 	.word	0x200015b8

00005c58 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
    5c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c5c:	9f06      	ldr	r7, [sp, #24]
    5c5e:	9908      	ldr	r1, [sp, #32]
    5c60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    5c62:	428f      	cmp	r7, r1
    5c64:	4604      	mov	r4, r0
    5c66:	4690      	mov	r8, r2
    5c68:	461d      	mov	r5, r3
    5c6a:	d00c      	beq.n	5c86 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2e>
    5c6c:	4629      	mov	r1, r5
    5c6e:	4620      	mov	r0, r4
    5c70:	f7ff fe0c 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    5c74:	b120      	cbz	r0, 5c80 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x28>
    5c76:	2301      	movs	r3, #1
    5c78:	6037      	str	r7, [r6, #0]
    5c7a:	f886 8004 	strb.w	r8, [r6, #4]
    5c7e:	71b3      	strb	r3, [r6, #6]
    5c80:	2000      	movs	r0, #0
    5c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c86:	9907      	ldr	r1, [sp, #28]
    5c88:	f7ff fe00 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    5c8c:	2800      	cmp	r0, #0
    5c8e:	d0ed      	beq.n	5c6c <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x14>
    5c90:	f886 8005 	strb.w	r8, [r6, #5]
    5c94:	2000      	movs	r0, #0
    5c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c9a:	bf00      	nop

00005c9c <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
    5c9c:	b538      	push	{r3, r4, r5, lr}
    5c9e:	4615      	mov	r5, r2
    5ca0:	461c      	mov	r4, r3
    5ca2:	f7ff fdf3 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    5ca6:	b900      	cbnz	r0, 5caa <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0xe>
    5ca8:	bd38      	pop	{r3, r4, r5, pc}
    5caa:	2208      	movs	r2, #8
    5cac:	2306      	movs	r3, #6
    5cae:	6025      	str	r5, [r4, #0]
    5cb0:	60e2      	str	r2, [r4, #12]
    5cb2:	7123      	strb	r3, [r4, #4]
    5cb4:	bd38      	pop	{r3, r4, r5, pc}
    5cb6:	bf00      	nop

00005cb8 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
    5cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cbc:	4606      	mov	r6, r0
    5cbe:	4617      	mov	r7, r2
    5cc0:	461d      	mov	r5, r3
    5cc2:	460c      	mov	r4, r1
    5cc4:	f7ff fde2 	bl	588c <std::type_info::operator==(std::type_info const&) const>
    5cc8:	b948      	cbnz	r0, 5cde <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
    5cca:	2d03      	cmp	r5, #3
    5ccc:	d807      	bhi.n	5cde <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
    5cce:	6823      	ldr	r3, [r4, #0]
    5cd0:	463a      	mov	r2, r7
    5cd2:	4631      	mov	r1, r6
    5cd4:	4620      	mov	r0, r4
    5cd6:	695b      	ldr	r3, [r3, #20]
    5cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cdc:	4718      	bx	r3
    5cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ce2:	bf00      	nop

00005ce4 <d_make_comp>:
    5ce4:	2931      	cmp	r1, #49	; 0x31
    5ce6:	b570      	push	{r4, r5, r6, lr}
    5ce8:	4686      	mov	lr, r0
    5cea:	d845      	bhi.n	5d78 <d_make_comp+0x94>
    5cec:	2928      	cmp	r1, #40	; 0x28
    5cee:	d82a      	bhi.n	5d46 <d_make_comp+0x62>
    5cf0:	290a      	cmp	r1, #10
    5cf2:	d920      	bls.n	5d36 <d_make_comp+0x52>
    5cf4:	f1a1 0c0b 	sub.w	ip, r1, #11
    5cf8:	4c32      	ldr	r4, [pc, #200]	; (5dc4 <d_make_comp+0xe0>)
    5cfa:	fa5f fc8c 	uxtb.w	ip, ip
    5cfe:	2001      	movs	r0, #1
    5d00:	fa00 f00c 	lsl.w	r0, r0, ip
    5d04:	4004      	ands	r4, r0
    5d06:	2c00      	cmp	r4, #0
    5d08:	d04d      	beq.n	5da6 <d_make_comp+0xc2>
    5d0a:	b1d2      	cbz	r2, 5d42 <d_make_comp+0x5e>
    5d0c:	e9de 4005 	ldrd	r4, r0, [lr, #20]
    5d10:	4284      	cmp	r4, r0
    5d12:	da16      	bge.n	5d42 <d_make_comp+0x5e>
    5d14:	f8de 5010 	ldr.w	r5, [lr, #16]
    5d18:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    5d1c:	eb05 008c 	add.w	r0, r5, ip, lsl #2
    5d20:	3401      	adds	r4, #1
    5d22:	2600      	movs	r6, #0
    5d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
    5d28:	f8ce 4014 	str.w	r4, [lr, #20]
    5d2c:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
    5d30:	e9c0 2303 	strd	r2, r3, [r0, #12]
    5d34:	bd70      	pop	{r4, r5, r6, pc}
    5d36:	2904      	cmp	r1, #4
    5d38:	d930      	bls.n	5d9c <d_make_comp+0xb8>
    5d3a:	f1a1 0009 	sub.w	r0, r1, #9
    5d3e:	2801      	cmp	r0, #1
    5d40:	d9e3      	bls.n	5d0a <d_make_comp+0x26>
    5d42:	2000      	movs	r0, #0
    5d44:	bd70      	pop	{r4, r5, r6, pc}
    5d46:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
    5d4a:	2808      	cmp	r0, #8
    5d4c:	d8f9      	bhi.n	5d42 <d_make_comp+0x5e>
    5d4e:	a401      	add	r4, pc, #4	; (adr r4, 5d54 <d_make_comp+0x70>)
    5d50:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
    5d54:	00005d0d 	.word	0x00005d0d
    5d58:	00005da1 	.word	0x00005da1
    5d5c:	00005d9d 	.word	0x00005d9d
    5d60:	00005d43 	.word	0x00005d43
    5d64:	00005d9d 	.word	0x00005d9d
    5d68:	00005d0d 	.word	0x00005d0d
    5d6c:	00005d0d 	.word	0x00005d0d
    5d70:	00005d0b 	.word	0x00005d0b
    5d74:	00005da1 	.word	0x00005da1
    5d78:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
    5d7c:	b2c0      	uxtb	r0, r0
    5d7e:	281d      	cmp	r0, #29
    5d80:	d8df      	bhi.n	5d42 <d_make_comp+0x5e>
    5d82:	4c11      	ldr	r4, [pc, #68]	; (5dc8 <d_make_comp+0xe4>)
    5d84:	f04f 0c01 	mov.w	ip, #1
    5d88:	fa0c fc00 	lsl.w	ip, ip, r0
    5d8c:	ea0c 0404 	and.w	r4, ip, r4
    5d90:	2c00      	cmp	r4, #0
    5d92:	d1ba      	bne.n	5d0a <d_make_comp+0x26>
    5d94:	480d      	ldr	r0, [pc, #52]	; (5dcc <d_make_comp+0xe8>)
    5d96:	ea0c 0000 	and.w	r0, ip, r0
    5d9a:	b170      	cbz	r0, 5dba <d_make_comp+0xd6>
    5d9c:	2a00      	cmp	r2, #0
    5d9e:	d0d0      	beq.n	5d42 <d_make_comp+0x5e>
    5da0:	2b00      	cmp	r3, #0
    5da2:	d1b3      	bne.n	5d0c <d_make_comp+0x28>
    5da4:	e7cd      	b.n	5d42 <d_make_comp+0x5e>
    5da6:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
    5daa:	d1af      	bne.n	5d0c <d_make_comp+0x28>
    5dac:	4c08      	ldr	r4, [pc, #32]	; (5dd0 <d_make_comp+0xec>)
    5dae:	4004      	ands	r4, r0
    5db0:	2c00      	cmp	r4, #0
    5db2:	d0c6      	beq.n	5d42 <d_make_comp+0x5e>
    5db4:	2a00      	cmp	r2, #0
    5db6:	d1f3      	bne.n	5da0 <d_make_comp+0xbc>
    5db8:	e7c3      	b.n	5d42 <d_make_comp+0x5e>
    5dba:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
    5dbe:	d0c0      	beq.n	5d42 <d_make_comp+0x5e>
    5dc0:	e7a4      	b.n	5d0c <d_make_comp+0x28>
    5dc2:	bf00      	nop
    5dc4:	2f801ffe 	.word	0x2f801ffe
    5dc8:	01c71107 	.word	0x01c71107
    5dcc:	0a002ef8 	.word	0x0a002ef8
    5dd0:	00400001 	.word	0x00400001

00005dd4 <d_number>:
    5dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dd6:	68c2      	ldr	r2, [r0, #12]
    5dd8:	7811      	ldrb	r1, [r2, #0]
    5dda:	296e      	cmp	r1, #110	; 0x6e
    5ddc:	4686      	mov	lr, r0
    5dde:	d025      	beq.n	5e2c <d_number+0x58>
    5de0:	3930      	subs	r1, #48	; 0x30
    5de2:	b2cb      	uxtb	r3, r1
    5de4:	2b09      	cmp	r3, #9
    5de6:	d82b      	bhi.n	5e40 <d_number+0x6c>
    5de8:	2600      	movs	r6, #0
    5dea:	4d16      	ldr	r5, [pc, #88]	; (5e44 <d_number+0x70>)
    5dec:	2000      	movs	r0, #0
    5dee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    5df2:	e002      	b.n	5dfa <d_number+0x26>
    5df4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
    5df8:	dc15      	bgt.n	5e26 <d_number+0x52>
    5dfa:	3201      	adds	r2, #1
    5dfc:	f8ce 200c 	str.w	r2, [lr, #12]
    5e00:	7813      	ldrb	r3, [r2, #0]
    5e02:	3b30      	subs	r3, #48	; 0x30
    5e04:	fa5f fc83 	uxtb.w	ip, r3
    5e08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e0c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5e10:	f1bc 0f09 	cmp.w	ip, #9
    5e14:	4619      	mov	r1, r3
    5e16:	eba4 0303 	sub.w	r3, r4, r3
    5e1a:	fba5 7303 	umull	r7, r3, r5, r3
    5e1e:	d9e9      	bls.n	5df4 <d_number+0x20>
    5e20:	b106      	cbz	r6, 5e24 <d_number+0x50>
    5e22:	4240      	negs	r0, r0
    5e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e2c:	1c53      	adds	r3, r2, #1
    5e2e:	60c3      	str	r3, [r0, #12]
    5e30:	7851      	ldrb	r1, [r2, #1]
    5e32:	3930      	subs	r1, #48	; 0x30
    5e34:	b2ca      	uxtb	r2, r1
    5e36:	2a09      	cmp	r2, #9
    5e38:	d802      	bhi.n	5e40 <d_number+0x6c>
    5e3a:	461a      	mov	r2, r3
    5e3c:	2601      	movs	r6, #1
    5e3e:	e7d4      	b.n	5dea <d_number+0x16>
    5e40:	2000      	movs	r0, #0
    5e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e44:	cccccccd 	.word	0xcccccccd

00005e48 <d_call_offset>:
    5e48:	b510      	push	{r4, lr}
    5e4a:	4604      	mov	r4, r0
    5e4c:	b929      	cbnz	r1, 5e5a <d_call_offset+0x12>
    5e4e:	68c3      	ldr	r3, [r0, #12]
    5e50:	781a      	ldrb	r2, [r3, #0]
    5e52:	b16a      	cbz	r2, 5e70 <d_call_offset+0x28>
    5e54:	1c5a      	adds	r2, r3, #1
    5e56:	60c2      	str	r2, [r0, #12]
    5e58:	7819      	ldrb	r1, [r3, #0]
    5e5a:	2968      	cmp	r1, #104	; 0x68
    5e5c:	d00c      	beq.n	5e78 <d_call_offset+0x30>
    5e5e:	2976      	cmp	r1, #118	; 0x76
    5e60:	d106      	bne.n	5e70 <d_call_offset+0x28>
    5e62:	4620      	mov	r0, r4
    5e64:	f7ff ffb6 	bl	5dd4 <d_number>
    5e68:	68e3      	ldr	r3, [r4, #12]
    5e6a:	781a      	ldrb	r2, [r3, #0]
    5e6c:	2a5f      	cmp	r2, #95	; 0x5f
    5e6e:	d001      	beq.n	5e74 <d_call_offset+0x2c>
    5e70:	2000      	movs	r0, #0
    5e72:	bd10      	pop	{r4, pc}
    5e74:	3301      	adds	r3, #1
    5e76:	60e3      	str	r3, [r4, #12]
    5e78:	4620      	mov	r0, r4
    5e7a:	f7ff ffab 	bl	5dd4 <d_number>
    5e7e:	68e3      	ldr	r3, [r4, #12]
    5e80:	781a      	ldrb	r2, [r3, #0]
    5e82:	2a5f      	cmp	r2, #95	; 0x5f
    5e84:	d1f4      	bne.n	5e70 <d_call_offset+0x28>
    5e86:	3301      	adds	r3, #1
    5e88:	60e3      	str	r3, [r4, #12]
    5e8a:	2001      	movs	r0, #1
    5e8c:	bd10      	pop	{r4, pc}
    5e8e:	bf00      	nop

00005e90 <d_ref_qualifier>:
    5e90:	b410      	push	{r4}
    5e92:	68c3      	ldr	r3, [r0, #12]
    5e94:	460a      	mov	r2, r1
    5e96:	7819      	ldrb	r1, [r3, #0]
    5e98:	2952      	cmp	r1, #82	; 0x52
    5e9a:	d010      	beq.n	5ebe <d_ref_qualifier+0x2e>
    5e9c:	294f      	cmp	r1, #79	; 0x4f
    5e9e:	d003      	beq.n	5ea8 <d_ref_qualifier+0x18>
    5ea0:	4610      	mov	r0, r2
    5ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ea6:	4770      	bx	lr
    5ea8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5eaa:	2120      	movs	r1, #32
    5eac:	3403      	adds	r4, #3
    5eae:	3301      	adds	r3, #1
    5eb0:	62c4      	str	r4, [r0, #44]	; 0x2c
    5eb2:	60c3      	str	r3, [r0, #12]
    5eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    5eb8:	2300      	movs	r3, #0
    5eba:	f7ff bf13 	b.w	5ce4 <d_make_comp>
    5ebe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5ec0:	211f      	movs	r1, #31
    5ec2:	3402      	adds	r4, #2
    5ec4:	e7f3      	b.n	5eae <d_ref_qualifier+0x1e>
    5ec6:	bf00      	nop

00005ec8 <d_count_templates_scopes>:
    5ec8:	2900      	cmp	r1, #0
    5eca:	d066      	beq.n	5f9a <d_count_templates_scopes+0xd2>
    5ecc:	b538      	push	{r3, r4, r5, lr}
    5ece:	4605      	mov	r5, r0
    5ed0:	460c      	mov	r4, r1
    5ed2:	68a3      	ldr	r3, [r4, #8]
    5ed4:	2b01      	cmp	r3, #1
    5ed6:	dc39      	bgt.n	5f4c <d_count_templates_scopes+0x84>
    5ed8:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    5edc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    5ee0:	f103 0301 	add.w	r3, r3, #1
    5ee4:	dc32      	bgt.n	5f4c <d_count_templates_scopes+0x84>
    5ee6:	7822      	ldrb	r2, [r4, #0]
    5ee8:	60a3      	str	r3, [r4, #8]
    5eea:	1e53      	subs	r3, r2, #1
    5eec:	2b50      	cmp	r3, #80	; 0x50
    5eee:	d82d      	bhi.n	5f4c <d_count_templates_scopes+0x84>
    5ef0:	e8df f003 	tbb	[pc, r3]
    5ef4:	4c313131 	.word	0x4c313131
    5ef8:	2d2d2c2c 	.word	0x2d2d2c2c
    5efc:	31313131 	.word	0x31313131
    5f00:	31313131 	.word	0x31313131
    5f04:	31313131 	.word	0x31313131
    5f08:	2c313131 	.word	0x2c313131
    5f0c:	31313131 	.word	0x31313131
    5f10:	31313131 	.word	0x31313131
    5f14:	42423131 	.word	0x42423131
    5f18:	312c3131 	.word	0x312c3131
    5f1c:	29313131 	.word	0x29313131
    5f20:	31313131 	.word	0x31313131
    5f24:	312d2c31 	.word	0x312d2c31
    5f28:	31313131 	.word	0x31313131
    5f2c:	31313131 	.word	0x31313131
    5f30:	31313131 	.word	0x31313131
    5f34:	312c2c31 	.word	0x312c2c31
    5f38:	29292929 	.word	0x29292929
    5f3c:	3131312c 	.word	0x3131312c
    5f40:	31313131 	.word	0x31313131
    5f44:	31          	.byte	0x31
    5f45:	00          	.byte	0x00
    5f46:	68e4      	ldr	r4, [r4, #12]
    5f48:	2c00      	cmp	r4, #0
    5f4a:	d1c2      	bne.n	5ed2 <d_count_templates_scopes+0xa>
    5f4c:	bd38      	pop	{r3, r4, r5, pc}
    5f4e:	6924      	ldr	r4, [r4, #16]
    5f50:	2c00      	cmp	r4, #0
    5f52:	d1be      	bne.n	5ed2 <d_count_templates_scopes+0xa>
    5f54:	e7fa      	b.n	5f4c <d_count_templates_scopes+0x84>
    5f56:	68e1      	ldr	r1, [r4, #12]
    5f58:	1c43      	adds	r3, r0, #1
    5f5a:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    5f5e:	4628      	mov	r0, r5
    5f60:	f7ff ffb2 	bl	5ec8 <d_count_templates_scopes>
    5f64:	6921      	ldr	r1, [r4, #16]
    5f66:	4628      	mov	r0, r5
    5f68:	f7ff ffae 	bl	5ec8 <d_count_templates_scopes>
    5f6c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5f70:	3b01      	subs	r3, #1
    5f72:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    5f76:	bd38      	pop	{r3, r4, r5, pc}
    5f78:	68e1      	ldr	r1, [r4, #12]
    5f7a:	780b      	ldrb	r3, [r1, #0]
    5f7c:	2b05      	cmp	r3, #5
    5f7e:	d1eb      	bne.n	5f58 <d_count_templates_scopes+0x90>
    5f80:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    5f84:	3301      	adds	r3, #1
    5f86:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    5f8a:	e7e5      	b.n	5f58 <d_count_templates_scopes+0x90>
    5f8c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    5f90:	68e1      	ldr	r1, [r4, #12]
    5f92:	3301      	adds	r3, #1
    5f94:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    5f98:	e7de      	b.n	5f58 <d_count_templates_scopes+0x90>
    5f9a:	4770      	bx	lr

00005f9c <d_pack_length>:
    5f9c:	4603      	mov	r3, r0
    5f9e:	b148      	cbz	r0, 5fb4 <d_pack_length+0x18>
    5fa0:	2300      	movs	r3, #0
    5fa2:	e004      	b.n	5fae <d_pack_length+0x12>
    5fa4:	68c2      	ldr	r2, [r0, #12]
    5fa6:	b12a      	cbz	r2, 5fb4 <d_pack_length+0x18>
    5fa8:	6900      	ldr	r0, [r0, #16]
    5faa:	3301      	adds	r3, #1
    5fac:	b110      	cbz	r0, 5fb4 <d_pack_length+0x18>
    5fae:	7802      	ldrb	r2, [r0, #0]
    5fb0:	2a2f      	cmp	r2, #47	; 0x2f
    5fb2:	d0f7      	beq.n	5fa4 <d_pack_length+0x8>
    5fb4:	4618      	mov	r0, r3
    5fb6:	4770      	bx	lr

00005fb8 <d_discriminator>:
    5fb8:	68c3      	ldr	r3, [r0, #12]
    5fba:	781a      	ldrb	r2, [r3, #0]
    5fbc:	2a5f      	cmp	r2, #95	; 0x5f
    5fbe:	d001      	beq.n	5fc4 <d_discriminator+0xc>
    5fc0:	2001      	movs	r0, #1
    5fc2:	4770      	bx	lr
    5fc4:	b510      	push	{r4, lr}
    5fc6:	1c5a      	adds	r2, r3, #1
    5fc8:	60c2      	str	r2, [r0, #12]
    5fca:	785a      	ldrb	r2, [r3, #1]
    5fcc:	2a5f      	cmp	r2, #95	; 0x5f
    5fce:	4604      	mov	r4, r0
    5fd0:	d004      	beq.n	5fdc <d_discriminator+0x24>
    5fd2:	f7ff feff 	bl	5dd4 <d_number>
    5fd6:	43c0      	mvns	r0, r0
    5fd8:	0fc0      	lsrs	r0, r0, #31
    5fda:	bd10      	pop	{r4, pc}
    5fdc:	3302      	adds	r3, #2
    5fde:	60c3      	str	r3, [r0, #12]
    5fe0:	f7ff fef8 	bl	5dd4 <d_number>
    5fe4:	2800      	cmp	r0, #0
    5fe6:	db09      	blt.n	5ffc <d_discriminator+0x44>
    5fe8:	2809      	cmp	r0, #9
    5fea:	dd05      	ble.n	5ff8 <d_discriminator+0x40>
    5fec:	68e3      	ldr	r3, [r4, #12]
    5fee:	781a      	ldrb	r2, [r3, #0]
    5ff0:	2a5f      	cmp	r2, #95	; 0x5f
    5ff2:	d103      	bne.n	5ffc <d_discriminator+0x44>
    5ff4:	3301      	adds	r3, #1
    5ff6:	60e3      	str	r3, [r4, #12]
    5ff8:	2001      	movs	r0, #1
    5ffa:	bd10      	pop	{r4, pc}
    5ffc:	2000      	movs	r0, #0
    5ffe:	bd10      	pop	{r4, pc}

00006000 <d_index_template_argument.part.0>:
    6000:	b920      	cbnz	r0, 600c <d_index_template_argument.part.0+0xc>
    6002:	e009      	b.n	6018 <d_index_template_argument.part.0+0x18>
    6004:	b139      	cbz	r1, 6016 <d_index_template_argument.part.0+0x16>
    6006:	6900      	ldr	r0, [r0, #16]
    6008:	3901      	subs	r1, #1
    600a:	b130      	cbz	r0, 601a <d_index_template_argument.part.0+0x1a>
    600c:	7803      	ldrb	r3, [r0, #0]
    600e:	2b2f      	cmp	r3, #47	; 0x2f
    6010:	d0f8      	beq.n	6004 <d_index_template_argument.part.0+0x4>
    6012:	2000      	movs	r0, #0
    6014:	4770      	bx	lr
    6016:	68c0      	ldr	r0, [r0, #12]
    6018:	4770      	bx	lr
    601a:	4770      	bx	lr

0000601c <d_growable_string_callback_adapter>:
    601c:	b5f0      	push	{r4, r5, r6, r7, lr}
    601e:	4614      	mov	r4, r2
    6020:	6852      	ldr	r2, [r2, #4]
    6022:	68a5      	ldr	r5, [r4, #8]
    6024:	1c4b      	adds	r3, r1, #1
    6026:	4413      	add	r3, r2
    6028:	42ab      	cmp	r3, r5
    602a:	b083      	sub	sp, #12
    602c:	460e      	mov	r6, r1
    602e:	4607      	mov	r7, r0
    6030:	d811      	bhi.n	6056 <d_growable_string_callback_adapter+0x3a>
    6032:	68e5      	ldr	r5, [r4, #12]
    6034:	b96d      	cbnz	r5, 6052 <d_growable_string_callback_adapter+0x36>
    6036:	6863      	ldr	r3, [r4, #4]
    6038:	6820      	ldr	r0, [r4, #0]
    603a:	4632      	mov	r2, r6
    603c:	4418      	add	r0, r3
    603e:	4639      	mov	r1, r7
    6040:	f7fc ff86 	bl	2f50 <memcpy>
    6044:	e9d4 3200 	ldrd	r3, r2, [r4]
    6048:	4433      	add	r3, r6
    604a:	549d      	strb	r5, [r3, r2]
    604c:	6863      	ldr	r3, [r4, #4]
    604e:	4433      	add	r3, r6
    6050:	6063      	str	r3, [r4, #4]
    6052:	b003      	add	sp, #12
    6054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6056:	68e2      	ldr	r2, [r4, #12]
    6058:	2a00      	cmp	r2, #0
    605a:	d1fa      	bne.n	6052 <d_growable_string_callback_adapter+0x36>
    605c:	b155      	cbz	r5, 6074 <d_growable_string_callback_adapter+0x58>
    605e:	006d      	lsls	r5, r5, #1
    6060:	42ab      	cmp	r3, r5
    6062:	d8fc      	bhi.n	605e <d_growable_string_callback_adapter+0x42>
    6064:	6820      	ldr	r0, [r4, #0]
    6066:	4629      	mov	r1, r5
    6068:	f007 f97c 	bl	d364 <realloc>
    606c:	b138      	cbz	r0, 607e <d_growable_string_callback_adapter+0x62>
    606e:	6020      	str	r0, [r4, #0]
    6070:	60a5      	str	r5, [r4, #8]
    6072:	e7de      	b.n	6032 <d_growable_string_callback_adapter+0x16>
    6074:	2b02      	cmp	r3, #2
    6076:	f04f 0502 	mov.w	r5, #2
    607a:	d8f0      	bhi.n	605e <d_growable_string_callback_adapter+0x42>
    607c:	e7f2      	b.n	6064 <d_growable_string_callback_adapter+0x48>
    607e:	9001      	str	r0, [sp, #4]
    6080:	6820      	ldr	r0, [r4, #0]
    6082:	f006 feab 	bl	cddc <free>
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	2201      	movs	r2, #1
    608a:	e9c4 3300 	strd	r3, r3, [r4]
    608e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    6092:	e7de      	b.n	6052 <d_growable_string_callback_adapter+0x36>

00006094 <next_is_type_qual.isra.0>:
    6094:	7803      	ldrb	r3, [r0, #0]
    6096:	2b72      	cmp	r3, #114	; 0x72
    6098:	d007      	beq.n	60aa <next_is_type_qual.isra.0+0x16>
    609a:	2b56      	cmp	r3, #86	; 0x56
    609c:	d005      	beq.n	60aa <next_is_type_qual.isra.0+0x16>
    609e:	2b4b      	cmp	r3, #75	; 0x4b
    60a0:	d003      	beq.n	60aa <next_is_type_qual.isra.0+0x16>
    60a2:	2b44      	cmp	r3, #68	; 0x44
    60a4:	d003      	beq.n	60ae <next_is_type_qual.isra.0+0x1a>
    60a6:	2000      	movs	r0, #0
    60a8:	4770      	bx	lr
    60aa:	2001      	movs	r0, #1
    60ac:	4770      	bx	lr
    60ae:	7840      	ldrb	r0, [r0, #1]
    60b0:	f000 03df 	and.w	r3, r0, #223	; 0xdf
    60b4:	2b4f      	cmp	r3, #79	; 0x4f
    60b6:	d0f8      	beq.n	60aa <next_is_type_qual.isra.0+0x16>
    60b8:	3877      	subs	r0, #119	; 0x77
    60ba:	2801      	cmp	r0, #1
    60bc:	bf8c      	ite	hi
    60be:	2000      	movhi	r0, #0
    60c0:	2001      	movls	r0, #1
    60c2:	4770      	bx	lr

000060c4 <d_append_char>:
    60c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    60c8:	2bff      	cmp	r3, #255	; 0xff
    60ca:	b570      	push	{r4, r5, r6, lr}
    60cc:	4604      	mov	r4, r0
    60ce:	460d      	mov	r5, r1
    60d0:	d006      	beq.n	60e0 <d_append_char+0x1c>
    60d2:	1c5a      	adds	r2, r3, #1
    60d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    60d8:	54e5      	strb	r5, [r4, r3]
    60da:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    60de:	bd70      	pop	{r4, r5, r6, pc}
    60e0:	2600      	movs	r6, #0
    60e2:	4619      	mov	r1, r3
    60e4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    60e8:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    60ec:	4798      	blx	r3
    60ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    60f2:	2201      	movs	r2, #1
    60f4:	4413      	add	r3, r2
    60f6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    60fa:	4633      	mov	r3, r6
    60fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    6100:	54e5      	strb	r5, [r4, r3]
    6102:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    6106:	bd70      	pop	{r4, r5, r6, pc}

00006108 <d_lookup_template_argument>:
    6108:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    610c:	b19b      	cbz	r3, 6136 <d_lookup_template_argument+0x2e>
    610e:	68ca      	ldr	r2, [r1, #12]
    6110:	685b      	ldr	r3, [r3, #4]
    6112:	2a00      	cmp	r2, #0
    6114:	691b      	ldr	r3, [r3, #16]
    6116:	db09      	blt.n	612c <d_lookup_template_argument+0x24>
    6118:	b923      	cbnz	r3, 6124 <d_lookup_template_argument+0x1c>
    611a:	e007      	b.n	612c <d_lookup_template_argument+0x24>
    611c:	b142      	cbz	r2, 6130 <d_lookup_template_argument+0x28>
    611e:	691b      	ldr	r3, [r3, #16]
    6120:	3a01      	subs	r2, #1
    6122:	b11b      	cbz	r3, 612c <d_lookup_template_argument+0x24>
    6124:	7819      	ldrb	r1, [r3, #0]
    6126:	292f      	cmp	r1, #47	; 0x2f
    6128:	d0f8      	beq.n	611c <d_lookup_template_argument+0x14>
    612a:	2300      	movs	r3, #0
    612c:	4618      	mov	r0, r3
    612e:	4770      	bx	lr
    6130:	68db      	ldr	r3, [r3, #12]
    6132:	4618      	mov	r0, r3
    6134:	4770      	bx	lr
    6136:	2201      	movs	r2, #1
    6138:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    613c:	e7f6      	b.n	612c <d_lookup_template_argument+0x24>
    613e:	bf00      	nop

00006140 <d_find_pack>:
    6140:	2900      	cmp	r1, #0
    6142:	d040      	beq.n	61c6 <d_find_pack+0x86>
    6144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6148:	f8df 8084 	ldr.w	r8, [pc, #132]	; 61d0 <d_find_pack+0x90>
    614c:	4f1f      	ldr	r7, [pc, #124]	; (61cc <d_find_pack+0x8c>)
    614e:	4605      	mov	r5, r0
    6150:	460c      	mov	r4, r1
    6152:	2601      	movs	r6, #1
    6154:	7823      	ldrb	r3, [r4, #0]
    6156:	2b08      	cmp	r3, #8
    6158:	d813      	bhi.n	6182 <d_find_pack+0x42>
    615a:	2b08      	cmp	r3, #8
    615c:	d81e      	bhi.n	619c <d_find_pack+0x5c>
    615e:	e8df f003 	tbb	[pc, r3]
    6162:	1d0d      	.short	0x1d0d
    6164:	271d1d1d 	.word	0x271d1d1d
    6168:	230d      	.short	0x230d
    616a:	23          	.byte	0x23
    616b:	00          	.byte	0x00
    616c:	2b17      	cmp	r3, #23
    616e:	d915      	bls.n	619c <d_find_pack+0x5c>
    6170:	3b18      	subs	r3, #24
    6172:	b2db      	uxtb	r3, r3
    6174:	fa27 f303 	lsr.w	r3, r7, r3
    6178:	07db      	lsls	r3, r3, #31
    617a:	d50f      	bpl.n	619c <d_find_pack+0x5c>
    617c:	2000      	movs	r0, #0
    617e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6182:	2b2c      	cmp	r3, #44	; 0x2c
    6184:	d9f2      	bls.n	616c <d_find_pack+0x2c>
    6186:	3b32      	subs	r3, #50	; 0x32
    6188:	b2db      	uxtb	r3, r3
    618a:	2b1b      	cmp	r3, #27
    618c:	d806      	bhi.n	619c <d_find_pack+0x5c>
    618e:	fa06 f203 	lsl.w	r2, r6, r3
    6192:	ea12 0f08 	tst.w	r2, r8
    6196:	d1f1      	bne.n	617c <d_find_pack+0x3c>
    6198:	2b01      	cmp	r3, #1
    619a:	d005      	beq.n	61a8 <d_find_pack+0x68>
    619c:	68e1      	ldr	r1, [r4, #12]
    619e:	4628      	mov	r0, r5
    61a0:	f7ff ffce 	bl	6140 <d_find_pack>
    61a4:	2800      	cmp	r0, #0
    61a6:	d1ea      	bne.n	617e <d_find_pack+0x3e>
    61a8:	6924      	ldr	r4, [r4, #16]
    61aa:	2c00      	cmp	r4, #0
    61ac:	d1d2      	bne.n	6154 <d_find_pack+0x14>
    61ae:	e7e5      	b.n	617c <d_find_pack+0x3c>
    61b0:	4621      	mov	r1, r4
    61b2:	4628      	mov	r0, r5
    61b4:	f7ff ffa8 	bl	6108 <d_lookup_template_argument>
    61b8:	2800      	cmp	r0, #0
    61ba:	d0df      	beq.n	617c <d_find_pack+0x3c>
    61bc:	7803      	ldrb	r3, [r0, #0]
    61be:	2b2f      	cmp	r3, #47	; 0x2f
    61c0:	d1dc      	bne.n	617c <d_find_pack+0x3c>
    61c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61c6:	2000      	movs	r0, #0
    61c8:	4770      	bx	lr
    61ca:	bf00      	nop
    61cc:	00108001 	.word	0x00108001
    61d0:	0ce30001 	.word	0x0ce30001

000061d4 <d_append_string>:
    61d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61d8:	4604      	mov	r4, r0
    61da:	4608      	mov	r0, r1
    61dc:	460d      	mov	r5, r1
    61de:	f008 fa2f 	bl	e640 <strlen>
    61e2:	b340      	cbz	r0, 6236 <d_append_string+0x62>
    61e4:	3d01      	subs	r5, #1
    61e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    61ea:	182f      	adds	r7, r5, r0
    61ec:	f04f 0800 	mov.w	r8, #0
    61f0:	e009      	b.n	6206 <d_append_string+0x32>
    61f2:	460b      	mov	r3, r1
    61f4:	42bd      	cmp	r5, r7
    61f6:	f101 0101 	add.w	r1, r1, #1
    61fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    61fe:	54e6      	strb	r6, [r4, r3]
    6200:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    6204:	d017      	beq.n	6236 <d_append_string+0x62>
    6206:	29ff      	cmp	r1, #255	; 0xff
    6208:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    620c:	d1f1      	bne.n	61f2 <d_append_string+0x1e>
    620e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    6212:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    6216:	4620      	mov	r0, r4
    6218:	4798      	blx	r3
    621a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    621e:	2101      	movs	r1, #1
    6220:	440b      	add	r3, r1
    6222:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    6226:	2300      	movs	r3, #0
    6228:	42bd      	cmp	r5, r7
    622a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    622e:	54e6      	strb	r6, [r4, r3]
    6230:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    6234:	d1e7      	bne.n	6206 <d_append_string+0x32>
    6236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    623a:	bf00      	nop

0000623c <d_template_param>:
    623c:	b538      	push	{r3, r4, r5, lr}
    623e:	68c3      	ldr	r3, [r0, #12]
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	2a54      	cmp	r2, #84	; 0x54
    6244:	d124      	bne.n	6290 <d_template_param+0x54>
    6246:	1c5a      	adds	r2, r3, #1
    6248:	60c2      	str	r2, [r0, #12]
    624a:	785a      	ldrb	r2, [r3, #1]
    624c:	2a5f      	cmp	r2, #95	; 0x5f
    624e:	4604      	mov	r4, r0
    6250:	d020      	beq.n	6294 <d_template_param+0x58>
    6252:	2a6e      	cmp	r2, #110	; 0x6e
    6254:	d01c      	beq.n	6290 <d_template_param+0x54>
    6256:	f7ff fdbd 	bl	5dd4 <d_number>
    625a:	1c41      	adds	r1, r0, #1
    625c:	d418      	bmi.n	6290 <d_template_param+0x54>
    625e:	68e3      	ldr	r3, [r4, #12]
    6260:	781a      	ldrb	r2, [r3, #0]
    6262:	2a5f      	cmp	r2, #95	; 0x5f
    6264:	d114      	bne.n	6290 <d_template_param+0x54>
    6266:	3301      	adds	r3, #1
    6268:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    626c:	4282      	cmp	r2, r0
    626e:	60e3      	str	r3, [r4, #12]
    6270:	da0e      	bge.n	6290 <d_template_param+0x54>
    6272:	6923      	ldr	r3, [r4, #16]
    6274:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    6278:	eb03 008c 	add.w	r0, r3, ip, lsl #2
    627c:	3201      	adds	r2, #1
    627e:	2500      	movs	r5, #0
    6280:	e9c0 5501 	strd	r5, r5, [r0, #4]
    6284:	6162      	str	r2, [r4, #20]
    6286:	2205      	movs	r2, #5
    6288:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
    628c:	60c1      	str	r1, [r0, #12]
    628e:	bd38      	pop	{r3, r4, r5, pc}
    6290:	2000      	movs	r0, #0
    6292:	bd38      	pop	{r3, r4, r5, pc}
    6294:	3302      	adds	r3, #2
    6296:	2100      	movs	r1, #0
    6298:	e7e6      	b.n	6268 <d_template_param+0x2c>
    629a:	bf00      	nop

0000629c <d_append_num>:
    629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62a0:	b088      	sub	sp, #32
    62a2:	460a      	mov	r2, r1
    62a4:	4604      	mov	r4, r0
    62a6:	491a      	ldr	r1, [pc, #104]	; (6310 <d_append_num+0x74>)
    62a8:	a801      	add	r0, sp, #4
    62aa:	f007 fa53 	bl	d754 <sprintf>
    62ae:	a801      	add	r0, sp, #4
    62b0:	f008 f9c6 	bl	e640 <strlen>
    62b4:	b340      	cbz	r0, 6308 <d_append_num+0x6c>
    62b6:	ad01      	add	r5, sp, #4
    62b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    62bc:	182f      	adds	r7, r5, r0
    62be:	f04f 0800 	mov.w	r8, #0
    62c2:	e009      	b.n	62d8 <d_append_num+0x3c>
    62c4:	460b      	mov	r3, r1
    62c6:	42bd      	cmp	r5, r7
    62c8:	f101 0101 	add.w	r1, r1, #1
    62cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    62d0:	54e6      	strb	r6, [r4, r3]
    62d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    62d6:	d017      	beq.n	6308 <d_append_num+0x6c>
    62d8:	29ff      	cmp	r1, #255	; 0xff
    62da:	f815 6b01 	ldrb.w	r6, [r5], #1
    62de:	d1f1      	bne.n	62c4 <d_append_num+0x28>
    62e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    62e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    62e8:	4620      	mov	r0, r4
    62ea:	4798      	blx	r3
    62ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    62f0:	2101      	movs	r1, #1
    62f2:	440b      	add	r3, r1
    62f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    62f8:	2300      	movs	r3, #0
    62fa:	42bd      	cmp	r5, r7
    62fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    6300:	54e6      	strb	r6, [r4, r3]
    6302:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    6306:	d1e7      	bne.n	62d8 <d_append_num+0x3c>
    6308:	b008      	add	sp, #32
    630a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    630e:	bf00      	nop
    6310:	20002054 	.word	0x20002054

00006314 <d_source_name>:
    6314:	b570      	push	{r4, r5, r6, lr}
    6316:	4604      	mov	r4, r0
    6318:	f7ff fd5c 	bl	5dd4 <d_number>
    631c:	1e05      	subs	r5, r0, #0
    631e:	dd46      	ble.n	63ae <d_source_name+0x9a>
    6320:	68e6      	ldr	r6, [r4, #12]
    6322:	6863      	ldr	r3, [r4, #4]
    6324:	1b9b      	subs	r3, r3, r6
    6326:	429d      	cmp	r5, r3
    6328:	dc3e      	bgt.n	63a8 <d_source_name+0x94>
    632a:	68a2      	ldr	r2, [r4, #8]
    632c:	1973      	adds	r3, r6, r5
    632e:	0752      	lsls	r2, r2, #29
    6330:	60e3      	str	r3, [r4, #12]
    6332:	d504      	bpl.n	633e <d_source_name+0x2a>
    6334:	5d72      	ldrb	r2, [r6, r5]
    6336:	2a24      	cmp	r2, #36	; 0x24
    6338:	bf04      	itt	eq
    633a:	3301      	addeq	r3, #1
    633c:	60e3      	streq	r3, [r4, #12]
    633e:	2d09      	cmp	r5, #9
    6340:	dd22      	ble.n	6388 <d_source_name+0x74>
    6342:	492a      	ldr	r1, [pc, #168]	; (63ec <d_source_name+0xd8>)
    6344:	2208      	movs	r2, #8
    6346:	4630      	mov	r0, r6
    6348:	f007 fdd0 	bl	deec <memcmp>
    634c:	b930      	cbnz	r0, 635c <d_source_name+0x48>
    634e:	7a33      	ldrb	r3, [r6, #8]
    6350:	2b2e      	cmp	r3, #46	; 0x2e
    6352:	d02e      	beq.n	63b2 <d_source_name+0x9e>
    6354:	2b5f      	cmp	r3, #95	; 0x5f
    6356:	d02c      	beq.n	63b2 <d_source_name+0x9e>
    6358:	2b24      	cmp	r3, #36	; 0x24
    635a:	d02a      	beq.n	63b2 <d_source_name+0x9e>
    635c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6360:	4293      	cmp	r3, r2
    6362:	da21      	bge.n	63a8 <d_source_name+0x94>
    6364:	6920      	ldr	r0, [r4, #16]
    6366:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    636a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    636e:	3301      	adds	r3, #1
    6370:	2200      	movs	r2, #0
    6372:	e9c0 2201 	strd	r2, r2, [r0, #4]
    6376:	6163      	str	r3, [r4, #20]
    6378:	2300      	movs	r3, #0
    637a:	7003      	strb	r3, [r0, #0]
    637c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    6380:	e9c0 6503 	strd	r6, r5, [r0, #12]
    6384:	62a0      	str	r0, [r4, #40]	; 0x28
    6386:	bd70      	pop	{r4, r5, r6, pc}
    6388:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    638c:	4293      	cmp	r3, r2
    638e:	da0b      	bge.n	63a8 <d_source_name+0x94>
    6390:	6920      	ldr	r0, [r4, #16]
    6392:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6396:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    639a:	3301      	adds	r3, #1
    639c:	2200      	movs	r2, #0
    639e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    63a2:	6163      	str	r3, [r4, #20]
    63a4:	2e00      	cmp	r6, #0
    63a6:	d1e7      	bne.n	6378 <d_source_name+0x64>
    63a8:	2000      	movs	r0, #0
    63aa:	62a0      	str	r0, [r4, #40]	; 0x28
    63ac:	bd70      	pop	{r4, r5, r6, pc}
    63ae:	2000      	movs	r0, #0
    63b0:	bd70      	pop	{r4, r5, r6, pc}
    63b2:	7a73      	ldrb	r3, [r6, #9]
    63b4:	2b4e      	cmp	r3, #78	; 0x4e
    63b6:	d1d1      	bne.n	635c <d_source_name+0x48>
    63b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    63ba:	6963      	ldr	r3, [r4, #20]
    63bc:	69a1      	ldr	r1, [r4, #24]
    63be:	3216      	adds	r2, #22
    63c0:	1b52      	subs	r2, r2, r5
    63c2:	428b      	cmp	r3, r1
    63c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    63c6:	daef      	bge.n	63a8 <d_source_name+0x94>
    63c8:	6922      	ldr	r2, [r4, #16]
    63ca:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    63ce:	0081      	lsls	r1, r0, #2
    63d0:	3301      	adds	r3, #1
    63d2:	6163      	str	r3, [r4, #20]
    63d4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    63d8:	2300      	movs	r3, #0
    63da:	e9c0 3301 	strd	r3, r3, [r0, #4]
    63de:	5453      	strb	r3, [r2, r1]
    63e0:	4a03      	ldr	r2, [pc, #12]	; (63f0 <d_source_name+0xdc>)
    63e2:	2315      	movs	r3, #21
    63e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
    63e8:	e7df      	b.n	63aa <d_source_name+0x96>
    63ea:	bf00      	nop
    63ec:	20002394 	.word	0x20002394
    63f0:	200023a0 	.word	0x200023a0

000063f4 <d_substitution>:
    63f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63f8:	68c3      	ldr	r3, [r0, #12]
    63fa:	781a      	ldrb	r2, [r3, #0]
    63fc:	2a53      	cmp	r2, #83	; 0x53
    63fe:	d131      	bne.n	6464 <d_substitution+0x70>
    6400:	1c5a      	adds	r2, r3, #1
    6402:	60c2      	str	r2, [r0, #12]
    6404:	785a      	ldrb	r2, [r3, #1]
    6406:	4604      	mov	r4, r0
    6408:	b3a2      	cbz	r2, 6474 <d_substitution+0x80>
    640a:	1c9a      	adds	r2, r3, #2
    640c:	60c2      	str	r2, [r0, #12]
    640e:	785a      	ldrb	r2, [r3, #1]
    6410:	2a5f      	cmp	r2, #95	; 0x5f
    6412:	d044      	beq.n	649e <d_substitution+0xaa>
    6414:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    6418:	b2d8      	uxtb	r0, r3
    641a:	2809      	cmp	r0, #9
    641c:	d826      	bhi.n	646c <d_substitution+0x78>
    641e:	2100      	movs	r1, #0
    6420:	e00d      	b.n	643e <d_substitution+0x4a>
    6422:	3b30      	subs	r3, #48	; 0x30
    6424:	4299      	cmp	r1, r3
    6426:	d81d      	bhi.n	6464 <d_substitution+0x70>
    6428:	68e0      	ldr	r0, [r4, #12]
    642a:	7802      	ldrb	r2, [r0, #0]
    642c:	4619      	mov	r1, r3
    642e:	1c45      	adds	r5, r0, #1
    6430:	b11a      	cbz	r2, 643a <d_substitution+0x46>
    6432:	60e5      	str	r5, [r4, #12]
    6434:	7802      	ldrb	r2, [r0, #0]
    6436:	2a5f      	cmp	r2, #95	; 0x5f
    6438:	d03b      	beq.n	64b2 <d_substitution+0xbe>
    643a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    643e:	b2d8      	uxtb	r0, r3
    6440:	2809      	cmp	r0, #9
    6442:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    6446:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    644a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    644e:	d9e8      	bls.n	6422 <d_substitution+0x2e>
    6450:	f1bc 0f19 	cmp.w	ip, #25
    6454:	d806      	bhi.n	6464 <d_substitution+0x70>
    6456:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    645a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    645e:	3b37      	subs	r3, #55	; 0x37
    6460:	4299      	cmp	r1, r3
    6462:	d9e1      	bls.n	6428 <d_substitution+0x34>
    6464:	2500      	movs	r5, #0
    6466:	4628      	mov	r0, r5
    6468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    646c:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    6470:	2819      	cmp	r0, #25
    6472:	d9d4      	bls.n	641e <d_substitution+0x2a>
    6474:	68a3      	ldr	r3, [r4, #8]
    6476:	f003 0308 	and.w	r3, r3, #8
    647a:	2b00      	cmp	r3, #0
    647c:	bf14      	ite	ne
    647e:	2501      	movne	r5, #1
    6480:	2500      	moveq	r5, #0
    6482:	d100      	bne.n	6486 <d_substitution+0x92>
    6484:	b9b9      	cbnz	r1, 64b6 <d_substitution+0xc2>
    6486:	4b3f      	ldr	r3, [pc, #252]	; (6584 <d_substitution+0x190>)
    6488:	2174      	movs	r1, #116	; 0x74
    648a:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
    648e:	e001      	b.n	6494 <d_substitution+0xa0>
    6490:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
    6494:	4291      	cmp	r1, r2
    6496:	d015      	beq.n	64c4 <d_substitution+0xd0>
    6498:	4283      	cmp	r3, r0
    649a:	d1f9      	bne.n	6490 <d_substitution+0x9c>
    649c:	e7e2      	b.n	6464 <d_substitution+0x70>
    649e:	2300      	movs	r3, #0
    64a0:	6a22      	ldr	r2, [r4, #32]
    64a2:	429a      	cmp	r2, r3
    64a4:	d9de      	bls.n	6464 <d_substitution+0x70>
    64a6:	69e2      	ldr	r2, [r4, #28]
    64a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    64ac:	4628      	mov	r0, r5
    64ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64b2:	3301      	adds	r3, #1
    64b4:	e7f4      	b.n	64a0 <d_substitution+0xac>
    64b6:	68e3      	ldr	r3, [r4, #12]
    64b8:	781b      	ldrb	r3, [r3, #0]
    64ba:	3b43      	subs	r3, #67	; 0x43
    64bc:	2b01      	cmp	r3, #1
    64be:	bf98      	it	ls
    64c0:	460d      	movls	r5, r1
    64c2:	e7e0      	b.n	6486 <d_substitution+0x92>
    64c4:	695e      	ldr	r6, [r3, #20]
    64c6:	2e00      	cmp	r6, #0
    64c8:	d054      	beq.n	6574 <d_substitution+0x180>
    64ca:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    64ce:	4282      	cmp	r2, r0
    64d0:	f8d3 8018 	ldr.w	r8, [r3, #24]
    64d4:	da53      	bge.n	657e <d_substitution+0x18a>
    64d6:	6927      	ldr	r7, [r4, #16]
    64d8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    64dc:	eb07 018c 	add.w	r1, r7, ip, lsl #2
    64e0:	f04f 0e00 	mov.w	lr, #0
    64e4:	e9c1 ee01 	strd	lr, lr, [r1, #4]
    64e8:	3201      	adds	r2, #1
    64ea:	f04f 0e18 	mov.w	lr, #24
    64ee:	6162      	str	r2, [r4, #20]
    64f0:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
    64f4:	e9c1 6803 	strd	r6, r8, [r1, #12]
    64f8:	62a1      	str	r1, [r4, #40]	; 0x28
    64fa:	2d00      	cmp	r5, #0
    64fc:	d037      	beq.n	656e <d_substitution+0x17a>
    64fe:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
    6502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6504:	4282      	cmp	r2, r0
    6506:	440b      	add	r3, r1
    6508:	62e3      	str	r3, [r4, #44]	; 0x2c
    650a:	da36      	bge.n	657a <d_substitution+0x186>
    650c:	6923      	ldr	r3, [r4, #16]
    650e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    6512:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    6516:	3201      	adds	r2, #1
    6518:	2600      	movs	r6, #0
    651a:	e9c5 6601 	strd	r6, r6, [r5, #4]
    651e:	6162      	str	r2, [r4, #20]
    6520:	2218      	movs	r2, #24
    6522:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
    6526:	e9c5 7103 	strd	r7, r1, [r5, #12]
    652a:	68e3      	ldr	r3, [r4, #12]
    652c:	781a      	ldrb	r2, [r3, #0]
    652e:	2a42      	cmp	r2, #66	; 0x42
    6530:	d199      	bne.n	6466 <d_substitution+0x72>
    6532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6534:	3301      	adds	r3, #1
    6536:	60e3      	str	r3, [r4, #12]
    6538:	4620      	mov	r0, r4
    653a:	f7ff feeb 	bl	6314 <d_source_name>
    653e:	462a      	mov	r2, r5
    6540:	4603      	mov	r3, r0
    6542:	214d      	movs	r1, #77	; 0x4d
    6544:	4620      	mov	r0, r4
    6546:	f7ff fbcd 	bl	5ce4 <d_make_comp>
    654a:	68e3      	ldr	r3, [r4, #12]
    654c:	781a      	ldrb	r2, [r3, #0]
    654e:	2a42      	cmp	r2, #66	; 0x42
    6550:	4605      	mov	r5, r0
    6552:	d0ef      	beq.n	6534 <d_substitution+0x140>
    6554:	62a6      	str	r6, [r4, #40]	; 0x28
    6556:	2800      	cmp	r0, #0
    6558:	d084      	beq.n	6464 <d_substitution+0x70>
    655a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    655e:	4293      	cmp	r3, r2
    6560:	da80      	bge.n	6464 <d_substitution+0x70>
    6562:	69e1      	ldr	r1, [r4, #28]
    6564:	1c5a      	adds	r2, r3, #1
    6566:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    656a:	6222      	str	r2, [r4, #32]
    656c:	e77b      	b.n	6466 <d_substitution+0x72>
    656e:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
    6572:	e7c6      	b.n	6502 <d_substitution+0x10e>
    6574:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    6578:	e7bf      	b.n	64fa <d_substitution+0x106>
    657a:	2500      	movs	r5, #0
    657c:	e7d5      	b.n	652a <d_substitution+0x136>
    657e:	2100      	movs	r1, #0
    6580:	e7ba      	b.n	64f8 <d_substitution+0x104>
    6582:	bf00      	nop
    6584:	200027b0 	.word	0x200027b0

00006588 <d_type>:
    6588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    658c:	68c2      	ldr	r2, [r0, #12]
    658e:	b083      	sub	sp, #12
    6590:	4604      	mov	r4, r0
    6592:	4610      	mov	r0, r2
    6594:	f7ff fd7e 	bl	6094 <next_is_type_qual.isra.0>
    6598:	2800      	cmp	r0, #0
    659a:	d166      	bne.n	666a <d_type+0xe2>
    659c:	7813      	ldrb	r3, [r2, #0]
    659e:	2b5a      	cmp	r3, #90	; 0x5a
    65a0:	d831      	bhi.n	6606 <d_type+0x7e>
    65a2:	2b2f      	cmp	r3, #47	; 0x2f
    65a4:	d95c      	bls.n	6660 <d_type+0xd8>
    65a6:	3b30      	subs	r3, #48	; 0x30
    65a8:	2b2a      	cmp	r3, #42	; 0x2a
    65aa:	d859      	bhi.n	6660 <d_type+0xd8>
    65ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    65b0:	008c008c 	.word	0x008c008c
    65b4:	008c008c 	.word	0x008c008c
    65b8:	008c008c 	.word	0x008c008c
    65bc:	008c008c 	.word	0x008c008c
    65c0:	008c008c 	.word	0x008c008c
    65c4:	00580058 	.word	0x00580058
    65c8:	00580058 	.word	0x00580058
    65cc:	00580058 	.word	0x00580058
    65d0:	01d60058 	.word	0x01d60058
    65d4:	00d90058 	.word	0x00d90058
    65d8:	005800ed 	.word	0x005800ed
    65dc:	016000e7 	.word	0x016000e7
    65e0:	00580058 	.word	0x00580058
    65e4:	00580058 	.word	0x00580058
    65e8:	02180058 	.word	0x02180058
    65ec:	00cb008c 	.word	0x00cb008c
    65f0:	005800bd 	.word	0x005800bd
    65f4:	019500af 	.word	0x019500af
    65f8:	01be016e 	.word	0x01be016e
    65fc:	00580058 	.word	0x00580058
    6600:	00580058 	.word	0x00580058
    6604:	008c      	.short	0x008c
    6606:	3b61      	subs	r3, #97	; 0x61
    6608:	fa5f fc83 	uxtb.w	ip, r3
    660c:	f1bc 0f19 	cmp.w	ip, #25
    6610:	d826      	bhi.n	6660 <d_type+0xd8>
    6612:	4dc4      	ldr	r5, [pc, #784]	; (6924 <d_type+0x39c>)
    6614:	2101      	movs	r1, #1
    6616:	fa01 f10c 	lsl.w	r1, r1, ip
    661a:	400d      	ands	r5, r1
    661c:	b1ed      	cbz	r5, 665a <d_type+0xd2>
    661e:	49c2      	ldr	r1, [pc, #776]	; (6928 <d_type+0x3a0>)
    6620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6624:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    6628:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
    662c:	42ab      	cmp	r3, r5
    662e:	f280 83c5 	bge.w	6dbc <d_type+0x834>
    6632:	6926      	ldr	r6, [r4, #16]
    6634:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    6638:	eb06 058c 	add.w	r5, r6, ip, lsl #2
    663c:	3301      	adds	r3, #1
    663e:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6642:	6163      	str	r3, [r4, #20]
    6644:	2327      	movs	r3, #39	; 0x27
    6646:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
    664a:	60e9      	str	r1, [r5, #12]
    664c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    664e:	6849      	ldr	r1, [r1, #4]
    6650:	3201      	adds	r2, #1
    6652:	440b      	add	r3, r1
    6654:	60e2      	str	r2, [r4, #12]
    6656:	62e3      	str	r3, [r4, #44]	; 0x2c
    6658:	e003      	b.n	6662 <d_type+0xda>
    665a:	f1bc 0f14 	cmp.w	ip, #20
    665e:	d048      	beq.n	66f2 <d_type+0x16a>
    6660:	2500      	movs	r5, #0
    6662:	4628      	mov	r0, r5
    6664:	b003      	add	sp, #12
    6666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    666a:	2200      	movs	r2, #0
    666c:	a901      	add	r1, sp, #4
    666e:	4620      	mov	r0, r4
    6670:	f001 fab4 	bl	7bdc <d_cv_qualifiers>
    6674:	4605      	mov	r5, r0
    6676:	2800      	cmp	r0, #0
    6678:	d0f2      	beq.n	6660 <d_type+0xd8>
    667a:	68e3      	ldr	r3, [r4, #12]
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	2b46      	cmp	r3, #70	; 0x46
    6680:	4620      	mov	r0, r4
    6682:	d01e      	beq.n	66c2 <d_type+0x13a>
    6684:	f7ff ff80 	bl	6588 <d_type>
    6688:	6028      	str	r0, [r5, #0]
    668a:	2800      	cmp	r0, #0
    668c:	d0e8      	beq.n	6660 <d_type+0xd8>
    668e:	7803      	ldrb	r3, [r0, #0]
    6690:	3b1f      	subs	r3, #31
    6692:	2b01      	cmp	r3, #1
    6694:	d805      	bhi.n	66a2 <d_type+0x11a>
    6696:	9a01      	ldr	r2, [sp, #4]
    6698:	68c3      	ldr	r3, [r0, #12]
    669a:	60c2      	str	r2, [r0, #12]
    669c:	682a      	ldr	r2, [r5, #0]
    669e:	9201      	str	r2, [sp, #4]
    66a0:	602b      	str	r3, [r5, #0]
    66a2:	9d01      	ldr	r5, [sp, #4]
    66a4:	2d00      	cmp	r5, #0
    66a6:	d0db      	beq.n	6660 <d_type+0xd8>
    66a8:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    66ac:	4293      	cmp	r3, r2
    66ae:	dad7      	bge.n	6660 <d_type+0xd8>
    66b0:	69e1      	ldr	r1, [r4, #28]
    66b2:	1c5a      	adds	r2, r3, #1
    66b4:	4628      	mov	r0, r5
    66b6:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    66ba:	6222      	str	r2, [r4, #32]
    66bc:	b003      	add	sp, #12
    66be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    66c2:	f000 fbfd 	bl	6ec0 <d_function_type>
    66c6:	e7df      	b.n	6688 <d_type+0x100>
    66c8:	4620      	mov	r0, r4
    66ca:	f001 fd6b 	bl	81a4 <d_name>
    66ce:	4605      	mov	r5, r0
    66d0:	9001      	str	r0, [sp, #4]
    66d2:	2d00      	cmp	r5, #0
    66d4:	d0c4      	beq.n	6660 <d_type+0xd8>
    66d6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    66da:	4293      	cmp	r3, r2
    66dc:	dac0      	bge.n	6660 <d_type+0xd8>
    66de:	69e1      	ldr	r1, [r4, #28]
    66e0:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    66e4:	9d01      	ldr	r5, [sp, #4]
    66e6:	1c5a      	adds	r2, r3, #1
    66e8:	4628      	mov	r0, r5
    66ea:	6222      	str	r2, [r4, #32]
    66ec:	b003      	add	sp, #12
    66ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    66f2:	3201      	adds	r2, #1
    66f4:	60e2      	str	r2, [r4, #12]
    66f6:	4620      	mov	r0, r4
    66f8:	f7ff fe0c 	bl	6314 <d_source_name>
    66fc:	462b      	mov	r3, r5
    66fe:	4602      	mov	r2, r0
    6700:	2128      	movs	r1, #40	; 0x28
    6702:	4620      	mov	r0, r4
    6704:	f7ff faee 	bl	5ce4 <d_make_comp>
    6708:	4605      	mov	r5, r0
    670a:	9001      	str	r0, [sp, #4]
    670c:	e7e1      	b.n	66d2 <d_type+0x14a>
    670e:	3201      	adds	r2, #1
    6710:	60e2      	str	r2, [r4, #12]
    6712:	4620      	mov	r0, r4
    6714:	f7ff ff38 	bl	6588 <d_type>
    6718:	2300      	movs	r3, #0
    671a:	4602      	mov	r2, r0
    671c:	2123      	movs	r1, #35	; 0x23
    671e:	4620      	mov	r0, r4
    6720:	f7ff fae0 	bl	5ce4 <d_make_comp>
    6724:	4605      	mov	r5, r0
    6726:	9001      	str	r0, [sp, #4]
    6728:	e7d3      	b.n	66d2 <d_type+0x14a>
    672a:	3201      	adds	r2, #1
    672c:	60e2      	str	r2, [r4, #12]
    672e:	4620      	mov	r0, r4
    6730:	f7ff ff2a 	bl	6588 <d_type>
    6734:	2300      	movs	r3, #0
    6736:	4602      	mov	r2, r0
    6738:	2122      	movs	r1, #34	; 0x22
    673a:	4620      	mov	r0, r4
    673c:	f7ff fad2 	bl	5ce4 <d_make_comp>
    6740:	4605      	mov	r5, r0
    6742:	9001      	str	r0, [sp, #4]
    6744:	e7c5      	b.n	66d2 <d_type+0x14a>
    6746:	3201      	adds	r2, #1
    6748:	60e2      	str	r2, [r4, #12]
    674a:	4620      	mov	r0, r4
    674c:	f7ff ff1c 	bl	6588 <d_type>
    6750:	2300      	movs	r3, #0
    6752:	4602      	mov	r2, r0
    6754:	2124      	movs	r1, #36	; 0x24
    6756:	4620      	mov	r0, r4
    6758:	f7ff fac4 	bl	5ce4 <d_make_comp>
    675c:	4605      	mov	r5, r0
    675e:	9001      	str	r0, [sp, #4]
    6760:	e7b7      	b.n	66d2 <d_type+0x14a>
    6762:	3201      	adds	r2, #1
    6764:	60e2      	str	r2, [r4, #12]
    6766:	4620      	mov	r0, r4
    6768:	f7ff ff0e 	bl	6588 <d_type>
    676c:	2300      	movs	r3, #0
    676e:	4602      	mov	r2, r0
    6770:	2125      	movs	r1, #37	; 0x25
    6772:	4620      	mov	r0, r4
    6774:	f7ff fab6 	bl	5ce4 <d_make_comp>
    6778:	4605      	mov	r5, r0
    677a:	9001      	str	r0, [sp, #4]
    677c:	e7a9      	b.n	66d2 <d_type+0x14a>
    677e:	4620      	mov	r0, r4
    6780:	f000 fb9e 	bl	6ec0 <d_function_type>
    6784:	4605      	mov	r5, r0
    6786:	9001      	str	r0, [sp, #4]
    6788:	e7a3      	b.n	66d2 <d_type+0x14a>
    678a:	1c53      	adds	r3, r2, #1
    678c:	60e3      	str	r3, [r4, #12]
    678e:	7853      	ldrb	r3, [r2, #1]
    6790:	2b00      	cmp	r3, #0
    6792:	f43f af65 	beq.w	6660 <d_type+0xd8>
    6796:	1c93      	adds	r3, r2, #2
    6798:	60e3      	str	r3, [r4, #12]
    679a:	7853      	ldrb	r3, [r2, #1]
    679c:	3b46      	subs	r3, #70	; 0x46
    679e:	2b30      	cmp	r3, #48	; 0x30
    67a0:	f63f af5e 	bhi.w	6660 <d_type+0xd8>
    67a4:	a101      	add	r1, pc, #4	; (adr r1, 67ac <d_type+0x224>)
    67a6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    67aa:	bf00      	nop
    67ac:	00006a4d 	.word	0x00006a4d
    67b0:	00006661 	.word	0x00006661
    67b4:	00006661 	.word	0x00006661
    67b8:	00006661 	.word	0x00006661
    67bc:	00006661 	.word	0x00006661
    67c0:	00006661 	.word	0x00006661
    67c4:	00006661 	.word	0x00006661
    67c8:	00006661 	.word	0x00006661
    67cc:	00006661 	.word	0x00006661
    67d0:	00006661 	.word	0x00006661
    67d4:	00006661 	.word	0x00006661
    67d8:	00006661 	.word	0x00006661
    67dc:	00006661 	.word	0x00006661
    67e0:	00006661 	.word	0x00006661
    67e4:	00006a11 	.word	0x00006a11
    67e8:	00006661 	.word	0x00006661
    67ec:	00006661 	.word	0x00006661
    67f0:	00006661 	.word	0x00006661
    67f4:	00006661 	.word	0x00006661
    67f8:	00006661 	.word	0x00006661
    67fc:	00006661 	.word	0x00006661
    6800:	00006661 	.word	0x00006661
    6804:	00006661 	.word	0x00006661
    6808:	00006661 	.word	0x00006661
    680c:	00006661 	.word	0x00006661
    6810:	00006661 	.word	0x00006661
    6814:	00006661 	.word	0x00006661
    6818:	00006ae5 	.word	0x00006ae5
    681c:	00006661 	.word	0x00006661
    6820:	00006ab9 	.word	0x00006ab9
    6824:	00006cd3 	.word	0x00006cd3
    6828:	00006ca3 	.word	0x00006ca3
    682c:	00006b41 	.word	0x00006b41
    6830:	00006661 	.word	0x00006661
    6834:	00006b11 	.word	0x00006b11
    6838:	00006c73 	.word	0x00006c73
    683c:	00006661 	.word	0x00006661
    6840:	00006661 	.word	0x00006661
    6844:	00006661 	.word	0x00006661
    6848:	00006661 	.word	0x00006661
    684c:	00006c43 	.word	0x00006c43
    6850:	00006661 	.word	0x00006661
    6854:	00006c2b 	.word	0x00006c2b
    6858:	00006661 	.word	0x00006661
    685c:	00006661 	.word	0x00006661
    6860:	00006bfb 	.word	0x00006bfb
    6864:	00006a11 	.word	0x00006a11
    6868:	00006bcb 	.word	0x00006bcb
    686c:	00006b71 	.word	0x00006b71
    6870:	3201      	adds	r2, #1
    6872:	60e2      	str	r2, [r4, #12]
    6874:	4620      	mov	r0, r4
    6876:	f7ff fe87 	bl	6588 <d_type>
    687a:	2300      	movs	r3, #0
    687c:	4602      	mov	r2, r0
    687e:	2126      	movs	r1, #38	; 0x26
    6880:	4620      	mov	r0, r4
    6882:	f7ff fa2f 	bl	5ce4 <d_make_comp>
    6886:	4605      	mov	r5, r0
    6888:	9001      	str	r0, [sp, #4]
    688a:	e722      	b.n	66d2 <d_type+0x14a>
    688c:	4620      	mov	r0, r4
    688e:	f7ff fcd5 	bl	623c <d_template_param>
    6892:	68e6      	ldr	r6, [r4, #12]
    6894:	9001      	str	r0, [sp, #4]
    6896:	7833      	ldrb	r3, [r6, #0]
    6898:	2b49      	cmp	r3, #73	; 0x49
    689a:	4605      	mov	r5, r0
    689c:	f47f af19 	bne.w	66d2 <d_type+0x14a>
    68a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    68a2:	2b00      	cmp	r3, #0
    68a4:	f040 8257 	bne.w	6d56 <d_type+0x7ce>
    68a8:	2800      	cmp	r0, #0
    68aa:	f43f aed9 	beq.w	6660 <d_type+0xd8>
    68ae:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    68b2:	428a      	cmp	r2, r1
    68b4:	f6bf aed4 	bge.w	6660 <d_type+0xd8>
    68b8:	69e1      	ldr	r1, [r4, #28]
    68ba:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    68be:	3201      	adds	r2, #1
    68c0:	6222      	str	r2, [r4, #32]
    68c2:	7832      	ldrb	r2, [r6, #0]
    68c4:	3a49      	subs	r2, #73	; 0x49
    68c6:	2a01      	cmp	r2, #1
    68c8:	d805      	bhi.n	68d6 <d_type+0x34e>
    68ca:	3601      	adds	r6, #1
    68cc:	60e6      	str	r6, [r4, #12]
    68ce:	4620      	mov	r0, r4
    68d0:	f000 fe0c 	bl	74ec <d_template_args_1>
    68d4:	4603      	mov	r3, r0
    68d6:	462a      	mov	r2, r5
    68d8:	e01c      	b.n	6914 <d_type+0x38c>
    68da:	7853      	ldrb	r3, [r2, #1]
    68dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    68e0:	2a09      	cmp	r2, #9
    68e2:	d905      	bls.n	68f0 <d_type+0x368>
    68e4:	2b5f      	cmp	r3, #95	; 0x5f
    68e6:	d003      	beq.n	68f0 <d_type+0x368>
    68e8:	3b41      	subs	r3, #65	; 0x41
    68ea:	2b19      	cmp	r3, #25
    68ec:	f200 8226 	bhi.w	6d3c <d_type+0x7b4>
    68f0:	2100      	movs	r1, #0
    68f2:	4620      	mov	r0, r4
    68f4:	f7ff fd7e 	bl	63f4 <d_substitution>
    68f8:	68e3      	ldr	r3, [r4, #12]
    68fa:	9001      	str	r0, [sp, #4]
    68fc:	781a      	ldrb	r2, [r3, #0]
    68fe:	2a49      	cmp	r2, #73	; 0x49
    6900:	4605      	mov	r5, r0
    6902:	f47f aeae 	bne.w	6662 <d_type+0xda>
    6906:	3301      	adds	r3, #1
    6908:	60e3      	str	r3, [r4, #12]
    690a:	4620      	mov	r0, r4
    690c:	f000 fdee 	bl	74ec <d_template_args_1>
    6910:	462a      	mov	r2, r5
    6912:	4603      	mov	r3, r0
    6914:	2104      	movs	r1, #4
    6916:	4620      	mov	r0, r4
    6918:	f7ff f9e4 	bl	5ce4 <d_make_comp>
    691c:	4605      	mov	r5, r0
    691e:	9001      	str	r0, [sp, #4]
    6920:	e6d7      	b.n	66d2 <d_type+0x14a>
    6922:	bf00      	nop
    6924:	03ec7bff 	.word	0x03ec7bff
    6928:	2000191c 	.word	0x2000191c
    692c:	3201      	adds	r2, #1
    692e:	60e2      	str	r2, [r4, #12]
    6930:	4620      	mov	r0, r4
    6932:	f7ff fcef 	bl	6314 <d_source_name>
    6936:	68e3      	ldr	r3, [r4, #12]
    6938:	9001      	str	r0, [sp, #4]
    693a:	781a      	ldrb	r2, [r3, #0]
    693c:	2a49      	cmp	r2, #73	; 0x49
    693e:	4605      	mov	r5, r0
    6940:	f000 81e1 	beq.w	6d06 <d_type+0x77e>
    6944:	4620      	mov	r0, r4
    6946:	f7ff fe1f 	bl	6588 <d_type>
    694a:	462b      	mov	r3, r5
    694c:	4602      	mov	r2, r0
    694e:	2121      	movs	r1, #33	; 0x21
    6950:	4620      	mov	r0, r4
    6952:	f7ff f9c7 	bl	5ce4 <d_make_comp>
    6956:	4605      	mov	r5, r0
    6958:	9001      	str	r0, [sp, #4]
    695a:	e6ba      	b.n	66d2 <d_type+0x14a>
    695c:	1c55      	adds	r5, r2, #1
    695e:	60e5      	str	r5, [r4, #12]
    6960:	7853      	ldrb	r3, [r2, #1]
    6962:	2b5f      	cmp	r3, #95	; 0x5f
    6964:	f000 81cd 	beq.w	6d02 <d_type+0x77a>
    6968:	3b30      	subs	r3, #48	; 0x30
    696a:	2b09      	cmp	r3, #9
    696c:	f200 81d8 	bhi.w	6d20 <d_type+0x798>
    6970:	462b      	mov	r3, r5
    6972:	469c      	mov	ip, r3
    6974:	3301      	adds	r3, #1
    6976:	60e3      	str	r3, [r4, #12]
    6978:	7819      	ldrb	r1, [r3, #0]
    697a:	3930      	subs	r1, #48	; 0x30
    697c:	2909      	cmp	r1, #9
    697e:	d9f8      	bls.n	6972 <d_type+0x3ea>
    6980:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
    6984:	4281      	cmp	r1, r0
    6986:	ebac 0202 	sub.w	r2, ip, r2
    698a:	f6bf ae69 	bge.w	6660 <d_type+0xd8>
    698e:	6927      	ldr	r7, [r4, #16]
    6990:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    6994:	eb07 0680 	add.w	r6, r7, r0, lsl #2
    6998:	ea4f 0e80 	mov.w	lr, r0, lsl #2
    699c:	2000      	movs	r0, #0
    699e:	3101      	adds	r1, #1
    69a0:	4282      	cmp	r2, r0
    69a2:	e9c6 0001 	strd	r0, r0, [r6, #4]
    69a6:	6161      	str	r1, [r4, #20]
    69a8:	f77f ae5a 	ble.w	6660 <d_type+0xd8>
    69ac:	e9c6 0001 	strd	r0, r0, [r6, #4]
    69b0:	f807 000e 	strb.w	r0, [r7, lr]
    69b4:	e9c6 5203 	strd	r5, r2, [r6, #12]
    69b8:	f89c 2001 	ldrb.w	r2, [ip, #1]
    69bc:	461d      	mov	r5, r3
    69be:	2a5f      	cmp	r2, #95	; 0x5f
    69c0:	f47f ae4e 	bne.w	6660 <d_type+0xd8>
    69c4:	3501      	adds	r5, #1
    69c6:	60e5      	str	r5, [r4, #12]
    69c8:	4620      	mov	r0, r4
    69ca:	f7ff fddd 	bl	6588 <d_type>
    69ce:	4632      	mov	r2, r6
    69d0:	4603      	mov	r3, r0
    69d2:	212a      	movs	r1, #42	; 0x2a
    69d4:	4620      	mov	r0, r4
    69d6:	f7ff f985 	bl	5ce4 <d_make_comp>
    69da:	4605      	mov	r5, r0
    69dc:	9001      	str	r0, [sp, #4]
    69de:	e678      	b.n	66d2 <d_type+0x14a>
    69e0:	3201      	adds	r2, #1
    69e2:	60e2      	str	r2, [r4, #12]
    69e4:	4620      	mov	r0, r4
    69e6:	f7ff fdcf 	bl	6588 <d_type>
    69ea:	4605      	mov	r5, r0
    69ec:	2800      	cmp	r0, #0
    69ee:	f43f ae37 	beq.w	6660 <d_type+0xd8>
    69f2:	4620      	mov	r0, r4
    69f4:	f7ff fdc8 	bl	6588 <d_type>
    69f8:	4603      	mov	r3, r0
    69fa:	2800      	cmp	r0, #0
    69fc:	f43f ae30 	beq.w	6660 <d_type+0xd8>
    6a00:	462a      	mov	r2, r5
    6a02:	212b      	movs	r1, #43	; 0x2b
    6a04:	4620      	mov	r0, r4
    6a06:	f7ff f96d 	bl	5ce4 <d_make_comp>
    6a0a:	4605      	mov	r5, r0
    6a0c:	9001      	str	r0, [sp, #4]
    6a0e:	e660      	b.n	66d2 <d_type+0x14a>
    6a10:	2301      	movs	r3, #1
    6a12:	6b25      	ldr	r5, [r4, #48]	; 0x30
    6a14:	6323      	str	r3, [r4, #48]	; 0x30
    6a16:	4620      	mov	r0, r4
    6a18:	f000 fe30 	bl	767c <d_expression_1>
    6a1c:	6325      	str	r5, [r4, #48]	; 0x30
    6a1e:	4602      	mov	r2, r0
    6a20:	2300      	movs	r3, #0
    6a22:	2144      	movs	r1, #68	; 0x44
    6a24:	4620      	mov	r0, r4
    6a26:	f7ff f95d 	bl	5ce4 <d_make_comp>
    6a2a:	4605      	mov	r5, r0
    6a2c:	9001      	str	r0, [sp, #4]
    6a2e:	2800      	cmp	r0, #0
    6a30:	f43f ae16 	beq.w	6660 <d_type+0xd8>
    6a34:	68e3      	ldr	r3, [r4, #12]
    6a36:	781a      	ldrb	r2, [r3, #0]
    6a38:	2a00      	cmp	r2, #0
    6a3a:	f43f ae11 	beq.w	6660 <d_type+0xd8>
    6a3e:	1c5a      	adds	r2, r3, #1
    6a40:	60e2      	str	r2, [r4, #12]
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	2b45      	cmp	r3, #69	; 0x45
    6a46:	f47f ae0b 	bne.w	6660 <d_type+0xd8>
    6a4a:	e644      	b.n	66d6 <d_type+0x14e>
    6a4c:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    6a50:	428b      	cmp	r3, r1
    6a52:	f280 81b5 	bge.w	6dc0 <d_type+0x838>
    6a56:	6921      	ldr	r1, [r4, #16]
    6a58:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    6a5c:	eb01 0580 	add.w	r5, r1, r0, lsl #2
    6a60:	3301      	adds	r3, #1
    6a62:	2600      	movs	r6, #0
    6a64:	e9c5 6601 	strd	r6, r6, [r5, #4]
    6a68:	6163      	str	r3, [r4, #20]
    6a6a:	232c      	movs	r3, #44	; 0x2c
    6a6c:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
    6a70:	7893      	ldrb	r3, [r2, #2]
    6a72:	9501      	str	r5, [sp, #4]
    6a74:	3b30      	subs	r3, #48	; 0x30
    6a76:	b2db      	uxtb	r3, r3
    6a78:	2b09      	cmp	r3, #9
    6a7a:	bf94      	ite	ls
    6a7c:	2301      	movls	r3, #1
    6a7e:	4633      	movhi	r3, r6
    6a80:	822b      	strh	r3, [r5, #16]
    6a82:	d802      	bhi.n	6a8a <d_type+0x502>
    6a84:	4620      	mov	r0, r4
    6a86:	f7ff f9a5 	bl	5dd4 <d_number>
    6a8a:	4620      	mov	r0, r4
    6a8c:	f7ff fd7c 	bl	6588 <d_type>
    6a90:	60e8      	str	r0, [r5, #12]
    6a92:	2800      	cmp	r0, #0
    6a94:	f43f ade4 	beq.w	6660 <d_type+0xd8>
    6a98:	4620      	mov	r0, r4
    6a9a:	f7ff f99b 	bl	5dd4 <d_number>
    6a9e:	68e2      	ldr	r2, [r4, #12]
    6aa0:	7813      	ldrb	r3, [r2, #0]
    6aa2:	b113      	cbz	r3, 6aaa <d_type+0x522>
    6aa4:	1c53      	adds	r3, r2, #1
    6aa6:	60e3      	str	r3, [r4, #12]
    6aa8:	7813      	ldrb	r3, [r2, #0]
    6aaa:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
    6aae:	fab3 f383 	clz	r3, r3
    6ab2:	095b      	lsrs	r3, r3, #5
    6ab4:	826b      	strh	r3, [r5, #18]
    6ab6:	e5d4      	b.n	6662 <d_type+0xda>
    6ab8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6abc:	4293      	cmp	r3, r2
    6abe:	f6bf adcf 	bge.w	6660 <d_type+0xd8>
    6ac2:	6922      	ldr	r2, [r4, #16]
    6ac4:	49c0      	ldr	r1, [pc, #768]	; (6dc8 <d_type+0x840>)
    6ac6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    6aca:	00a8      	lsls	r0, r5, #2
    6acc:	3301      	adds	r3, #1
    6ace:	6163      	str	r3, [r4, #20]
    6ad0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    6ad4:	2300      	movs	r3, #0
    6ad6:	e9c5 3301 	strd	r3, r3, [r5, #4]
    6ada:	5413      	strb	r3, [r2, r0]
    6adc:	230e      	movs	r3, #14
    6ade:	e9c5 1303 	strd	r1, r3, [r5, #12]
    6ae2:	e5be      	b.n	6662 <d_type+0xda>
    6ae4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6ae8:	4293      	cmp	r3, r2
    6aea:	f6bf adb9 	bge.w	6660 <d_type+0xd8>
    6aee:	6922      	ldr	r2, [r4, #16]
    6af0:	49b6      	ldr	r1, [pc, #728]	; (6dcc <d_type+0x844>)
    6af2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    6af6:	00a8      	lsls	r0, r5, #2
    6af8:	3301      	adds	r3, #1
    6afa:	6163      	str	r3, [r4, #20]
    6afc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    6b00:	2300      	movs	r3, #0
    6b02:	e9c5 3301 	strd	r3, r3, [r5, #4]
    6b06:	5413      	strb	r3, [r2, r0]
    6b08:	2304      	movs	r3, #4
    6b0a:	e9c5 1303 	strd	r1, r3, [r5, #12]
    6b0e:	e5a8      	b.n	6662 <d_type+0xda>
    6b10:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6b14:	4293      	cmp	r3, r2
    6b16:	f280 816b 	bge.w	6df0 <d_type+0x868>
    6b1a:	6922      	ldr	r2, [r4, #16]
    6b1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6b20:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6b24:	3301      	adds	r3, #1
    6b26:	2000      	movs	r0, #0
    6b28:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6b2c:	6163      	str	r3, [r4, #20]
    6b2e:	2327      	movs	r3, #39	; 0x27
    6b30:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6b36:	4aa6      	ldr	r2, [pc, #664]	; (6dd0 <d_type+0x848>)
    6b38:	60ea      	str	r2, [r5, #12]
    6b3a:	3304      	adds	r3, #4
    6b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    6b3e:	e590      	b.n	6662 <d_type+0xda>
    6b40:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6b44:	4293      	cmp	r3, r2
    6b46:	f280 8153 	bge.w	6df0 <d_type+0x868>
    6b4a:	6922      	ldr	r2, [r4, #16]
    6b4c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6b50:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6b54:	3301      	adds	r3, #1
    6b56:	2000      	movs	r0, #0
    6b58:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6b5c:	6163      	str	r3, [r4, #20]
    6b5e:	2327      	movs	r3, #39	; 0x27
    6b60:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6b66:	4a9b      	ldr	r2, [pc, #620]	; (6dd4 <d_type+0x84c>)
    6b68:	60ea      	str	r2, [r5, #12]
    6b6a:	3309      	adds	r3, #9
    6b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
    6b6e:	e578      	b.n	6662 <d_type+0xda>
    6b70:	7893      	ldrb	r3, [r2, #2]
    6b72:	2b5f      	cmp	r3, #95	; 0x5f
    6b74:	f000 8114 	beq.w	6da0 <d_type+0x818>
    6b78:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6b7c:	4293      	cmp	r3, r2
    6b7e:	f6bf ad6f 	bge.w	6660 <d_type+0xd8>
    6b82:	6922      	ldr	r2, [r4, #16]
    6b84:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6b88:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6b8c:	3301      	adds	r3, #1
    6b8e:	2000      	movs	r0, #0
    6b90:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6b94:	6163      	str	r3, [r4, #20]
    6b96:	2343      	movs	r3, #67	; 0x43
    6b98:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6b9c:	4620      	mov	r0, r4
    6b9e:	f7ff f919 	bl	5dd4 <d_number>
    6ba2:	60e8      	str	r0, [r5, #12]
    6ba4:	68e3      	ldr	r3, [r4, #12]
    6ba6:	781a      	ldrb	r2, [r3, #0]
    6ba8:	2a5f      	cmp	r2, #95	; 0x5f
    6baa:	f47f ad59 	bne.w	6660 <d_type+0xd8>
    6bae:	3301      	adds	r3, #1
    6bb0:	60e3      	str	r3, [r4, #12]
    6bb2:	4620      	mov	r0, r4
    6bb4:	f7ff fce8 	bl	6588 <d_type>
    6bb8:	462a      	mov	r2, r5
    6bba:	4603      	mov	r3, r0
    6bbc:	212d      	movs	r1, #45	; 0x2d
    6bbe:	4620      	mov	r0, r4
    6bc0:	f7ff f890 	bl	5ce4 <d_make_comp>
    6bc4:	4605      	mov	r5, r0
    6bc6:	9001      	str	r0, [sp, #4]
    6bc8:	e583      	b.n	66d2 <d_type+0x14a>
    6bca:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6bce:	4293      	cmp	r3, r2
    6bd0:	f280 810e 	bge.w	6df0 <d_type+0x868>
    6bd4:	6922      	ldr	r2, [r4, #16]
    6bd6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6bda:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6bde:	3301      	adds	r3, #1
    6be0:	2000      	movs	r0, #0
    6be2:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6be6:	6163      	str	r3, [r4, #20]
    6be8:	2327      	movs	r3, #39	; 0x27
    6bea:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6bee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6bf0:	4a79      	ldr	r2, [pc, #484]	; (6dd8 <d_type+0x850>)
    6bf2:	60ea      	str	r2, [r5, #12]
    6bf4:	3307      	adds	r3, #7
    6bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
    6bf8:	e533      	b.n	6662 <d_type+0xda>
    6bfa:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6bfe:	4293      	cmp	r3, r2
    6c00:	f280 80f6 	bge.w	6df0 <d_type+0x868>
    6c04:	6922      	ldr	r2, [r4, #16]
    6c06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6c0a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6c0e:	3301      	adds	r3, #1
    6c10:	2000      	movs	r0, #0
    6c12:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6c16:	6163      	str	r3, [r4, #20]
    6c18:	2327      	movs	r3, #39	; 0x27
    6c1a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6c20:	4a6e      	ldr	r2, [pc, #440]	; (6ddc <d_type+0x854>)
    6c22:	60ea      	str	r2, [r5, #12]
    6c24:	3308      	adds	r3, #8
    6c26:	62e3      	str	r3, [r4, #44]	; 0x2c
    6c28:	e51b      	b.n	6662 <d_type+0xda>
    6c2a:	4620      	mov	r0, r4
    6c2c:	f7ff fcac 	bl	6588 <d_type>
    6c30:	2300      	movs	r3, #0
    6c32:	4602      	mov	r2, r0
    6c34:	214c      	movs	r1, #76	; 0x4c
    6c36:	4620      	mov	r0, r4
    6c38:	f7ff f854 	bl	5ce4 <d_make_comp>
    6c3c:	4605      	mov	r5, r0
    6c3e:	9001      	str	r0, [sp, #4]
    6c40:	e547      	b.n	66d2 <d_type+0x14a>
    6c42:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6c46:	4293      	cmp	r3, r2
    6c48:	f280 80d2 	bge.w	6df0 <d_type+0x868>
    6c4c:	6922      	ldr	r2, [r4, #16]
    6c4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6c52:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6c56:	3301      	adds	r3, #1
    6c58:	2000      	movs	r0, #0
    6c5a:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6c5e:	6163      	str	r3, [r4, #20]
    6c60:	2327      	movs	r3, #39	; 0x27
    6c62:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6c68:	4a5d      	ldr	r2, [pc, #372]	; (6de0 <d_type+0x858>)
    6c6a:	60ea      	str	r2, [r5, #12]
    6c6c:	3311      	adds	r3, #17
    6c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6c70:	e4f7      	b.n	6662 <d_type+0xda>
    6c72:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6c76:	4293      	cmp	r3, r2
    6c78:	f280 80ba 	bge.w	6df0 <d_type+0x868>
    6c7c:	6922      	ldr	r2, [r4, #16]
    6c7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6c82:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6c86:	3301      	adds	r3, #1
    6c88:	2000      	movs	r0, #0
    6c8a:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6c8e:	6163      	str	r3, [r4, #20]
    6c90:	2327      	movs	r3, #39	; 0x27
    6c92:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6c98:	4a52      	ldr	r2, [pc, #328]	; (6de4 <d_type+0x85c>)
    6c9a:	60ea      	str	r2, [r5, #12]
    6c9c:	3308      	adds	r3, #8
    6c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6ca0:	e4df      	b.n	6662 <d_type+0xda>
    6ca2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6ca6:	4293      	cmp	r3, r2
    6ca8:	f280 80a2 	bge.w	6df0 <d_type+0x868>
    6cac:	6922      	ldr	r2, [r4, #16]
    6cae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6cb2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6cb6:	3301      	adds	r3, #1
    6cb8:	2000      	movs	r0, #0
    6cba:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6cbe:	6163      	str	r3, [r4, #20]
    6cc0:	2327      	movs	r3, #39	; 0x27
    6cc2:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6cc8:	4a47      	ldr	r2, [pc, #284]	; (6de8 <d_type+0x860>)
    6cca:	60ea      	str	r2, [r5, #12]
    6ccc:	330a      	adds	r3, #10
    6cce:	62e3      	str	r3, [r4, #44]	; 0x2c
    6cd0:	e4c7      	b.n	6662 <d_type+0xda>
    6cd2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    6cd6:	4293      	cmp	r3, r2
    6cd8:	f280 808a 	bge.w	6df0 <d_type+0x868>
    6cdc:	6922      	ldr	r2, [r4, #16]
    6cde:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6ce2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    6ce6:	3301      	adds	r3, #1
    6ce8:	2000      	movs	r0, #0
    6cea:	e9c5 0001 	strd	r0, r0, [r5, #4]
    6cee:	6163      	str	r3, [r4, #20]
    6cf0:	2327      	movs	r3, #39	; 0x27
    6cf2:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6cf8:	4a3c      	ldr	r2, [pc, #240]	; (6dec <d_type+0x864>)
    6cfa:	60ea      	str	r2, [r5, #12]
    6cfc:	3309      	adds	r3, #9
    6cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    6d00:	e4af      	b.n	6662 <d_type+0xda>
    6d02:	2600      	movs	r6, #0
    6d04:	e65e      	b.n	69c4 <d_type+0x43c>
    6d06:	3301      	adds	r3, #1
    6d08:	60e3      	str	r3, [r4, #12]
    6d0a:	4620      	mov	r0, r4
    6d0c:	f000 fbee 	bl	74ec <d_template_args_1>
    6d10:	462a      	mov	r2, r5
    6d12:	4603      	mov	r3, r0
    6d14:	2104      	movs	r1, #4
    6d16:	4620      	mov	r0, r4
    6d18:	f7fe ffe4 	bl	5ce4 <d_make_comp>
    6d1c:	4605      	mov	r5, r0
    6d1e:	e611      	b.n	6944 <d_type+0x3bc>
    6d20:	2301      	movs	r3, #1
    6d22:	6b25      	ldr	r5, [r4, #48]	; 0x30
    6d24:	6323      	str	r3, [r4, #48]	; 0x30
    6d26:	4620      	mov	r0, r4
    6d28:	f000 fca8 	bl	767c <d_expression_1>
    6d2c:	6325      	str	r5, [r4, #48]	; 0x30
    6d2e:	4606      	mov	r6, r0
    6d30:	2800      	cmp	r0, #0
    6d32:	f43f ac95 	beq.w	6660 <d_type+0xd8>
    6d36:	68e5      	ldr	r5, [r4, #12]
    6d38:	782a      	ldrb	r2, [r5, #0]
    6d3a:	e640      	b.n	69be <d_type+0x436>
    6d3c:	4620      	mov	r0, r4
    6d3e:	f001 fa31 	bl	81a4 <d_name>
    6d42:	4605      	mov	r5, r0
    6d44:	9001      	str	r0, [sp, #4]
    6d46:	2800      	cmp	r0, #0
    6d48:	f43f ac8a 	beq.w	6660 <d_type+0xd8>
    6d4c:	7803      	ldrb	r3, [r0, #0]
    6d4e:	2b18      	cmp	r3, #24
    6d50:	f47f acc1 	bne.w	66d6 <d_type+0x14e>
    6d54:	e485      	b.n	6662 <d_type+0xda>
    6d56:	1c73      	adds	r3, r6, #1
    6d58:	60e3      	str	r3, [r4, #12]
    6d5a:	4620      	mov	r0, r4
    6d5c:	f8d4 9014 	ldr.w	r9, [r4, #20]
    6d60:	f8d4 8020 	ldr.w	r8, [r4, #32]
    6d64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6d66:	f000 fbc1 	bl	74ec <d_template_args_1>
    6d6a:	68e3      	ldr	r3, [r4, #12]
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	2b49      	cmp	r3, #73	; 0x49
    6d70:	d006      	beq.n	6d80 <d_type+0x7f8>
    6d72:	60e6      	str	r6, [r4, #12]
    6d74:	f8c4 9014 	str.w	r9, [r4, #20]
    6d78:	f8c4 8020 	str.w	r8, [r4, #32]
    6d7c:	62e7      	str	r7, [r4, #44]	; 0x2c
    6d7e:	e4a8      	b.n	66d2 <d_type+0x14a>
    6d80:	2d00      	cmp	r5, #0
    6d82:	f43f ac6d 	beq.w	6660 <d_type+0xd8>
    6d86:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
    6d8a:	4299      	cmp	r1, r3
    6d8c:	f6bf ac68 	bge.w	6660 <d_type+0xd8>
    6d90:	69e2      	ldr	r2, [r4, #28]
    6d92:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    6d96:	3101      	adds	r1, #1
    6d98:	4603      	mov	r3, r0
    6d9a:	462a      	mov	r2, r5
    6d9c:	6221      	str	r1, [r4, #32]
    6d9e:	e5b9      	b.n	6914 <d_type+0x38c>
    6da0:	3203      	adds	r2, #3
    6da2:	2301      	movs	r3, #1
    6da4:	6b25      	ldr	r5, [r4, #48]	; 0x30
    6da6:	60e2      	str	r2, [r4, #12]
    6da8:	6323      	str	r3, [r4, #48]	; 0x30
    6daa:	4620      	mov	r0, r4
    6dac:	f000 fc66 	bl	767c <d_expression_1>
    6db0:	6325      	str	r5, [r4, #48]	; 0x30
    6db2:	4605      	mov	r5, r0
    6db4:	2800      	cmp	r0, #0
    6db6:	f47f aef5 	bne.w	6ba4 <d_type+0x61c>
    6dba:	e451      	b.n	6660 <d_type+0xd8>
    6dbc:	68c3      	ldr	r3, [r0, #12]
    6dbe:	deff      	udf	#255	; 0xff
    6dc0:	2300      	movs	r3, #0
    6dc2:	701b      	strb	r3, [r3, #0]
    6dc4:	deff      	udf	#255	; 0xff
    6dc6:	bf00      	nop
    6dc8:	200023c0 	.word	0x200023c0
    6dcc:	200023b8 	.word	0x200023b8
    6dd0:	20001b60 	.word	0x20001b60
    6dd4:	20001b24 	.word	0x20001b24
    6dd8:	20001b74 	.word	0x20001b74
    6ddc:	20001b88 	.word	0x20001b88
    6de0:	20001bb0 	.word	0x20001bb0
    6de4:	20001b9c 	.word	0x20001b9c
    6de8:	20001b4c 	.word	0x20001b4c
    6dec:	20001b38 	.word	0x20001b38
    6df0:	2300      	movs	r3, #0
    6df2:	68db      	ldr	r3, [r3, #12]
    6df4:	deff      	udf	#255	; 0xff
    6df6:	bf00      	nop

00006df8 <d_parmlist>:
    6df8:	b530      	push	{r4, r5, lr}
    6dfa:	68c2      	ldr	r2, [r0, #12]
    6dfc:	b083      	sub	sp, #12
    6dfe:	2300      	movs	r3, #0
    6e00:	9301      	str	r3, [sp, #4]
    6e02:	7813      	ldrb	r3, [r2, #0]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d034      	beq.n	6e72 <d_parmlist+0x7a>
    6e08:	4604      	mov	r4, r0
    6e0a:	ad01      	add	r5, sp, #4
    6e0c:	2b4f      	cmp	r3, #79	; 0x4f
    6e0e:	d00c      	beq.n	6e2a <d_parmlist+0x32>
    6e10:	d809      	bhi.n	6e26 <d_parmlist+0x2e>
    6e12:	2b2e      	cmp	r3, #46	; 0x2e
    6e14:	d001      	beq.n	6e1a <d_parmlist+0x22>
    6e16:	2b45      	cmp	r3, #69	; 0x45
    6e18:	d10a      	bne.n	6e30 <d_parmlist+0x38>
    6e1a:	9801      	ldr	r0, [sp, #4]
    6e1c:	b348      	cbz	r0, 6e72 <d_parmlist+0x7a>
    6e1e:	6903      	ldr	r3, [r0, #16]
    6e20:	b1cb      	cbz	r3, 6e56 <d_parmlist+0x5e>
    6e22:	b003      	add	sp, #12
    6e24:	bd30      	pop	{r4, r5, pc}
    6e26:	2b52      	cmp	r3, #82	; 0x52
    6e28:	d102      	bne.n	6e30 <d_parmlist+0x38>
    6e2a:	7853      	ldrb	r3, [r2, #1]
    6e2c:	2b45      	cmp	r3, #69	; 0x45
    6e2e:	d0f4      	beq.n	6e1a <d_parmlist+0x22>
    6e30:	4620      	mov	r0, r4
    6e32:	f7ff fba9 	bl	6588 <d_type>
    6e36:	4602      	mov	r2, r0
    6e38:	2300      	movs	r3, #0
    6e3a:	212e      	movs	r1, #46	; 0x2e
    6e3c:	4620      	mov	r0, r4
    6e3e:	b1c2      	cbz	r2, 6e72 <d_parmlist+0x7a>
    6e40:	f7fe ff50 	bl	5ce4 <d_make_comp>
    6e44:	6028      	str	r0, [r5, #0]
    6e46:	b1a0      	cbz	r0, 6e72 <d_parmlist+0x7a>
    6e48:	68e2      	ldr	r2, [r4, #12]
    6e4a:	7813      	ldrb	r3, [r2, #0]
    6e4c:	f100 0510 	add.w	r5, r0, #16
    6e50:	2b00      	cmp	r3, #0
    6e52:	d1db      	bne.n	6e0c <d_parmlist+0x14>
    6e54:	e7e1      	b.n	6e1a <d_parmlist+0x22>
    6e56:	68c2      	ldr	r2, [r0, #12]
    6e58:	7811      	ldrb	r1, [r2, #0]
    6e5a:	2927      	cmp	r1, #39	; 0x27
    6e5c:	d1e1      	bne.n	6e22 <d_parmlist+0x2a>
    6e5e:	68d2      	ldr	r2, [r2, #12]
    6e60:	7c11      	ldrb	r1, [r2, #16]
    6e62:	2909      	cmp	r1, #9
    6e64:	d1dd      	bne.n	6e22 <d_parmlist+0x2a>
    6e66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6e68:	6852      	ldr	r2, [r2, #4]
    6e6a:	1a89      	subs	r1, r1, r2
    6e6c:	62e1      	str	r1, [r4, #44]	; 0x2c
    6e6e:	60c3      	str	r3, [r0, #12]
    6e70:	e7d7      	b.n	6e22 <d_parmlist+0x2a>
    6e72:	2000      	movs	r0, #0
    6e74:	b003      	add	sp, #12
    6e76:	bd30      	pop	{r4, r5, pc}

00006e78 <d_bare_function_type>:
    6e78:	b570      	push	{r4, r5, r6, lr}
    6e7a:	68c3      	ldr	r3, [r0, #12]
    6e7c:	781a      	ldrb	r2, [r3, #0]
    6e7e:	2a4a      	cmp	r2, #74	; 0x4a
    6e80:	4605      	mov	r5, r0
    6e82:	d01a      	beq.n	6eba <d_bare_function_type+0x42>
    6e84:	b181      	cbz	r1, 6ea8 <d_bare_function_type+0x30>
    6e86:	4628      	mov	r0, r5
    6e88:	f7ff fb7e 	bl	6588 <d_type>
    6e8c:	4604      	mov	r4, r0
    6e8e:	b190      	cbz	r0, 6eb6 <d_bare_function_type+0x3e>
    6e90:	4628      	mov	r0, r5
    6e92:	f7ff ffb1 	bl	6df8 <d_parmlist>
    6e96:	4603      	mov	r3, r0
    6e98:	b168      	cbz	r0, 6eb6 <d_bare_function_type+0x3e>
    6e9a:	4622      	mov	r2, r4
    6e9c:	4628      	mov	r0, r5
    6e9e:	2129      	movs	r1, #41	; 0x29
    6ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ea4:	f7fe bf1e 	b.w	5ce4 <d_make_comp>
    6ea8:	4628      	mov	r0, r5
    6eaa:	460c      	mov	r4, r1
    6eac:	f7ff ffa4 	bl	6df8 <d_parmlist>
    6eb0:	4603      	mov	r3, r0
    6eb2:	2800      	cmp	r0, #0
    6eb4:	d1f1      	bne.n	6e9a <d_bare_function_type+0x22>
    6eb6:	2000      	movs	r0, #0
    6eb8:	bd70      	pop	{r4, r5, r6, pc}
    6eba:	3301      	adds	r3, #1
    6ebc:	60c3      	str	r3, [r0, #12]
    6ebe:	e7e2      	b.n	6e86 <d_bare_function_type+0xe>

00006ec0 <d_function_type>:
    6ec0:	b510      	push	{r4, lr}
    6ec2:	4604      	mov	r4, r0
    6ec4:	6880      	ldr	r0, [r0, #8]
    6ec6:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
    6eca:	d10b      	bne.n	6ee4 <d_function_type+0x24>
    6ecc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6ece:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    6ed2:	d806      	bhi.n	6ee2 <d_function_type+0x22>
    6ed4:	1c51      	adds	r1, r2, #1
    6ed6:	68e3      	ldr	r3, [r4, #12]
    6ed8:	63e1      	str	r1, [r4, #60]	; 0x3c
    6eda:	7819      	ldrb	r1, [r3, #0]
    6edc:	2946      	cmp	r1, #70	; 0x46
    6ede:	d007      	beq.n	6ef0 <d_function_type+0x30>
    6ee0:	63e2      	str	r2, [r4, #60]	; 0x3c
    6ee2:	bd10      	pop	{r4, pc}
    6ee4:	68e3      	ldr	r3, [r4, #12]
    6ee6:	781a      	ldrb	r2, [r3, #0]
    6ee8:	2a46      	cmp	r2, #70	; 0x46
    6eea:	d001      	beq.n	6ef0 <d_function_type+0x30>
    6eec:	2000      	movs	r0, #0
    6eee:	bd10      	pop	{r4, pc}
    6ef0:	1c5a      	adds	r2, r3, #1
    6ef2:	60e2      	str	r2, [r4, #12]
    6ef4:	785a      	ldrb	r2, [r3, #1]
    6ef6:	2a59      	cmp	r2, #89	; 0x59
    6ef8:	bf04      	itt	eq
    6efa:	3302      	addeq	r3, #2
    6efc:	60e3      	streq	r3, [r4, #12]
    6efe:	2101      	movs	r1, #1
    6f00:	4620      	mov	r0, r4
    6f02:	f7ff ffb9 	bl	6e78 <d_bare_function_type>
    6f06:	4601      	mov	r1, r0
    6f08:	4620      	mov	r0, r4
    6f0a:	f7fe ffc1 	bl	5e90 <d_ref_qualifier>
    6f0e:	68e3      	ldr	r3, [r4, #12]
    6f10:	781a      	ldrb	r2, [r3, #0]
    6f12:	2a45      	cmp	r2, #69	; 0x45
    6f14:	bf04      	itt	eq
    6f16:	3301      	addeq	r3, #1
    6f18:	60e3      	streq	r3, [r4, #12]
    6f1a:	68a3      	ldr	r3, [r4, #8]
    6f1c:	bf18      	it	ne
    6f1e:	2000      	movne	r0, #0
    6f20:	035b      	lsls	r3, r3, #13
    6f22:	d4de      	bmi.n	6ee2 <d_function_type+0x22>
    6f24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6f26:	3a01      	subs	r2, #1
    6f28:	e7da      	b.n	6ee0 <d_function_type+0x20>
    6f2a:	bf00      	nop

00006f2c <d_operator_name>:
    6f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f2e:	68c3      	ldr	r3, [r0, #12]
    6f30:	781f      	ldrb	r7, [r3, #0]
    6f32:	4606      	mov	r6, r0
    6f34:	bb77      	cbnz	r7, 6f94 <d_operator_name+0x68>
    6f36:	f04f 0e00 	mov.w	lr, #0
    6f3a:	4d3d      	ldr	r5, [pc, #244]	; (7030 <d_operator_name+0x104>)
    6f3c:	2148      	movs	r1, #72	; 0x48
    6f3e:	2200      	movs	r2, #0
    6f40:	1a8b      	subs	r3, r1, r2
    6f42:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    6f46:	eb02 0363 	add.w	r3, r2, r3, asr #1
    6f4a:	0118      	lsls	r0, r3, #4
    6f4c:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
    6f50:	582c      	ldr	r4, [r5, r0]
    6f52:	7820      	ldrb	r0, [r4, #0]
    6f54:	42b8      	cmp	r0, r7
    6f56:	d006      	beq.n	6f66 <d_operator_name+0x3a>
    6f58:	bf94      	ite	ls
    6f5a:	1c5a      	addls	r2, r3, #1
    6f5c:	4619      	movhi	r1, r3
    6f5e:	428a      	cmp	r2, r1
    6f60:	d1ee      	bne.n	6f40 <d_operator_name+0x14>
    6f62:	2000      	movs	r0, #0
    6f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f66:	7860      	ldrb	r0, [r4, #1]
    6f68:	4570      	cmp	r0, lr
    6f6a:	d1f5      	bne.n	6f58 <d_operator_name+0x2c>
    6f6c:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
    6f70:	4293      	cmp	r3, r2
    6f72:	daf6      	bge.n	6f62 <d_operator_name+0x36>
    6f74:	6932      	ldr	r2, [r6, #16]
    6f76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6f7a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    6f7e:	3301      	adds	r3, #1
    6f80:	2400      	movs	r4, #0
    6f82:	e9c0 4401 	strd	r4, r4, [r0, #4]
    6f86:	6173      	str	r3, [r6, #20]
    6f88:	2332      	movs	r3, #50	; 0x32
    6f8a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    6f8e:	f8c0 c00c 	str.w	ip, [r0, #12]
    6f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f94:	1c5a      	adds	r2, r3, #1
    6f96:	60c2      	str	r2, [r0, #12]
    6f98:	f893 e001 	ldrb.w	lr, [r3, #1]
    6f9c:	781f      	ldrb	r7, [r3, #0]
    6f9e:	f1be 0f00 	cmp.w	lr, #0
    6fa2:	d102      	bne.n	6faa <d_operator_name+0x7e>
    6fa4:	2f76      	cmp	r7, #118	; 0x76
    6fa6:	d0c8      	beq.n	6f3a <d_operator_name+0xe>
    6fa8:	e7c5      	b.n	6f36 <d_operator_name+0xa>
    6faa:	1c9a      	adds	r2, r3, #2
    6fac:	60c2      	str	r2, [r0, #12]
    6fae:	2f76      	cmp	r7, #118	; 0x76
    6fb0:	f893 e001 	ldrb.w	lr, [r3, #1]
    6fb4:	d11f      	bne.n	6ff6 <d_operator_name+0xca>
    6fb6:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
    6fba:	b2e3      	uxtb	r3, r4
    6fbc:	2b09      	cmp	r3, #9
    6fbe:	d8bc      	bhi.n	6f3a <d_operator_name+0xe>
    6fc0:	f7ff f9a8 	bl	6314 <d_source_name>
    6fc4:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
    6fc8:	428b      	cmp	r3, r1
    6fca:	4602      	mov	r2, r0
    6fcc:	dac9      	bge.n	6f62 <d_operator_name+0x36>
    6fce:	6937      	ldr	r7, [r6, #16]
    6fd0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6fd4:	eb07 0081 	add.w	r0, r7, r1, lsl #2
    6fd8:	3301      	adds	r3, #1
    6fda:	2500      	movs	r5, #0
    6fdc:	e9c0 5501 	strd	r5, r5, [r0, #4]
    6fe0:	0089      	lsls	r1, r1, #2
    6fe2:	6173      	str	r3, [r6, #20]
    6fe4:	2a00      	cmp	r2, #0
    6fe6:	d0bc      	beq.n	6f62 <d_operator_name+0x36>
    6fe8:	2333      	movs	r3, #51	; 0x33
    6fea:	e9c0 5501 	strd	r5, r5, [r0, #4]
    6fee:	547b      	strb	r3, [r7, r1]
    6ff0:	e9c0 4203 	strd	r4, r2, [r0, #12]
    6ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ff6:	2f63      	cmp	r7, #99	; 0x63
    6ff8:	d19f      	bne.n	6f3a <d_operator_name+0xe>
    6ffa:	f1be 0f76 	cmp.w	lr, #118	; 0x76
    6ffe:	d19c      	bne.n	6f3a <d_operator_name+0xe>
    7000:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
    7004:	fab3 f383 	clz	r3, r3
    7008:	095b      	lsrs	r3, r3, #5
    700a:	6343      	str	r3, [r0, #52]	; 0x34
    700c:	f7ff fabc 	bl	6588 <d_type>
    7010:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7012:	4602      	mov	r2, r0
    7014:	b133      	cbz	r3, 7024 <d_operator_name+0xf8>
    7016:	2300      	movs	r3, #0
    7018:	2135      	movs	r1, #53	; 0x35
    701a:	4630      	mov	r0, r6
    701c:	f7fe fe62 	bl	5ce4 <d_make_comp>
    7020:	6374      	str	r4, [r6, #52]	; 0x34
    7022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7024:	2134      	movs	r1, #52	; 0x34
    7026:	4630      	mov	r0, r6
    7028:	f7fe fe5c 	bl	5ce4 <d_make_comp>
    702c:	e7f8      	b.n	7020 <d_operator_name+0xf4>
    702e:	bf00      	nop
    7030:	20001bc4 	.word	0x20001bc4

00007034 <d_unqualified_name>:
    7034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7036:	68c3      	ldr	r3, [r0, #12]
    7038:	781a      	ldrb	r2, [r3, #0]
    703a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    703e:	2909      	cmp	r1, #9
    7040:	4604      	mov	r4, r0
    7042:	d965      	bls.n	7110 <d_unqualified_name+0xdc>
    7044:	2a55      	cmp	r2, #85	; 0x55
    7046:	d06c      	beq.n	7122 <d_unqualified_name+0xee>
    7048:	d838      	bhi.n	70bc <d_unqualified_name+0x88>
    704a:	2a44      	cmp	r2, #68	; 0x44
    704c:	d90f      	bls.n	706e <d_unqualified_name+0x3a>
    704e:	2a4c      	cmp	r2, #76	; 0x4c
    7050:	d10a      	bne.n	7068 <d_unqualified_name+0x34>
    7052:	3301      	adds	r3, #1
    7054:	60c3      	str	r3, [r0, #12]
    7056:	f7ff f95d 	bl	6314 <d_source_name>
    705a:	4605      	mov	r5, r0
    705c:	b120      	cbz	r0, 7068 <d_unqualified_name+0x34>
    705e:	4620      	mov	r0, r4
    7060:	f7fe ffaa 	bl	5fb8 <d_discriminator>
    7064:	2800      	cmp	r0, #0
    7066:	d13b      	bne.n	70e0 <d_unqualified_name+0xac>
    7068:	2500      	movs	r5, #0
    706a:	4628      	mov	r0, r5
    706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    706e:	2a42      	cmp	r2, #66	; 0x42
    7070:	d9fa      	bls.n	7068 <d_unqualified_name+0x34>
    7072:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7074:	b141      	cbz	r1, 7088 <d_unqualified_name+0x54>
    7076:	7808      	ldrb	r0, [r1, #0]
    7078:	2800      	cmp	r0, #0
    707a:	f040 8091 	bne.w	71a0 <d_unqualified_name+0x16c>
    707e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7080:	6908      	ldr	r0, [r1, #16]
    7082:	4402      	add	r2, r0
    7084:	62e2      	str	r2, [r4, #44]	; 0x2c
    7086:	781a      	ldrb	r2, [r3, #0]
    7088:	2a43      	cmp	r2, #67	; 0x43
    708a:	f000 80c8 	beq.w	721e <d_unqualified_name+0x1ea>
    708e:	2a44      	cmp	r2, #68	; 0x44
    7090:	f040 8084 	bne.w	719c <d_unqualified_name+0x168>
    7094:	785a      	ldrb	r2, [r3, #1]
    7096:	3a30      	subs	r2, #48	; 0x30
    7098:	2a05      	cmp	r2, #5
    709a:	d8e5      	bhi.n	7068 <d_unqualified_name+0x34>
    709c:	a001      	add	r0, pc, #4	; (adr r0, 70a4 <d_unqualified_name+0x70>)
    709e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    70a2:	bf00      	nop
    70a4:	000071af 	.word	0x000071af
    70a8:	00007207 	.word	0x00007207
    70ac:	000071f5 	.word	0x000071f5
    70b0:	00007069 	.word	0x00007069
    70b4:	00007201 	.word	0x00007201
    70b8:	000071fb 	.word	0x000071fb
    70bc:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    70c0:	2919      	cmp	r1, #25
    70c2:	d8d1      	bhi.n	7068 <d_unqualified_name+0x34>
    70c4:	2a6f      	cmp	r2, #111	; 0x6f
    70c6:	6b05      	ldr	r5, [r0, #48]	; 0x30
    70c8:	f000 80a0 	beq.w	720c <d_unqualified_name+0x1d8>
    70cc:	4620      	mov	r0, r4
    70ce:	f7ff ff2d 	bl	6f2c <d_operator_name>
    70d2:	6325      	str	r5, [r4, #48]	; 0x30
    70d4:	4605      	mov	r5, r0
    70d6:	b118      	cbz	r0, 70e0 <d_unqualified_name+0xac>
    70d8:	7803      	ldrb	r3, [r0, #0]
    70da:	2b32      	cmp	r3, #50	; 0x32
    70dc:	f000 80c6 	beq.w	726c <d_unqualified_name+0x238>
    70e0:	68e3      	ldr	r3, [r4, #12]
    70e2:	781a      	ldrb	r2, [r3, #0]
    70e4:	2a42      	cmp	r2, #66	; 0x42
    70e6:	d1c0      	bne.n	706a <d_unqualified_name+0x36>
    70e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    70ea:	3301      	adds	r3, #1
    70ec:	60e3      	str	r3, [r4, #12]
    70ee:	4620      	mov	r0, r4
    70f0:	f7ff f910 	bl	6314 <d_source_name>
    70f4:	462a      	mov	r2, r5
    70f6:	4603      	mov	r3, r0
    70f8:	214d      	movs	r1, #77	; 0x4d
    70fa:	4620      	mov	r0, r4
    70fc:	f7fe fdf2 	bl	5ce4 <d_make_comp>
    7100:	68e3      	ldr	r3, [r4, #12]
    7102:	781a      	ldrb	r2, [r3, #0]
    7104:	2a42      	cmp	r2, #66	; 0x42
    7106:	4605      	mov	r5, r0
    7108:	d0ef      	beq.n	70ea <d_unqualified_name+0xb6>
    710a:	62a6      	str	r6, [r4, #40]	; 0x28
    710c:	4628      	mov	r0, r5
    710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7110:	f7ff f900 	bl	6314 <d_source_name>
    7114:	68e3      	ldr	r3, [r4, #12]
    7116:	781a      	ldrb	r2, [r3, #0]
    7118:	4605      	mov	r5, r0
    711a:	2a42      	cmp	r2, #66	; 0x42
    711c:	d0e4      	beq.n	70e8 <d_unqualified_name+0xb4>
    711e:	4628      	mov	r0, r5
    7120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7122:	785a      	ldrb	r2, [r3, #1]
    7124:	2a6c      	cmp	r2, #108	; 0x6c
    7126:	f000 80c1 	beq.w	72ac <d_unqualified_name+0x278>
    712a:	2a74      	cmp	r2, #116	; 0x74
    712c:	d19c      	bne.n	7068 <d_unqualified_name+0x34>
    712e:	1c59      	adds	r1, r3, #1
    7130:	60c1      	str	r1, [r0, #12]
    7132:	785a      	ldrb	r2, [r3, #1]
    7134:	2a74      	cmp	r2, #116	; 0x74
    7136:	d137      	bne.n	71a8 <d_unqualified_name+0x174>
    7138:	1c9a      	adds	r2, r3, #2
    713a:	60c2      	str	r2, [r0, #12]
    713c:	789a      	ldrb	r2, [r3, #2]
    713e:	2a5f      	cmp	r2, #95	; 0x5f
    7140:	f000 8108 	beq.w	7354 <d_unqualified_name+0x320>
    7144:	2a6e      	cmp	r2, #110	; 0x6e
    7146:	d08f      	beq.n	7068 <d_unqualified_name+0x34>
    7148:	f7fe fe44 	bl	5dd4 <d_number>
    714c:	3001      	adds	r0, #1
    714e:	68e3      	ldr	r3, [r4, #12]
    7150:	f100 80fd 	bmi.w	734e <d_unqualified_name+0x31a>
    7154:	781a      	ldrb	r2, [r3, #0]
    7156:	2a5f      	cmp	r2, #95	; 0x5f
    7158:	d120      	bne.n	719c <d_unqualified_name+0x168>
    715a:	3301      	adds	r3, #1
    715c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    7160:	428a      	cmp	r2, r1
    7162:	60e3      	str	r3, [r4, #12]
    7164:	f280 8100 	bge.w	7368 <d_unqualified_name+0x334>
    7168:	6926      	ldr	r6, [r4, #16]
    716a:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    716e:	eb06 0587 	add.w	r5, r6, r7, lsl #2
    7172:	3201      	adds	r2, #1
    7174:	2100      	movs	r1, #0
    7176:	e9c5 1101 	strd	r1, r1, [r5, #4]
    717a:	6162      	str	r2, [r4, #20]
    717c:	2249      	movs	r2, #73	; 0x49
    717e:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
    7182:	60e8      	str	r0, [r5, #12]
    7184:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
    7188:	4282      	cmp	r2, r0
    718a:	f280 80ea 	bge.w	7362 <d_unqualified_name+0x32e>
    718e:	69e1      	ldr	r1, [r4, #28]
    7190:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
    7194:	3201      	adds	r2, #1
    7196:	6222      	str	r2, [r4, #32]
    7198:	781a      	ldrb	r2, [r3, #0]
    719a:	e7be      	b.n	711a <d_unqualified_name+0xe6>
    719c:	2500      	movs	r5, #0
    719e:	e7bc      	b.n	711a <d_unqualified_name+0xe6>
    71a0:	2818      	cmp	r0, #24
    71a2:	f47f af71 	bne.w	7088 <d_unqualified_name+0x54>
    71a6:	e76a      	b.n	707e <d_unqualified_name+0x4a>
    71a8:	460b      	mov	r3, r1
    71aa:	2500      	movs	r5, #0
    71ac:	e7b5      	b.n	711a <d_unqualified_name+0xe6>
    71ae:	f04f 0e01 	mov.w	lr, #1
    71b2:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    71b6:	1c9f      	adds	r7, r3, #2
    71b8:	4282      	cmp	r2, r0
    71ba:	60e7      	str	r7, [r4, #12]
    71bc:	f280 80c2 	bge.w	7344 <d_unqualified_name+0x310>
    71c0:	f8d4 c010 	ldr.w	ip, [r4, #16]
    71c4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    71c8:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
    71cc:	3201      	adds	r2, #1
    71ce:	2600      	movs	r6, #0
    71d0:	e9c5 6601 	strd	r6, r6, [r5, #4]
    71d4:	0080      	lsls	r0, r0, #2
    71d6:	6162      	str	r2, [r4, #20]
    71d8:	2900      	cmp	r1, #0
    71da:	f000 80b3 	beq.w	7344 <d_unqualified_name+0x310>
    71de:	e9c5 6601 	strd	r6, r6, [r5, #4]
    71e2:	2208      	movs	r2, #8
    71e4:	f80c 2000 	strb.w	r2, [ip, r0]
    71e8:	f885 e00c 	strb.w	lr, [r5, #12]
    71ec:	6129      	str	r1, [r5, #16]
    71ee:	789a      	ldrb	r2, [r3, #2]
    71f0:	463b      	mov	r3, r7
    71f2:	e792      	b.n	711a <d_unqualified_name+0xe6>
    71f4:	f04f 0e03 	mov.w	lr, #3
    71f8:	e7db      	b.n	71b2 <d_unqualified_name+0x17e>
    71fa:	f04f 0e05 	mov.w	lr, #5
    71fe:	e7d8      	b.n	71b2 <d_unqualified_name+0x17e>
    7200:	f04f 0e04 	mov.w	lr, #4
    7204:	e7d5      	b.n	71b2 <d_unqualified_name+0x17e>
    7206:	f04f 0e02 	mov.w	lr, #2
    720a:	e7d2      	b.n	71b2 <d_unqualified_name+0x17e>
    720c:	785a      	ldrb	r2, [r3, #1]
    720e:	2a6e      	cmp	r2, #110	; 0x6e
    7210:	f47f af5c 	bne.w	70cc <d_unqualified_name+0x98>
    7214:	3302      	adds	r3, #2
    7216:	2200      	movs	r2, #0
    7218:	60c3      	str	r3, [r0, #12]
    721a:	6302      	str	r2, [r0, #48]	; 0x30
    721c:	e756      	b.n	70cc <d_unqualified_name+0x98>
    721e:	785a      	ldrb	r2, [r3, #1]
    7220:	2a49      	cmp	r2, #73	; 0x49
    7222:	d07f      	beq.n	7324 <d_unqualified_name+0x2f0>
    7224:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
    7228:	2804      	cmp	r0, #4
    722a:	f63f af1d 	bhi.w	7068 <d_unqualified_name+0x34>
    722e:	3a30      	subs	r2, #48	; 0x30
    7230:	3302      	adds	r3, #2
    7232:	b2d6      	uxtb	r6, r2
    7234:	60e3      	str	r3, [r4, #12]
    7236:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    723a:	4293      	cmp	r3, r2
    723c:	f280 8086 	bge.w	734c <d_unqualified_name+0x318>
    7240:	6927      	ldr	r7, [r4, #16]
    7242:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    7246:	eb07 0582 	add.w	r5, r7, r2, lsl #2
    724a:	3301      	adds	r3, #1
    724c:	2000      	movs	r0, #0
    724e:	e9c5 0001 	strd	r0, r0, [r5, #4]
    7252:	0092      	lsls	r2, r2, #2
    7254:	6163      	str	r3, [r4, #20]
    7256:	2900      	cmp	r1, #0
    7258:	d078      	beq.n	734c <d_unqualified_name+0x318>
    725a:	2307      	movs	r3, #7
    725c:	e9c5 0001 	strd	r0, r0, [r5, #4]
    7260:	54bb      	strb	r3, [r7, r2]
    7262:	68e3      	ldr	r3, [r4, #12]
    7264:	732e      	strb	r6, [r5, #12]
    7266:	6129      	str	r1, [r5, #16]
    7268:	781a      	ldrb	r2, [r3, #0]
    726a:	e756      	b.n	711a <d_unqualified_name+0xe6>
    726c:	68c2      	ldr	r2, [r0, #12]
    726e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7270:	6891      	ldr	r1, [r2, #8]
    7272:	6812      	ldr	r2, [r2, #0]
    7274:	3307      	adds	r3, #7
    7276:	440b      	add	r3, r1
    7278:	62e3      	str	r3, [r4, #44]	; 0x2c
    727a:	7813      	ldrb	r3, [r2, #0]
    727c:	2b6c      	cmp	r3, #108	; 0x6c
    727e:	f47f af2f 	bne.w	70e0 <d_unqualified_name+0xac>
    7282:	7853      	ldrb	r3, [r2, #1]
    7284:	2b69      	cmp	r3, #105	; 0x69
    7286:	f47f af2b 	bne.w	70e0 <d_unqualified_name+0xac>
    728a:	7893      	ldrb	r3, [r2, #2]
    728c:	2b00      	cmp	r3, #0
    728e:	f47f af27 	bne.w	70e0 <d_unqualified_name+0xac>
    7292:	4620      	mov	r0, r4
    7294:	f7ff f83e 	bl	6314 <d_source_name>
    7298:	462a      	mov	r2, r5
    729a:	4603      	mov	r3, r0
    729c:	2137      	movs	r1, #55	; 0x37
    729e:	4620      	mov	r0, r4
    72a0:	f7fe fd20 	bl	5ce4 <d_make_comp>
    72a4:	68e3      	ldr	r3, [r4, #12]
    72a6:	4605      	mov	r5, r0
    72a8:	781a      	ldrb	r2, [r3, #0]
    72aa:	e736      	b.n	711a <d_unqualified_name+0xe6>
    72ac:	1c59      	adds	r1, r3, #1
    72ae:	60c1      	str	r1, [r0, #12]
    72b0:	785a      	ldrb	r2, [r3, #1]
    72b2:	2a6c      	cmp	r2, #108	; 0x6c
    72b4:	f47f af78 	bne.w	71a8 <d_unqualified_name+0x174>
    72b8:	3302      	adds	r3, #2
    72ba:	60c3      	str	r3, [r0, #12]
    72bc:	f7ff fd9c 	bl	6df8 <d_parmlist>
    72c0:	68e3      	ldr	r3, [r4, #12]
    72c2:	4606      	mov	r6, r0
    72c4:	2800      	cmp	r0, #0
    72c6:	d042      	beq.n	734e <d_unqualified_name+0x31a>
    72c8:	781a      	ldrb	r2, [r3, #0]
    72ca:	2a45      	cmp	r2, #69	; 0x45
    72cc:	f47f af66 	bne.w	719c <d_unqualified_name+0x168>
    72d0:	1c5a      	adds	r2, r3, #1
    72d2:	60e2      	str	r2, [r4, #12]
    72d4:	785a      	ldrb	r2, [r3, #1]
    72d6:	2a5f      	cmp	r2, #95	; 0x5f
    72d8:	d049      	beq.n	736e <d_unqualified_name+0x33a>
    72da:	2a6e      	cmp	r2, #110	; 0x6e
    72dc:	f43f aec4 	beq.w	7068 <d_unqualified_name+0x34>
    72e0:	4620      	mov	r0, r4
    72e2:	f7fe fd77 	bl	5dd4 <d_number>
    72e6:	3001      	adds	r0, #1
    72e8:	68e3      	ldr	r3, [r4, #12]
    72ea:	d430      	bmi.n	734e <d_unqualified_name+0x31a>
    72ec:	781a      	ldrb	r2, [r3, #0]
    72ee:	2a5f      	cmp	r2, #95	; 0x5f
    72f0:	f47f af54 	bne.w	719c <d_unqualified_name+0x168>
    72f4:	3301      	adds	r3, #1
    72f6:	6962      	ldr	r2, [r4, #20]
    72f8:	69a1      	ldr	r1, [r4, #24]
    72fa:	60e3      	str	r3, [r4, #12]
    72fc:	428a      	cmp	r2, r1
    72fe:	da33      	bge.n	7368 <d_unqualified_name+0x334>
    7300:	6921      	ldr	r1, [r4, #16]
    7302:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    7306:	eb01 0587 	add.w	r5, r1, r7, lsl #2
    730a:	3201      	adds	r2, #1
    730c:	f04f 0c00 	mov.w	ip, #0
    7310:	e9c5 cc01 	strd	ip, ip, [r5, #4]
    7314:	6162      	str	r2, [r4, #20]
    7316:	2247      	movs	r2, #71	; 0x47
    7318:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
    731c:	e9c5 6003 	strd	r6, r0, [r5, #12]
    7320:	781a      	ldrb	r2, [r3, #0]
    7322:	e6fa      	b.n	711a <d_unqualified_name+0xe6>
    7324:	1c59      	adds	r1, r3, #1
    7326:	60e1      	str	r1, [r4, #12]
    7328:	789a      	ldrb	r2, [r3, #2]
    732a:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
    732e:	2804      	cmp	r0, #4
    7330:	d813      	bhi.n	735a <d_unqualified_name+0x326>
    7332:	3303      	adds	r3, #3
    7334:	3a30      	subs	r2, #48	; 0x30
    7336:	60e3      	str	r3, [r4, #12]
    7338:	4620      	mov	r0, r4
    733a:	b2d6      	uxtb	r6, r2
    733c:	f7ff f924 	bl	6588 <d_type>
    7340:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7342:	e778      	b.n	7236 <d_unqualified_name+0x202>
    7344:	789a      	ldrb	r2, [r3, #2]
    7346:	2500      	movs	r5, #0
    7348:	463b      	mov	r3, r7
    734a:	e6e6      	b.n	711a <d_unqualified_name+0xe6>
    734c:	68e3      	ldr	r3, [r4, #12]
    734e:	781a      	ldrb	r2, [r3, #0]
    7350:	2500      	movs	r5, #0
    7352:	e6e2      	b.n	711a <d_unqualified_name+0xe6>
    7354:	3303      	adds	r3, #3
    7356:	2000      	movs	r0, #0
    7358:	e700      	b.n	715c <d_unqualified_name+0x128>
    735a:	785a      	ldrb	r2, [r3, #1]
    735c:	2500      	movs	r5, #0
    735e:	460b      	mov	r3, r1
    7360:	e6db      	b.n	711a <d_unqualified_name+0xe6>
    7362:	781a      	ldrb	r2, [r3, #0]
    7364:	460d      	mov	r5, r1
    7366:	e6d8      	b.n	711a <d_unqualified_name+0xe6>
    7368:	781a      	ldrb	r2, [r3, #0]
    736a:	2500      	movs	r5, #0
    736c:	e6d5      	b.n	711a <d_unqualified_name+0xe6>
    736e:	3302      	adds	r3, #2
    7370:	2000      	movs	r0, #0
    7372:	e7c0      	b.n	72f6 <d_unqualified_name+0x2c2>

00007374 <d_expr_primary>:
    7374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7376:	68c2      	ldr	r2, [r0, #12]
    7378:	7813      	ldrb	r3, [r2, #0]
    737a:	2b4c      	cmp	r3, #76	; 0x4c
    737c:	d132      	bne.n	73e4 <d_expr_primary+0x70>
    737e:	1c53      	adds	r3, r2, #1
    7380:	60c3      	str	r3, [r0, #12]
    7382:	7851      	ldrb	r1, [r2, #1]
    7384:	295f      	cmp	r1, #95	; 0x5f
    7386:	4604      	mov	r4, r0
    7388:	d051      	beq.n	742e <d_expr_primary+0xba>
    738a:	295a      	cmp	r1, #90	; 0x5a
    738c:	d113      	bne.n	73b6 <d_expr_primary+0x42>
    738e:	1c5a      	adds	r2, r3, #1
    7390:	60e2      	str	r2, [r4, #12]
    7392:	785b      	ldrb	r3, [r3, #1]
    7394:	2b47      	cmp	r3, #71	; 0x47
    7396:	d043      	beq.n	7420 <d_expr_primary+0xac>
    7398:	2b54      	cmp	r3, #84	; 0x54
    739a:	d041      	beq.n	7420 <d_expr_primary+0xac>
    739c:	2100      	movs	r1, #0
    739e:	4620      	mov	r0, r4
    73a0:	f001 f84e 	bl	8440 <d_encoding.part.0>
    73a4:	68e3      	ldr	r3, [r4, #12]
    73a6:	781a      	ldrb	r2, [r3, #0]
    73a8:	4606      	mov	r6, r0
    73aa:	2a45      	cmp	r2, #69	; 0x45
    73ac:	d11a      	bne.n	73e4 <d_expr_primary+0x70>
    73ae:	3301      	adds	r3, #1
    73b0:	60e3      	str	r3, [r4, #12]
    73b2:	4630      	mov	r0, r6
    73b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73b6:	f7ff f8e7 	bl	6588 <d_type>
    73ba:	4606      	mov	r6, r0
    73bc:	b190      	cbz	r0, 73e4 <d_expr_primary+0x70>
    73be:	7803      	ldrb	r3, [r0, #0]
    73c0:	2b27      	cmp	r3, #39	; 0x27
    73c2:	d012      	beq.n	73ea <d_expr_primary+0x76>
    73c4:	68e2      	ldr	r2, [r4, #12]
    73c6:	7815      	ldrb	r5, [r2, #0]
    73c8:	2d6e      	cmp	r5, #110	; 0x6e
    73ca:	d023      	beq.n	7414 <d_expr_primary+0xa0>
    73cc:	213d      	movs	r1, #61	; 0x3d
    73ce:	2d45      	cmp	r5, #69	; 0x45
    73d0:	d059      	beq.n	7486 <d_expr_primary+0x112>
    73d2:	4613      	mov	r3, r2
    73d4:	e003      	b.n	73de <d_expr_primary+0x6a>
    73d6:	60e3      	str	r3, [r4, #12]
    73d8:	781d      	ldrb	r5, [r3, #0]
    73da:	2d45      	cmp	r5, #69	; 0x45
    73dc:	d02f      	beq.n	743e <d_expr_primary+0xca>
    73de:	3301      	adds	r3, #1
    73e0:	2d00      	cmp	r5, #0
    73e2:	d1f8      	bne.n	73d6 <d_expr_primary+0x62>
    73e4:	2600      	movs	r6, #0
    73e6:	4630      	mov	r0, r6
    73e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73ea:	68c3      	ldr	r3, [r0, #12]
    73ec:	7c1a      	ldrb	r2, [r3, #16]
    73ee:	b11a      	cbz	r2, 73f8 <d_expr_primary+0x84>
    73f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    73f2:	6859      	ldr	r1, [r3, #4]
    73f4:	1a52      	subs	r2, r2, r1
    73f6:	62e2      	str	r2, [r4, #44]	; 0x2c
    73f8:	4925      	ldr	r1, [pc, #148]	; (7490 <d_expr_primary+0x11c>)
    73fa:	6818      	ldr	r0, [r3, #0]
    73fc:	f006 ff34 	bl	e268 <strcmp>
    7400:	2800      	cmp	r0, #0
    7402:	d1df      	bne.n	73c4 <d_expr_primary+0x50>
    7404:	68e2      	ldr	r2, [r4, #12]
    7406:	7815      	ldrb	r5, [r2, #0]
    7408:	2d45      	cmp	r5, #69	; 0x45
    740a:	d03e      	beq.n	748a <d_expr_primary+0x116>
    740c:	2d6e      	cmp	r5, #110	; 0x6e
    740e:	d001      	beq.n	7414 <d_expr_primary+0xa0>
    7410:	213d      	movs	r1, #61	; 0x3d
    7412:	e7de      	b.n	73d2 <d_expr_primary+0x5e>
    7414:	1c53      	adds	r3, r2, #1
    7416:	60e3      	str	r3, [r4, #12]
    7418:	7855      	ldrb	r5, [r2, #1]
    741a:	213e      	movs	r1, #62	; 0x3e
    741c:	461a      	mov	r2, r3
    741e:	e7d6      	b.n	73ce <d_expr_primary+0x5a>
    7420:	4620      	mov	r0, r4
    7422:	f000 fc85 	bl	7d30 <d_special_name>
    7426:	68e3      	ldr	r3, [r4, #12]
    7428:	4606      	mov	r6, r0
    742a:	781a      	ldrb	r2, [r3, #0]
    742c:	e7bd      	b.n	73aa <d_expr_primary+0x36>
    742e:	1c93      	adds	r3, r2, #2
    7430:	60c3      	str	r3, [r0, #12]
    7432:	7892      	ldrb	r2, [r2, #2]
    7434:	2a5a      	cmp	r2, #90	; 0x5a
    7436:	bf18      	it	ne
    7438:	2600      	movne	r6, #0
    743a:	d1b6      	bne.n	73aa <d_expr_primary+0x36>
    743c:	e7a7      	b.n	738e <d_expr_primary+0x1a>
    743e:	1a9d      	subs	r5, r3, r2
    7440:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    7444:	4298      	cmp	r0, r3
    7446:	da1c      	bge.n	7482 <d_expr_primary+0x10e>
    7448:	f8d4 e010 	ldr.w	lr, [r4, #16]
    744c:	eb00 0780 	add.w	r7, r0, r0, lsl #2
    7450:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
    7454:	ea4f 0c87 	mov.w	ip, r7, lsl #2
    7458:	2700      	movs	r7, #0
    745a:	3001      	adds	r0, #1
    745c:	42bd      	cmp	r5, r7
    745e:	e9c3 7701 	strd	r7, r7, [r3, #4]
    7462:	6160      	str	r0, [r4, #20]
    7464:	dd0d      	ble.n	7482 <d_expr_primary+0x10e>
    7466:	e9c3 7701 	strd	r7, r7, [r3, #4]
    746a:	f80e 700c 	strb.w	r7, [lr, ip]
    746e:	e9c3 2503 	strd	r2, r5, [r3, #12]
    7472:	4632      	mov	r2, r6
    7474:	4620      	mov	r0, r4
    7476:	f7fe fc35 	bl	5ce4 <d_make_comp>
    747a:	68e3      	ldr	r3, [r4, #12]
    747c:	4606      	mov	r6, r0
    747e:	781a      	ldrb	r2, [r3, #0]
    7480:	e793      	b.n	73aa <d_expr_primary+0x36>
    7482:	2300      	movs	r3, #0
    7484:	e7f5      	b.n	7472 <d_expr_primary+0xfe>
    7486:	2500      	movs	r5, #0
    7488:	e7da      	b.n	7440 <d_expr_primary+0xcc>
    748a:	3201      	adds	r2, #1
    748c:	60e2      	str	r2, [r4, #12]
    748e:	e7aa      	b.n	73e6 <d_expr_primary+0x72>
    7490:	20002058 	.word	0x20002058

00007494 <d_template_arg>:
    7494:	b538      	push	{r3, r4, r5, lr}
    7496:	68c2      	ldr	r2, [r0, #12]
    7498:	7813      	ldrb	r3, [r2, #0]
    749a:	2b4c      	cmp	r3, #76	; 0x4c
    749c:	d020      	beq.n	74e0 <d_template_arg+0x4c>
    749e:	4604      	mov	r4, r0
    74a0:	d808      	bhi.n	74b4 <d_template_arg+0x20>
    74a2:	3b49      	subs	r3, #73	; 0x49
    74a4:	2b01      	cmp	r3, #1
    74a6:	d816      	bhi.n	74d6 <d_template_arg+0x42>
    74a8:	3201      	adds	r2, #1
    74aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    74ae:	60c2      	str	r2, [r0, #12]
    74b0:	f000 b81c 	b.w	74ec <d_template_args_1>
    74b4:	2b58      	cmp	r3, #88	; 0x58
    74b6:	d10e      	bne.n	74d6 <d_template_arg+0x42>
    74b8:	3201      	adds	r2, #1
    74ba:	2301      	movs	r3, #1
    74bc:	6b05      	ldr	r5, [r0, #48]	; 0x30
    74be:	60c2      	str	r2, [r0, #12]
    74c0:	6303      	str	r3, [r0, #48]	; 0x30
    74c2:	f000 f8db 	bl	767c <d_expression_1>
    74c6:	68e3      	ldr	r3, [r4, #12]
    74c8:	6325      	str	r5, [r4, #48]	; 0x30
    74ca:	781a      	ldrb	r2, [r3, #0]
    74cc:	2a45      	cmp	r2, #69	; 0x45
    74ce:	d10b      	bne.n	74e8 <d_template_arg+0x54>
    74d0:	3301      	adds	r3, #1
    74d2:	60e3      	str	r3, [r4, #12]
    74d4:	bd38      	pop	{r3, r4, r5, pc}
    74d6:	4620      	mov	r0, r4
    74d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    74dc:	f7ff b854 	b.w	6588 <d_type>
    74e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    74e4:	f7ff bf46 	b.w	7374 <d_expr_primary>
    74e8:	2000      	movs	r0, #0
    74ea:	bd38      	pop	{r3, r4, r5, pc}

000074ec <d_template_args_1>:
    74ec:	b570      	push	{r4, r5, r6, lr}
    74ee:	68c3      	ldr	r3, [r0, #12]
    74f0:	6a86      	ldr	r6, [r0, #40]	; 0x28
    74f2:	781a      	ldrb	r2, [r3, #0]
    74f4:	2a45      	cmp	r2, #69	; 0x45
    74f6:	b082      	sub	sp, #8
    74f8:	4604      	mov	r4, r0
    74fa:	d01f      	beq.n	753c <d_template_args_1+0x50>
    74fc:	2300      	movs	r3, #0
    74fe:	9301      	str	r3, [sp, #4]
    7500:	ad01      	add	r5, sp, #4
    7502:	e009      	b.n	7518 <d_template_args_1+0x2c>
    7504:	f7fe fbee 	bl	5ce4 <d_make_comp>
    7508:	6028      	str	r0, [r5, #0]
    750a:	f100 0510 	add.w	r5, r0, #16
    750e:	b160      	cbz	r0, 752a <d_template_args_1+0x3e>
    7510:	68e3      	ldr	r3, [r4, #12]
    7512:	781a      	ldrb	r2, [r3, #0]
    7514:	2a45      	cmp	r2, #69	; 0x45
    7516:	d00b      	beq.n	7530 <d_template_args_1+0x44>
    7518:	4620      	mov	r0, r4
    751a:	f7ff ffbb 	bl	7494 <d_template_arg>
    751e:	4602      	mov	r2, r0
    7520:	2300      	movs	r3, #0
    7522:	212f      	movs	r1, #47	; 0x2f
    7524:	4620      	mov	r0, r4
    7526:	2a00      	cmp	r2, #0
    7528:	d1ec      	bne.n	7504 <d_template_args_1+0x18>
    752a:	2000      	movs	r0, #0
    752c:	b002      	add	sp, #8
    752e:	bd70      	pop	{r4, r5, r6, pc}
    7530:	9801      	ldr	r0, [sp, #4]
    7532:	62a6      	str	r6, [r4, #40]	; 0x28
    7534:	3301      	adds	r3, #1
    7536:	60e3      	str	r3, [r4, #12]
    7538:	b002      	add	sp, #8
    753a:	bd70      	pop	{r4, r5, r6, pc}
    753c:	1c5a      	adds	r2, r3, #1
    753e:	2300      	movs	r3, #0
    7540:	60c2      	str	r2, [r0, #12]
    7542:	212f      	movs	r1, #47	; 0x2f
    7544:	461a      	mov	r2, r3
    7546:	b002      	add	sp, #8
    7548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    754c:	f7fe bbca 	b.w	5ce4 <d_make_comp>

00007550 <d_prefix>:
    7550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7552:	68c2      	ldr	r2, [r0, #12]
    7554:	7814      	ldrb	r4, [r2, #0]
    7556:	b394      	cbz	r4, 75be <d_prefix+0x6e>
    7558:	4606      	mov	r6, r0
    755a:	460f      	mov	r7, r1
    755c:	2500      	movs	r5, #0
    755e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    7562:	2b4a      	cmp	r3, #74	; 0x4a
    7564:	d82b      	bhi.n	75be <d_prefix+0x6e>
    7566:	e8df f003 	tbb	[pc, r3]
    756a:	2d2d      	.short	0x2d2d
    756c:	2d2d2d2d 	.word	0x2d2d2d2d
    7570:	2d2d2d2d 	.word	0x2d2d2d2d
    7574:	2a2a2a2a 	.word	0x2a2a2a2a
    7578:	2a2a2a2a 	.word	0x2a2a2a2a
    757c:	2b772d2a 	.word	0x2b772d2a
    7580:	682a2a2a 	.word	0x682a2a2a
    7584:	5f2d2a2a 	.word	0x5f2d2a2a
    7588:	2a2a2a2a 	.word	0x2a2a2a2a
    758c:	2d4b532a 	.word	0x2d4b532a
    7590:	2a2a2a2a 	.word	0x2a2a2a2a
    7594:	2a2a2a2a 	.word	0x2a2a2a2a
    7598:	2d2a2a2a 	.word	0x2d2a2a2a
    759c:	2d2d2d2d 	.word	0x2d2d2d2d
    75a0:	2d2d2d2d 	.word	0x2d2d2d2d
    75a4:	2d2d2d2d 	.word	0x2d2d2d2d
    75a8:	2d2d2d2d 	.word	0x2d2d2d2d
    75ac:	2d2d2d2d 	.word	0x2d2d2d2d
    75b0:	2d2d2d2d 	.word	0x2d2d2d2d
    75b4:	2d          	.byte	0x2d
    75b5:	00          	.byte	0x00
    75b6:	68f2      	ldr	r2, [r6, #12]
    75b8:	7814      	ldrb	r4, [r2, #0]
    75ba:	2c00      	cmp	r4, #0
    75bc:	d1cf      	bne.n	755e <d_prefix+0xe>
    75be:	2500      	movs	r5, #0
    75c0:	4628      	mov	r0, r5
    75c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75c4:	4630      	mov	r0, r6
    75c6:	f7ff fd35 	bl	7034 <d_unqualified_name>
    75ca:	4603      	mov	r3, r0
    75cc:	2d00      	cmp	r5, #0
    75ce:	d14e      	bne.n	766e <d_prefix+0x11e>
    75d0:	4605      	mov	r5, r0
    75d2:	2c53      	cmp	r4, #83	; 0x53
    75d4:	d0ef      	beq.n	75b6 <d_prefix+0x66>
    75d6:	68f2      	ldr	r2, [r6, #12]
    75d8:	7814      	ldrb	r4, [r2, #0]
    75da:	2c45      	cmp	r4, #69	; 0x45
    75dc:	d0f0      	beq.n	75c0 <d_prefix+0x70>
    75de:	2f00      	cmp	r7, #0
    75e0:	d0eb      	beq.n	75ba <d_prefix+0x6a>
    75e2:	2d00      	cmp	r5, #0
    75e4:	d0eb      	beq.n	75be <d_prefix+0x6e>
    75e6:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
    75ea:	428b      	cmp	r3, r1
    75ec:	dae7      	bge.n	75be <d_prefix+0x6e>
    75ee:	69f1      	ldr	r1, [r6, #28]
    75f0:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    75f4:	3301      	adds	r3, #1
    75f6:	6233      	str	r3, [r6, #32]
    75f8:	7814      	ldrb	r4, [r2, #0]
    75fa:	2c00      	cmp	r4, #0
    75fc:	d1af      	bne.n	755e <d_prefix+0xe>
    75fe:	e7de      	b.n	75be <d_prefix+0x6e>
    7600:	4630      	mov	r0, r6
    7602:	f7fe fe1b 	bl	623c <d_template_param>
    7606:	4603      	mov	r3, r0
    7608:	2d00      	cmp	r5, #0
    760a:	d130      	bne.n	766e <d_prefix+0x11e>
    760c:	461d      	mov	r5, r3
    760e:	e7e2      	b.n	75d6 <d_prefix+0x86>
    7610:	2101      	movs	r1, #1
    7612:	4630      	mov	r0, r6
    7614:	f7fe feee 	bl	63f4 <d_substitution>
    7618:	4603      	mov	r3, r0
    761a:	bb45      	cbnz	r5, 766e <d_prefix+0x11e>
    761c:	68f2      	ldr	r2, [r6, #12]
    761e:	7814      	ldrb	r4, [r2, #0]
    7620:	461d      	mov	r5, r3
    7622:	2c00      	cmp	r4, #0
    7624:	d19b      	bne.n	755e <d_prefix+0xe>
    7626:	e7ca      	b.n	75be <d_prefix+0x6e>
    7628:	2d00      	cmp	r5, #0
    762a:	d0c8      	beq.n	75be <d_prefix+0x6e>
    762c:	1c53      	adds	r3, r2, #1
    762e:	60f3      	str	r3, [r6, #12]
    7630:	7854      	ldrb	r4, [r2, #1]
    7632:	461a      	mov	r2, r3
    7634:	2c00      	cmp	r4, #0
    7636:	d192      	bne.n	755e <d_prefix+0xe>
    7638:	e7c1      	b.n	75be <d_prefix+0x6e>
    763a:	2d00      	cmp	r5, #0
    763c:	d0bf      	beq.n	75be <d_prefix+0x6e>
    763e:	3201      	adds	r2, #1
    7640:	60f2      	str	r2, [r6, #12]
    7642:	4630      	mov	r0, r6
    7644:	f7ff ff52 	bl	74ec <d_template_args_1>
    7648:	2104      	movs	r1, #4
    764a:	4603      	mov	r3, r0
    764c:	462a      	mov	r2, r5
    764e:	4630      	mov	r0, r6
    7650:	f7fe fb48 	bl	5ce4 <d_make_comp>
    7654:	4605      	mov	r5, r0
    7656:	e7bc      	b.n	75d2 <d_prefix+0x82>
    7658:	7853      	ldrb	r3, [r2, #1]
    765a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    765e:	2b54      	cmp	r3, #84	; 0x54
    7660:	4630      	mov	r0, r6
    7662:	d006      	beq.n	7672 <d_prefix+0x122>
    7664:	f7ff fce6 	bl	7034 <d_unqualified_name>
    7668:	4603      	mov	r3, r0
    766a:	2d00      	cmp	r5, #0
    766c:	d0ce      	beq.n	760c <d_prefix+0xbc>
    766e:	2101      	movs	r1, #1
    7670:	e7ec      	b.n	764c <d_prefix+0xfc>
    7672:	f7fe ff89 	bl	6588 <d_type>
    7676:	4603      	mov	r3, r0
    7678:	e7c6      	b.n	7608 <d_prefix+0xb8>
    767a:	bf00      	nop

0000767c <d_expression_1>:
    767c:	68c2      	ldr	r2, [r0, #12]
    767e:	7813      	ldrb	r3, [r2, #0]
    7680:	2b4c      	cmp	r3, #76	; 0x4c
    7682:	f000 8089 	beq.w	7798 <d_expression_1+0x11c>
    7686:	2b54      	cmp	r3, #84	; 0x54
    7688:	f000 8088 	beq.w	779c <d_expression_1+0x120>
    768c:	b5f0      	push	{r4, r5, r6, r7, lr}
    768e:	2b73      	cmp	r3, #115	; 0x73
    7690:	b083      	sub	sp, #12
    7692:	4604      	mov	r4, r0
    7694:	d05a      	beq.n	774c <d_expression_1+0xd0>
    7696:	2b66      	cmp	r3, #102	; 0x66
    7698:	d028      	beq.n	76ec <d_expression_1+0x70>
    769a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    769e:	2909      	cmp	r1, #9
    76a0:	d80c      	bhi.n	76bc <d_expression_1+0x40>
    76a2:	4620      	mov	r0, r4
    76a4:	f7ff fcc6 	bl	7034 <d_unqualified_name>
    76a8:	4605      	mov	r5, r0
    76aa:	2800      	cmp	r0, #0
    76ac:	d070      	beq.n	7790 <d_expression_1+0x114>
    76ae:	68e3      	ldr	r3, [r4, #12]
    76b0:	781a      	ldrb	r2, [r3, #0]
    76b2:	2a49      	cmp	r2, #73	; 0x49
    76b4:	d074      	beq.n	77a0 <d_expression_1+0x124>
    76b6:	4628      	mov	r0, r5
    76b8:	b003      	add	sp, #12
    76ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76bc:	2b6f      	cmp	r3, #111	; 0x6f
    76be:	d061      	beq.n	7784 <d_expression_1+0x108>
    76c0:	2b69      	cmp	r3, #105	; 0x69
    76c2:	d17b      	bne.n	77bc <d_expression_1+0x140>
    76c4:	7853      	ldrb	r3, [r2, #1]
    76c6:	2b6c      	cmp	r3, #108	; 0x6c
    76c8:	d147      	bne.n	775a <d_expression_1+0xde>
    76ca:	3202      	adds	r2, #2
    76cc:	60e2      	str	r2, [r4, #12]
    76ce:	2500      	movs	r5, #0
    76d0:	7811      	ldrb	r1, [r2, #0]
    76d2:	2900      	cmp	r1, #0
    76d4:	d05c      	beq.n	7790 <d_expression_1+0x114>
    76d6:	7853      	ldrb	r3, [r2, #1]
    76d8:	2b00      	cmp	r3, #0
    76da:	d059      	beq.n	7790 <d_expression_1+0x114>
    76dc:	2145      	movs	r1, #69	; 0x45
    76de:	4620      	mov	r0, r4
    76e0:	f000 fa42 	bl	7b68 <d_exprlist>
    76e4:	462a      	mov	r2, r5
    76e6:	4603      	mov	r3, r0
    76e8:	2131      	movs	r1, #49	; 0x31
    76ea:	e061      	b.n	77b0 <d_expression_1+0x134>
    76ec:	7853      	ldrb	r3, [r2, #1]
    76ee:	2b70      	cmp	r3, #112	; 0x70
    76f0:	d133      	bne.n	775a <d_expression_1+0xde>
    76f2:	1c93      	adds	r3, r2, #2
    76f4:	60c3      	str	r3, [r0, #12]
    76f6:	7893      	ldrb	r3, [r2, #2]
    76f8:	2b54      	cmp	r3, #84	; 0x54
    76fa:	f000 8148 	beq.w	798e <d_expression_1+0x312>
    76fe:	2b5f      	cmp	r3, #95	; 0x5f
    7700:	f000 8086 	beq.w	7810 <d_expression_1+0x194>
    7704:	2b6e      	cmp	r3, #110	; 0x6e
    7706:	d043      	beq.n	7790 <d_expression_1+0x114>
    7708:	f7fe fb64 	bl	5dd4 <d_number>
    770c:	1c41      	adds	r1, r0, #1
    770e:	d43f      	bmi.n	7790 <d_expression_1+0x114>
    7710:	68e3      	ldr	r3, [r4, #12]
    7712:	781a      	ldrb	r2, [r3, #0]
    7714:	2a5f      	cmp	r2, #95	; 0x5f
    7716:	d13b      	bne.n	7790 <d_expression_1+0x114>
    7718:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    771c:	3301      	adds	r3, #1
    771e:	4291      	cmp	r1, r2
    7720:	60e3      	str	r3, [r4, #12]
    7722:	d035      	beq.n	7790 <d_expression_1+0x114>
    7724:	3002      	adds	r0, #2
    7726:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
    772a:	4293      	cmp	r3, r2
    772c:	da30      	bge.n	7790 <d_expression_1+0x114>
    772e:	6922      	ldr	r2, [r4, #16]
    7730:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    7734:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    7738:	3301      	adds	r3, #1
    773a:	2600      	movs	r6, #0
    773c:	e9c5 6601 	strd	r6, r6, [r5, #4]
    7740:	6163      	str	r3, [r4, #20]
    7742:	2306      	movs	r3, #6
    7744:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
    7748:	60e8      	str	r0, [r5, #12]
    774a:	e7b4      	b.n	76b6 <d_expression_1+0x3a>
    774c:	7853      	ldrb	r3, [r2, #1]
    774e:	2b72      	cmp	r3, #114	; 0x72
    7750:	f000 80f8 	beq.w	7944 <d_expression_1+0x2c8>
    7754:	2b70      	cmp	r3, #112	; 0x70
    7756:	f000 8112 	beq.w	797e <d_expression_1+0x302>
    775a:	4620      	mov	r0, r4
    775c:	f7ff fbe6 	bl	6f2c <d_operator_name>
    7760:	4605      	mov	r5, r0
    7762:	b1a8      	cbz	r0, 7790 <d_expression_1+0x114>
    7764:	7803      	ldrb	r3, [r0, #0]
    7766:	2b32      	cmp	r3, #50	; 0x32
    7768:	d035      	beq.n	77d6 <d_expression_1+0x15a>
    776a:	2b34      	cmp	r3, #52	; 0x34
    776c:	f000 819b 	beq.w	7aa6 <d_expression_1+0x42a>
    7770:	d80e      	bhi.n	7790 <d_expression_1+0x114>
    7772:	2b33      	cmp	r3, #51	; 0x33
    7774:	d10c      	bne.n	7790 <d_expression_1+0x114>
    7776:	68c3      	ldr	r3, [r0, #12]
    7778:	2b03      	cmp	r3, #3
    777a:	d809      	bhi.n	7790 <d_expression_1+0x114>
    777c:	e8df f003 	tbb	[pc, r3]
    7780:	0808ce6d 	.word	0x0808ce6d
    7784:	7853      	ldrb	r3, [r2, #1]
    7786:	2b6e      	cmp	r3, #110	; 0x6e
    7788:	d1e7      	bne.n	775a <d_expression_1+0xde>
    778a:	3202      	adds	r2, #2
    778c:	60c2      	str	r2, [r0, #12]
    778e:	e788      	b.n	76a2 <d_expression_1+0x26>
    7790:	2500      	movs	r5, #0
    7792:	4628      	mov	r0, r5
    7794:	b003      	add	sp, #12
    7796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7798:	f7ff bdec 	b.w	7374 <d_expr_primary>
    779c:	f7fe bd4e 	b.w	623c <d_template_param>
    77a0:	3301      	adds	r3, #1
    77a2:	60e3      	str	r3, [r4, #12]
    77a4:	4620      	mov	r0, r4
    77a6:	f7ff fea1 	bl	74ec <d_template_args_1>
    77aa:	462a      	mov	r2, r5
    77ac:	4603      	mov	r3, r0
    77ae:	2104      	movs	r1, #4
    77b0:	4620      	mov	r0, r4
    77b2:	b003      	add	sp, #12
    77b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    77b8:	f7fe ba94 	b.w	5ce4 <d_make_comp>
    77bc:	2b74      	cmp	r3, #116	; 0x74
    77be:	f040 80b2 	bne.w	7926 <d_expression_1+0x2aa>
    77c2:	7853      	ldrb	r3, [r2, #1]
    77c4:	2b6c      	cmp	r3, #108	; 0x6c
    77c6:	d1c8      	bne.n	775a <d_expression_1+0xde>
    77c8:	3202      	adds	r2, #2
    77ca:	60e2      	str	r2, [r4, #12]
    77cc:	f7fe fedc 	bl	6588 <d_type>
    77d0:	68e2      	ldr	r2, [r4, #12]
    77d2:	4605      	mov	r5, r0
    77d4:	e77c      	b.n	76d0 <d_expression_1+0x54>
    77d6:	68c1      	ldr	r1, [r0, #12]
    77d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    77da:	688a      	ldr	r2, [r1, #8]
    77dc:	680e      	ldr	r6, [r1, #0]
    77de:	3a02      	subs	r2, #2
    77e0:	4413      	add	r3, r2
    77e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    77e4:	7833      	ldrb	r3, [r6, #0]
    77e6:	2b73      	cmp	r3, #115	; 0x73
    77e8:	d10b      	bne.n	7802 <d_expression_1+0x186>
    77ea:	7872      	ldrb	r2, [r6, #1]
    77ec:	2a74      	cmp	r2, #116	; 0x74
    77ee:	d108      	bne.n	7802 <d_expression_1+0x186>
    77f0:	78b2      	ldrb	r2, [r6, #2]
    77f2:	b932      	cbnz	r2, 7802 <d_expression_1+0x186>
    77f4:	4620      	mov	r0, r4
    77f6:	f7fe fec7 	bl	6588 <d_type>
    77fa:	462a      	mov	r2, r5
    77fc:	4603      	mov	r3, r0
    77fe:	2137      	movs	r1, #55	; 0x37
    7800:	e7d6      	b.n	77b0 <d_expression_1+0x134>
    7802:	68cf      	ldr	r7, [r1, #12]
    7804:	2f03      	cmp	r7, #3
    7806:	d8c3      	bhi.n	7790 <d_expression_1+0x114>
    7808:	e8df f007 	tbb	[pc, r7]
    780c:	2b540627 	.word	0x2b540627
    7810:	3203      	adds	r2, #3
    7812:	60c2      	str	r2, [r0, #12]
    7814:	2001      	movs	r0, #1
    7816:	e786      	b.n	7726 <d_expression_1+0xaa>
    7818:	7832      	ldrb	r2, [r6, #0]
    781a:	2a70      	cmp	r2, #112	; 0x70
    781c:	f000 80c0 	beq.w	79a0 <d_expression_1+0x324>
    7820:	2a6d      	cmp	r2, #109	; 0x6d
    7822:	f000 80bd 	beq.w	79a0 <d_expression_1+0x324>
    7826:	2700      	movs	r7, #0
    7828:	2b73      	cmp	r3, #115	; 0x73
    782a:	f040 80b4 	bne.w	7996 <d_expression_1+0x31a>
    782e:	7873      	ldrb	r3, [r6, #1]
    7830:	2b50      	cmp	r3, #80	; 0x50
    7832:	f040 80b0 	bne.w	7996 <d_expression_1+0x31a>
    7836:	78b3      	ldrb	r3, [r6, #2]
    7838:	2b00      	cmp	r3, #0
    783a:	f040 80ac 	bne.w	7996 <d_expression_1+0x31a>
    783e:	4620      	mov	r0, r4
    7840:	f7ff fe54 	bl	74ec <d_template_args_1>
    7844:	4603      	mov	r3, r0
    7846:	b12f      	cbz	r7, 7854 <d_expression_1+0x1d8>
    7848:	461a      	mov	r2, r3
    784a:	2139      	movs	r1, #57	; 0x39
    784c:	4620      	mov	r0, r4
    784e:	f7fe fa49 	bl	5ce4 <d_make_comp>
    7852:	4603      	mov	r3, r0
    7854:	462a      	mov	r2, r5
    7856:	2137      	movs	r1, #55	; 0x37
    7858:	e7aa      	b.n	77b0 <d_expression_1+0x134>
    785a:	2300      	movs	r3, #0
    785c:	462a      	mov	r2, r5
    785e:	2136      	movs	r1, #54	; 0x36
    7860:	e7a6      	b.n	77b0 <d_expression_1+0x134>
    7862:	2b71      	cmp	r3, #113	; 0x71
    7864:	f040 80c4 	bne.w	79f0 <d_expression_1+0x374>
    7868:	7872      	ldrb	r2, [r6, #1]
    786a:	2a75      	cmp	r2, #117	; 0x75
    786c:	f040 80c0 	bne.w	79f0 <d_expression_1+0x374>
    7870:	78b2      	ldrb	r2, [r6, #2]
    7872:	2a00      	cmp	r2, #0
    7874:	f040 80bc 	bne.w	79f0 <d_expression_1+0x374>
    7878:	4620      	mov	r0, r4
    787a:	f7ff feff 	bl	767c <d_expression_1>
    787e:	4606      	mov	r6, r0
    7880:	4620      	mov	r0, r4
    7882:	f7ff fefb 	bl	767c <d_expression_1>
    7886:	4607      	mov	r7, r0
    7888:	4620      	mov	r0, r4
    788a:	f7ff fef7 	bl	767c <d_expression_1>
    788e:	4603      	mov	r3, r0
    7890:	2800      	cmp	r0, #0
    7892:	f43f af7d 	beq.w	7790 <d_expression_1+0x114>
    7896:	463a      	mov	r2, r7
    7898:	213c      	movs	r1, #60	; 0x3c
    789a:	4620      	mov	r0, r4
    789c:	f7fe fa22 	bl	5ce4 <d_make_comp>
    78a0:	4632      	mov	r2, r6
    78a2:	4603      	mov	r3, r0
    78a4:	213b      	movs	r1, #59	; 0x3b
    78a6:	4620      	mov	r0, r4
    78a8:	f7fe fa1c 	bl	5ce4 <d_make_comp>
    78ac:	462a      	mov	r2, r5
    78ae:	4603      	mov	r3, r0
    78b0:	213a      	movs	r1, #58	; 0x3a
    78b2:	e77d      	b.n	77b0 <d_expression_1+0x134>
    78b4:	68eb      	ldr	r3, [r5, #12]
    78b6:	681b      	ldr	r3, [r3, #0]
    78b8:	785a      	ldrb	r2, [r3, #1]
    78ba:	2a63      	cmp	r2, #99	; 0x63
    78bc:	f000 810e 	beq.w	7adc <d_expression_1+0x460>
    78c0:	7833      	ldrb	r3, [r6, #0]
    78c2:	2b66      	cmp	r3, #102	; 0x66
    78c4:	f000 8133 	beq.w	7b2e <d_expression_1+0x4b2>
    78c8:	2b64      	cmp	r3, #100	; 0x64
    78ca:	f040 8127 	bne.w	7b1c <d_expression_1+0x4a0>
    78ce:	7873      	ldrb	r3, [r6, #1]
    78d0:	2b69      	cmp	r3, #105	; 0x69
    78d2:	f040 8123 	bne.w	7b1c <d_expression_1+0x4a0>
    78d6:	78b3      	ldrb	r3, [r6, #2]
    78d8:	2b00      	cmp	r3, #0
    78da:	f040 811f 	bne.w	7b1c <d_expression_1+0x4a0>
    78de:	4620      	mov	r0, r4
    78e0:	f7ff fba8 	bl	7034 <d_unqualified_name>
    78e4:	4607      	mov	r7, r0
    78e6:	7833      	ldrb	r3, [r6, #0]
    78e8:	2b63      	cmp	r3, #99	; 0x63
    78ea:	f040 80b4 	bne.w	7a56 <d_expression_1+0x3da>
    78ee:	7872      	ldrb	r2, [r6, #1]
    78f0:	2a6c      	cmp	r2, #108	; 0x6c
    78f2:	f040 80b0 	bne.w	7a56 <d_expression_1+0x3da>
    78f6:	78b2      	ldrb	r2, [r6, #2]
    78f8:	2a00      	cmp	r2, #0
    78fa:	f040 80ac 	bne.w	7a56 <d_expression_1+0x3da>
    78fe:	2145      	movs	r1, #69	; 0x45
    7900:	4620      	mov	r0, r4
    7902:	f000 f931 	bl	7b68 <d_exprlist>
    7906:	4602      	mov	r2, r0
    7908:	4613      	mov	r3, r2
    790a:	2139      	movs	r1, #57	; 0x39
    790c:	463a      	mov	r2, r7
    790e:	4620      	mov	r0, r4
    7910:	f7fe f9e8 	bl	5ce4 <d_make_comp>
    7914:	462a      	mov	r2, r5
    7916:	4603      	mov	r3, r0
    7918:	2138      	movs	r1, #56	; 0x38
    791a:	e749      	b.n	77b0 <d_expression_1+0x134>
    791c:	4620      	mov	r0, r4
    791e:	f7ff fead 	bl	767c <d_expression_1>
    7922:	4603      	mov	r3, r0
    7924:	e796      	b.n	7854 <d_expression_1+0x1d8>
    7926:	2b75      	cmp	r3, #117	; 0x75
    7928:	f47f af17 	bne.w	775a <d_expression_1+0xde>
    792c:	3201      	adds	r2, #1
    792e:	60c2      	str	r2, [r0, #12]
    7930:	f7fe fcf0 	bl	6314 <d_source_name>
    7934:	9001      	str	r0, [sp, #4]
    7936:	4620      	mov	r0, r4
    7938:	f7ff fdd8 	bl	74ec <d_template_args_1>
    793c:	9a01      	ldr	r2, [sp, #4]
    793e:	4603      	mov	r3, r0
    7940:	213f      	movs	r1, #63	; 0x3f
    7942:	e735      	b.n	77b0 <d_expression_1+0x134>
    7944:	1c93      	adds	r3, r2, #2
    7946:	6b81      	ldr	r1, [r0, #56]	; 0x38
    7948:	60c3      	str	r3, [r0, #12]
    794a:	7893      	ldrb	r3, [r2, #2]
    794c:	b131      	cbz	r1, 795c <d_expression_1+0x2e0>
    794e:	2b55      	cmp	r3, #85	; 0x55
    7950:	d84a      	bhi.n	79e8 <d_expression_1+0x36c>
    7952:	2b42      	cmp	r3, #66	; 0x42
    7954:	d832      	bhi.n	79bc <d_expression_1+0x340>
    7956:	3b30      	subs	r3, #48	; 0x30
    7958:	2b09      	cmp	r3, #9
    795a:	d936      	bls.n	79ca <d_expression_1+0x34e>
    795c:	4620      	mov	r0, r4
    795e:	f7fe fe13 	bl	6588 <d_type>
    7962:	4605      	mov	r5, r0
    7964:	4620      	mov	r0, r4
    7966:	f7ff fb65 	bl	7034 <d_unqualified_name>
    796a:	68e3      	ldr	r3, [r4, #12]
    796c:	7819      	ldrb	r1, [r3, #0]
    796e:	2949      	cmp	r1, #73	; 0x49
    7970:	4602      	mov	r2, r0
    7972:	f000 80a5 	beq.w	7ac0 <d_expression_1+0x444>
    7976:	4613      	mov	r3, r2
    7978:	2101      	movs	r1, #1
    797a:	462a      	mov	r2, r5
    797c:	e718      	b.n	77b0 <d_expression_1+0x134>
    797e:	3202      	adds	r2, #2
    7980:	60c2      	str	r2, [r0, #12]
    7982:	f7ff fe7b 	bl	767c <d_expression_1>
    7986:	2300      	movs	r3, #0
    7988:	4602      	mov	r2, r0
    798a:	214c      	movs	r1, #76	; 0x4c
    798c:	e710      	b.n	77b0 <d_expression_1+0x134>
    798e:	3203      	adds	r2, #3
    7990:	60c2      	str	r2, [r0, #12]
    7992:	2000      	movs	r0, #0
    7994:	e6c7      	b.n	7726 <d_expression_1+0xaa>
    7996:	4620      	mov	r0, r4
    7998:	f7ff fe70 	bl	767c <d_expression_1>
    799c:	4603      	mov	r3, r0
    799e:	e752      	b.n	7846 <d_expression_1+0x1ca>
    79a0:	7871      	ldrb	r1, [r6, #1]
    79a2:	4291      	cmp	r1, r2
    79a4:	f47f af3f 	bne.w	7826 <d_expression_1+0x1aa>
    79a8:	68e2      	ldr	r2, [r4, #12]
    79aa:	7811      	ldrb	r1, [r2, #0]
    79ac:	295f      	cmp	r1, #95	; 0x5f
    79ae:	f47f af3b 	bne.w	7828 <d_expression_1+0x1ac>
    79b2:	3201      	adds	r2, #1
    79b4:	60e2      	str	r2, [r4, #12]
    79b6:	7833      	ldrb	r3, [r6, #0]
    79b8:	2700      	movs	r7, #0
    79ba:	e735      	b.n	7828 <d_expression_1+0x1ac>
    79bc:	4a68      	ldr	r2, [pc, #416]	; (7b60 <d_expression_1+0x4e4>)
    79be:	3b43      	subs	r3, #67	; 0x43
    79c0:	b2db      	uxtb	r3, r3
    79c2:	fa22 f303 	lsr.w	r3, r2, r3
    79c6:	07db      	lsls	r3, r3, #31
    79c8:	d5c8      	bpl.n	795c <d_expression_1+0x2e0>
    79ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    79ce:	63a3      	str	r3, [r4, #56]	; 0x38
    79d0:	2100      	movs	r1, #0
    79d2:	4620      	mov	r0, r4
    79d4:	f7ff fdbc 	bl	7550 <d_prefix>
    79d8:	68e3      	ldr	r3, [r4, #12]
    79da:	781a      	ldrb	r2, [r3, #0]
    79dc:	2a45      	cmp	r2, #69	; 0x45
    79de:	4605      	mov	r5, r0
    79e0:	d1c0      	bne.n	7964 <d_expression_1+0x2e8>
    79e2:	3301      	adds	r3, #1
    79e4:	60e3      	str	r3, [r4, #12]
    79e6:	e7bd      	b.n	7964 <d_expression_1+0x2e8>
    79e8:	3b61      	subs	r3, #97	; 0x61
    79ea:	2b19      	cmp	r3, #25
    79ec:	d8b6      	bhi.n	795c <d_expression_1+0x2e0>
    79ee:	e7ec      	b.n	79ca <d_expression_1+0x34e>
    79f0:	2b64      	cmp	r3, #100	; 0x64
    79f2:	d106      	bne.n	7a02 <d_expression_1+0x386>
    79f4:	7873      	ldrb	r3, [r6, #1]
    79f6:	2b58      	cmp	r3, #88	; 0x58
    79f8:	d103      	bne.n	7a02 <d_expression_1+0x386>
    79fa:	78b3      	ldrb	r3, [r6, #2]
    79fc:	2b00      	cmp	r3, #0
    79fe:	f43f af3b 	beq.w	7878 <d_expression_1+0x1fc>
    7a02:	7833      	ldrb	r3, [r6, #0]
    7a04:	2b66      	cmp	r3, #102	; 0x66
    7a06:	f000 8097 	beq.w	7b38 <d_expression_1+0x4bc>
    7a0a:	2b6e      	cmp	r3, #110	; 0x6e
    7a0c:	f47f aec0 	bne.w	7790 <d_expression_1+0x114>
    7a10:	7873      	ldrb	r3, [r6, #1]
    7a12:	2b77      	cmp	r3, #119	; 0x77
    7a14:	d002      	beq.n	7a1c <d_expression_1+0x3a0>
    7a16:	2b61      	cmp	r3, #97	; 0x61
    7a18:	f47f aeba 	bne.w	7790 <d_expression_1+0x114>
    7a1c:	215f      	movs	r1, #95	; 0x5f
    7a1e:	4620      	mov	r0, r4
    7a20:	f000 f8a2 	bl	7b68 <d_exprlist>
    7a24:	4606      	mov	r6, r0
    7a26:	4620      	mov	r0, r4
    7a28:	f7fe fdae 	bl	6588 <d_type>
    7a2c:	68e3      	ldr	r3, [r4, #12]
    7a2e:	781a      	ldrb	r2, [r3, #0]
    7a30:	2a45      	cmp	r2, #69	; 0x45
    7a32:	4607      	mov	r7, r0
    7a34:	f000 8090 	beq.w	7b58 <d_expression_1+0x4dc>
    7a38:	2a70      	cmp	r2, #112	; 0x70
    7a3a:	f000 8081 	beq.w	7b40 <d_expression_1+0x4c4>
    7a3e:	2a69      	cmp	r2, #105	; 0x69
    7a40:	f47f aea6 	bne.w	7790 <d_expression_1+0x114>
    7a44:	785b      	ldrb	r3, [r3, #1]
    7a46:	2b6c      	cmp	r3, #108	; 0x6c
    7a48:	f47f aea2 	bne.w	7790 <d_expression_1+0x114>
    7a4c:	4620      	mov	r0, r4
    7a4e:	f7ff fe15 	bl	767c <d_expression_1>
    7a52:	4603      	mov	r3, r0
    7a54:	e71f      	b.n	7896 <d_expression_1+0x21a>
    7a56:	2b64      	cmp	r3, #100	; 0x64
    7a58:	d153      	bne.n	7b02 <d_expression_1+0x486>
    7a5a:	7872      	ldrb	r2, [r6, #1]
    7a5c:	2a74      	cmp	r2, #116	; 0x74
    7a5e:	d150      	bne.n	7b02 <d_expression_1+0x486>
    7a60:	78b2      	ldrb	r2, [r6, #2]
    7a62:	2a00      	cmp	r2, #0
    7a64:	d14d      	bne.n	7b02 <d_expression_1+0x486>
    7a66:	68e3      	ldr	r3, [r4, #12]
    7a68:	781a      	ldrb	r2, [r3, #0]
    7a6a:	2a67      	cmp	r2, #103	; 0x67
    7a6c:	d05b      	beq.n	7b26 <d_expression_1+0x4aa>
    7a6e:	2a73      	cmp	r2, #115	; 0x73
    7a70:	d102      	bne.n	7a78 <d_expression_1+0x3fc>
    7a72:	785b      	ldrb	r3, [r3, #1]
    7a74:	2b72      	cmp	r3, #114	; 0x72
    7a76:	d04c      	beq.n	7b12 <d_expression_1+0x496>
    7a78:	4620      	mov	r0, r4
    7a7a:	f7ff fadb 	bl	7034 <d_unqualified_name>
    7a7e:	68e3      	ldr	r3, [r4, #12]
    7a80:	7819      	ldrb	r1, [r3, #0]
    7a82:	2949      	cmp	r1, #73	; 0x49
    7a84:	4602      	mov	r2, r0
    7a86:	f47f af3f 	bne.w	7908 <d_expression_1+0x28c>
    7a8a:	3301      	adds	r3, #1
    7a8c:	60e3      	str	r3, [r4, #12]
    7a8e:	4620      	mov	r0, r4
    7a90:	9201      	str	r2, [sp, #4]
    7a92:	f7ff fd2b 	bl	74ec <d_template_args_1>
    7a96:	9a01      	ldr	r2, [sp, #4]
    7a98:	4603      	mov	r3, r0
    7a9a:	2104      	movs	r1, #4
    7a9c:	4620      	mov	r0, r4
    7a9e:	f7fe f921 	bl	5ce4 <d_make_comp>
    7aa2:	4602      	mov	r2, r0
    7aa4:	e730      	b.n	7908 <d_expression_1+0x28c>
    7aa6:	68e3      	ldr	r3, [r4, #12]
    7aa8:	781a      	ldrb	r2, [r3, #0]
    7aaa:	2a5f      	cmp	r2, #95	; 0x5f
    7aac:	f47f af36 	bne.w	791c <d_expression_1+0x2a0>
    7ab0:	3301      	adds	r3, #1
    7ab2:	60e3      	str	r3, [r4, #12]
    7ab4:	2145      	movs	r1, #69	; 0x45
    7ab6:	4620      	mov	r0, r4
    7ab8:	f000 f856 	bl	7b68 <d_exprlist>
    7abc:	4603      	mov	r3, r0
    7abe:	e6c9      	b.n	7854 <d_expression_1+0x1d8>
    7ac0:	3301      	adds	r3, #1
    7ac2:	60e3      	str	r3, [r4, #12]
    7ac4:	4620      	mov	r0, r4
    7ac6:	9201      	str	r2, [sp, #4]
    7ac8:	f7ff fd10 	bl	74ec <d_template_args_1>
    7acc:	9a01      	ldr	r2, [sp, #4]
    7ace:	4603      	mov	r3, r0
    7ad0:	2104      	movs	r1, #4
    7ad2:	4620      	mov	r0, r4
    7ad4:	f7fe f906 	bl	5ce4 <d_make_comp>
    7ad8:	4602      	mov	r2, r0
    7ada:	e74c      	b.n	7976 <d_expression_1+0x2fa>
    7adc:	781b      	ldrb	r3, [r3, #0]
    7ade:	2b73      	cmp	r3, #115	; 0x73
    7ae0:	d00a      	beq.n	7af8 <d_expression_1+0x47c>
    7ae2:	3b63      	subs	r3, #99	; 0x63
    7ae4:	b2db      	uxtb	r3, r3
    7ae6:	2b0f      	cmp	r3, #15
    7ae8:	f63f aeea 	bhi.w	78c0 <d_expression_1+0x244>
    7aec:	4a1d      	ldr	r2, [pc, #116]	; (7b64 <d_expression_1+0x4e8>)
    7aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af2:	2b00      	cmp	r3, #0
    7af4:	f43f aee4 	beq.w	78c0 <d_expression_1+0x244>
    7af8:	4620      	mov	r0, r4
    7afa:	f7fe fd45 	bl	6588 <d_type>
    7afe:	4607      	mov	r7, r0
    7b00:	e6f1      	b.n	78e6 <d_expression_1+0x26a>
    7b02:	2b70      	cmp	r3, #112	; 0x70
    7b04:	d105      	bne.n	7b12 <d_expression_1+0x496>
    7b06:	7873      	ldrb	r3, [r6, #1]
    7b08:	2b74      	cmp	r3, #116	; 0x74
    7b0a:	d102      	bne.n	7b12 <d_expression_1+0x496>
    7b0c:	78b3      	ldrb	r3, [r6, #2]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d0a9      	beq.n	7a66 <d_expression_1+0x3ea>
    7b12:	4620      	mov	r0, r4
    7b14:	f7ff fdb2 	bl	767c <d_expression_1>
    7b18:	4602      	mov	r2, r0
    7b1a:	e6f5      	b.n	7908 <d_expression_1+0x28c>
    7b1c:	4620      	mov	r0, r4
    7b1e:	f7ff fdad 	bl	767c <d_expression_1>
    7b22:	4607      	mov	r7, r0
    7b24:	e6df      	b.n	78e6 <d_expression_1+0x26a>
    7b26:	785b      	ldrb	r3, [r3, #1]
    7b28:	2b73      	cmp	r3, #115	; 0x73
    7b2a:	d1a5      	bne.n	7a78 <d_expression_1+0x3fc>
    7b2c:	e7f1      	b.n	7b12 <d_expression_1+0x496>
    7b2e:	4620      	mov	r0, r4
    7b30:	f7ff f9fc 	bl	6f2c <d_operator_name>
    7b34:	4607      	mov	r7, r0
    7b36:	e6d6      	b.n	78e6 <d_expression_1+0x26a>
    7b38:	4620      	mov	r0, r4
    7b3a:	f7ff f9f7 	bl	6f2c <d_operator_name>
    7b3e:	e69e      	b.n	787e <d_expression_1+0x202>
    7b40:	785a      	ldrb	r2, [r3, #1]
    7b42:	2a69      	cmp	r2, #105	; 0x69
    7b44:	f47f ae24 	bne.w	7790 <d_expression_1+0x114>
    7b48:	3302      	adds	r3, #2
    7b4a:	60e3      	str	r3, [r4, #12]
    7b4c:	2145      	movs	r1, #69	; 0x45
    7b4e:	4620      	mov	r0, r4
    7b50:	f000 f80a 	bl	7b68 <d_exprlist>
    7b54:	4603      	mov	r3, r0
    7b56:	e69e      	b.n	7896 <d_expression_1+0x21a>
    7b58:	3301      	adds	r3, #1
    7b5a:	60e3      	str	r3, [r4, #12]
    7b5c:	2300      	movs	r3, #0
    7b5e:	e69a      	b.n	7896 <d_expression_1+0x21a>
    7b60:	00040201 	.word	0x00040201
    7b64:	20000370 	.word	0x20000370

00007b68 <d_exprlist>:
    7b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b6c:	68c2      	ldr	r2, [r0, #12]
    7b6e:	460e      	mov	r6, r1
    7b70:	7811      	ldrb	r1, [r2, #0]
    7b72:	b082      	sub	sp, #8
    7b74:	2300      	movs	r3, #0
    7b76:	42b1      	cmp	r1, r6
    7b78:	4604      	mov	r4, r0
    7b7a:	9301      	str	r3, [sp, #4]
    7b7c:	d024      	beq.n	7bc8 <d_exprlist+0x60>
    7b7e:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    7b82:	ad01      	add	r5, sp, #4
    7b84:	2701      	movs	r7, #1
    7b86:	e009      	b.n	7b9c <d_exprlist+0x34>
    7b88:	f7fe f8ac 	bl	5ce4 <d_make_comp>
    7b8c:	6028      	str	r0, [r5, #0]
    7b8e:	f100 0510 	add.w	r5, r0, #16
    7b92:	b178      	cbz	r0, 7bb4 <d_exprlist+0x4c>
    7b94:	68e3      	ldr	r3, [r4, #12]
    7b96:	781a      	ldrb	r2, [r3, #0]
    7b98:	42b2      	cmp	r2, r6
    7b9a:	d00f      	beq.n	7bbc <d_exprlist+0x54>
    7b9c:	6327      	str	r7, [r4, #48]	; 0x30
    7b9e:	4620      	mov	r0, r4
    7ba0:	f7ff fd6c 	bl	767c <d_expression_1>
    7ba4:	4602      	mov	r2, r0
    7ba6:	2300      	movs	r3, #0
    7ba8:	212e      	movs	r1, #46	; 0x2e
    7baa:	4620      	mov	r0, r4
    7bac:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    7bb0:	2a00      	cmp	r2, #0
    7bb2:	d1e9      	bne.n	7b88 <d_exprlist+0x20>
    7bb4:	2000      	movs	r0, #0
    7bb6:	b002      	add	sp, #8
    7bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bbc:	9801      	ldr	r0, [sp, #4]
    7bbe:	3301      	adds	r3, #1
    7bc0:	60e3      	str	r3, [r4, #12]
    7bc2:	b002      	add	sp, #8
    7bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bc8:	3201      	adds	r2, #1
    7bca:	60c2      	str	r2, [r0, #12]
    7bcc:	212e      	movs	r1, #46	; 0x2e
    7bce:	461a      	mov	r2, r3
    7bd0:	b002      	add	sp, #8
    7bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7bd6:	f7fe b885 	b.w	5ce4 <d_make_comp>
    7bda:	bf00      	nop

00007bdc <d_cv_qualifiers>:
    7bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7be0:	460f      	mov	r7, r1
    7be2:	68c1      	ldr	r1, [r0, #12]
    7be4:	f1b2 0900 	subs.w	r9, r2, #0
    7be8:	b083      	sub	sp, #12
    7bea:	780a      	ldrb	r2, [r1, #0]
    7bec:	4604      	mov	r4, r0
    7bee:	bf15      	itete	ne
    7bf0:	f04f 0a1e 	movne.w	sl, #30
    7bf4:	f04f 0a1b 	moveq.w	sl, #27
    7bf8:	f04f 081d 	movne.w	r8, #29
    7bfc:	f04f 081a 	moveq.w	r8, #26
    7c00:	bf14      	ite	ne
    7c02:	261c      	movne	r6, #28
    7c04:	2619      	moveq	r6, #25
    7c06:	463d      	mov	r5, r7
    7c08:	f04f 0b01 	mov.w	fp, #1
    7c0c:	e01b      	b.n	7c46 <d_cv_qualifiers+0x6a>
    7c0e:	2a56      	cmp	r2, #86	; 0x56
    7c10:	d033      	beq.n	7c7a <d_cv_qualifiers+0x9e>
    7c12:	2a4b      	cmp	r2, #75	; 0x4b
    7c14:	d037      	beq.n	7c86 <d_cv_qualifiers+0xaa>
    7c16:	784b      	ldrb	r3, [r1, #1]
    7c18:	b353      	cbz	r3, 7c70 <d_cv_qualifiers+0x94>
    7c1a:	1c8b      	adds	r3, r1, #2
    7c1c:	60e3      	str	r3, [r4, #12]
    7c1e:	784b      	ldrb	r3, [r1, #1]
    7c20:	2b78      	cmp	r3, #120	; 0x78
    7c22:	d04f      	beq.n	7cc4 <d_cv_qualifiers+0xe8>
    7c24:	2b6f      	cmp	r3, #111	; 0x6f
    7c26:	d134      	bne.n	7c92 <d_cv_qualifiers+0xb6>
    7c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c2a:	3309      	adds	r3, #9
    7c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c2e:	2150      	movs	r1, #80	; 0x50
    7c30:	2300      	movs	r3, #0
    7c32:	2200      	movs	r2, #0
    7c34:	4620      	mov	r0, r4
    7c36:	f7fe f855 	bl	5ce4 <d_make_comp>
    7c3a:	6028      	str	r0, [r5, #0]
    7c3c:	b1c0      	cbz	r0, 7c70 <d_cv_qualifiers+0x94>
    7c3e:	68e1      	ldr	r1, [r4, #12]
    7c40:	780a      	ldrb	r2, [r1, #0]
    7c42:	f100 050c 	add.w	r5, r0, #12
    7c46:	4608      	mov	r0, r1
    7c48:	f7fe fa24 	bl	6094 <next_is_type_qual.isra.0>
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d03f      	beq.n	7cd0 <d_cv_qualifiers+0xf4>
    7c50:	1c4b      	adds	r3, r1, #1
    7c52:	2a72      	cmp	r2, #114	; 0x72
    7c54:	60e3      	str	r3, [r4, #12]
    7c56:	d1da      	bne.n	7c0e <d_cv_qualifiers+0x32>
    7c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c5a:	3309      	adds	r3, #9
    7c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c5e:	4631      	mov	r1, r6
    7c60:	2300      	movs	r3, #0
    7c62:	2200      	movs	r2, #0
    7c64:	4620      	mov	r0, r4
    7c66:	f7fe f83d 	bl	5ce4 <d_make_comp>
    7c6a:	6028      	str	r0, [r5, #0]
    7c6c:	2800      	cmp	r0, #0
    7c6e:	d1e6      	bne.n	7c3e <d_cv_qualifiers+0x62>
    7c70:	2500      	movs	r5, #0
    7c72:	4628      	mov	r0, r5
    7c74:	b003      	add	sp, #12
    7c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c7c:	3309      	adds	r3, #9
    7c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c80:	4641      	mov	r1, r8
    7c82:	2300      	movs	r3, #0
    7c84:	e7d5      	b.n	7c32 <d_cv_qualifiers+0x56>
    7c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c88:	3306      	adds	r3, #6
    7c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c8c:	4651      	mov	r1, sl
    7c8e:	2300      	movs	r3, #0
    7c90:	e7cf      	b.n	7c32 <d_cv_qualifiers+0x56>
    7c92:	2b4f      	cmp	r3, #79	; 0x4f
    7c94:	d138      	bne.n	7d08 <d_cv_qualifiers+0x12c>
    7c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c98:	3309      	adds	r3, #9
    7c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c9c:	4620      	mov	r0, r4
    7c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7ca0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
    7ca4:	9301      	str	r3, [sp, #4]
    7ca6:	f7ff fce9 	bl	767c <d_expression_1>
    7caa:	9b01      	ldr	r3, [sp, #4]
    7cac:	6323      	str	r3, [r4, #48]	; 0x30
    7cae:	4603      	mov	r3, r0
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d0dd      	beq.n	7c70 <d_cv_qualifiers+0x94>
    7cb4:	68e2      	ldr	r2, [r4, #12]
    7cb6:	7811      	ldrb	r1, [r2, #0]
    7cb8:	2945      	cmp	r1, #69	; 0x45
    7cba:	d1d9      	bne.n	7c70 <d_cv_qualifiers+0x94>
    7cbc:	3201      	adds	r2, #1
    7cbe:	60e2      	str	r2, [r4, #12]
    7cc0:	2150      	movs	r1, #80	; 0x50
    7cc2:	e7b6      	b.n	7c32 <d_cv_qualifiers+0x56>
    7cc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7cc6:	3311      	adds	r3, #17
    7cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    7cca:	214e      	movs	r1, #78	; 0x4e
    7ccc:	2300      	movs	r3, #0
    7cce:	e7b0      	b.n	7c32 <d_cv_qualifiers+0x56>
    7cd0:	f1b9 0f00 	cmp.w	r9, #0
    7cd4:	d1cd      	bne.n	7c72 <d_cv_qualifiers+0x96>
    7cd6:	2a46      	cmp	r2, #70	; 0x46
    7cd8:	d1cb      	bne.n	7c72 <d_cv_qualifiers+0x96>
    7cda:	42bd      	cmp	r5, r7
    7cdc:	d0c9      	beq.n	7c72 <d_cv_qualifiers+0x96>
    7cde:	201d      	movs	r0, #29
    7ce0:	211e      	movs	r1, #30
    7ce2:	221c      	movs	r2, #28
    7ce4:	e004      	b.n	7cf0 <d_cv_qualifiers+0x114>
    7ce6:	2b19      	cmp	r3, #25
    7ce8:	d00c      	beq.n	7d04 <d_cv_qualifiers+0x128>
    7cea:	370c      	adds	r7, #12
    7cec:	42bd      	cmp	r5, r7
    7cee:	d0c0      	beq.n	7c72 <d_cv_qualifiers+0x96>
    7cf0:	683f      	ldr	r7, [r7, #0]
    7cf2:	783b      	ldrb	r3, [r7, #0]
    7cf4:	2b1a      	cmp	r3, #26
    7cf6:	d003      	beq.n	7d00 <d_cv_qualifiers+0x124>
    7cf8:	2b1b      	cmp	r3, #27
    7cfa:	d1f4      	bne.n	7ce6 <d_cv_qualifiers+0x10a>
    7cfc:	7039      	strb	r1, [r7, #0]
    7cfe:	e7f4      	b.n	7cea <d_cv_qualifiers+0x10e>
    7d00:	7038      	strb	r0, [r7, #0]
    7d02:	e7f2      	b.n	7cea <d_cv_qualifiers+0x10e>
    7d04:	703a      	strb	r2, [r7, #0]
    7d06:	e7f0      	b.n	7cea <d_cv_qualifiers+0x10e>
    7d08:	2b77      	cmp	r3, #119	; 0x77
    7d0a:	d1b1      	bne.n	7c70 <d_cv_qualifiers+0x94>
    7d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7d0e:	3306      	adds	r3, #6
    7d10:	62e3      	str	r3, [r4, #44]	; 0x2c
    7d12:	4620      	mov	r0, r4
    7d14:	f7ff f870 	bl	6df8 <d_parmlist>
    7d18:	4603      	mov	r3, r0
    7d1a:	2800      	cmp	r0, #0
    7d1c:	d0a8      	beq.n	7c70 <d_cv_qualifiers+0x94>
    7d1e:	68e2      	ldr	r2, [r4, #12]
    7d20:	7811      	ldrb	r1, [r2, #0]
    7d22:	2945      	cmp	r1, #69	; 0x45
    7d24:	d1a4      	bne.n	7c70 <d_cv_qualifiers+0x94>
    7d26:	3201      	adds	r2, #1
    7d28:	60e2      	str	r2, [r4, #12]
    7d2a:	2151      	movs	r1, #81	; 0x51
    7d2c:	e781      	b.n	7c32 <d_cv_qualifiers+0x56>
    7d2e:	bf00      	nop

00007d30 <d_special_name>:
    7d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d34:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    7d36:	68c3      	ldr	r3, [r0, #12]
    7d38:	f101 0214 	add.w	r2, r1, #20
    7d3c:	62c2      	str	r2, [r0, #44]	; 0x2c
    7d3e:	781a      	ldrb	r2, [r3, #0]
    7d40:	2a54      	cmp	r2, #84	; 0x54
    7d42:	b082      	sub	sp, #8
    7d44:	4604      	mov	r4, r0
    7d46:	d075      	beq.n	7e34 <d_special_name+0x104>
    7d48:	2a47      	cmp	r2, #71	; 0x47
    7d4a:	d128      	bne.n	7d9e <d_special_name+0x6e>
    7d4c:	1c5a      	adds	r2, r3, #1
    7d4e:	60c2      	str	r2, [r0, #12]
    7d50:	785a      	ldrb	r2, [r3, #1]
    7d52:	b322      	cbz	r2, 7d9e <d_special_name+0x6e>
    7d54:	1c9a      	adds	r2, r3, #2
    7d56:	60c2      	str	r2, [r0, #12]
    7d58:	785a      	ldrb	r2, [r3, #1]
    7d5a:	2a56      	cmp	r2, #86	; 0x56
    7d5c:	d823      	bhi.n	7da6 <d_special_name+0x76>
    7d5e:	2a40      	cmp	r2, #64	; 0x40
    7d60:	d91d      	bls.n	7d9e <d_special_name+0x6e>
    7d62:	3a41      	subs	r2, #65	; 0x41
    7d64:	2a15      	cmp	r2, #21
    7d66:	d81a      	bhi.n	7d9e <d_special_name+0x6e>
    7d68:	e8df f012 	tbh	[pc, r2, lsl #1]
    7d6c:	0019011d 	.word	0x0019011d
    7d70:	00190019 	.word	0x00190019
    7d74:	00190019 	.word	0x00190019
    7d78:	00190019 	.word	0x00190019
    7d7c:	00190019 	.word	0x00190019
    7d80:	00190019 	.word	0x00190019
    7d84:	00190019 	.word	0x00190019
    7d88:	00190019 	.word	0x00190019
    7d8c:	00ff0019 	.word	0x00ff0019
    7d90:	00e90019 	.word	0x00e90019
    7d94:	00de0019 	.word	0x00de0019
    7d98:	68e3      	ldr	r3, [r4, #12]
    7d9a:	3302      	adds	r3, #2
    7d9c:	60e3      	str	r3, [r4, #12]
    7d9e:	2000      	movs	r0, #0
    7da0:	b002      	add	sp, #8
    7da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7da6:	2a72      	cmp	r2, #114	; 0x72
    7da8:	d1f9      	bne.n	7d9e <d_special_name+0x6e>
    7daa:	f7fe f813 	bl	5dd4 <d_number>
    7dae:	2801      	cmp	r0, #1
    7db0:	ddf5      	ble.n	7d9e <d_special_name+0x6e>
    7db2:	68e3      	ldr	r3, [r4, #12]
    7db4:	781a      	ldrb	r2, [r3, #0]
    7db6:	2a00      	cmp	r2, #0
    7db8:	d0f1      	beq.n	7d9e <d_special_name+0x6e>
    7dba:	1c5e      	adds	r6, r3, #1
    7dbc:	60e6      	str	r6, [r4, #12]
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	2b5f      	cmp	r3, #95	; 0x5f
    7dc2:	d1ec      	bne.n	7d9e <d_special_name+0x6e>
    7dc4:	2200      	movs	r2, #0
    7dc6:	1e45      	subs	r5, r0, #1
    7dc8:	4617      	mov	r7, r2
    7dca:	f04f 0842 	mov.w	r8, #66	; 0x42
    7dce:	7833      	ldrb	r3, [r6, #0]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d0e4      	beq.n	7d9e <d_special_name+0x6e>
    7dd4:	2b24      	cmp	r3, #36	; 0x24
    7dd6:	f040 819f 	bne.w	8118 <d_special_name+0x3e8>
    7dda:	7873      	ldrb	r3, [r6, #1]
    7ddc:	2b53      	cmp	r3, #83	; 0x53
    7dde:	f000 81bf 	beq.w	8160 <d_special_name+0x430>
    7de2:	2b5f      	cmp	r3, #95	; 0x5f
    7de4:	f000 81ba 	beq.w	815c <d_special_name+0x42c>
    7de8:	2b24      	cmp	r3, #36	; 0x24
    7dea:	d1d8      	bne.n	7d9e <d_special_name+0x6e>
    7dec:	4619      	mov	r1, r3
    7dee:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    7df2:	4298      	cmp	r0, r3
    7df4:	dad0      	bge.n	7d98 <d_special_name+0x68>
    7df6:	6926      	ldr	r6, [r4, #16]
    7df8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
    7dfc:	eb06 038c 	add.w	r3, r6, ip, lsl #2
    7e00:	3001      	adds	r0, #1
    7e02:	e9c3 7701 	strd	r7, r7, [r3, #4]
    7e06:	6160      	str	r0, [r4, #20]
    7e08:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
    7e0c:	68e6      	ldr	r6, [r4, #12]
    7e0e:	60d9      	str	r1, [r3, #12]
    7e10:	3d02      	subs	r5, #2
    7e12:	3602      	adds	r6, #2
    7e14:	60e6      	str	r6, [r4, #12]
    7e16:	2a00      	cmp	r2, #0
    7e18:	f000 819e 	beq.w	8158 <d_special_name+0x428>
    7e1c:	2141      	movs	r1, #65	; 0x41
    7e1e:	4620      	mov	r0, r4
    7e20:	f7fd ff60 	bl	5ce4 <d_make_comp>
    7e24:	4602      	mov	r2, r0
    7e26:	2800      	cmp	r0, #0
    7e28:	d0b9      	beq.n	7d9e <d_special_name+0x6e>
    7e2a:	2d00      	cmp	r5, #0
    7e2c:	dccf      	bgt.n	7dce <d_special_name+0x9e>
    7e2e:	2300      	movs	r3, #0
    7e30:	2140      	movs	r1, #64	; 0x40
    7e32:	e07e      	b.n	7f32 <d_special_name+0x202>
    7e34:	1c5a      	adds	r2, r3, #1
    7e36:	60c2      	str	r2, [r0, #12]
    7e38:	785a      	ldrb	r2, [r3, #1]
    7e3a:	2a00      	cmp	r2, #0
    7e3c:	d0af      	beq.n	7d9e <d_special_name+0x6e>
    7e3e:	1c9a      	adds	r2, r3, #2
    7e40:	60c2      	str	r2, [r0, #12]
    7e42:	785b      	ldrb	r3, [r3, #1]
    7e44:	3b41      	subs	r3, #65	; 0x41
    7e46:	2b35      	cmp	r3, #53	; 0x35
    7e48:	d8a9      	bhi.n	7d9e <d_special_name+0x6e>
    7e4a:	a201      	add	r2, pc, #4	; (adr r2, 7e50 <d_special_name+0x120>)
    7e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e50:	00008017 	.word	0x00008017
    7e54:	00007d9f 	.word	0x00007d9f
    7e58:	00007fe3 	.word	0x00007fe3
    7e5c:	00007d9f 	.word	0x00007d9f
    7e60:	00007d9f 	.word	0x00007d9f
    7e64:	00008023 	.word	0x00008023
    7e68:	00007d9f 	.word	0x00007d9f
    7e6c:	00008087 	.word	0x00008087
    7e70:	00008101 	.word	0x00008101
    7e74:	000080f5 	.word	0x000080f5
    7e78:	00007d9f 	.word	0x00007d9f
    7e7c:	00007d9f 	.word	0x00007d9f
    7e80:	00007d9f 	.word	0x00007d9f
    7e84:	00007d9f 	.word	0x00007d9f
    7e88:	00007d9f 	.word	0x00007d9f
    7e8c:	00007d9f 	.word	0x00007d9f
    7e90:	00007d9f 	.word	0x00007d9f
    7e94:	00007d9f 	.word	0x00007d9f
    7e98:	0000810d 	.word	0x0000810d
    7e9c:	00008093 	.word	0x00008093
    7ea0:	00007d9f 	.word	0x00007d9f
    7ea4:	000080a3 	.word	0x000080a3
    7ea8:	000080b3 	.word	0x000080b3
    7eac:	00007d9f 	.word	0x00007d9f
    7eb0:	00007d9f 	.word	0x00007d9f
    7eb4:	00007d9f 	.word	0x00007d9f
    7eb8:	00007d9f 	.word	0x00007d9f
    7ebc:	00007d9f 	.word	0x00007d9f
    7ec0:	00007d9f 	.word	0x00007d9f
    7ec4:	00007d9f 	.word	0x00007d9f
    7ec8:	00007d9f 	.word	0x00007d9f
    7ecc:	00007d9f 	.word	0x00007d9f
    7ed0:	00007d9f 	.word	0x00007d9f
    7ed4:	00007d9f 	.word	0x00007d9f
    7ed8:	000080bf 	.word	0x000080bf
    7edc:	00007d9f 	.word	0x00007d9f
    7ee0:	00007d9f 	.word	0x00007d9f
    7ee4:	00007d9f 	.word	0x00007d9f
    7ee8:	00007d9f 	.word	0x00007d9f
    7eec:	0000802f 	.word	0x0000802f
    7ef0:	00007d9f 	.word	0x00007d9f
    7ef4:	00007d9f 	.word	0x00007d9f
    7ef8:	00007d9f 	.word	0x00007d9f
    7efc:	00007d9f 	.word	0x00007d9f
    7f00:	00007d9f 	.word	0x00007d9f
    7f04:	00007d9f 	.word	0x00007d9f
    7f08:	00007d9f 	.word	0x00007d9f
    7f0c:	00007d9f 	.word	0x00007d9f
    7f10:	00007d9f 	.word	0x00007d9f
    7f14:	00007d9f 	.word	0x00007d9f
    7f18:	00007d9f 	.word	0x00007d9f
    7f1c:	00007d9f 	.word	0x00007d9f
    7f20:	00007d9f 	.word	0x00007d9f
    7f24:	0000805b 	.word	0x0000805b
    7f28:	f000 f93c 	bl	81a4 <d_name>
    7f2c:	2300      	movs	r3, #0
    7f2e:	4602      	mov	r2, r0
    7f30:	2113      	movs	r1, #19
    7f32:	4620      	mov	r0, r4
    7f34:	b002      	add	sp, #8
    7f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f3a:	f7fd bed3 	b.w	5ce4 <d_make_comp>
    7f3e:	789a      	ldrb	r2, [r3, #2]
    7f40:	2a00      	cmp	r2, #0
    7f42:	f000 810f 	beq.w	8164 <d_special_name+0x434>
    7f46:	1cda      	adds	r2, r3, #3
    7f48:	60c2      	str	r2, [r0, #12]
    7f4a:	789a      	ldrb	r2, [r3, #2]
    7f4c:	78db      	ldrb	r3, [r3, #3]
    7f4e:	2a6e      	cmp	r2, #110	; 0x6e
    7f50:	d03a      	beq.n	7fc8 <d_special_name+0x298>
    7f52:	2b47      	cmp	r3, #71	; 0x47
    7f54:	d002      	beq.n	7f5c <d_special_name+0x22c>
    7f56:	2b54      	cmp	r3, #84	; 0x54
    7f58:	f040 8104 	bne.w	8164 <d_special_name+0x434>
    7f5c:	4620      	mov	r0, r4
    7f5e:	f7ff fee7 	bl	7d30 <d_special_name>
    7f62:	4602      	mov	r2, r0
    7f64:	2300      	movs	r3, #0
    7f66:	214a      	movs	r1, #74	; 0x4a
    7f68:	e7e3      	b.n	7f32 <d_special_name+0x202>
    7f6a:	f000 f91b 	bl	81a4 <d_name>
    7f6e:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
    7f72:	4299      	cmp	r1, r3
    7f74:	4602      	mov	r2, r0
    7f76:	f280 80ff 	bge.w	8178 <d_special_name+0x448>
    7f7a:	9001      	str	r0, [sp, #4]
    7f7c:	6920      	ldr	r0, [r4, #16]
    7f7e:	eb01 0681 	add.w	r6, r1, r1, lsl #2
    7f82:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    7f86:	2300      	movs	r3, #0
    7f88:	e9c5 3301 	strd	r3, r3, [r5, #4]
    7f8c:	3101      	adds	r1, #1
    7f8e:	2343      	movs	r3, #67	; 0x43
    7f90:	6161      	str	r1, [r4, #20]
    7f92:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
    7f96:	4620      	mov	r0, r4
    7f98:	f7fd ff1c 	bl	5dd4 <d_number>
    7f9c:	9a01      	ldr	r2, [sp, #4]
    7f9e:	60e8      	str	r0, [r5, #12]
    7fa0:	462b      	mov	r3, r5
    7fa2:	2116      	movs	r1, #22
    7fa4:	e7c5      	b.n	7f32 <d_special_name+0x202>
    7fa6:	789b      	ldrb	r3, [r3, #2]
    7fa8:	2b47      	cmp	r3, #71	; 0x47
    7faa:	d001      	beq.n	7fb0 <d_special_name+0x280>
    7fac:	2b54      	cmp	r3, #84	; 0x54
    7fae:	d106      	bne.n	7fbe <d_special_name+0x28e>
    7fb0:	4620      	mov	r0, r4
    7fb2:	f7ff febd 	bl	7d30 <d_special_name>
    7fb6:	4602      	mov	r2, r0
    7fb8:	2300      	movs	r3, #0
    7fba:	2117      	movs	r1, #23
    7fbc:	e7b9      	b.n	7f32 <d_special_name+0x202>
    7fbe:	2100      	movs	r1, #0
    7fc0:	f000 fa3e 	bl	8440 <d_encoding.part.0>
    7fc4:	4602      	mov	r2, r0
    7fc6:	e7f7      	b.n	7fb8 <d_special_name+0x288>
    7fc8:	2b47      	cmp	r3, #71	; 0x47
    7fca:	f000 80e1 	beq.w	8190 <d_special_name+0x460>
    7fce:	2b54      	cmp	r3, #84	; 0x54
    7fd0:	f000 80de 	beq.w	8190 <d_special_name+0x460>
    7fd4:	2100      	movs	r1, #0
    7fd6:	f000 fa33 	bl	8440 <d_encoding.part.0>
    7fda:	4602      	mov	r2, r0
    7fdc:	2300      	movs	r3, #0
    7fde:	214b      	movs	r1, #75	; 0x4b
    7fe0:	e7a7      	b.n	7f32 <d_special_name+0x202>
    7fe2:	f7fe fad1 	bl	6588 <d_type>
    7fe6:	4605      	mov	r5, r0
    7fe8:	4620      	mov	r0, r4
    7fea:	f7fd fef3 	bl	5dd4 <d_number>
    7fee:	2800      	cmp	r0, #0
    7ff0:	f6ff aed5 	blt.w	7d9e <d_special_name+0x6e>
    7ff4:	68e3      	ldr	r3, [r4, #12]
    7ff6:	781a      	ldrb	r2, [r3, #0]
    7ff8:	2a5f      	cmp	r2, #95	; 0x5f
    7ffa:	f47f aed0 	bne.w	7d9e <d_special_name+0x6e>
    7ffe:	3301      	adds	r3, #1
    8000:	60e3      	str	r3, [r4, #12]
    8002:	4620      	mov	r0, r4
    8004:	f7fe fac0 	bl	6588 <d_type>
    8008:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    800a:	3105      	adds	r1, #5
    800c:	62e1      	str	r1, [r4, #44]	; 0x2c
    800e:	4602      	mov	r2, r0
    8010:	462b      	mov	r3, r5
    8012:	210b      	movs	r1, #11
    8014:	e78d      	b.n	7f32 <d_special_name+0x202>
    8016:	f7ff fa3d 	bl	7494 <d_template_arg>
    801a:	2300      	movs	r3, #0
    801c:	4602      	mov	r2, r0
    801e:	2130      	movs	r1, #48	; 0x30
    8020:	e787      	b.n	7f32 <d_special_name+0x202>
    8022:	f7fe fab1 	bl	6588 <d_type>
    8026:	2300      	movs	r3, #0
    8028:	4602      	mov	r2, r0
    802a:	210e      	movs	r1, #14
    802c:	e781      	b.n	7f32 <d_special_name+0x202>
    802e:	2168      	movs	r1, #104	; 0x68
    8030:	f7fd ff0a 	bl	5e48 <d_call_offset>
    8034:	2800      	cmp	r0, #0
    8036:	f43f aeb2 	beq.w	7d9e <d_special_name+0x6e>
    803a:	68e3      	ldr	r3, [r4, #12]
    803c:	781b      	ldrb	r3, [r3, #0]
    803e:	2b47      	cmp	r3, #71	; 0x47
    8040:	f000 80a1 	beq.w	8186 <d_special_name+0x456>
    8044:	2b54      	cmp	r3, #84	; 0x54
    8046:	f000 809e 	beq.w	8186 <d_special_name+0x456>
    804a:	2100      	movs	r1, #0
    804c:	4620      	mov	r0, r4
    804e:	f000 f9f7 	bl	8440 <d_encoding.part.0>
    8052:	4602      	mov	r2, r0
    8054:	2300      	movs	r3, #0
    8056:	210f      	movs	r1, #15
    8058:	e76b      	b.n	7f32 <d_special_name+0x202>
    805a:	2176      	movs	r1, #118	; 0x76
    805c:	f7fd fef4 	bl	5e48 <d_call_offset>
    8060:	2800      	cmp	r0, #0
    8062:	f43f ae9c 	beq.w	7d9e <d_special_name+0x6e>
    8066:	68e3      	ldr	r3, [r4, #12]
    8068:	781b      	ldrb	r3, [r3, #0]
    806a:	2b47      	cmp	r3, #71	; 0x47
    806c:	f000 8086 	beq.w	817c <d_special_name+0x44c>
    8070:	2b54      	cmp	r3, #84	; 0x54
    8072:	f000 8083 	beq.w	817c <d_special_name+0x44c>
    8076:	2100      	movs	r1, #0
    8078:	4620      	mov	r0, r4
    807a:	f000 f9e1 	bl	8440 <d_encoding.part.0>
    807e:	4602      	mov	r2, r0
    8080:	2300      	movs	r3, #0
    8082:	2110      	movs	r1, #16
    8084:	e755      	b.n	7f32 <d_special_name+0x202>
    8086:	f000 f88d 	bl	81a4 <d_name>
    808a:	2300      	movs	r3, #0
    808c:	4602      	mov	r2, r0
    808e:	2114      	movs	r1, #20
    8090:	e74f      	b.n	7f32 <d_special_name+0x202>
    8092:	310a      	adds	r1, #10
    8094:	62c1      	str	r1, [r0, #44]	; 0x2c
    8096:	f7fe fa77 	bl	6588 <d_type>
    809a:	2300      	movs	r3, #0
    809c:	4602      	mov	r2, r0
    809e:	210a      	movs	r1, #10
    80a0:	e747      	b.n	7f32 <d_special_name+0x202>
    80a2:	310f      	adds	r1, #15
    80a4:	62c1      	str	r1, [r0, #44]	; 0x2c
    80a6:	f7fe fa6f 	bl	6588 <d_type>
    80aa:	2300      	movs	r3, #0
    80ac:	4602      	mov	r2, r0
    80ae:	2109      	movs	r1, #9
    80b0:	e73f      	b.n	7f32 <d_special_name+0x202>
    80b2:	f000 f877 	bl	81a4 <d_name>
    80b6:	2300      	movs	r3, #0
    80b8:	4602      	mov	r2, r0
    80ba:	2115      	movs	r1, #21
    80bc:	e739      	b.n	7f32 <d_special_name+0x202>
    80be:	2100      	movs	r1, #0
    80c0:	f7fd fec2 	bl	5e48 <d_call_offset>
    80c4:	2800      	cmp	r0, #0
    80c6:	f43f ae6a 	beq.w	7d9e <d_special_name+0x6e>
    80ca:	2100      	movs	r1, #0
    80cc:	4620      	mov	r0, r4
    80ce:	f7fd febb 	bl	5e48 <d_call_offset>
    80d2:	2800      	cmp	r0, #0
    80d4:	f43f ae63 	beq.w	7d9e <d_special_name+0x6e>
    80d8:	68e3      	ldr	r3, [r4, #12]
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	2b47      	cmp	r3, #71	; 0x47
    80de:	d05c      	beq.n	819a <d_special_name+0x46a>
    80e0:	2b54      	cmp	r3, #84	; 0x54
    80e2:	d05a      	beq.n	819a <d_special_name+0x46a>
    80e4:	2100      	movs	r1, #0
    80e6:	4620      	mov	r0, r4
    80e8:	f000 f9aa 	bl	8440 <d_encoding.part.0>
    80ec:	4602      	mov	r2, r0
    80ee:	2300      	movs	r3, #0
    80f0:	2111      	movs	r1, #17
    80f2:	e71e      	b.n	7f32 <d_special_name+0x202>
    80f4:	f7fe fa48 	bl	6588 <d_type>
    80f8:	2300      	movs	r3, #0
    80fa:	4602      	mov	r2, r0
    80fc:	2112      	movs	r1, #18
    80fe:	e718      	b.n	7f32 <d_special_name+0x202>
    8100:	f7fe fa42 	bl	6588 <d_type>
    8104:	2300      	movs	r3, #0
    8106:	4602      	mov	r2, r0
    8108:	210c      	movs	r1, #12
    810a:	e712      	b.n	7f32 <d_special_name+0x202>
    810c:	f7fe fa3c 	bl	6588 <d_type>
    8110:	2300      	movs	r3, #0
    8112:	4602      	mov	r2, r0
    8114:	210d      	movs	r1, #13
    8116:	e70c      	b.n	7f32 <d_special_name+0x202>
    8118:	46b4      	mov	ip, r6
    811a:	2100      	movs	r1, #0
    811c:	e004      	b.n	8128 <d_special_name+0x3f8>
    811e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    8122:	b123      	cbz	r3, 812e <d_special_name+0x3fe>
    8124:	2b24      	cmp	r3, #36	; 0x24
    8126:	d002      	beq.n	812e <d_special_name+0x3fe>
    8128:	3101      	adds	r1, #1
    812a:	42a9      	cmp	r1, r5
    812c:	dbf7      	blt.n	811e <d_special_name+0x3ee>
    812e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
    8132:	4283      	cmp	r3, r0
    8134:	da1c      	bge.n	8170 <d_special_name+0x440>
    8136:	6920      	ldr	r0, [r4, #16]
    8138:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    813c:	3301      	adds	r3, #1
    813e:	6163      	str	r3, [r4, #20]
    8140:	eb00 038c 	add.w	r3, r0, ip, lsl #2
    8144:	e9c3 7701 	strd	r7, r7, [r3, #4]
    8148:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
    814c:	e9c3 6103 	strd	r6, r1, [r3, #12]
    8150:	68e6      	ldr	r6, [r4, #12]
    8152:	1a6d      	subs	r5, r5, r1
    8154:	440e      	add	r6, r1
    8156:	e65d      	b.n	7e14 <d_special_name+0xe4>
    8158:	461a      	mov	r2, r3
    815a:	e666      	b.n	7e2a <d_special_name+0xfa>
    815c:	212e      	movs	r1, #46	; 0x2e
    815e:	e646      	b.n	7dee <d_special_name+0xbe>
    8160:	212f      	movs	r1, #47	; 0x2f
    8162:	e644      	b.n	7dee <d_special_name+0xbe>
    8164:	2100      	movs	r1, #0
    8166:	4620      	mov	r0, r4
    8168:	f000 f96a 	bl	8440 <d_encoding.part.0>
    816c:	4602      	mov	r2, r0
    816e:	e6f9      	b.n	7f64 <d_special_name+0x234>
    8170:	68e3      	ldr	r3, [r4, #12]
    8172:	440b      	add	r3, r1
    8174:	60e3      	str	r3, [r4, #12]
    8176:	e612      	b.n	7d9e <d_special_name+0x6e>
    8178:	2500      	movs	r5, #0
    817a:	e711      	b.n	7fa0 <d_special_name+0x270>
    817c:	4620      	mov	r0, r4
    817e:	f7ff fdd7 	bl	7d30 <d_special_name>
    8182:	4602      	mov	r2, r0
    8184:	e77c      	b.n	8080 <d_special_name+0x350>
    8186:	4620      	mov	r0, r4
    8188:	f7ff fdd2 	bl	7d30 <d_special_name>
    818c:	4602      	mov	r2, r0
    818e:	e761      	b.n	8054 <d_special_name+0x324>
    8190:	4620      	mov	r0, r4
    8192:	f7ff fdcd 	bl	7d30 <d_special_name>
    8196:	4602      	mov	r2, r0
    8198:	e720      	b.n	7fdc <d_special_name+0x2ac>
    819a:	4620      	mov	r0, r4
    819c:	f7ff fdc8 	bl	7d30 <d_special_name>
    81a0:	4602      	mov	r2, r0
    81a2:	e7a4      	b.n	80ee <d_special_name+0x3be>

000081a4 <d_name>:
    81a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    81a6:	68c2      	ldr	r2, [r0, #12]
    81a8:	7813      	ldrb	r3, [r2, #0]
    81aa:	3b4e      	subs	r3, #78	; 0x4e
    81ac:	b083      	sub	sp, #12
    81ae:	4604      	mov	r4, r0
    81b0:	2b0c      	cmp	r3, #12
    81b2:	d808      	bhi.n	81c6 <d_name+0x22>
    81b4:	e8df f003 	tbb	[pc, r3]
    81b8:	07070731 	.word	0x07070731
    81bc:	12071707 	.word	0x12071707
    81c0:	07070707 	.word	0x07070707
    81c4:	55          	.byte	0x55
    81c5:	00          	.byte	0x00
    81c6:	f7fe ff35 	bl	7034 <d_unqualified_name>
    81ca:	68e3      	ldr	r3, [r4, #12]
    81cc:	781a      	ldrb	r2, [r3, #0]
    81ce:	2a49      	cmp	r2, #73	; 0x49
    81d0:	4605      	mov	r5, r0
    81d2:	f000 80d2 	beq.w	837a <d_name+0x1d6>
    81d6:	4628      	mov	r0, r5
    81d8:	b003      	add	sp, #12
    81da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81dc:	b003      	add	sp, #12
    81de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    81e2:	f7fe bf27 	b.w	7034 <d_unqualified_name>
    81e6:	7853      	ldrb	r3, [r2, #1]
    81e8:	2b74      	cmp	r3, #116	; 0x74
    81ea:	f000 808e 	beq.w	830a <d_name+0x166>
    81ee:	2100      	movs	r1, #0
    81f0:	f7fe f900 	bl	63f4 <d_substitution>
    81f4:	68e3      	ldr	r3, [r4, #12]
    81f6:	781a      	ldrb	r2, [r3, #0]
    81f8:	2a49      	cmp	r2, #73	; 0x49
    81fa:	4605      	mov	r5, r0
    81fc:	d1eb      	bne.n	81d6 <d_name+0x32>
    81fe:	3301      	adds	r3, #1
    8200:	60e3      	str	r3, [r4, #12]
    8202:	4620      	mov	r0, r4
    8204:	f7ff f972 	bl	74ec <d_template_args_1>
    8208:	4603      	mov	r3, r0
    820a:	462a      	mov	r2, r5
    820c:	2104      	movs	r1, #4
    820e:	4620      	mov	r0, r4
    8210:	b003      	add	sp, #12
    8212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8216:	f7fd bd65 	b.w	5ce4 <d_make_comp>
    821a:	3201      	adds	r2, #1
    821c:	60c2      	str	r2, [r0, #12]
    821e:	a901      	add	r1, sp, #4
    8220:	2201      	movs	r2, #1
    8222:	f7ff fcdb 	bl	7bdc <d_cv_qualifiers>
    8226:	4605      	mov	r5, r0
    8228:	2800      	cmp	r0, #0
    822a:	f000 80b7 	beq.w	839c <d_name+0x1f8>
    822e:	2100      	movs	r1, #0
    8230:	4620      	mov	r0, r4
    8232:	f7fd fe2d 	bl	5e90 <d_ref_qualifier>
    8236:	2101      	movs	r1, #1
    8238:	4606      	mov	r6, r0
    823a:	4620      	mov	r0, r4
    823c:	f7ff f988 	bl	7550 <d_prefix>
    8240:	6028      	str	r0, [r5, #0]
    8242:	2800      	cmp	r0, #0
    8244:	f000 80aa 	beq.w	839c <d_name+0x1f8>
    8248:	b116      	cbz	r6, 8250 <d_name+0xac>
    824a:	9b01      	ldr	r3, [sp, #4]
    824c:	60f3      	str	r3, [r6, #12]
    824e:	9601      	str	r6, [sp, #4]
    8250:	68e3      	ldr	r3, [r4, #12]
    8252:	781a      	ldrb	r2, [r3, #0]
    8254:	2a45      	cmp	r2, #69	; 0x45
    8256:	f040 80a1 	bne.w	839c <d_name+0x1f8>
    825a:	3301      	adds	r3, #1
    825c:	9d01      	ldr	r5, [sp, #4]
    825e:	60e3      	str	r3, [r4, #12]
    8260:	e7b9      	b.n	81d6 <d_name+0x32>
    8262:	1c53      	adds	r3, r2, #1
    8264:	60c3      	str	r3, [r0, #12]
    8266:	7853      	ldrb	r3, [r2, #1]
    8268:	2b47      	cmp	r3, #71	; 0x47
    826a:	d002      	beq.n	8272 <d_name+0xce>
    826c:	2b54      	cmp	r3, #84	; 0x54
    826e:	f040 8099 	bne.w	83a4 <d_name+0x200>
    8272:	4620      	mov	r0, r4
    8274:	f7ff fd5c 	bl	7d30 <d_special_name>
    8278:	4605      	mov	r5, r0
    827a:	2d00      	cmp	r5, #0
    827c:	f000 808e 	beq.w	839c <d_name+0x1f8>
    8280:	68e3      	ldr	r3, [r4, #12]
    8282:	781a      	ldrb	r2, [r3, #0]
    8284:	2a45      	cmp	r2, #69	; 0x45
    8286:	f040 8089 	bne.w	839c <d_name+0x1f8>
    828a:	1c5a      	adds	r2, r3, #1
    828c:	60e2      	str	r2, [r4, #12]
    828e:	785a      	ldrb	r2, [r3, #1]
    8290:	2a73      	cmp	r2, #115	; 0x73
    8292:	f000 80ad 	beq.w	83f0 <d_name+0x24c>
    8296:	2a64      	cmp	r2, #100	; 0x64
    8298:	f000 8089 	beq.w	83ae <d_name+0x20a>
    829c:	4620      	mov	r0, r4
    829e:	f7ff ff81 	bl	81a4 <d_name>
    82a2:	4603      	mov	r3, r0
    82a4:	b328      	cbz	r0, 82f2 <d_name+0x14e>
    82a6:	7802      	ldrb	r2, [r0, #0]
    82a8:	2a47      	cmp	r2, #71	; 0x47
    82aa:	d022      	beq.n	82f2 <d_name+0x14e>
    82ac:	2a49      	cmp	r2, #73	; 0x49
    82ae:	d020      	beq.n	82f2 <d_name+0x14e>
    82b0:	461f      	mov	r7, r3
    82b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    82b6:	4620      	mov	r0, r4
    82b8:	f7fd fe7e 	bl	5fb8 <d_discriminator>
    82bc:	2800      	cmp	r0, #0
    82be:	d06d      	beq.n	839c <d_name+0x1f8>
    82c0:	1c73      	adds	r3, r6, #1
    82c2:	bf08      	it	eq
    82c4:	463b      	moveq	r3, r7
    82c6:	d014      	beq.n	82f2 <d_name+0x14e>
    82c8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    82cc:	429a      	cmp	r2, r3
    82ce:	f280 80b0 	bge.w	8432 <d_name+0x28e>
    82d2:	6921      	ldr	r1, [r4, #16]
    82d4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    82d8:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    82dc:	3201      	adds	r2, #1
    82de:	f04f 0c00 	mov.w	ip, #0
    82e2:	e9c3 cc01 	strd	ip, ip, [r3, #4]
    82e6:	6162      	str	r2, [r4, #20]
    82e8:	2248      	movs	r2, #72	; 0x48
    82ea:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
    82ee:	e9c3 7603 	strd	r7, r6, [r3, #12]
    82f2:	782a      	ldrb	r2, [r5, #0]
    82f4:	2a03      	cmp	r2, #3
    82f6:	d105      	bne.n	8304 <d_name+0x160>
    82f8:	692a      	ldr	r2, [r5, #16]
    82fa:	7811      	ldrb	r1, [r2, #0]
    82fc:	2929      	cmp	r1, #41	; 0x29
    82fe:	bf04      	itt	eq
    8300:	2100      	moveq	r1, #0
    8302:	60d1      	streq	r1, [r2, #12]
    8304:	462a      	mov	r2, r5
    8306:	2102      	movs	r1, #2
    8308:	e781      	b.n	820e <d_name+0x6a>
    830a:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
    830e:	3202      	adds	r2, #2
    8310:	428b      	cmp	r3, r1
    8312:	60c2      	str	r2, [r0, #12]
    8314:	f280 8088 	bge.w	8428 <d_name+0x284>
    8318:	6902      	ldr	r2, [r0, #16]
    831a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    831e:	00a9      	lsls	r1, r5, #2
    8320:	3301      	adds	r3, #1
    8322:	6143      	str	r3, [r0, #20]
    8324:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    8328:	2300      	movs	r3, #0
    832a:	e9c5 3301 	strd	r3, r3, [r5, #4]
    832e:	5453      	strb	r3, [r2, r1]
    8330:	4a41      	ldr	r2, [pc, #260]	; (8438 <d_name+0x294>)
    8332:	2303      	movs	r3, #3
    8334:	e9c5 2303 	strd	r2, r3, [r5, #12]
    8338:	4620      	mov	r0, r4
    833a:	f7fe fe7b 	bl	7034 <d_unqualified_name>
    833e:	462a      	mov	r2, r5
    8340:	4603      	mov	r3, r0
    8342:	2101      	movs	r1, #1
    8344:	4620      	mov	r0, r4
    8346:	f7fd fccd 	bl	5ce4 <d_make_comp>
    834a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    834c:	68e3      	ldr	r3, [r4, #12]
    834e:	3203      	adds	r2, #3
    8350:	62e2      	str	r2, [r4, #44]	; 0x2c
    8352:	781a      	ldrb	r2, [r3, #0]
    8354:	2a49      	cmp	r2, #73	; 0x49
    8356:	4605      	mov	r5, r0
    8358:	f47f af3d 	bne.w	81d6 <d_name+0x32>
    835c:	b1f0      	cbz	r0, 839c <d_name+0x1f8>
    835e:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    8362:	428a      	cmp	r2, r1
    8364:	da1a      	bge.n	839c <d_name+0x1f8>
    8366:	69e1      	ldr	r1, [r4, #28]
    8368:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    836c:	3201      	adds	r2, #1
    836e:	6222      	str	r2, [r4, #32]
    8370:	781a      	ldrb	r2, [r3, #0]
    8372:	3a49      	subs	r2, #73	; 0x49
    8374:	2a01      	cmp	r2, #1
    8376:	d80f      	bhi.n	8398 <d_name+0x1f4>
    8378:	e741      	b.n	81fe <d_name+0x5a>
    837a:	b178      	cbz	r0, 839c <d_name+0x1f8>
    837c:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    8380:	428a      	cmp	r2, r1
    8382:	da0b      	bge.n	839c <d_name+0x1f8>
    8384:	69e1      	ldr	r1, [r4, #28]
    8386:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    838a:	3201      	adds	r2, #1
    838c:	6222      	str	r2, [r4, #32]
    838e:	781a      	ldrb	r2, [r3, #0]
    8390:	3a49      	subs	r2, #73	; 0x49
    8392:	2a01      	cmp	r2, #1
    8394:	f67f af33 	bls.w	81fe <d_name+0x5a>
    8398:	2300      	movs	r3, #0
    839a:	e736      	b.n	820a <d_name+0x66>
    839c:	2500      	movs	r5, #0
    839e:	4628      	mov	r0, r5
    83a0:	b003      	add	sp, #12
    83a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83a4:	2100      	movs	r1, #0
    83a6:	f000 f84b 	bl	8440 <d_encoding.part.0>
    83aa:	4605      	mov	r5, r0
    83ac:	e765      	b.n	827a <d_name+0xd6>
    83ae:	1c9a      	adds	r2, r3, #2
    83b0:	60e2      	str	r2, [r4, #12]
    83b2:	789a      	ldrb	r2, [r3, #2]
    83b4:	2a5f      	cmp	r2, #95	; 0x5f
    83b6:	d039      	beq.n	842c <d_name+0x288>
    83b8:	2a6e      	cmp	r2, #110	; 0x6e
    83ba:	d0ef      	beq.n	839c <d_name+0x1f8>
    83bc:	4620      	mov	r0, r4
    83be:	f7fd fd09 	bl	5dd4 <d_number>
    83c2:	1c46      	adds	r6, r0, #1
    83c4:	d4ea      	bmi.n	839c <d_name+0x1f8>
    83c6:	68e3      	ldr	r3, [r4, #12]
    83c8:	781a      	ldrb	r2, [r3, #0]
    83ca:	2a5f      	cmp	r2, #95	; 0x5f
    83cc:	d1e6      	bne.n	839c <d_name+0x1f8>
    83ce:	3301      	adds	r3, #1
    83d0:	60e3      	str	r3, [r4, #12]
    83d2:	4620      	mov	r0, r4
    83d4:	f7ff fee6 	bl	81a4 <d_name>
    83d8:	4607      	mov	r7, r0
    83da:	2800      	cmp	r0, #0
    83dc:	f43f af74 	beq.w	82c8 <d_name+0x124>
    83e0:	783b      	ldrb	r3, [r7, #0]
    83e2:	2b47      	cmp	r3, #71	; 0x47
    83e4:	f43f af70 	beq.w	82c8 <d_name+0x124>
    83e8:	2b49      	cmp	r3, #73	; 0x49
    83ea:	f43f af6d 	beq.w	82c8 <d_name+0x124>
    83ee:	e762      	b.n	82b6 <d_name+0x112>
    83f0:	3302      	adds	r3, #2
    83f2:	60e3      	str	r3, [r4, #12]
    83f4:	4620      	mov	r0, r4
    83f6:	f7fd fddf 	bl	5fb8 <d_discriminator>
    83fa:	2800      	cmp	r0, #0
    83fc:	d0ce      	beq.n	839c <d_name+0x1f8>
    83fe:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    8402:	429a      	cmp	r2, r3
    8404:	da15      	bge.n	8432 <d_name+0x28e>
    8406:	6921      	ldr	r1, [r4, #16]
    8408:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    840c:	0098      	lsls	r0, r3, #2
    840e:	3201      	adds	r2, #1
    8410:	6162      	str	r2, [r4, #20]
    8412:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8416:	2200      	movs	r2, #0
    8418:	e9c3 2201 	strd	r2, r2, [r3, #4]
    841c:	540a      	strb	r2, [r1, r0]
    841e:	4907      	ldr	r1, [pc, #28]	; (843c <d_name+0x298>)
    8420:	220e      	movs	r2, #14
    8422:	e9c3 1203 	strd	r1, r2, [r3, #12]
    8426:	e764      	b.n	82f2 <d_name+0x14e>
    8428:	2500      	movs	r5, #0
    842a:	e785      	b.n	8338 <d_name+0x194>
    842c:	3303      	adds	r3, #3
    842e:	2600      	movs	r6, #0
    8430:	e7ce      	b.n	83d0 <d_name+0x22c>
    8432:	2300      	movs	r3, #0
    8434:	e75d      	b.n	82f2 <d_name+0x14e>
    8436:	bf00      	nop
    8438:	20002094 	.word	0x20002094
    843c:	20002084 	.word	0x20002084

00008440 <d_encoding.part.0>:
    8440:	b570      	push	{r4, r5, r6, lr}
    8442:	4605      	mov	r5, r0
    8444:	460e      	mov	r6, r1
    8446:	f7ff fead 	bl	81a4 <d_name>
    844a:	b300      	cbz	r0, 848e <d_encoding.part.0+0x4e>
    844c:	4604      	mov	r4, r0
    844e:	b30e      	cbz	r6, 8494 <d_encoding.part.0+0x54>
    8450:	68ab      	ldr	r3, [r5, #8]
    8452:	07db      	lsls	r3, r3, #31
    8454:	d41e      	bmi.n	8494 <d_encoding.part.0+0x54>
    8456:	7823      	ldrb	r3, [r4, #0]
    8458:	2b4e      	cmp	r3, #78	; 0x4e
    845a:	f1a3 011c 	sub.w	r1, r3, #28
    845e:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
    8462:	d03a      	beq.n	84da <d_encoding.part.0+0x9a>
    8464:	d837      	bhi.n	84d6 <d_encoding.part.0+0x96>
    8466:	2904      	cmp	r1, #4
    8468:	d937      	bls.n	84da <d_encoding.part.0+0x9a>
    846a:	2b02      	cmp	r3, #2
    846c:	d110      	bne.n	8490 <d_encoding.part.0+0x50>
    846e:	6923      	ldr	r3, [r4, #16]
    8470:	b16b      	cbz	r3, 848e <d_encoding.part.0+0x4e>
    8472:	781a      	ldrb	r2, [r3, #0]
    8474:	2a4e      	cmp	r2, #78	; 0x4e
    8476:	f1a2 001c 	sub.w	r0, r2, #28
    847a:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
    847e:	d002      	beq.n	8486 <d_encoding.part.0+0x46>
    8480:	d83d      	bhi.n	84fe <d_encoding.part.0+0xbe>
    8482:	2804      	cmp	r0, #4
    8484:	d804      	bhi.n	8490 <d_encoding.part.0+0x50>
    8486:	68db      	ldr	r3, [r3, #12]
    8488:	6123      	str	r3, [r4, #16]
    848a:	2b00      	cmp	r3, #0
    848c:	d1f1      	bne.n	8472 <d_encoding.part.0+0x32>
    848e:	2400      	movs	r4, #0
    8490:	4620      	mov	r0, r4
    8492:	bd70      	pop	{r4, r5, r6, pc}
    8494:	68eb      	ldr	r3, [r5, #12]
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	2b00      	cmp	r3, #0
    849a:	d0f9      	beq.n	8490 <d_encoding.part.0+0x50>
    849c:	2b45      	cmp	r3, #69	; 0x45
    849e:	d0f7      	beq.n	8490 <d_encoding.part.0+0x50>
    84a0:	4621      	mov	r1, r4
    84a2:	780b      	ldrb	r3, [r1, #0]
    84a4:	2b04      	cmp	r3, #4
    84a6:	d02d      	beq.n	8504 <d_encoding.part.0+0xc4>
    84a8:	d81e      	bhi.n	84e8 <d_encoding.part.0+0xa8>
    84aa:	2b02      	cmp	r3, #2
    84ac:	d11a      	bne.n	84e4 <d_encoding.part.0+0xa4>
    84ae:	6909      	ldr	r1, [r1, #16]
    84b0:	2900      	cmp	r1, #0
    84b2:	d1f6      	bne.n	84a2 <d_encoding.part.0+0x62>
    84b4:	4628      	mov	r0, r5
    84b6:	f7fe fcdf 	bl	6e78 <d_bare_function_type>
    84ba:	2800      	cmp	r0, #0
    84bc:	d0e7      	beq.n	848e <d_encoding.part.0+0x4e>
    84be:	b916      	cbnz	r6, 84c6 <d_encoding.part.0+0x86>
    84c0:	7823      	ldrb	r3, [r4, #0]
    84c2:	2b02      	cmp	r3, #2
    84c4:	d032      	beq.n	852c <d_encoding.part.0+0xec>
    84c6:	4603      	mov	r3, r0
    84c8:	4622      	mov	r2, r4
    84ca:	4628      	mov	r0, r5
    84cc:	2103      	movs	r1, #3
    84ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84d2:	f7fd bc07 	b.w	5ce4 <d_make_comp>
    84d6:	2a01      	cmp	r2, #1
    84d8:	d8da      	bhi.n	8490 <d_encoding.part.0+0x50>
    84da:	68e4      	ldr	r4, [r4, #12]
    84dc:	e7bb      	b.n	8456 <d_encoding.part.0+0x16>
    84de:	3b1c      	subs	r3, #28
    84e0:	2b04      	cmp	r3, #4
    84e2:	d908      	bls.n	84f6 <d_encoding.part.0+0xb6>
    84e4:	2100      	movs	r1, #0
    84e6:	e7e5      	b.n	84b4 <d_encoding.part.0+0x74>
    84e8:	2b4e      	cmp	r3, #78	; 0x4e
    84ea:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
    84ee:	d002      	beq.n	84f6 <d_encoding.part.0+0xb6>
    84f0:	d9f5      	bls.n	84de <d_encoding.part.0+0x9e>
    84f2:	2a01      	cmp	r2, #1
    84f4:	d8f6      	bhi.n	84e4 <d_encoding.part.0+0xa4>
    84f6:	68c9      	ldr	r1, [r1, #12]
    84f8:	2900      	cmp	r1, #0
    84fa:	d1d2      	bne.n	84a2 <d_encoding.part.0+0x62>
    84fc:	e7da      	b.n	84b4 <d_encoding.part.0+0x74>
    84fe:	2901      	cmp	r1, #1
    8500:	d8c6      	bhi.n	8490 <d_encoding.part.0+0x50>
    8502:	e7c0      	b.n	8486 <d_encoding.part.0+0x46>
    8504:	68cb      	ldr	r3, [r1, #12]
    8506:	b15b      	cbz	r3, 8520 <d_encoding.part.0+0xe0>
    8508:	7819      	ldrb	r1, [r3, #0]
    850a:	2908      	cmp	r1, #8
    850c:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    8510:	d808      	bhi.n	8524 <d_encoding.part.0+0xe4>
    8512:	2906      	cmp	r1, #6
    8514:	d8e6      	bhi.n	84e4 <d_encoding.part.0+0xa4>
    8516:	2a01      	cmp	r2, #1
    8518:	d802      	bhi.n	8520 <d_encoding.part.0+0xe0>
    851a:	691b      	ldr	r3, [r3, #16]
    851c:	2b00      	cmp	r3, #0
    851e:	d1f3      	bne.n	8508 <d_encoding.part.0+0xc8>
    8520:	2101      	movs	r1, #1
    8522:	e7c7      	b.n	84b4 <d_encoding.part.0+0x74>
    8524:	3935      	subs	r1, #53	; 0x35
    8526:	bf18      	it	ne
    8528:	2101      	movne	r1, #1
    852a:	e7c3      	b.n	84b4 <d_encoding.part.0+0x74>
    852c:	7803      	ldrb	r3, [r0, #0]
    852e:	2b29      	cmp	r3, #41	; 0x29
    8530:	bf08      	it	eq
    8532:	60c6      	streq	r6, [r0, #12]
    8534:	e7c7      	b.n	84c6 <d_encoding.part.0+0x86>
    8536:	bf00      	nop

00008538 <d_print_comp_inner>:
    8538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    853c:	4604      	mov	r4, r0
    853e:	b095      	sub	sp, #84	; 0x54
    8540:	2a00      	cmp	r2, #0
    8542:	d066      	beq.n	8612 <d_print_comp_inner+0xda>
    8544:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    8548:	2d00      	cmp	r5, #0
    854a:	d165      	bne.n	8618 <d_print_comp_inner+0xe0>
    854c:	7817      	ldrb	r7, [r2, #0]
    854e:	4616      	mov	r6, r2
    8550:	2f51      	cmp	r7, #81	; 0x51
    8552:	d85e      	bhi.n	8612 <d_print_comp_inner+0xda>
    8554:	e8df f017 	tbh	[pc, r7, lsl #1]
    8558:	011b095c 	.word	0x011b095c
    855c:	04ee011b 	.word	0x04ee011b
    8560:	02de0898 	.word	0x02de0898
    8564:	0097044a 	.word	0x0097044a
    8568:	08f9008b 	.word	0x08f9008b
    856c:	03a608d2 	.word	0x03a608d2
    8570:	019101b8 	.word	0x019101b8
    8574:	0747016a 	.word	0x0747016a
    8578:	06f90720 	.word	0x06f90720
    857c:	07bc07e3 	.word	0x07bc07e3
    8580:	076e0795 	.word	0x076e0795
    8584:	0423037f 	.word	0x0423037f
    8588:	009903f8 	.word	0x009903f8
    858c:	00990099 	.word	0x00990099
    8590:	00630063 	.word	0x00630063
    8594:	00630063 	.word	0x00630063
    8598:	00630063 	.word	0x00630063
    859c:	00c50063 	.word	0x00c50063
    85a0:	006300c5 	.word	0x006300c5
    85a4:	09870063 	.word	0x09870063
    85a8:	04c80083 	.word	0x04c80083
    85ac:	00af068d 	.word	0x00af068d
    85b0:	00af066b 	.word	0x00af066b
    85b4:	00e600e6 	.word	0x00e600e6
    85b8:	03340358 	.word	0x03340358
    85bc:	0831030a 	.word	0x0831030a
    85c0:	080a005d 	.word	0x080a005d
    85c4:	06460663 	.word	0x06460663
    85c8:	005d05eb 	.word	0x005d05eb
    85cc:	005d0920 	.word	0x005d0920
    85d0:	012a005d 	.word	0x012a005d
    85d4:	0455012a 	.word	0x0455012a
    85d8:	0858085e 	.word	0x0858085e
    85dc:	047804ba 	.word	0x047804ba
    85e0:	05c4054f 	.word	0x05c4054f
    85e4:	0576059d 	.word	0x0576059d
    85e8:	02a4005d 	.word	0x02a4005d
    85ec:	0256027d 	.word	0x0256027d
    85f0:	01df020a 	.word	0x01df020a
    85f4:	03cd0063 	.word	0x03cd0063
    85f8:	00630063 	.word	0x00630063
    85fc:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    8600:	2900      	cmp	r1, #0
    8602:	f2c1 8425 	blt.w	9e50 <d_print_comp_inner+0x1918>
    8606:	f7fd fcfb 	bl	6000 <d_index_template_argument.part.0>
    860a:	4602      	mov	r2, r0
    860c:	2800      	cmp	r0, #0
    860e:	f041 841f 	bne.w	9e50 <d_print_comp_inner+0x1918>
    8612:	2301      	movs	r3, #1
    8614:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    8618:	b015      	add	sp, #84	; 0x54
    861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    861e:	2200      	movs	r2, #0
    8620:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    8624:	9304      	str	r3, [sp, #16]
    8626:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    862a:	9307      	str	r3, [sp, #28]
    862c:	ab04      	add	r3, sp, #16
    862e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8632:	2300      	movs	r3, #0
    8634:	9605      	str	r6, [sp, #20]
    8636:	9306      	str	r3, [sp, #24]
    8638:	2a00      	cmp	r2, #0
    863a:	f001 87e6 	beq.w	a60a <d_print_comp_inner+0x20d2>
    863e:	2111      	movs	r1, #17
    8640:	4620      	mov	r0, r4
    8642:	f001 fff3 	bl	a62c <d_print_comp>
    8646:	9b06      	ldr	r3, [sp, #24]
    8648:	2b00      	cmp	r3, #0
    864a:	f001 82e9 	beq.w	9c20 <d_print_comp_inner+0x16e8>
    864e:	9b04      	ldr	r3, [sp, #16]
    8650:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8654:	2d00      	cmp	r5, #0
    8656:	d0df      	beq.n	8618 <d_print_comp_inner+0xe0>
    8658:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
    865c:	e7dc      	b.n	8618 <d_print_comp_inner+0xe0>
    865e:	68f2      	ldr	r2, [r6, #12]
    8660:	2111      	movs	r1, #17
    8662:	4620      	mov	r0, r4
    8664:	b015      	add	sp, #84	; 0x54
    8666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    866a:	f001 bfdf 	b.w	a62c <d_print_comp>
    866e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8672:	29ff      	cmp	r1, #255	; 0xff
    8674:	f001 855f 	beq.w	a136 <d_print_comp_inner+0x1bfe>
    8678:	1c4a      	adds	r2, r1, #1
    867a:	237e      	movs	r3, #126	; 0x7e
    867c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8680:	5463      	strb	r3, [r4, r1]
    8682:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8686:	6932      	ldr	r2, [r6, #16]
    8688:	e7ea      	b.n	8660 <d_print_comp_inner+0x128>
    868a:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
    868e:	f1bc 0f00 	cmp.w	ip, #0
    8692:	d00e      	beq.n	86b2 <d_print_comp_inner+0x17a>
    8694:	4663      	mov	r3, ip
    8696:	6899      	ldr	r1, [r3, #8]
    8698:	b941      	cbnz	r1, 86ac <d_print_comp_inner+0x174>
    869a:	685a      	ldr	r2, [r3, #4]
    869c:	7812      	ldrb	r2, [r2, #0]
    869e:	f1a2 0019 	sub.w	r0, r2, #25
    86a2:	2802      	cmp	r0, #2
    86a4:	f201 84ef 	bhi.w	a086 <d_print_comp_inner+0x1b4e>
    86a8:	4297      	cmp	r7, r2
    86aa:	d0d8      	beq.n	865e <d_print_comp_inner+0x126>
    86ac:	681b      	ldr	r3, [r3, #0]
    86ae:	2b00      	cmp	r3, #0
    86b0:	d1f1      	bne.n	8696 <d_print_comp_inner+0x15e>
    86b2:	68f2      	ldr	r2, [r6, #12]
    86b4:	e02b      	b.n	870e <d_print_comp_inner+0x1d6>
    86b6:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
    86ba:	aa04      	add	r2, sp, #16
    86bc:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    86c0:	2200      	movs	r2, #0
    86c2:	e9cd 1604 	strd	r1, r6, [sp, #16]
    86c6:	9206      	str	r2, [sp, #24]
    86c8:	2111      	movs	r1, #17
    86ca:	6932      	ldr	r2, [r6, #16]
    86cc:	9307      	str	r3, [sp, #28]
    86ce:	f001 ffad 	bl	a62c <d_print_comp>
    86d2:	9b06      	ldr	r3, [sp, #24]
    86d4:	2b00      	cmp	r3, #0
    86d6:	f001 84c3 	beq.w	a060 <d_print_comp_inner+0x1b28>
    86da:	9b04      	ldr	r3, [sp, #16]
    86dc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    86e0:	e79a      	b.n	8618 <d_print_comp_inner+0xe0>
    86e2:	68d2      	ldr	r2, [r2, #12]
    86e4:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
    86e8:	7813      	ldrb	r3, [r2, #0]
    86ea:	2d00      	cmp	r5, #0
    86ec:	f041 8370 	bne.w	9dd0 <d_print_comp_inner+0x1898>
    86f0:	2b05      	cmp	r3, #5
    86f2:	f001 85d2 	beq.w	a29a <d_print_comp_inner+0x1d62>
    86f6:	4610      	mov	r0, r2
    86f8:	2b23      	cmp	r3, #35	; 0x23
    86fa:	f001 82d8 	beq.w	9cae <d_print_comp_inner+0x1776>
    86fe:	429f      	cmp	r7, r3
    8700:	f001 82d5 	beq.w	9cae <d_print_comp_inner+0x1776>
    8704:	2b24      	cmp	r3, #36	; 0x24
    8706:	f001 860a 	beq.w	a31e <d_print_comp_inner+0x1de6>
    870a:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    870e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    8712:	9307      	str	r3, [sp, #28]
    8714:	ab04      	add	r3, sp, #16
    8716:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    871a:	2300      	movs	r3, #0
    871c:	e9cd c604 	strd	ip, r6, [sp, #16]
    8720:	9306      	str	r3, [sp, #24]
    8722:	e78c      	b.n	863e <d_print_comp_inner+0x106>
    8724:	68d2      	ldr	r2, [r2, #12]
    8726:	b112      	cbz	r2, 872e <d_print_comp_inner+0x1f6>
    8728:	2111      	movs	r1, #17
    872a:	f001 ff7f 	bl	a62c <d_print_comp>
    872e:	6933      	ldr	r3, [r6, #16]
    8730:	2b00      	cmp	r3, #0
    8732:	f43f af71 	beq.w	8618 <d_print_comp_inner+0xe0>
    8736:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
    873a:	2dfd      	cmp	r5, #253	; 0xfd
    873c:	f201 84a7 	bhi.w	a08e <d_print_comp_inner+0x1b56>
    8740:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8ac8 <d_print_comp_inner+0x590>
    8744:	272c      	movs	r7, #44	; 0x2c
    8746:	f108 0a01 	add.w	sl, r8, #1
    874a:	f04f 0900 	mov.w	r9, #0
    874e:	4629      	mov	r1, r5
    8750:	e00b      	b.n	876a <d_print_comp_inner+0x232>
    8752:	460b      	mov	r3, r1
    8754:	3101      	adds	r1, #1
    8756:	45d0      	cmp	r8, sl
    8758:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    875c:	54e7      	strb	r7, [r4, r3]
    875e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    8762:	f001 8264 	beq.w	9c2e <d_print_comp_inner+0x16f6>
    8766:	f818 7f01 	ldrb.w	r7, [r8, #1]!
    876a:	29ff      	cmp	r1, #255	; 0xff
    876c:	d1f1      	bne.n	8752 <d_print_comp_inner+0x21a>
    876e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8772:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8776:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    877a:	4620      	mov	r0, r4
    877c:	4798      	blx	r3
    877e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8782:	3301      	adds	r3, #1
    8784:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8788:	2101      	movs	r1, #1
    878a:	2300      	movs	r3, #0
    878c:	e7e3      	b.n	8756 <d_print_comp_inner+0x21e>
    878e:	68d2      	ldr	r2, [r2, #12]
    8790:	2111      	movs	r1, #17
    8792:	f001 ff4b 	bl	a62c <d_print_comp>
    8796:	49c7      	ldr	r1, [pc, #796]	; (8ab4 <d_print_comp_inner+0x57c>)
    8798:	4620      	mov	r0, r4
    879a:	f7fd fd1b 	bl	61d4 <d_append_string>
    879e:	6937      	ldr	r7, [r6, #16]
    87a0:	783b      	ldrb	r3, [r7, #0]
    87a2:	2b48      	cmp	r3, #72	; 0x48
    87a4:	f001 808b 	beq.w	98be <d_print_comp_inner+0x1386>
    87a8:	463a      	mov	r2, r7
    87aa:	e759      	b.n	8660 <d_print_comp_inner+0x128>
    87ac:	68d2      	ldr	r2, [r2, #12]
    87ae:	7813      	ldrb	r3, [r2, #0]
    87b0:	2b27      	cmp	r3, #39	; 0x27
    87b2:	f041 835a 	bne.w	9e6a <d_print_comp_inner+0x1932>
    87b6:	68d3      	ldr	r3, [r2, #12]
    87b8:	7c1d      	ldrb	r5, [r3, #16]
    87ba:	2d06      	cmp	r5, #6
    87bc:	f201 827d 	bhi.w	9cba <d_print_comp_inner+0x1782>
    87c0:	2d00      	cmp	r5, #0
    87c2:	f041 851c 	bne.w	a1fe <d_print_comp_inner+0x1cc6>
    87c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    87ca:	29ff      	cmp	r1, #255	; 0xff
    87cc:	f001 84f0 	beq.w	a1b0 <d_print_comp_inner+0x1c78>
    87d0:	1c4b      	adds	r3, r1, #1
    87d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    87d6:	2328      	movs	r3, #40	; 0x28
    87d8:	5463      	strb	r3, [r4, r1]
    87da:	4620      	mov	r0, r4
    87dc:	2111      	movs	r1, #17
    87de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    87e2:	f001 ff23 	bl	a62c <d_print_comp>
    87e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    87ea:	29ff      	cmp	r1, #255	; 0xff
    87ec:	f001 84f7 	beq.w	a1de <d_print_comp_inner+0x1ca6>
    87f0:	1c4b      	adds	r3, r1, #1
    87f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    87f6:	2329      	movs	r3, #41	; 0x29
    87f8:	5463      	strb	r3, [r4, r1]
    87fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    87fe:	7833      	ldrb	r3, [r6, #0]
    8800:	2b3e      	cmp	r3, #62	; 0x3e
    8802:	f001 84e6 	beq.w	a1d2 <d_print_comp_inner+0x1c9a>
    8806:	2d08      	cmp	r5, #8
    8808:	f47f af3d 	bne.w	8686 <d_print_comp_inner+0x14e>
    880c:	215b      	movs	r1, #91	; 0x5b
    880e:	4620      	mov	r0, r4
    8810:	f7fd fc58 	bl	60c4 <d_append_char>
    8814:	2111      	movs	r1, #17
    8816:	6932      	ldr	r2, [r6, #16]
    8818:	4620      	mov	r0, r4
    881a:	f001 ff07 	bl	a62c <d_print_comp>
    881e:	215d      	movs	r1, #93	; 0x5d
    8820:	4620      	mov	r0, r4
    8822:	b015      	add	sp, #84	; 0x54
    8824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8828:	f7fd bc4c 	b.w	60c4 <d_append_char>
    882c:	4fa2      	ldr	r7, [pc, #648]	; (8ab8 <d_print_comp_inner+0x580>)
    882e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8832:	f107 090f 	add.w	r9, r7, #15
    8836:	2574      	movs	r5, #116	; 0x74
    8838:	f04f 0800 	mov.w	r8, #0
    883c:	e00b      	b.n	8856 <d_print_comp_inner+0x31e>
    883e:	460b      	mov	r3, r1
    8840:	3101      	adds	r1, #1
    8842:	454f      	cmp	r7, r9
    8844:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8848:	54e5      	strb	r5, [r4, r3]
    884a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    884e:	f43f af06 	beq.w	865e <d_print_comp_inner+0x126>
    8852:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8856:	29ff      	cmp	r1, #255	; 0xff
    8858:	d1f1      	bne.n	883e <d_print_comp_inner+0x306>
    885a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    885e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8862:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8866:	4620      	mov	r0, r4
    8868:	4798      	blx	r3
    886a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    886e:	3301      	adds	r3, #1
    8870:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8874:	2101      	movs	r1, #1
    8876:	2300      	movs	r3, #0
    8878:	e7e3      	b.n	8842 <d_print_comp_inner+0x30a>
    887a:	4f90      	ldr	r7, [pc, #576]	; (8abc <d_print_comp_inner+0x584>)
    887c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8880:	f107 0911 	add.w	r9, r7, #17
    8884:	2574      	movs	r5, #116	; 0x74
    8886:	f04f 0800 	mov.w	r8, #0
    888a:	e00b      	b.n	88a4 <d_print_comp_inner+0x36c>
    888c:	460b      	mov	r3, r1
    888e:	3101      	adds	r1, #1
    8890:	45b9      	cmp	r9, r7
    8892:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8896:	54e5      	strb	r5, [r4, r3]
    8898:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    889c:	f43f aedf 	beq.w	865e <d_print_comp_inner+0x126>
    88a0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    88a4:	29ff      	cmp	r1, #255	; 0xff
    88a6:	d1f1      	bne.n	888c <d_print_comp_inner+0x354>
    88a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    88b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    88b4:	4620      	mov	r0, r4
    88b6:	4798      	blx	r3
    88b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    88bc:	3301      	adds	r3, #1
    88be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    88c2:	2101      	movs	r1, #1
    88c4:	2300      	movs	r3, #0
    88c6:	e7e3      	b.n	8890 <d_print_comp_inner+0x358>
    88c8:	4f7d      	ldr	r7, [pc, #500]	; (8ac0 <d_print_comp_inner+0x588>)
    88ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    88ce:	f107 090c 	add.w	r9, r7, #12
    88d2:	2574      	movs	r5, #116	; 0x74
    88d4:	f04f 0800 	mov.w	r8, #0
    88d8:	e00b      	b.n	88f2 <d_print_comp_inner+0x3ba>
    88da:	460b      	mov	r3, r1
    88dc:	3101      	adds	r1, #1
    88de:	454f      	cmp	r7, r9
    88e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    88e4:	54e5      	strb	r5, [r4, r3]
    88e6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    88ea:	f43f aeb8 	beq.w	865e <d_print_comp_inner+0x126>
    88ee:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    88f2:	29ff      	cmp	r1, #255	; 0xff
    88f4:	d1f1      	bne.n	88da <d_print_comp_inner+0x3a2>
    88f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    88fe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8902:	4620      	mov	r0, r4
    8904:	4798      	blx	r3
    8906:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    890a:	3301      	adds	r3, #1
    890c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8910:	2101      	movs	r1, #1
    8912:	2300      	movs	r3, #0
    8914:	e7e3      	b.n	88de <d_print_comp_inner+0x3a6>
    8916:	4f6b      	ldr	r7, [pc, #428]	; (8ac4 <d_print_comp_inner+0x58c>)
    8918:	68d2      	ldr	r2, [r2, #12]
    891a:	2111      	movs	r1, #17
    891c:	f001 fe86 	bl	a62c <d_print_comp>
    8920:	f107 0904 	add.w	r9, r7, #4
    8924:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8928:	255b      	movs	r5, #91	; 0x5b
    892a:	f04f 0800 	mov.w	r8, #0
    892e:	e00b      	b.n	8948 <d_print_comp_inner+0x410>
    8930:	460b      	mov	r3, r1
    8932:	3101      	adds	r1, #1
    8934:	45b9      	cmp	r9, r7
    8936:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    893a:	54e5      	strb	r5, [r4, r3]
    893c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8940:	f000 87f3 	beq.w	992a <d_print_comp_inner+0x13f2>
    8944:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8948:	29ff      	cmp	r1, #255	; 0xff
    894a:	d1f1      	bne.n	8930 <d_print_comp_inner+0x3f8>
    894c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8954:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8958:	4620      	mov	r0, r4
    895a:	4798      	blx	r3
    895c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8960:	3301      	adds	r3, #1
    8962:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8966:	2101      	movs	r1, #1
    8968:	2300      	movs	r3, #0
    896a:	e7e3      	b.n	8934 <d_print_comp_inner+0x3fc>
    896c:	f8d2 a00c 	ldr.w	sl, [r2, #12]
    8970:	4651      	mov	r1, sl
    8972:	f7fd fbe5 	bl	6140 <d_find_pack>
    8976:	f04f 0800 	mov.w	r8, #0
    897a:	b910      	cbnz	r0, 8982 <d_print_comp_inner+0x44a>
    897c:	f001 bd20 	b.w	a3c0 <d_print_comp_inner+0x1e88>
    8980:	46c8      	mov	r8, r9
    8982:	7803      	ldrb	r3, [r0, #0]
    8984:	2b2f      	cmp	r3, #47	; 0x2f
    8986:	f108 0901 	add.w	r9, r8, #1
    898a:	f041 8187 	bne.w	9c9c <d_print_comp_inner+0x1764>
    898e:	68c3      	ldr	r3, [r0, #12]
    8990:	2b00      	cmp	r3, #0
    8992:	f001 8183 	beq.w	9c9c <d_print_comp_inner+0x1764>
    8996:	6900      	ldr	r0, [r0, #16]
    8998:	2800      	cmp	r0, #0
    899a:	d1f1      	bne.n	8980 <d_print_comp_inner+0x448>
    899c:	e003      	b.n	89a6 <d_print_comp_inner+0x46e>
    899e:	3501      	adds	r5, #1
    89a0:	454d      	cmp	r5, r9
    89a2:	f6bf ae39 	bge.w	8618 <d_print_comp_inner+0xe0>
    89a6:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
    89aa:	4652      	mov	r2, sl
    89ac:	2111      	movs	r1, #17
    89ae:	4620      	mov	r0, r4
    89b0:	f001 fe3c 	bl	a62c <d_print_comp>
    89b4:	45a8      	cmp	r8, r5
    89b6:	ddf2      	ble.n	899e <d_print_comp_inner+0x466>
    89b8:	4f43      	ldr	r7, [pc, #268]	; (8ac8 <d_print_comp_inner+0x590>)
    89ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    89be:	f107 0b01 	add.w	fp, r7, #1
    89c2:	262c      	movs	r6, #44	; 0x2c
    89c4:	e00a      	b.n	89dc <d_print_comp_inner+0x4a4>
    89c6:	460b      	mov	r3, r1
    89c8:	3101      	adds	r1, #1
    89ca:	45bb      	cmp	fp, r7
    89cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    89d0:	54e6      	strb	r6, [r4, r3]
    89d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    89d6:	d0e2      	beq.n	899e <d_print_comp_inner+0x466>
    89d8:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    89dc:	29ff      	cmp	r1, #255	; 0xff
    89de:	d1f2      	bne.n	89c6 <d_print_comp_inner+0x48e>
    89e0:	f04f 0200 	mov.w	r2, #0
    89e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    89e8:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    89ec:	4620      	mov	r0, r4
    89ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    89f2:	4798      	blx	r3
    89f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    89f8:	3301      	adds	r3, #1
    89fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    89fe:	2101      	movs	r1, #1
    8a00:	2300      	movs	r3, #0
    8a02:	e7e2      	b.n	89ca <d_print_comp_inner+0x492>
    8a04:	4f31      	ldr	r7, [pc, #196]	; (8acc <d_print_comp_inner+0x594>)
    8a06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8a0a:	f107 0919 	add.w	r9, r7, #25
    8a0e:	256e      	movs	r5, #110	; 0x6e
    8a10:	f04f 0800 	mov.w	r8, #0
    8a14:	e00b      	b.n	8a2e <d_print_comp_inner+0x4f6>
    8a16:	460b      	mov	r3, r1
    8a18:	3101      	adds	r1, #1
    8a1a:	45b9      	cmp	r9, r7
    8a1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8a20:	54e5      	strb	r5, [r4, r3]
    8a22:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8a26:	f43f ae1a 	beq.w	865e <d_print_comp_inner+0x126>
    8a2a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8a2e:	29ff      	cmp	r1, #255	; 0xff
    8a30:	d1f1      	bne.n	8a16 <d_print_comp_inner+0x4de>
    8a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8a3e:	4620      	mov	r0, r4
    8a40:	4798      	blx	r3
    8a42:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8a46:	3301      	adds	r3, #1
    8a48:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8a4c:	2101      	movs	r1, #1
    8a4e:	2300      	movs	r3, #0
    8a50:	e7e3      	b.n	8a1a <d_print_comp_inner+0x4e2>
    8a52:	4f1f      	ldr	r7, [pc, #124]	; (8ad0 <d_print_comp_inner+0x598>)
    8a54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8a58:	f107 0915 	add.w	r9, r7, #21
    8a5c:	2574      	movs	r5, #116	; 0x74
    8a5e:	f04f 0800 	mov.w	r8, #0
    8a62:	e00b      	b.n	8a7c <d_print_comp_inner+0x544>
    8a64:	460b      	mov	r3, r1
    8a66:	3101      	adds	r1, #1
    8a68:	45b9      	cmp	r9, r7
    8a6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8a6e:	54e5      	strb	r5, [r4, r3]
    8a70:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8a74:	f43f adf3 	beq.w	865e <d_print_comp_inner+0x126>
    8a78:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8a7c:	29ff      	cmp	r1, #255	; 0xff
    8a7e:	d1f1      	bne.n	8a64 <d_print_comp_inner+0x52c>
    8a80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8a8c:	4620      	mov	r0, r4
    8a8e:	4798      	blx	r3
    8a90:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8a94:	3301      	adds	r3, #1
    8a96:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8a9a:	2101      	movs	r1, #1
    8a9c:	2300      	movs	r3, #0
    8a9e:	e7e3      	b.n	8a68 <d_print_comp_inner+0x530>
    8aa0:	4f0c      	ldr	r7, [pc, #48]	; (8ad4 <d_print_comp_inner+0x59c>)
    8aa2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8aa6:	f107 090d 	add.w	r9, r7, #13
    8aaa:	257b      	movs	r5, #123	; 0x7b
    8aac:	f04f 0800 	mov.w	r8, #0
    8ab0:	e01e      	b.n	8af0 <d_print_comp_inner+0x5b8>
    8ab2:	bf00      	nop
    8ab4:	200020a0 	.word	0x200020a0
    8ab8:	20002140 	.word	0x20002140
    8abc:	2000212c 	.word	0x2000212c
    8ac0:	2000211c 	.word	0x2000211c
    8ac4:	20002098 	.word	0x20002098
    8ac8:	20002240 	.word	0x20002240
    8acc:	2000220c 	.word	0x2000220c
    8ad0:	20002210 	.word	0x20002210
    8ad4:	20002304 	.word	0x20002304
    8ad8:	460b      	mov	r3, r1
    8ada:	3101      	adds	r1, #1
    8adc:	454f      	cmp	r7, r9
    8ade:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ae2:	54e5      	strb	r5, [r4, r3]
    8ae4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8ae8:	f000 8739 	beq.w	995e <d_print_comp_inner+0x1426>
    8aec:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8af0:	29ff      	cmp	r1, #255	; 0xff
    8af2:	d1f1      	bne.n	8ad8 <d_print_comp_inner+0x5a0>
    8af4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8af8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8afc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8b00:	4620      	mov	r0, r4
    8b02:	4798      	blx	r3
    8b04:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8b08:	3301      	adds	r3, #1
    8b0a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8b0e:	2101      	movs	r1, #1
    8b10:	2300      	movs	r3, #0
    8b12:	e7e3      	b.n	8adc <d_print_comp_inner+0x5a4>
    8b14:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
    8b18:	2b00      	cmp	r3, #0
    8b1a:	f001 818e 	beq.w	9e3a <d_print_comp_inner+0x1902>
    8b1e:	4fd3      	ldr	r7, [pc, #844]	; (8e6c <d_print_comp_inner+0x934>)
    8b20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8b24:	f107 0904 	add.w	r9, r7, #4
    8b28:	2561      	movs	r5, #97	; 0x61
    8b2a:	f04f 0800 	mov.w	r8, #0
    8b2e:	e00b      	b.n	8b48 <d_print_comp_inner+0x610>
    8b30:	460b      	mov	r3, r1
    8b32:	3101      	adds	r1, #1
    8b34:	45b9      	cmp	r9, r7
    8b36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8b3a:	54e5      	strb	r5, [r4, r3]
    8b3c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8b40:	f001 814a 	beq.w	9dd8 <d_print_comp_inner+0x18a0>
    8b44:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8b48:	29ff      	cmp	r1, #255	; 0xff
    8b4a:	d1f1      	bne.n	8b30 <d_print_comp_inner+0x5f8>
    8b4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8b50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8b54:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8b58:	4620      	mov	r0, r4
    8b5a:	4798      	blx	r3
    8b5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8b60:	3301      	adds	r3, #1
    8b62:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8b66:	2101      	movs	r1, #1
    8b68:	2300      	movs	r3, #0
    8b6a:	e7e3      	b.n	8b34 <d_print_comp_inner+0x5fc>
    8b6c:	68d7      	ldr	r7, [r2, #12]
    8b6e:	4ec0      	ldr	r6, [pc, #768]	; (8e70 <d_print_comp_inner+0x938>)
    8b70:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8b74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8b78:	f106 0a07 	add.w	sl, r6, #7
    8b7c:	256f      	movs	r5, #111	; 0x6f
    8b7e:	f04f 0900 	mov.w	r9, #0
    8b82:	e00b      	b.n	8b9c <d_print_comp_inner+0x664>
    8b84:	460b      	mov	r3, r1
    8b86:	3101      	adds	r1, #1
    8b88:	45b2      	cmp	sl, r6
    8b8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8b8e:	54e5      	strb	r5, [r4, r3]
    8b90:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8b94:	f000 8726 	beq.w	99e4 <d_print_comp_inner+0x14ac>
    8b98:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    8b9c:	29ff      	cmp	r1, #255	; 0xff
    8b9e:	d1f1      	bne.n	8b84 <d_print_comp_inner+0x64c>
    8ba0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8ba4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ba8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8bac:	4620      	mov	r0, r4
    8bae:	4798      	blx	r3
    8bb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8bb4:	3301      	adds	r3, #1
    8bb6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8bba:	2101      	movs	r1, #1
    8bbc:	2300      	movs	r3, #0
    8bbe:	e7e3      	b.n	8b88 <d_print_comp_inner+0x650>
    8bc0:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
    8bc4:	b112      	cbz	r2, 8bcc <d_print_comp_inner+0x694>
    8bc6:	2111      	movs	r1, #17
    8bc8:	f001 fd30 	bl	a62c <d_print_comp>
    8bcc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8bd0:	29ff      	cmp	r1, #255	; 0xff
    8bd2:	f001 826d 	beq.w	a0b0 <d_print_comp_inner+0x1b78>
    8bd6:	1c4a      	adds	r2, r1, #1
    8bd8:	237b      	movs	r3, #123	; 0x7b
    8bda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8bde:	4620      	mov	r0, r4
    8be0:	5463      	strb	r3, [r4, r1]
    8be2:	462a      	mov	r2, r5
    8be4:	2111      	movs	r1, #17
    8be6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8bea:	f001 fd1f 	bl	a62c <d_print_comp>
    8bee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8bf2:	29ff      	cmp	r1, #255	; 0xff
    8bf4:	f000 86e6 	beq.w	99c4 <d_print_comp_inner+0x148c>
    8bf8:	1c4a      	adds	r2, r1, #1
    8bfa:	237d      	movs	r3, #125	; 0x7d
    8bfc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c00:	5463      	strb	r3, [r4, r1]
    8c02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c06:	e507      	b.n	8618 <d_print_comp_inner+0xe0>
    8c08:	4f9a      	ldr	r7, [pc, #616]	; (8e74 <d_print_comp_inner+0x93c>)
    8c0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8c0e:	f107 091d 	add.w	r9, r7, #29
    8c12:	2574      	movs	r5, #116	; 0x74
    8c14:	f04f 0800 	mov.w	r8, #0
    8c18:	e00b      	b.n	8c32 <d_print_comp_inner+0x6fa>
    8c1a:	460b      	mov	r3, r1
    8c1c:	3101      	adds	r1, #1
    8c1e:	45b9      	cmp	r9, r7
    8c20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8c24:	54e5      	strb	r5, [r4, r3]
    8c26:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8c2a:	f43f ad18 	beq.w	865e <d_print_comp_inner+0x126>
    8c2e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8c32:	29ff      	cmp	r1, #255	; 0xff
    8c34:	d1f1      	bne.n	8c1a <d_print_comp_inner+0x6e2>
    8c36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8c3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8c3e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8c42:	4620      	mov	r0, r4
    8c44:	4798      	blx	r3
    8c46:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8c4a:	3301      	adds	r3, #1
    8c4c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8c50:	2101      	movs	r1, #1
    8c52:	2300      	movs	r3, #0
    8c54:	e7e3      	b.n	8c1e <d_print_comp_inner+0x6e6>
    8c56:	4f88      	ldr	r7, [pc, #544]	; (8e78 <d_print_comp_inner+0x940>)
    8c58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8c5c:	f107 0914 	add.w	r9, r7, #20
    8c60:	2572      	movs	r5, #114	; 0x72
    8c62:	f04f 0800 	mov.w	r8, #0
    8c66:	e00b      	b.n	8c80 <d_print_comp_inner+0x748>
    8c68:	460b      	mov	r3, r1
    8c6a:	3101      	adds	r1, #1
    8c6c:	45b9      	cmp	r9, r7
    8c6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8c72:	54e5      	strb	r5, [r4, r3]
    8c74:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8c78:	f000 86f4 	beq.w	9a64 <d_print_comp_inner+0x152c>
    8c7c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8c80:	29ff      	cmp	r1, #255	; 0xff
    8c82:	d1f1      	bne.n	8c68 <d_print_comp_inner+0x730>
    8c84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8c88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8c8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8c90:	4620      	mov	r0, r4
    8c92:	4798      	blx	r3
    8c94:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8c98:	3301      	adds	r3, #1
    8c9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8c9e:	2101      	movs	r1, #1
    8ca0:	2300      	movs	r3, #0
    8ca2:	e7e3      	b.n	8c6c <d_print_comp_inner+0x734>
    8ca4:	4f75      	ldr	r7, [pc, #468]	; (8e7c <d_print_comp_inner+0x944>)
    8ca6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8caa:	f107 0917 	add.w	r9, r7, #23
    8cae:	2563      	movs	r5, #99	; 0x63
    8cb0:	f04f 0800 	mov.w	r8, #0
    8cb4:	e00b      	b.n	8cce <d_print_comp_inner+0x796>
    8cb6:	460b      	mov	r3, r1
    8cb8:	3101      	adds	r1, #1
    8cba:	454f      	cmp	r7, r9
    8cbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8cc0:	54e5      	strb	r5, [r4, r3]
    8cc2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8cc6:	f000 877c 	beq.w	9bc2 <d_print_comp_inner+0x168a>
    8cca:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8cce:	29ff      	cmp	r1, #255	; 0xff
    8cd0:	d1f1      	bne.n	8cb6 <d_print_comp_inner+0x77e>
    8cd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8cd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8cda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8cde:	4620      	mov	r0, r4
    8ce0:	4798      	blx	r3
    8ce2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8ce6:	3301      	adds	r3, #1
    8ce8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8cec:	2101      	movs	r1, #1
    8cee:	2300      	movs	r3, #0
    8cf0:	e7e3      	b.n	8cba <d_print_comp_inner+0x782>
    8cf2:	4f63      	ldr	r7, [pc, #396]	; (8e80 <d_print_comp_inner+0x948>)
    8cf4:	68d2      	ldr	r2, [r2, #12]
    8cf6:	2111      	movs	r1, #17
    8cf8:	f001 fc98 	bl	a62c <d_print_comp>
    8cfc:	f107 0907 	add.w	r9, r7, #7
    8d00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d04:	2520      	movs	r5, #32
    8d06:	f04f 0800 	mov.w	r8, #0
    8d0a:	e00b      	b.n	8d24 <d_print_comp_inner+0x7ec>
    8d0c:	460b      	mov	r3, r1
    8d0e:	3101      	adds	r1, #1
    8d10:	45b9      	cmp	r9, r7
    8d12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d16:	54e5      	strb	r5, [r4, r3]
    8d18:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8d1c:	f000 8605 	beq.w	992a <d_print_comp_inner+0x13f2>
    8d20:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8d24:	29ff      	cmp	r1, #255	; 0xff
    8d26:	d1f1      	bne.n	8d0c <d_print_comp_inner+0x7d4>
    8d28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8d34:	4620      	mov	r0, r4
    8d36:	4798      	blx	r3
    8d38:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8d3c:	3301      	adds	r3, #1
    8d3e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8d42:	2101      	movs	r1, #1
    8d44:	2300      	movs	r3, #0
    8d46:	e7e3      	b.n	8d10 <d_print_comp_inner+0x7d8>
    8d48:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
    8d4c:	2b00      	cmp	r3, #0
    8d4e:	f43f ac63 	beq.w	8618 <d_print_comp_inner+0xe0>
    8d52:	442b      	add	r3, r5
    8d54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8d58:	3d01      	subs	r5, #1
    8d5a:	1e5f      	subs	r7, r3, #1
    8d5c:	f04f 0800 	mov.w	r8, #0
    8d60:	e009      	b.n	8d76 <d_print_comp_inner+0x83e>
    8d62:	460b      	mov	r3, r1
    8d64:	3101      	adds	r1, #1
    8d66:	42af      	cmp	r7, r5
    8d68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d6c:	54e6      	strb	r6, [r4, r3]
    8d6e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8d72:	f43f ac51 	beq.w	8618 <d_print_comp_inner+0xe0>
    8d76:	29ff      	cmp	r1, #255	; 0xff
    8d78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8d7c:	d1f1      	bne.n	8d62 <d_print_comp_inner+0x82a>
    8d7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d86:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8d8a:	4620      	mov	r0, r4
    8d8c:	4798      	blx	r3
    8d8e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8d92:	3301      	adds	r3, #1
    8d94:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8d98:	2101      	movs	r1, #1
    8d9a:	2300      	movs	r3, #0
    8d9c:	e7e3      	b.n	8d66 <d_print_comp_inner+0x82e>
    8d9e:	4f39      	ldr	r7, [pc, #228]	; (8e84 <d_print_comp_inner+0x94c>)
    8da0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8da4:	f107 0910 	add.w	r9, r7, #16
    8da8:	2568      	movs	r5, #104	; 0x68
    8daa:	f04f 0800 	mov.w	r8, #0
    8dae:	e00b      	b.n	8dc8 <d_print_comp_inner+0x890>
    8db0:	460b      	mov	r3, r1
    8db2:	3101      	adds	r1, #1
    8db4:	45b9      	cmp	r9, r7
    8db6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8dba:	54e5      	strb	r5, [r4, r3]
    8dbc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8dc0:	f43f ac4d 	beq.w	865e <d_print_comp_inner+0x126>
    8dc4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    8dc8:	29ff      	cmp	r1, #255	; 0xff
    8dca:	d1f1      	bne.n	8db0 <d_print_comp_inner+0x878>
    8dcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8dd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8dd4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8dd8:	4620      	mov	r0, r4
    8dda:	4798      	blx	r3
    8ddc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8de0:	3301      	adds	r3, #1
    8de2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8de6:	2101      	movs	r1, #1
    8de8:	2300      	movs	r3, #0
    8dea:	e7e3      	b.n	8db4 <d_print_comp_inner+0x87c>
    8dec:	68d5      	ldr	r5, [r2, #12]
    8dee:	2d00      	cmp	r5, #0
    8df0:	f040 87a1 	bne.w	9d36 <d_print_comp_inner+0x17fe>
    8df4:	4924      	ldr	r1, [pc, #144]	; (8e88 <d_print_comp_inner+0x950>)
    8df6:	4620      	mov	r0, r4
    8df8:	b015      	add	sp, #84	; 0x54
    8dfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dfe:	f7fd b9e9 	b.w	61d4 <d_append_string>
    8e02:	2111      	movs	r1, #17
    8e04:	68d2      	ldr	r2, [r2, #12]
    8e06:	f001 fc11 	bl	a62c <d_print_comp>
    8e0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8e0e:	29ff      	cmp	r1, #255	; 0xff
    8e10:	f001 816e 	beq.w	a0f0 <d_print_comp_inner+0x1bb8>
    8e14:	1c4a      	adds	r2, r1, #1
    8e16:	2328      	movs	r3, #40	; 0x28
    8e18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8e1c:	5463      	strb	r3, [r4, r1]
    8e1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8e22:	6932      	ldr	r2, [r6, #16]
    8e24:	2111      	movs	r1, #17
    8e26:	4620      	mov	r0, r4
    8e28:	f001 fc00 	bl	a62c <d_print_comp>
    8e2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8e30:	29ff      	cmp	r1, #255	; 0xff
    8e32:	f001 802c 	beq.w	9e8e <d_print_comp_inner+0x1956>
    8e36:	1c4a      	adds	r2, r1, #1
    8e38:	2329      	movs	r3, #41	; 0x29
    8e3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8e3e:	5463      	strb	r3, [r4, r1]
    8e40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8e44:	f7ff bbe8 	b.w	8618 <d_print_comp_inner+0xe0>
    8e48:	68d2      	ldr	r2, [r2, #12]
    8e4a:	4910      	ldr	r1, [pc, #64]	; (8e8c <d_print_comp_inner+0x954>)
    8e4c:	a804      	add	r0, sp, #16
    8e4e:	f004 fc81 	bl	d754 <sprintf>
    8e52:	a804      	add	r0, sp, #16
    8e54:	f005 fbf4 	bl	e640 <strlen>
    8e58:	2800      	cmp	r0, #0
    8e5a:	f43f abdd 	beq.w	8618 <d_print_comp_inner+0xe0>
    8e5e:	ad04      	add	r5, sp, #16
    8e60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8e64:	182f      	adds	r7, r5, r0
    8e66:	f04f 0800 	mov.w	r8, #0
    8e6a:	e01b      	b.n	8ea4 <d_print_comp_inner+0x96c>
    8e6c:	200020b8 	.word	0x200020b8
    8e70:	20002244 	.word	0x20002244
    8e74:	200020c0 	.word	0x200020c0
    8e78:	200021e0 	.word	0x200021e0
    8e7c:	200020f8 	.word	0x200020f8
    8e80:	20002314 	.word	0x20002314
    8e84:	200021f8 	.word	0x200021f8
    8e88:	200022a4 	.word	0x200022a4
    8e8c:	20002054 	.word	0x20002054
    8e90:	460b      	mov	r3, r1
    8e92:	3101      	adds	r1, #1
    8e94:	42af      	cmp	r7, r5
    8e96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8e9a:	54e6      	strb	r6, [r4, r3]
    8e9c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8ea0:	f43f abba 	beq.w	8618 <d_print_comp_inner+0xe0>
    8ea4:	29ff      	cmp	r1, #255	; 0xff
    8ea6:	f815 6b01 	ldrb.w	r6, [r5], #1
    8eaa:	d1f1      	bne.n	8e90 <d_print_comp_inner+0x958>
    8eac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8eb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8eb4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8eb8:	4620      	mov	r0, r4
    8eba:	4798      	blx	r3
    8ebc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    8ec0:	3301      	adds	r3, #1
    8ec2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    8ec6:	2101      	movs	r1, #1
    8ec8:	2300      	movs	r3, #0
    8eca:	e7e3      	b.n	8e94 <d_print_comp_inner+0x95c>
    8ecc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8ed0:	7b15      	ldrb	r5, [r2, #12]
    8ed2:	29ff      	cmp	r1, #255	; 0xff
    8ed4:	f001 811e 	beq.w	a114 <d_print_comp_inner+0x1bdc>
    8ed8:	1c4b      	adds	r3, r1, #1
    8eda:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    8ede:	5465      	strb	r5, [r4, r1]
    8ee0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8ee4:	f7ff bb98 	b.w	8618 <d_print_comp_inner+0xe0>
    8ee8:	68d2      	ldr	r2, [r2, #12]
    8eea:	b1ca      	cbz	r2, 8f20 <d_print_comp_inner+0x9e8>
    8eec:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
    8ef0:	ab04      	add	r3, sp, #16
    8ef2:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    8ef6:	2300      	movs	r3, #0
    8ef8:	e9cd 1604 	strd	r1, r6, [sp, #16]
    8efc:	9306      	str	r3, [sp, #24]
    8efe:	2111      	movs	r1, #17
    8f00:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    8f04:	9307      	str	r3, [sp, #28]
    8f06:	f001 fb91 	bl	a62c <d_print_comp>
    8f0a:	9b06      	ldr	r3, [sp, #24]
    8f0c:	9a04      	ldr	r2, [sp, #16]
    8f0e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    8f12:	2b00      	cmp	r3, #0
    8f14:	f47f ab80 	bne.w	8618 <d_print_comp_inner+0xe0>
    8f18:	2120      	movs	r1, #32
    8f1a:	4620      	mov	r0, r4
    8f1c:	f7fd f8d2 	bl	60c4 <d_append_char>
    8f20:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    8f24:	4632      	mov	r2, r6
    8f26:	2111      	movs	r1, #17
    8f28:	4620      	mov	r0, r4
    8f2a:	b015      	add	sp, #84	; 0x54
    8f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f30:	f001 bec6 	b.w	acc0 <d_print_function_type>
    8f34:	68d7      	ldr	r7, [r2, #12]
    8f36:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    8f3a:	2200      	movs	r2, #0
    8f3c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    8f40:	2f00      	cmp	r7, #0
    8f42:	f43f ab66 	beq.w	8612 <d_print_comp_inner+0xda>
    8f46:	f10d 0810 	add.w	r8, sp, #16
    8f4a:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
    8f4e:	4643      	mov	r3, r8
    8f50:	4611      	mov	r1, r2
    8f52:	4696      	mov	lr, r2
    8f54:	e9c3 2700 	strd	r2, r7, [r3]
    8f58:	e9c3 ec02 	strd	lr, ip, [r3, #8]
    8f5c:	783a      	ldrb	r2, [r7, #0]
    8f5e:	2a4e      	cmp	r2, #78	; 0x4e
    8f60:	469a      	mov	sl, r3
    8f62:	f1a2 0b1c 	sub.w	fp, r2, #28
    8f66:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
    8f6a:	f101 0501 	add.w	r5, r1, #1
    8f6e:	f000 8688 	beq.w	9c82 <d_print_comp_inner+0x174a>
    8f72:	f200 84ed 	bhi.w	9950 <d_print_comp_inner+0x1418>
    8f76:	f1bb 0f04 	cmp.w	fp, #4
    8f7a:	f240 8682 	bls.w	9c82 <d_print_comp_inner+0x174a>
    8f7e:	2a02      	cmp	r2, #2
    8f80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8f84:	d114      	bne.n	8fb0 <d_print_comp_inner+0xa78>
    8f86:	693f      	ldr	r7, [r7, #16]
    8f88:	783a      	ldrb	r2, [r7, #0]
    8f8a:	2a48      	cmp	r2, #72	; 0x48
    8f8c:	f001 8250 	beq.w	a430 <d_print_comp_inner+0x1ef8>
    8f90:	eb08 1101 	add.w	r1, r8, r1, lsl #4
    8f94:	f04f 0a00 	mov.w	sl, #0
    8f98:	2a4e      	cmp	r2, #78	; 0x4e
    8f9a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    8f9e:	f1a2 001c 	sub.w	r0, r2, #28
    8fa2:	f000 8787 	beq.w	9eb4 <d_print_comp_inner+0x197c>
    8fa6:	f200 8782 	bhi.w	9eae <d_print_comp_inner+0x1976>
    8faa:	2804      	cmp	r0, #4
    8fac:	f240 8782 	bls.w	9eb4 <d_print_comp_inner+0x197c>
    8fb0:	2a04      	cmp	r2, #4
    8fb2:	d104      	bne.n	8fbe <d_print_comp_inner+0xa86>
    8fb4:	e9cd c702 	strd	ip, r7, [sp, #8]
    8fb8:	ab02      	add	r3, sp, #8
    8fba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    8fbe:	6932      	ldr	r2, [r6, #16]
    8fc0:	2111      	movs	r1, #17
    8fc2:	4620      	mov	r0, r4
    8fc4:	f001 fb32 	bl	a62c <d_print_comp>
    8fc8:	783b      	ldrb	r3, [r7, #0]
    8fca:	2b04      	cmp	r3, #4
    8fcc:	d102      	bne.n	8fd4 <d_print_comp_inner+0xa9c>
    8fce:	9b02      	ldr	r3, [sp, #8]
    8fd0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    8fd4:	eb08 1805 	add.w	r8, r8, r5, lsl #4
    8fd8:	2720      	movs	r7, #32
    8fda:	f858 6c08 	ldr.w	r6, [r8, #-8]
    8fde:	3d01      	subs	r5, #1
    8fe0:	2e00      	cmp	r6, #0
    8fe2:	f000 863b 	beq.w	9c5c <d_print_comp_inner+0x1724>
    8fe6:	f1a8 0810 	sub.w	r8, r8, #16
    8fea:	2d00      	cmp	r5, #0
    8fec:	d1f5      	bne.n	8fda <d_print_comp_inner+0xaa2>
    8fee:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    8ff2:	f7ff bb11 	b.w	8618 <d_print_comp_inner+0xe0>
    8ff6:	4fab      	ldr	r7, [pc, #684]	; (92a4 <d_print_comp_inner+0xd6c>)
    8ff8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8ffc:	f107 0909 	add.w	r9, r7, #9
    9000:	2564      	movs	r5, #100	; 0x64
    9002:	f04f 0800 	mov.w	r8, #0
    9006:	e00b      	b.n	9020 <d_print_comp_inner+0xae8>
    9008:	460b      	mov	r3, r1
    900a:	3101      	adds	r1, #1
    900c:	454f      	cmp	r7, r9
    900e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9012:	54e5      	strb	r5, [r4, r3]
    9014:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9018:	f000 85ff 	beq.w	9c1a <d_print_comp_inner+0x16e2>
    901c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9020:	29ff      	cmp	r1, #255	; 0xff
    9022:	d1f1      	bne.n	9008 <d_print_comp_inner+0xad0>
    9024:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9028:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    902c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9030:	4620      	mov	r0, r4
    9032:	4798      	blx	r3
    9034:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9038:	3301      	adds	r3, #1
    903a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    903e:	2101      	movs	r1, #1
    9040:	2300      	movs	r3, #0
    9042:	e7e3      	b.n	900c <d_print_comp_inner+0xad4>
    9044:	4f98      	ldr	r7, [pc, #608]	; (92a8 <d_print_comp_inner+0xd70>)
    9046:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    904a:	f107 0907 	add.w	r9, r7, #7
    904e:	257b      	movs	r5, #123	; 0x7b
    9050:	f04f 0800 	mov.w	r8, #0
    9054:	e00b      	b.n	906e <d_print_comp_inner+0xb36>
    9056:	460b      	mov	r3, r1
    9058:	3101      	adds	r1, #1
    905a:	454f      	cmp	r7, r9
    905c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9060:	54e5      	strb	r5, [r4, r3]
    9062:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9066:	f000 8546 	beq.w	9af6 <d_print_comp_inner+0x15be>
    906a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    906e:	29ff      	cmp	r1, #255	; 0xff
    9070:	d1f1      	bne.n	9056 <d_print_comp_inner+0xb1e>
    9072:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9076:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    907a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    907e:	4620      	mov	r0, r4
    9080:	4798      	blx	r3
    9082:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9086:	3301      	adds	r3, #1
    9088:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    908c:	2101      	movs	r1, #1
    908e:	2300      	movs	r3, #0
    9090:	e7e3      	b.n	905a <d_print_comp_inner+0xb22>
    9092:	4f86      	ldr	r7, [pc, #536]	; (92ac <d_print_comp_inner+0xd74>)
    9094:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9098:	f107 091b 	add.w	r9, r7, #27
    909c:	2567      	movs	r5, #103	; 0x67
    909e:	f04f 0800 	mov.w	r8, #0
    90a2:	e00b      	b.n	90bc <d_print_comp_inner+0xb84>
    90a4:	460b      	mov	r3, r1
    90a6:	3101      	adds	r1, #1
    90a8:	45b9      	cmp	r9, r7
    90aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    90ae:	54e5      	strb	r5, [r4, r3]
    90b0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    90b4:	f43f aad3 	beq.w	865e <d_print_comp_inner+0x126>
    90b8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    90bc:	29ff      	cmp	r1, #255	; 0xff
    90be:	d1f1      	bne.n	90a4 <d_print_comp_inner+0xb6c>
    90c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    90c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    90c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    90cc:	4620      	mov	r0, r4
    90ce:	4798      	blx	r3
    90d0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    90d4:	3301      	adds	r3, #1
    90d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    90da:	2101      	movs	r1, #1
    90dc:	2300      	movs	r3, #0
    90de:	e7e3      	b.n	90a8 <d_print_comp_inner+0xb70>
    90e0:	4f73      	ldr	r7, [pc, #460]	; (92b0 <d_print_comp_inner+0xd78>)
    90e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    90e6:	f107 091c 	add.w	r9, r7, #28
    90ea:	2567      	movs	r5, #103	; 0x67
    90ec:	f04f 0800 	mov.w	r8, #0
    90f0:	e00b      	b.n	910a <d_print_comp_inner+0xbd2>
    90f2:	460b      	mov	r3, r1
    90f4:	3101      	adds	r1, #1
    90f6:	45b9      	cmp	r9, r7
    90f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    90fc:	54e5      	strb	r5, [r4, r3]
    90fe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9102:	f43f aaac 	beq.w	865e <d_print_comp_inner+0x126>
    9106:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    910a:	29ff      	cmp	r1, #255	; 0xff
    910c:	d1f1      	bne.n	90f2 <d_print_comp_inner+0xbba>
    910e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9112:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9116:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    911a:	4620      	mov	r0, r4
    911c:	4798      	blx	r3
    911e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9122:	3301      	adds	r3, #1
    9124:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9128:	2101      	movs	r1, #1
    912a:	2300      	movs	r3, #0
    912c:	e7e3      	b.n	90f6 <d_print_comp_inner+0xbbe>
    912e:	6913      	ldr	r3, [r2, #16]
    9130:	781b      	ldrb	r3, [r3, #0]
    9132:	2b39      	cmp	r3, #57	; 0x39
    9134:	f47f aa6d 	bne.w	8612 <d_print_comp_inner+0xda>
    9138:	68d2      	ldr	r2, [r2, #12]
    913a:	68d3      	ldr	r3, [r2, #12]
    913c:	681b      	ldr	r3, [r3, #0]
    913e:	7859      	ldrb	r1, [r3, #1]
    9140:	2963      	cmp	r1, #99	; 0x63
    9142:	f001 8081 	beq.w	a248 <d_print_comp_inner+0x1d10>
    9146:	4632      	mov	r2, r6
    9148:	2111      	movs	r1, #17
    914a:	4620      	mov	r0, r4
    914c:	f002 fb16 	bl	b77c <d_maybe_print_fold_expression>
    9150:	2800      	cmp	r0, #0
    9152:	f47f aa61 	bne.w	8618 <d_print_comp_inner+0xe0>
    9156:	4632      	mov	r2, r6
    9158:	2111      	movs	r1, #17
    915a:	4620      	mov	r0, r4
    915c:	f002 fc38 	bl	b9d0 <d_maybe_print_designated_init>
    9160:	2800      	cmp	r0, #0
    9162:	f47f aa59 	bne.w	8618 <d_print_comp_inner+0xe0>
    9166:	68f3      	ldr	r3, [r6, #12]
    9168:	781a      	ldrb	r2, [r3, #0]
    916a:	2a32      	cmp	r2, #50	; 0x32
    916c:	f001 81dd 	beq.w	a52a <d_print_comp_inner+0x1ff2>
    9170:	68db      	ldr	r3, [r3, #12]
    9172:	4950      	ldr	r1, [pc, #320]	; (92b4 <d_print_comp_inner+0xd7c>)
    9174:	6818      	ldr	r0, [r3, #0]
    9176:	f005 f877 	bl	e268 <strcmp>
    917a:	6933      	ldr	r3, [r6, #16]
    917c:	b920      	cbnz	r0, 9188 <d_print_comp_inner+0xc50>
    917e:	68da      	ldr	r2, [r3, #12]
    9180:	7811      	ldrb	r1, [r2, #0]
    9182:	2903      	cmp	r1, #3
    9184:	f001 8200 	beq.w	a588 <d_print_comp_inner+0x2050>
    9188:	68da      	ldr	r2, [r3, #12]
    918a:	2111      	movs	r1, #17
    918c:	4620      	mov	r0, r4
    918e:	f002 fa87 	bl	b6a0 <d_print_subexpr>
    9192:	68f5      	ldr	r5, [r6, #12]
    9194:	4948      	ldr	r1, [pc, #288]	; (92b8 <d_print_comp_inner+0xd80>)
    9196:	68eb      	ldr	r3, [r5, #12]
    9198:	681f      	ldr	r7, [r3, #0]
    919a:	4638      	mov	r0, r7
    919c:	f005 f864 	bl	e268 <strcmp>
    91a0:	2800      	cmp	r0, #0
    91a2:	f001 81e1 	beq.w	a568 <d_print_comp_inner+0x2030>
    91a6:	4943      	ldr	r1, [pc, #268]	; (92b4 <d_print_comp_inner+0xd7c>)
    91a8:	4638      	mov	r0, r7
    91aa:	f005 f85d 	bl	e268 <strcmp>
    91ae:	2800      	cmp	r0, #0
    91b0:	f041 81f8 	bne.w	a5a4 <d_print_comp_inner+0x206c>
    91b4:	6933      	ldr	r3, [r6, #16]
    91b6:	2111      	movs	r1, #17
    91b8:	691a      	ldr	r2, [r3, #16]
    91ba:	4620      	mov	r0, r4
    91bc:	f002 fa70 	bl	b6a0 <d_print_subexpr>
    91c0:	68f3      	ldr	r3, [r6, #12]
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	2a32      	cmp	r2, #50	; 0x32
    91c6:	f47f aa27 	bne.w	8618 <d_print_comp_inner+0xe0>
    91ca:	68db      	ldr	r3, [r3, #12]
    91cc:	689a      	ldr	r2, [r3, #8]
    91ce:	2a01      	cmp	r2, #1
    91d0:	f47f aa22 	bne.w	8618 <d_print_comp_inner+0xe0>
    91d4:	685b      	ldr	r3, [r3, #4]
    91d6:	781b      	ldrb	r3, [r3, #0]
    91d8:	2b3e      	cmp	r3, #62	; 0x3e
    91da:	f47f aa1d 	bne.w	8618 <d_print_comp_inner+0xe0>
    91de:	2129      	movs	r1, #41	; 0x29
    91e0:	f7ff bb1e 	b.w	8820 <d_print_comp_inner+0x2e8>
    91e4:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
    91e8:	783b      	ldrb	r3, [r7, #0]
    91ea:	2b32      	cmp	r3, #50	; 0x32
    91ec:	f000 86b1 	beq.w	9f52 <d_print_comp_inner+0x1a1a>
    91f0:	2b34      	cmp	r3, #52	; 0x34
    91f2:	f041 820d 	bne.w	a610 <d_print_comp_inner+0x20d8>
    91f6:	2128      	movs	r1, #40	; 0x28
    91f8:	f7fc ff64 	bl	60c4 <d_append_char>
    91fc:	4620      	mov	r0, r4
    91fe:	2111      	movs	r1, #17
    9200:	68fa      	ldr	r2, [r7, #12]
    9202:	f001 fa13 	bl	a62c <d_print_comp>
    9206:	2129      	movs	r1, #41	; 0x29
    9208:	4620      	mov	r0, r4
    920a:	f7fc ff5b 	bl	60c4 <d_append_char>
    920e:	462a      	mov	r2, r5
    9210:	2111      	movs	r1, #17
    9212:	4620      	mov	r0, r4
    9214:	b015      	add	sp, #84	; 0x54
    9216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    921a:	f002 ba41 	b.w	b6a0 <d_print_subexpr>
    921e:	68d2      	ldr	r2, [r2, #12]
    9220:	2111      	movs	r1, #17
    9222:	4620      	mov	r0, r4
    9224:	b015      	add	sp, #84	; 0x54
    9226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    922a:	f002 b83d 	b.w	b2a8 <d_print_expr_op>
    922e:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
    9232:	2b00      	cmp	r3, #0
    9234:	f040 871b 	bne.w	a06e <d_print_comp_inner+0x1b36>
    9238:	68f2      	ldr	r2, [r6, #12]
    923a:	4b20      	ldr	r3, [pc, #128]	; (92bc <d_print_comp_inner+0xd84>)
    923c:	68d1      	ldr	r1, [r2, #12]
    923e:	4299      	cmp	r1, r3
    9240:	d00f      	beq.n	9262 <d_print_comp_inner+0xd2a>
    9242:	2111      	movs	r1, #17
    9244:	4620      	mov	r0, r4
    9246:	f001 f9f1 	bl	a62c <d_print_comp>
    924a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    924e:	29ff      	cmp	r1, #255	; 0xff
    9250:	f001 80be 	beq.w	a3d0 <d_print_comp_inner+0x1e98>
    9254:	2320      	movs	r3, #32
    9256:	1c4a      	adds	r2, r1, #1
    9258:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    925c:	5463      	strb	r3, [r4, r1]
    925e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9262:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
    9266:	f1b8 0f00 	cmp.w	r8, #0
    926a:	f000 8540 	beq.w	9cee <d_print_comp_inner+0x17b6>
    926e:	4914      	ldr	r1, [pc, #80]	; (92c0 <d_print_comp_inner+0xd88>)
    9270:	e5c1      	b.n	8df6 <d_print_comp_inner+0x8be>
    9272:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
    9276:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    927a:	9307      	str	r3, [sp, #28]
    927c:	f10d 0810 	add.w	r8, sp, #16
    9280:	2300      	movs	r3, #0
    9282:	46e1      	mov	r9, ip
    9284:	f8cd c010 	str.w	ip, [sp, #16]
    9288:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
    928c:	9205      	str	r2, [sp, #20]
    928e:	9306      	str	r3, [sp, #24]
    9290:	f1bc 0f00 	cmp.w	ip, #0
    9294:	f001 813d 	beq.w	a512 <d_print_comp_inner+0x1fda>
    9298:	2701      	movs	r7, #1
    929a:	4665      	mov	r5, ip
    929c:	46be      	mov	lr, r7
    929e:	4694      	mov	ip, r2
    92a0:	4646      	mov	r6, r8
    92a2:	e028      	b.n	92f6 <d_print_comp_inner+0xdbe>
    92a4:	20002298 	.word	0x20002298
    92a8:	200022f4 	.word	0x200022f4
    92ac:	200022d4 	.word	0x200022d4
    92b0:	200022b4 	.word	0x200022b4
    92b4:	20002260 	.word	0x20002260
    92b8:	20002264 	.word	0x20002264
    92bc:	200019bc 	.word	0x200019bc
    92c0:	20002230 	.word	0x20002230
    92c4:	68ab      	ldr	r3, [r5, #8]
    92c6:	b9a3      	cbnz	r3, 92f2 <d_print_comp_inner+0xdba>
    92c8:	2f03      	cmp	r7, #3
    92ca:	f63f a9a2 	bhi.w	8612 <d_print_comp_inner+0xda>
    92ce:	ab14      	add	r3, sp, #80	; 0x50
    92d0:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
    92d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    92d8:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
    92dc:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    92e0:	f84b 6c40 	str.w	r6, [fp, #-64]
    92e4:	eb08 1607 	add.w	r6, r8, r7, lsl #4
    92e8:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
    92ec:	3701      	adds	r7, #1
    92ee:	f8c5 e008 	str.w	lr, [r5, #8]
    92f2:	682d      	ldr	r5, [r5, #0]
    92f4:	b125      	cbz	r5, 9300 <d_print_comp_inner+0xdc8>
    92f6:	686b      	ldr	r3, [r5, #4]
    92f8:	781b      	ldrb	r3, [r3, #0]
    92fa:	3b19      	subs	r3, #25
    92fc:	2b02      	cmp	r3, #2
    92fe:	d9e1      	bls.n	92c4 <d_print_comp_inner+0xd8c>
    9300:	f8dc 2010 	ldr.w	r2, [ip, #16]
    9304:	2111      	movs	r1, #17
    9306:	4620      	mov	r0, r4
    9308:	4666      	mov	r6, ip
    930a:	f001 f98f 	bl	a62c <d_print_comp>
    930e:	9b06      	ldr	r3, [sp, #24]
    9310:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    9314:	2b00      	cmp	r3, #0
    9316:	f47f a97f 	bne.w	8618 <d_print_comp_inner+0xe0>
    931a:	2f01      	cmp	r7, #1
    931c:	d00c      	beq.n	9338 <d_print_comp_inner+0xe00>
    931e:	eb08 1807 	add.w	r8, r8, r7, lsl #4
    9322:	f858 2c0c 	ldr.w	r2, [r8, #-12]
    9326:	3f01      	subs	r7, #1
    9328:	2111      	movs	r1, #17
    932a:	4620      	mov	r0, r4
    932c:	f001 f9ac 	bl	a688 <d_print_mod>
    9330:	2f01      	cmp	r7, #1
    9332:	f1a8 0810 	sub.w	r8, r8, #16
    9336:	d1f4      	bne.n	9322 <d_print_comp_inner+0xdea>
    9338:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    933c:	4632      	mov	r2, r6
    933e:	2111      	movs	r1, #17
    9340:	4620      	mov	r0, r4
    9342:	f001 fecd 	bl	b0e0 <d_print_array_type>
    9346:	f7ff b967 	b.w	8618 <d_print_comp_inner+0xe0>
    934a:	4fc6      	ldr	r7, [pc, #792]	; (9664 <d_print_comp_inner+0x112c>)
    934c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9350:	f107 0919 	add.w	r9, r7, #25
    9354:	2563      	movs	r5, #99	; 0x63
    9356:	f04f 0800 	mov.w	r8, #0
    935a:	e00b      	b.n	9374 <d_print_comp_inner+0xe3c>
    935c:	460b      	mov	r3, r1
    935e:	3101      	adds	r1, #1
    9360:	45b9      	cmp	r9, r7
    9362:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9366:	54e5      	strb	r5, [r4, r3]
    9368:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    936c:	f43f a977 	beq.w	865e <d_print_comp_inner+0x126>
    9370:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9374:	29ff      	cmp	r1, #255	; 0xff
    9376:	d1f1      	bne.n	935c <d_print_comp_inner+0xe24>
    9378:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    937c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9380:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9384:	4620      	mov	r0, r4
    9386:	4798      	blx	r3
    9388:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    938c:	3301      	adds	r3, #1
    938e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9392:	2101      	movs	r1, #1
    9394:	2300      	movs	r3, #0
    9396:	e7e3      	b.n	9360 <d_print_comp_inner+0xe28>
    9398:	4fb3      	ldr	r7, [pc, #716]	; (9668 <d_print_comp_inner+0x1130>)
    939a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    939e:	f107 0910 	add.w	r9, r7, #16
    93a2:	2576      	movs	r5, #118	; 0x76
    93a4:	f04f 0800 	mov.w	r8, #0
    93a8:	e00b      	b.n	93c2 <d_print_comp_inner+0xe8a>
    93aa:	460b      	mov	r3, r1
    93ac:	3101      	adds	r1, #1
    93ae:	45b9      	cmp	r9, r7
    93b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    93b4:	54e5      	strb	r5, [r4, r3]
    93b6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    93ba:	f43f a950 	beq.w	865e <d_print_comp_inner+0x126>
    93be:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    93c2:	29ff      	cmp	r1, #255	; 0xff
    93c4:	d1f1      	bne.n	93aa <d_print_comp_inner+0xe72>
    93c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    93ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    93ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    93d2:	4620      	mov	r0, r4
    93d4:	4798      	blx	r3
    93d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    93da:	3301      	adds	r3, #1
    93dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    93e0:	2101      	movs	r1, #1
    93e2:	2300      	movs	r3, #0
    93e4:	e7e3      	b.n	93ae <d_print_comp_inner+0xe76>
    93e6:	4fa1      	ldr	r7, [pc, #644]	; (966c <d_print_comp_inner+0x1134>)
    93e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    93ec:	f107 0914 	add.w	r9, r7, #20
    93f0:	256e      	movs	r5, #110	; 0x6e
    93f2:	f04f 0800 	mov.w	r8, #0
    93f6:	e00b      	b.n	9410 <d_print_comp_inner+0xed8>
    93f8:	460b      	mov	r3, r1
    93fa:	3101      	adds	r1, #1
    93fc:	45b9      	cmp	r9, r7
    93fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9402:	54e5      	strb	r5, [r4, r3]
    9404:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9408:	f43f a929 	beq.w	865e <d_print_comp_inner+0x126>
    940c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9410:	29ff      	cmp	r1, #255	; 0xff
    9412:	d1f1      	bne.n	93f8 <d_print_comp_inner+0xec0>
    9414:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9418:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    941c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9420:	4620      	mov	r0, r4
    9422:	4798      	blx	r3
    9424:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9428:	3301      	adds	r3, #1
    942a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    942e:	2101      	movs	r1, #1
    9430:	2300      	movs	r3, #0
    9432:	e7e3      	b.n	93fc <d_print_comp_inner+0xec4>
    9434:	4f8e      	ldr	r7, [pc, #568]	; (9670 <d_print_comp_inner+0x1138>)
    9436:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    943a:	f107 0918 	add.w	r9, r7, #24
    943e:	2554      	movs	r5, #84	; 0x54
    9440:	f04f 0800 	mov.w	r8, #0
    9444:	e00b      	b.n	945e <d_print_comp_inner+0xf26>
    9446:	460b      	mov	r3, r1
    9448:	3101      	adds	r1, #1
    944a:	45b9      	cmp	r9, r7
    944c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9450:	54e5      	strb	r5, [r4, r3]
    9452:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9456:	f43f a902 	beq.w	865e <d_print_comp_inner+0x126>
    945a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    945e:	29ff      	cmp	r1, #255	; 0xff
    9460:	d1f1      	bne.n	9446 <d_print_comp_inner+0xf0e>
    9462:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9466:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    946a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    946e:	4620      	mov	r0, r4
    9470:	4798      	blx	r3
    9472:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9476:	3301      	adds	r3, #1
    9478:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    947c:	2101      	movs	r1, #1
    947e:	2300      	movs	r3, #0
    9480:	e7e3      	b.n	944a <d_print_comp_inner+0xf12>
    9482:	4f7c      	ldr	r7, [pc, #496]	; (9674 <d_print_comp_inner+0x113c>)
    9484:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9488:	f107 0915 	add.w	r9, r7, #21
    948c:	2554      	movs	r5, #84	; 0x54
    948e:	f04f 0800 	mov.w	r8, #0
    9492:	e00b      	b.n	94ac <d_print_comp_inner+0xf74>
    9494:	460b      	mov	r3, r1
    9496:	3101      	adds	r1, #1
    9498:	45b9      	cmp	r9, r7
    949a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    949e:	54e5      	strb	r5, [r4, r3]
    94a0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    94a4:	f43f a8db 	beq.w	865e <d_print_comp_inner+0x126>
    94a8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    94ac:	29ff      	cmp	r1, #255	; 0xff
    94ae:	d1f1      	bne.n	9494 <d_print_comp_inner+0xf5c>
    94b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    94b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    94b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    94bc:	4620      	mov	r0, r4
    94be:	4798      	blx	r3
    94c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    94c4:	3301      	adds	r3, #1
    94c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    94ca:	2101      	movs	r1, #1
    94cc:	2300      	movs	r3, #0
    94ce:	e7e3      	b.n	9498 <d_print_comp_inner+0xf60>
    94d0:	4f69      	ldr	r7, [pc, #420]	; (9678 <d_print_comp_inner+0x1140>)
    94d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    94d6:	f107 0912 	add.w	r9, r7, #18
    94da:	2567      	movs	r5, #103	; 0x67
    94dc:	f04f 0800 	mov.w	r8, #0
    94e0:	e00b      	b.n	94fa <d_print_comp_inner+0xfc2>
    94e2:	460b      	mov	r3, r1
    94e4:	3101      	adds	r1, #1
    94e6:	45b9      	cmp	r9, r7
    94e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    94ec:	54e5      	strb	r5, [r4, r3]
    94ee:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    94f2:	f43f a8b4 	beq.w	865e <d_print_comp_inner+0x126>
    94f6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    94fa:	29ff      	cmp	r1, #255	; 0xff
    94fc:	d1f1      	bne.n	94e2 <d_print_comp_inner+0xfaa>
    94fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9502:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9506:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    950a:	4620      	mov	r0, r4
    950c:	4798      	blx	r3
    950e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9512:	3301      	adds	r3, #1
    9514:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9518:	2101      	movs	r1, #1
    951a:	2300      	movs	r3, #0
    951c:	e7e3      	b.n	94e6 <d_print_comp_inner+0xfae>
    951e:	4f57      	ldr	r7, [pc, #348]	; (967c <d_print_comp_inner+0x1144>)
    9520:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9524:	f107 090e 	add.w	r9, r7, #14
    9528:	256a      	movs	r5, #106	; 0x6a
    952a:	f04f 0800 	mov.w	r8, #0
    952e:	e00b      	b.n	9548 <d_print_comp_inner+0x1010>
    9530:	460b      	mov	r3, r1
    9532:	3101      	adds	r1, #1
    9534:	45b9      	cmp	r9, r7
    9536:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    953a:	54e5      	strb	r5, [r4, r3]
    953c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9540:	f43f a88d 	beq.w	865e <d_print_comp_inner+0x126>
    9544:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9548:	29ff      	cmp	r1, #255	; 0xff
    954a:	d1f1      	bne.n	9530 <d_print_comp_inner+0xff8>
    954c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9550:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9554:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9558:	4620      	mov	r0, r4
    955a:	4798      	blx	r3
    955c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9560:	3301      	adds	r3, #1
    9562:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9566:	2101      	movs	r1, #1
    9568:	2300      	movs	r3, #0
    956a:	e7e3      	b.n	9534 <d_print_comp_inner+0xffc>
    956c:	4f44      	ldr	r7, [pc, #272]	; (9680 <d_print_comp_inner+0x1148>)
    956e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9572:	f107 0908 	add.w	r9, r7, #8
    9576:	256f      	movs	r5, #111	; 0x6f
    9578:	f04f 0800 	mov.w	r8, #0
    957c:	e00b      	b.n	9596 <d_print_comp_inner+0x105e>
    957e:	460b      	mov	r3, r1
    9580:	3101      	adds	r1, #1
    9582:	45b9      	cmp	r9, r7
    9584:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9588:	54e5      	strb	r5, [r4, r3]
    958a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    958e:	f000 8295 	beq.w	9abc <d_print_comp_inner+0x1584>
    9592:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9596:	29ff      	cmp	r1, #255	; 0xff
    9598:	d1f1      	bne.n	957e <d_print_comp_inner+0x1046>
    959a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    959e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    95a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    95a6:	4620      	mov	r0, r4
    95a8:	4798      	blx	r3
    95aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    95ae:	3301      	adds	r3, #1
    95b0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    95b4:	2101      	movs	r1, #1
    95b6:	2300      	movs	r3, #0
    95b8:	e7e3      	b.n	9582 <d_print_comp_inner+0x104a>
    95ba:	4f31      	ldr	r7, [pc, #196]	; (9680 <d_print_comp_inner+0x1148>)
    95bc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    95c0:	f107 0908 	add.w	r9, r7, #8
    95c4:	256f      	movs	r5, #111	; 0x6f
    95c6:	f04f 0800 	mov.w	r8, #0
    95ca:	e00b      	b.n	95e4 <d_print_comp_inner+0x10ac>
    95cc:	460b      	mov	r3, r1
    95ce:	3101      	adds	r1, #1
    95d0:	45b9      	cmp	r9, r7
    95d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    95d6:	54e5      	strb	r5, [r4, r3]
    95d8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    95dc:	f43f a853 	beq.w	8686 <d_print_comp_inner+0x14e>
    95e0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    95e4:	29ff      	cmp	r1, #255	; 0xff
    95e6:	d1f1      	bne.n	95cc <d_print_comp_inner+0x1094>
    95e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    95ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    95f0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    95f4:	4620      	mov	r0, r4
    95f6:	4798      	blx	r3
    95f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    95fc:	3301      	adds	r3, #1
    95fe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9602:	2101      	movs	r1, #1
    9604:	2300      	movs	r3, #0
    9606:	e7e3      	b.n	95d0 <d_print_comp_inner+0x1098>
    9608:	68d2      	ldr	r2, [r2, #12]
    960a:	2111      	movs	r1, #17
    960c:	f001 f80e 	bl	a62c <d_print_comp>
    9610:	f7ff b839 	b.w	8686 <d_print_comp_inner+0x14e>
    9614:	4f1b      	ldr	r7, [pc, #108]	; (9684 <d_print_comp_inner+0x114c>)
    9616:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    961a:	f107 090d 	add.w	r9, r7, #13
    961e:	256a      	movs	r5, #106	; 0x6a
    9620:	f04f 0800 	mov.w	r8, #0
    9624:	e00b      	b.n	963e <d_print_comp_inner+0x1106>
    9626:	460b      	mov	r3, r1
    9628:	3101      	adds	r1, #1
    962a:	45b9      	cmp	r9, r7
    962c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9630:	54e5      	strb	r5, [r4, r3]
    9632:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9636:	f43f a812 	beq.w	865e <d_print_comp_inner+0x126>
    963a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    963e:	29ff      	cmp	r1, #255	; 0xff
    9640:	d1f1      	bne.n	9626 <d_print_comp_inner+0x10ee>
    9642:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9646:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    964a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    964e:	4620      	mov	r0, r4
    9650:	4798      	blx	r3
    9652:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9656:	3301      	adds	r3, #1
    9658:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    965c:	2101      	movs	r1, #1
    965e:	2300      	movs	r3, #0
    9660:	e7e3      	b.n	962a <d_print_comp_inner+0x10f2>
    9662:	bf00      	nop
    9664:	2000216c 	.word	0x2000216c
    9668:	20002158 	.word	0x20002158
    966c:	20002154 	.word	0x20002154
    9670:	200021c4 	.word	0x200021c4
    9674:	200021ac 	.word	0x200021ac
    9678:	20002198 	.word	0x20002198
    967c:	20002188 	.word	0x20002188
    9680:	20002250 	.word	0x20002250
    9684:	20002288 	.word	0x20002288
    9688:	2300      	movs	r3, #0
    968a:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    968e:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
    9692:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    9696:	2111      	movs	r1, #17
    9698:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    969c:	68d2      	ldr	r2, [r2, #12]
    969e:	f000 ffc5 	bl	a62c <d_print_comp>
    96a2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    96a6:	2b3c      	cmp	r3, #60	; 0x3c
    96a8:	f000 857c 	beq.w	a1a4 <d_print_comp_inner+0x1c6c>
    96ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    96b0:	29ff      	cmp	r1, #255	; 0xff
    96b2:	f000 8567 	beq.w	a184 <d_print_comp_inner+0x1c4c>
    96b6:	1c4b      	adds	r3, r1, #1
    96b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    96bc:	233c      	movs	r3, #60	; 0x3c
    96be:	5463      	strb	r3, [r4, r1]
    96c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    96c4:	6932      	ldr	r2, [r6, #16]
    96c6:	2111      	movs	r1, #17
    96c8:	4620      	mov	r0, r4
    96ca:	f000 ffaf 	bl	a62c <d_print_comp>
    96ce:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    96d2:	2b3e      	cmp	r3, #62	; 0x3e
    96d4:	f000 8550 	beq.w	a178 <d_print_comp_inner+0x1c40>
    96d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    96dc:	29ff      	cmp	r1, #255	; 0xff
    96de:	f000 853b 	beq.w	a158 <d_print_comp_inner+0x1c20>
    96e2:	1c4b      	adds	r3, r1, #1
    96e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    96e8:	233e      	movs	r3, #62	; 0x3e
    96ea:	5463      	strb	r3, [r4, r1]
    96ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    96f0:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    96f4:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
    96f8:	f7fe bf8e 	b.w	8618 <d_print_comp_inner+0xe0>
    96fc:	4fc4      	ldr	r7, [pc, #784]	; (9a10 <d_print_comp_inner+0x14d8>)
    96fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9702:	f107 0907 	add.w	r9, r7, #7
    9706:	2556      	movs	r5, #86	; 0x56
    9708:	f04f 0800 	mov.w	r8, #0
    970c:	e00b      	b.n	9726 <d_print_comp_inner+0x11ee>
    970e:	460b      	mov	r3, r1
    9710:	3101      	adds	r1, #1
    9712:	454f      	cmp	r7, r9
    9714:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9718:	54e5      	strb	r5, [r4, r3]
    971a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    971e:	f43e af9e 	beq.w	865e <d_print_comp_inner+0x126>
    9722:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9726:	29ff      	cmp	r1, #255	; 0xff
    9728:	d1f1      	bne.n	970e <d_print_comp_inner+0x11d6>
    972a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    972e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9732:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9736:	4620      	mov	r0, r4
    9738:	4798      	blx	r3
    973a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    973e:	3301      	adds	r3, #1
    9740:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9744:	2101      	movs	r1, #1
    9746:	2300      	movs	r3, #0
    9748:	e7e3      	b.n	9712 <d_print_comp_inner+0x11da>
    974a:	4fb2      	ldr	r7, [pc, #712]	; (9a14 <d_print_comp_inner+0x14dc>)
    974c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9750:	f107 090a 	add.w	r9, r7, #10
    9754:	2576      	movs	r5, #118	; 0x76
    9756:	f04f 0800 	mov.w	r8, #0
    975a:	e00b      	b.n	9774 <d_print_comp_inner+0x123c>
    975c:	460b      	mov	r3, r1
    975e:	3101      	adds	r1, #1
    9760:	45b9      	cmp	r9, r7
    9762:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9766:	54e5      	strb	r5, [r4, r3]
    9768:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    976c:	f43e af77 	beq.w	865e <d_print_comp_inner+0x126>
    9770:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9774:	29ff      	cmp	r1, #255	; 0xff
    9776:	d1f1      	bne.n	975c <d_print_comp_inner+0x1224>
    9778:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    977c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9780:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9784:	4620      	mov	r0, r4
    9786:	4798      	blx	r3
    9788:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    978c:	3301      	adds	r3, #1
    978e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9792:	2101      	movs	r1, #1
    9794:	2300      	movs	r3, #0
    9796:	e7e3      	b.n	9760 <d_print_comp_inner+0x1228>
    9798:	6913      	ldr	r3, [r2, #16]
    979a:	781a      	ldrb	r2, [r3, #0]
    979c:	2a3b      	cmp	r2, #59	; 0x3b
    979e:	f47e af38 	bne.w	8612 <d_print_comp_inner+0xda>
    97a2:	691b      	ldr	r3, [r3, #16]
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	2b3c      	cmp	r3, #60	; 0x3c
    97a8:	f47e af33 	bne.w	8612 <d_print_comp_inner+0xda>
    97ac:	4632      	mov	r2, r6
    97ae:	2111      	movs	r1, #17
    97b0:	f001 ffe4 	bl	b77c <d_maybe_print_fold_expression>
    97b4:	2800      	cmp	r0, #0
    97b6:	f47e af2f 	bne.w	8618 <d_print_comp_inner+0xe0>
    97ba:	4632      	mov	r2, r6
    97bc:	2111      	movs	r1, #17
    97be:	4620      	mov	r0, r4
    97c0:	f002 f906 	bl	b9d0 <d_maybe_print_designated_init>
    97c4:	2800      	cmp	r0, #0
    97c6:	f47e af27 	bne.w	8618 <d_print_comp_inner+0xe0>
    97ca:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
    97ce:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
    97d2:	f8d8 200c 	ldr.w	r2, [r8, #12]
    97d6:	4990      	ldr	r1, [pc, #576]	; (9a18 <d_print_comp_inner+0x14e0>)
    97d8:	6810      	ldr	r0, [r2, #0]
    97da:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
    97de:	f004 fd43 	bl	e268 <strcmp>
    97e2:	2800      	cmp	r0, #0
    97e4:	f040 86e5 	bne.w	a5b2 <d_print_comp_inner+0x207a>
    97e8:	4632      	mov	r2, r6
    97ea:	4620      	mov	r0, r4
    97ec:	2111      	movs	r1, #17
    97ee:	f001 ff57 	bl	b6a0 <d_print_subexpr>
    97f2:	4642      	mov	r2, r8
    97f4:	4620      	mov	r0, r4
    97f6:	2111      	movs	r1, #17
    97f8:	f001 fd56 	bl	b2a8 <d_print_expr_op>
    97fc:	4620      	mov	r0, r4
    97fe:	463a      	mov	r2, r7
    9800:	2111      	movs	r1, #17
    9802:	f001 ff4d 	bl	b6a0 <d_print_subexpr>
    9806:	4985      	ldr	r1, [pc, #532]	; (9a1c <d_print_comp_inner+0x14e4>)
    9808:	4620      	mov	r0, r4
    980a:	f7fc fce3 	bl	61d4 <d_append_string>
    980e:	e4fe      	b.n	920e <d_print_comp_inner+0xcd6>
    9810:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
    9814:	2b00      	cmp	r3, #0
    9816:	f43e aeff 	beq.w	8618 <d_print_comp_inner+0xe0>
    981a:	442b      	add	r3, r5
    981c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9820:	3d01      	subs	r5, #1
    9822:	1e5f      	subs	r7, r3, #1
    9824:	f04f 0800 	mov.w	r8, #0
    9828:	e009      	b.n	983e <d_print_comp_inner+0x1306>
    982a:	460b      	mov	r3, r1
    982c:	3101      	adds	r1, #1
    982e:	42af      	cmp	r7, r5
    9830:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9834:	54e6      	strb	r6, [r4, r3]
    9836:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    983a:	f43e aeed 	beq.w	8618 <d_print_comp_inner+0xe0>
    983e:	29ff      	cmp	r1, #255	; 0xff
    9840:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9844:	d1f1      	bne.n	982a <d_print_comp_inner+0x12f2>
    9846:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    984a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    984e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9852:	4620      	mov	r0, r4
    9854:	4798      	blx	r3
    9856:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    985a:	3301      	adds	r3, #1
    985c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9860:	2101      	movs	r1, #1
    9862:	2300      	movs	r3, #0
    9864:	e7e3      	b.n	982e <d_print_comp_inner+0x12f6>
    9866:	68d2      	ldr	r2, [r2, #12]
    9868:	e9d2 5300 	ldrd	r5, r3, [r2]
    986c:	2b00      	cmp	r3, #0
    986e:	f43e aed3 	beq.w	8618 <d_print_comp_inner+0xe0>
    9872:	442b      	add	r3, r5
    9874:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9878:	3d01      	subs	r5, #1
    987a:	1e5f      	subs	r7, r3, #1
    987c:	f04f 0800 	mov.w	r8, #0
    9880:	e009      	b.n	9896 <d_print_comp_inner+0x135e>
    9882:	460b      	mov	r3, r1
    9884:	3101      	adds	r1, #1
    9886:	42af      	cmp	r7, r5
    9888:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    988c:	54e6      	strb	r6, [r4, r3]
    988e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9892:	f43e aec1 	beq.w	8618 <d_print_comp_inner+0xe0>
    9896:	29ff      	cmp	r1, #255	; 0xff
    9898:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    989c:	d1f1      	bne.n	9882 <d_print_comp_inner+0x134a>
    989e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    98a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    98a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    98aa:	4620      	mov	r0, r4
    98ac:	4798      	blx	r3
    98ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    98b2:	3301      	adds	r3, #1
    98b4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    98b8:	2101      	movs	r1, #1
    98ba:	2300      	movs	r3, #0
    98bc:	e7e3      	b.n	9886 <d_print_comp_inner+0x134e>
    98be:	4958      	ldr	r1, [pc, #352]	; (9a20 <d_print_comp_inner+0x14e8>)
    98c0:	4620      	mov	r0, r4
    98c2:	f7fc fc87 	bl	61d4 <d_append_string>
    98c6:	693a      	ldr	r2, [r7, #16]
    98c8:	4956      	ldr	r1, [pc, #344]	; (9a24 <d_print_comp_inner+0x14ec>)
    98ca:	3201      	adds	r2, #1
    98cc:	a804      	add	r0, sp, #16
    98ce:	f003 ff41 	bl	d754 <sprintf>
    98d2:	a804      	add	r0, sp, #16
    98d4:	f004 feb4 	bl	e640 <strlen>
    98d8:	2800      	cmp	r0, #0
    98da:	f000 83fb 	beq.w	a0d4 <d_print_comp_inner+0x1b9c>
    98de:	ad04      	add	r5, sp, #16
    98e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    98e4:	eb05 0900 	add.w	r9, r5, r0
    98e8:	f04f 0800 	mov.w	r8, #0
    98ec:	e009      	b.n	9902 <d_print_comp_inner+0x13ca>
    98ee:	460b      	mov	r3, r1
    98f0:	3101      	adds	r1, #1
    98f2:	45a9      	cmp	r9, r5
    98f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    98f8:	54e6      	strb	r6, [r4, r3]
    98fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    98fe:	f000 83e9 	beq.w	a0d4 <d_print_comp_inner+0x1b9c>
    9902:	29ff      	cmp	r1, #255	; 0xff
    9904:	f815 6b01 	ldrb.w	r6, [r5], #1
    9908:	d1f1      	bne.n	98ee <d_print_comp_inner+0x13b6>
    990a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    990e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9912:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9916:	4620      	mov	r0, r4
    9918:	4798      	blx	r3
    991a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    991e:	3301      	adds	r3, #1
    9920:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9924:	2101      	movs	r1, #1
    9926:	2300      	movs	r3, #0
    9928:	e7e3      	b.n	98f2 <d_print_comp_inner+0x13ba>
    992a:	2111      	movs	r1, #17
    992c:	6932      	ldr	r2, [r6, #16]
    992e:	4620      	mov	r0, r4
    9930:	f000 fe7c 	bl	a62c <d_print_comp>
    9934:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9938:	29ff      	cmp	r1, #255	; 0xff
    993a:	f000 8299 	beq.w	9e70 <d_print_comp_inner+0x1938>
    993e:	1c4a      	adds	r2, r1, #1
    9940:	235d      	movs	r3, #93	; 0x5d
    9942:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9946:	5463      	strb	r3, [r4, r1]
    9948:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    994c:	f7fe be64 	b.w	8618 <d_print_comp_inner+0xe0>
    9950:	2801      	cmp	r0, #1
    9952:	f240 8196 	bls.w	9c82 <d_print_comp_inner+0x174a>
    9956:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    995a:	f7ff bb30 	b.w	8fbe <d_print_comp_inner+0xa86>
    995e:	68f2      	ldr	r2, [r6, #12]
    9960:	4930      	ldr	r1, [pc, #192]	; (9a24 <d_print_comp_inner+0x14ec>)
    9962:	3201      	adds	r2, #1
    9964:	a804      	add	r0, sp, #16
    9966:	f003 fef5 	bl	d754 <sprintf>
    996a:	a804      	add	r0, sp, #16
    996c:	f004 fe68 	bl	e640 <strlen>
    9970:	b318      	cbz	r0, 99ba <d_print_comp_inner+0x1482>
    9972:	ad04      	add	r5, sp, #16
    9974:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9978:	182f      	adds	r7, r5, r0
    997a:	f04f 0800 	mov.w	r8, #0
    997e:	e008      	b.n	9992 <d_print_comp_inner+0x145a>
    9980:	460b      	mov	r3, r1
    9982:	3101      	adds	r1, #1
    9984:	42af      	cmp	r7, r5
    9986:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    998a:	54e6      	strb	r6, [r4, r3]
    998c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9990:	d015      	beq.n	99be <d_print_comp_inner+0x1486>
    9992:	29ff      	cmp	r1, #255	; 0xff
    9994:	f815 6b01 	ldrb.w	r6, [r5], #1
    9998:	d1f2      	bne.n	9980 <d_print_comp_inner+0x1448>
    999a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    999e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    99a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    99a6:	4620      	mov	r0, r4
    99a8:	4798      	blx	r3
    99aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    99ae:	3301      	adds	r3, #1
    99b0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    99b4:	2101      	movs	r1, #1
    99b6:	2300      	movs	r3, #0
    99b8:	e7e4      	b.n	9984 <d_print_comp_inner+0x144c>
    99ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    99be:	29ff      	cmp	r1, #255	; 0xff
    99c0:	f47f a91a 	bne.w	8bf8 <d_print_comp_inner+0x6c0>
    99c4:	2500      	movs	r5, #0
    99c6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    99ca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    99ce:	4620      	mov	r0, r4
    99d0:	4798      	blx	r3
    99d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    99d6:	2201      	movs	r2, #1
    99d8:	4413      	add	r3, r2
    99da:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    99de:	4629      	mov	r1, r5
    99e0:	f7ff b90b 	b.w	8bfa <d_print_comp_inner+0x6c2>
    99e4:	687d      	ldr	r5, [r7, #4]
    99e6:	782b      	ldrb	r3, [r5, #0]
    99e8:	3b61      	subs	r3, #97	; 0x61
    99ea:	2b19      	cmp	r3, #25
    99ec:	f240 832d 	bls.w	a04a <d_print_comp_inner+0x1b12>
    99f0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    99f4:	5deb      	ldrb	r3, [r5, r7]
    99f6:	2b20      	cmp	r3, #32
    99f8:	bf18      	it	ne
    99fa:	4647      	movne	r7, r8
    99fc:	2f00      	cmp	r7, #0
    99fe:	f43e ae0b 	beq.w	8618 <d_print_comp_inner+0xe0>
    9a02:	3d01      	subs	r5, #1
    9a04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9a08:	442f      	add	r7, r5
    9a0a:	f04f 0800 	mov.w	r8, #0
    9a0e:	e015      	b.n	9a3c <d_print_comp_inner+0x1504>
    9a10:	200020ec 	.word	0x200020ec
    9a14:	200020e0 	.word	0x200020e0
    9a18:	20002268 	.word	0x20002268
    9a1c:	2000226c 	.word	0x2000226c
    9a20:	200020a4 	.word	0x200020a4
    9a24:	20002054 	.word	0x20002054
    9a28:	460b      	mov	r3, r1
    9a2a:	3101      	adds	r1, #1
    9a2c:	42af      	cmp	r7, r5
    9a2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9a32:	54e6      	strb	r6, [r4, r3]
    9a34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9a38:	f43e adee 	beq.w	8618 <d_print_comp_inner+0xe0>
    9a3c:	29ff      	cmp	r1, #255	; 0xff
    9a3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9a42:	d1f1      	bne.n	9a28 <d_print_comp_inner+0x14f0>
    9a44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9a48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9a4c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9a50:	4620      	mov	r0, r4
    9a52:	4798      	blx	r3
    9a54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9a58:	3301      	adds	r3, #1
    9a5a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9a5e:	2101      	movs	r1, #1
    9a60:	2300      	movs	r3, #0
    9a62:	e7e3      	b.n	9a2c <d_print_comp_inner+0x14f4>
    9a64:	4fcc      	ldr	r7, [pc, #816]	; (9d98 <d_print_comp_inner+0x1860>)
    9a66:	6932      	ldr	r2, [r6, #16]
    9a68:	2111      	movs	r1, #17
    9a6a:	4620      	mov	r0, r4
    9a6c:	f000 fdde 	bl	a62c <d_print_comp>
    9a70:	f107 0904 	add.w	r9, r7, #4
    9a74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9a78:	2520      	movs	r5, #32
    9a7a:	f04f 0800 	mov.w	r8, #0
    9a7e:	e00b      	b.n	9a98 <d_print_comp_inner+0x1560>
    9a80:	460b      	mov	r3, r1
    9a82:	3101      	adds	r1, #1
    9a84:	45b9      	cmp	r9, r7
    9a86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9a8a:	54e5      	strb	r5, [r4, r3]
    9a8c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9a90:	f43e ade5 	beq.w	865e <d_print_comp_inner+0x126>
    9a94:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9a98:	29ff      	cmp	r1, #255	; 0xff
    9a9a:	d1f1      	bne.n	9a80 <d_print_comp_inner+0x1548>
    9a9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9aa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9aa4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9aa8:	4620      	mov	r0, r4
    9aaa:	4798      	blx	r3
    9aac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9ab0:	3301      	adds	r3, #1
    9ab2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9ab6:	2101      	movs	r1, #1
    9ab8:	2300      	movs	r3, #0
    9aba:	e7e3      	b.n	9a84 <d_print_comp_inner+0x154c>
    9abc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9ac0:	b133      	cbz	r3, 9ad0 <d_print_comp_inner+0x1598>
    9ac2:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    9ac6:	9104      	str	r1, [sp, #16]
    9ac8:	aa04      	add	r2, sp, #16
    9aca:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    9ace:	9305      	str	r3, [sp, #20]
    9ad0:	68f2      	ldr	r2, [r6, #12]
    9ad2:	7813      	ldrb	r3, [r2, #0]
    9ad4:	2b04      	cmp	r3, #4
    9ad6:	f000 8207 	beq.w	9ee8 <d_print_comp_inner+0x19b0>
    9ada:	2111      	movs	r1, #17
    9adc:	4620      	mov	r0, r4
    9ade:	f000 fda5 	bl	a62c <d_print_comp>
    9ae2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	f43e ad96 	beq.w	8618 <d_print_comp_inner+0xe0>
    9aec:	9b04      	ldr	r3, [sp, #16]
    9aee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9af2:	f7fe bd91 	b.w	8618 <d_print_comp_inner+0xe0>
    9af6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9afa:	68f2      	ldr	r2, [r6, #12]
    9afc:	4fa7      	ldr	r7, [pc, #668]	; (9d9c <d_print_comp_inner+0x1864>)
    9afe:	3301      	adds	r3, #1
    9b00:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9b04:	2111      	movs	r1, #17
    9b06:	4620      	mov	r0, r4
    9b08:	f000 fd90 	bl	a62c <d_print_comp>
    9b0c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9b10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9b14:	3b01      	subs	r3, #1
    9b16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9b1a:	f107 0901 	add.w	r9, r7, #1
    9b1e:	2529      	movs	r5, #41	; 0x29
    9b20:	f04f 0800 	mov.w	r8, #0
    9b24:	e00a      	b.n	9b3c <d_print_comp_inner+0x1604>
    9b26:	460b      	mov	r3, r1
    9b28:	3101      	adds	r1, #1
    9b2a:	454f      	cmp	r7, r9
    9b2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b30:	54e5      	strb	r5, [r4, r3]
    9b32:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9b36:	d013      	beq.n	9b60 <d_print_comp_inner+0x1628>
    9b38:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9b3c:	29ff      	cmp	r1, #255	; 0xff
    9b3e:	d1f2      	bne.n	9b26 <d_print_comp_inner+0x15ee>
    9b40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9b44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9b48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9b4c:	4620      	mov	r0, r4
    9b4e:	4798      	blx	r3
    9b50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9b54:	3301      	adds	r3, #1
    9b56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9b5a:	2101      	movs	r1, #1
    9b5c:	2300      	movs	r3, #0
    9b5e:	e7e4      	b.n	9b2a <d_print_comp_inner+0x15f2>
    9b60:	6932      	ldr	r2, [r6, #16]
    9b62:	498f      	ldr	r1, [pc, #572]	; (9da0 <d_print_comp_inner+0x1868>)
    9b64:	3201      	adds	r2, #1
    9b66:	a804      	add	r0, sp, #16
    9b68:	f003 fdf4 	bl	d754 <sprintf>
    9b6c:	a804      	add	r0, sp, #16
    9b6e:	f004 fd67 	bl	e640 <strlen>
    9b72:	2800      	cmp	r0, #0
    9b74:	f43f af21 	beq.w	99ba <d_print_comp_inner+0x1482>
    9b78:	ad04      	add	r5, sp, #16
    9b7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9b7e:	182f      	adds	r7, r5, r0
    9b80:	f04f 0800 	mov.w	r8, #0
    9b84:	e009      	b.n	9b9a <d_print_comp_inner+0x1662>
    9b86:	460b      	mov	r3, r1
    9b88:	3101      	adds	r1, #1
    9b8a:	42bd      	cmp	r5, r7
    9b8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b90:	54e6      	strb	r6, [r4, r3]
    9b92:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9b96:	f43f af12 	beq.w	99be <d_print_comp_inner+0x1486>
    9b9a:	29ff      	cmp	r1, #255	; 0xff
    9b9c:	f815 6b01 	ldrb.w	r6, [r5], #1
    9ba0:	d1f1      	bne.n	9b86 <d_print_comp_inner+0x164e>
    9ba2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9ba6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9baa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9bae:	4620      	mov	r0, r4
    9bb0:	4798      	blx	r3
    9bb2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9bb6:	3301      	adds	r3, #1
    9bb8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9bbc:	2101      	movs	r1, #1
    9bbe:	2300      	movs	r3, #0
    9bc0:	e7e3      	b.n	9b8a <d_print_comp_inner+0x1652>
    9bc2:	4f78      	ldr	r7, [pc, #480]	; (9da4 <d_print_comp_inner+0x186c>)
    9bc4:	68f2      	ldr	r2, [r6, #12]
    9bc6:	2111      	movs	r1, #17
    9bc8:	4620      	mov	r0, r4
    9bca:	f000 fd2f 	bl	a62c <d_print_comp>
    9bce:	f107 0903 	add.w	r9, r7, #3
    9bd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9bd6:	252d      	movs	r5, #45	; 0x2d
    9bd8:	f04f 0800 	mov.w	r8, #0
    9bdc:	e00b      	b.n	9bf6 <d_print_comp_inner+0x16be>
    9bde:	460b      	mov	r3, r1
    9be0:	3101      	adds	r1, #1
    9be2:	45b9      	cmp	r9, r7
    9be4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9be8:	54e5      	strb	r5, [r4, r3]
    9bea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9bee:	f43e ad4a 	beq.w	8686 <d_print_comp_inner+0x14e>
    9bf2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    9bf6:	29ff      	cmp	r1, #255	; 0xff
    9bf8:	d1f1      	bne.n	9bde <d_print_comp_inner+0x16a6>
    9bfa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9bfe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c02:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c06:	4620      	mov	r0, r4
    9c08:	4798      	blx	r3
    9c0a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9c0e:	3301      	adds	r3, #1
    9c10:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9c14:	2101      	movs	r1, #1
    9c16:	2300      	movs	r3, #0
    9c18:	e7e3      	b.n	9be2 <d_print_comp_inner+0x16aa>
    9c1a:	68f2      	ldr	r2, [r6, #12]
    9c1c:	f7ff b902 	b.w	8e24 <d_print_comp_inner+0x8ec>
    9c20:	4632      	mov	r2, r6
    9c22:	2111      	movs	r1, #17
    9c24:	4620      	mov	r0, r4
    9c26:	f000 fd2f 	bl	a688 <d_print_mod>
    9c2a:	f7fe bd10 	b.w	864e <d_print_comp_inner+0x116>
    9c2e:	6932      	ldr	r2, [r6, #16]
    9c30:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    9c34:	460d      	mov	r5, r1
    9c36:	4620      	mov	r0, r4
    9c38:	2111      	movs	r1, #17
    9c3a:	f000 fcf7 	bl	a62c <d_print_comp>
    9c3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9c42:	42b3      	cmp	r3, r6
    9c44:	f47e ace8 	bne.w	8618 <d_print_comp_inner+0xe0>
    9c48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9c4c:	429d      	cmp	r5, r3
    9c4e:	f47e ace3 	bne.w	8618 <d_print_comp_inner+0xe0>
    9c52:	3d02      	subs	r5, #2
    9c54:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    9c58:	f7fe bcde 	b.w	8618 <d_print_comp_inner+0xe0>
    9c5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9c60:	29ff      	cmp	r1, #255	; 0xff
    9c62:	f000 835f 	beq.w	a324 <d_print_comp_inner+0x1dec>
    9c66:	1c4b      	adds	r3, r1, #1
    9c68:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9c6c:	f858 2c0c 	ldr.w	r2, [r8, #-12]
    9c70:	5467      	strb	r7, [r4, r1]
    9c72:	4620      	mov	r0, r4
    9c74:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9c78:	2111      	movs	r1, #17
    9c7a:	f000 fd05 	bl	a688 <d_print_mod>
    9c7e:	f7ff b9b2 	b.w	8fe6 <d_print_comp_inner+0xaae>
    9c82:	68ff      	ldr	r7, [r7, #12]
    9c84:	4652      	mov	r2, sl
    9c86:	2f00      	cmp	r7, #0
    9c88:	f000 84ac 	beq.w	a5e4 <d_print_comp_inner+0x20ac>
    9c8c:	2d04      	cmp	r5, #4
    9c8e:	f103 0310 	add.w	r3, r3, #16
    9c92:	f000 81f1 	beq.w	a078 <d_print_comp_inner+0x1b40>
    9c96:	4629      	mov	r1, r5
    9c98:	f7ff b95c 	b.w	8f54 <d_print_comp_inner+0xa1c>
    9c9c:	f1b8 0f00 	cmp.w	r8, #0
    9ca0:	f43e acba 	beq.w	8618 <d_print_comp_inner+0xe0>
    9ca4:	46c1      	mov	r9, r8
    9ca6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    9caa:	f7fe be7c 	b.w	89a6 <d_print_comp_inner+0x46e>
    9cae:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    9cb2:	68c2      	ldr	r2, [r0, #12]
    9cb4:	4606      	mov	r6, r0
    9cb6:	f7fe bd2a 	b.w	870e <d_print_comp_inner+0x1d6>
    9cba:	2d07      	cmp	r5, #7
    9cbc:	f47e ad83 	bne.w	87c6 <d_print_comp_inner+0x28e>
    9cc0:	6933      	ldr	r3, [r6, #16]
    9cc2:	7819      	ldrb	r1, [r3, #0]
    9cc4:	2900      	cmp	r1, #0
    9cc6:	f47e ad7e 	bne.w	87c6 <d_print_comp_inner+0x28e>
    9cca:	6919      	ldr	r1, [r3, #16]
    9ccc:	2901      	cmp	r1, #1
    9cce:	f47e ad7a 	bne.w	87c6 <d_print_comp_inner+0x28e>
    9cd2:	2f3d      	cmp	r7, #61	; 0x3d
    9cd4:	f47e ad77 	bne.w	87c6 <d_print_comp_inner+0x28e>
    9cd8:	68db      	ldr	r3, [r3, #12]
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	2b30      	cmp	r3, #48	; 0x30
    9cde:	f000 849d 	beq.w	a61c <d_print_comp_inner+0x20e4>
    9ce2:	2b31      	cmp	r3, #49	; 0x31
    9ce4:	f47e ad6f 	bne.w	87c6 <d_print_comp_inner+0x28e>
    9ce8:	492f      	ldr	r1, [pc, #188]	; (9da8 <d_print_comp_inner+0x1870>)
    9cea:	f7ff b884 	b.w	8df6 <d_print_comp_inner+0x8be>
    9cee:	4e2f      	ldr	r6, [pc, #188]	; (9dac <d_print_comp_inner+0x1874>)
    9cf0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9cf4:	1d77      	adds	r7, r6, #5
    9cf6:	255f      	movs	r5, #95	; 0x5f
    9cf8:	e00b      	b.n	9d12 <d_print_comp_inner+0x17da>
    9cfa:	460b      	mov	r3, r1
    9cfc:	3101      	adds	r1, #1
    9cfe:	42b7      	cmp	r7, r6
    9d00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d04:	54e5      	strb	r5, [r4, r3]
    9d06:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9d0a:	f43e ac85 	beq.w	8618 <d_print_comp_inner+0xe0>
    9d0e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    9d12:	29ff      	cmp	r1, #255	; 0xff
    9d14:	d1f1      	bne.n	9cfa <d_print_comp_inner+0x17c2>
    9d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9d1e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9d22:	4620      	mov	r0, r4
    9d24:	4798      	blx	r3
    9d26:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9d2a:	3301      	adds	r3, #1
    9d2c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9d30:	2101      	movs	r1, #1
    9d32:	2300      	movs	r3, #0
    9d34:	e7e3      	b.n	9cfe <d_print_comp_inner+0x17c6>
    9d36:	491e      	ldr	r1, [pc, #120]	; (9db0 <d_print_comp_inner+0x1878>)
    9d38:	f7fc fa4c 	bl	61d4 <d_append_string>
    9d3c:	4918      	ldr	r1, [pc, #96]	; (9da0 <d_print_comp_inner+0x1868>)
    9d3e:	462a      	mov	r2, r5
    9d40:	a804      	add	r0, sp, #16
    9d42:	f003 fd07 	bl	d754 <sprintf>
    9d46:	a804      	add	r0, sp, #16
    9d48:	f004 fc7a 	bl	e640 <strlen>
    9d4c:	b390      	cbz	r0, 9db4 <d_print_comp_inner+0x187c>
    9d4e:	ad04      	add	r5, sp, #16
    9d50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9d54:	182f      	adds	r7, r5, r0
    9d56:	f04f 0800 	mov.w	r8, #0
    9d5a:	e008      	b.n	9d6e <d_print_comp_inner+0x1836>
    9d5c:	460b      	mov	r3, r1
    9d5e:	3101      	adds	r1, #1
    9d60:	42bd      	cmp	r5, r7
    9d62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d66:	54e6      	strb	r6, [r4, r3]
    9d68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9d6c:	d024      	beq.n	9db8 <d_print_comp_inner+0x1880>
    9d6e:	29ff      	cmp	r1, #255	; 0xff
    9d70:	f815 6b01 	ldrb.w	r6, [r5], #1
    9d74:	d1f2      	bne.n	9d5c <d_print_comp_inner+0x1824>
    9d76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9d7e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9d82:	4620      	mov	r0, r4
    9d84:	4798      	blx	r3
    9d86:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9d8a:	3301      	adds	r3, #1
    9d8c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9d90:	2101      	movs	r1, #1
    9d92:	2300      	movs	r3, #0
    9d94:	e7e4      	b.n	9d60 <d_print_comp_inner+0x1828>
    9d96:	bf00      	nop
    9d98:	200021d8 	.word	0x200021d8
    9d9c:	20002300 	.word	0x20002300
    9da0:	20002054 	.word	0x20002054
    9da4:	20002114 	.word	0x20002114
    9da8:	2000067c 	.word	0x2000067c
    9dac:	20002238 	.word	0x20002238
    9db0:	200022ac 	.word	0x200022ac
    9db4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9db8:	29ff      	cmp	r1, #255	; 0xff
    9dba:	f000 82f3 	beq.w	a3a4 <d_print_comp_inner+0x1e6c>
    9dbe:	237d      	movs	r3, #125	; 0x7d
    9dc0:	1c4a      	adds	r2, r1, #1
    9dc2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9dc6:	5463      	strb	r3, [r4, r1]
    9dc8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9dcc:	f7fe bc24 	b.w	8618 <d_print_comp_inner+0xe0>
    9dd0:	4610      	mov	r0, r2
    9dd2:	2500      	movs	r5, #0
    9dd4:	f7fe bc90 	b.w	86f8 <d_print_comp_inner+0x1c0>
    9dd8:	68f2      	ldr	r2, [r6, #12]
    9dda:	49c2      	ldr	r1, [pc, #776]	; (a0e4 <d_print_comp_inner+0x1bac>)
    9ddc:	3201      	adds	r2, #1
    9dde:	a804      	add	r0, sp, #16
    9de0:	f003 fcb8 	bl	d754 <sprintf>
    9de4:	a804      	add	r0, sp, #16
    9de6:	f004 fc2b 	bl	e640 <strlen>
    9dea:	2800      	cmp	r0, #0
    9dec:	f43e ac14 	beq.w	8618 <d_print_comp_inner+0xe0>
    9df0:	ad04      	add	r5, sp, #16
    9df2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9df6:	182f      	adds	r7, r5, r0
    9df8:	f04f 0800 	mov.w	r8, #0
    9dfc:	e009      	b.n	9e12 <d_print_comp_inner+0x18da>
    9dfe:	460b      	mov	r3, r1
    9e00:	3101      	adds	r1, #1
    9e02:	42bd      	cmp	r5, r7
    9e04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e08:	54e6      	strb	r6, [r4, r3]
    9e0a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9e0e:	f43e ac03 	beq.w	8618 <d_print_comp_inner+0xe0>
    9e12:	29ff      	cmp	r1, #255	; 0xff
    9e14:	f815 6b01 	ldrb.w	r6, [r5], #1
    9e18:	d1f1      	bne.n	9dfe <d_print_comp_inner+0x18c6>
    9e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9e22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9e26:	4620      	mov	r0, r4
    9e28:	4798      	blx	r3
    9e2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9e2e:	3301      	adds	r3, #1
    9e30:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9e34:	2101      	movs	r1, #1
    9e36:	2300      	movs	r3, #0
    9e38:	e7e3      	b.n	9e02 <d_print_comp_inner+0x18ca>
    9e3a:	4611      	mov	r1, r2
    9e3c:	f7fc f964 	bl	6108 <d_lookup_template_argument>
    9e40:	4602      	mov	r2, r0
    9e42:	2800      	cmp	r0, #0
    9e44:	f43e abe5 	beq.w	8612 <d_print_comp_inner+0xda>
    9e48:	7803      	ldrb	r3, [r0, #0]
    9e4a:	2b2f      	cmp	r3, #47	; 0x2f
    9e4c:	f43e abd6 	beq.w	85fc <d_print_comp_inner+0xc4>
    9e50:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    9e54:	682b      	ldr	r3, [r5, #0]
    9e56:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9e5a:	2111      	movs	r1, #17
    9e5c:	4620      	mov	r0, r4
    9e5e:	f000 fbe5 	bl	a62c <d_print_comp>
    9e62:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    9e66:	f7fe bbd7 	b.w	8618 <d_print_comp_inner+0xe0>
    9e6a:	2500      	movs	r5, #0
    9e6c:	f7fe bcab 	b.w	87c6 <d_print_comp_inner+0x28e>
    9e70:	2500      	movs	r5, #0
    9e72:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    9e76:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9e7a:	4620      	mov	r0, r4
    9e7c:	4798      	blx	r3
    9e7e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9e82:	2201      	movs	r2, #1
    9e84:	4413      	add	r3, r2
    9e86:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9e8a:	4629      	mov	r1, r5
    9e8c:	e558      	b.n	9940 <d_print_comp_inner+0x1408>
    9e8e:	2500      	movs	r5, #0
    9e90:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    9e94:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9e98:	4620      	mov	r0, r4
    9e9a:	4798      	blx	r3
    9e9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    9ea0:	2201      	movs	r2, #1
    9ea2:	4413      	add	r3, r2
    9ea4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    9ea8:	4629      	mov	r1, r5
    9eaa:	f7fe bfc5 	b.w	8e38 <d_print_comp_inner+0x900>
    9eae:	2b01      	cmp	r3, #1
    9eb0:	f63f a885 	bhi.w	8fbe <d_print_comp_inner+0xa86>
    9eb4:	2d04      	cmp	r5, #4
    9eb6:	f43e abac 	beq.w	8612 <d_print_comp_inner+0xda>
    9eba:	468e      	mov	lr, r1
    9ebc:	f101 0b10 	add.w	fp, r1, #16
    9ec0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    9ec2:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
    9ec6:	e9ce 7a01 	strd	r7, sl, [lr, #4]
    9eca:	68ff      	ldr	r7, [r7, #12]
    9ecc:	f8ce e010 	str.w	lr, [lr, #16]
    9ed0:	3501      	adds	r5, #1
    9ed2:	f8ce c00c 	str.w	ip, [lr, #12]
    9ed6:	4659      	mov	r1, fp
    9ed8:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
    9edc:	2f00      	cmp	r7, #0
    9ede:	f43e ab98 	beq.w	8612 <d_print_comp_inner+0xda>
    9ee2:	783a      	ldrb	r2, [r7, #0]
    9ee4:	f7ff b858 	b.w	8f98 <d_print_comp_inner+0xa60>
    9ee8:	68d2      	ldr	r2, [r2, #12]
    9eea:	2111      	movs	r1, #17
    9eec:	4620      	mov	r0, r4
    9eee:	f000 fb9d 	bl	a62c <d_print_comp>
    9ef2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9ef6:	b113      	cbz	r3, 9efe <d_print_comp_inner+0x19c6>
    9ef8:	9b04      	ldr	r3, [sp, #16]
    9efa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9efe:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    9f02:	2b3c      	cmp	r3, #60	; 0x3c
    9f04:	f000 82be 	beq.w	a484 <d_print_comp_inner+0x1f4c>
    9f08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9f0c:	29ff      	cmp	r1, #255	; 0xff
    9f0e:	f000 82a9 	beq.w	a464 <d_print_comp_inner+0x1f2c>
    9f12:	1c4a      	adds	r2, r1, #1
    9f14:	233c      	movs	r3, #60	; 0x3c
    9f16:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9f1a:	5463      	strb	r3, [r4, r1]
    9f1c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9f20:	68f3      	ldr	r3, [r6, #12]
    9f22:	2111      	movs	r1, #17
    9f24:	691a      	ldr	r2, [r3, #16]
    9f26:	4620      	mov	r0, r4
    9f28:	f000 fb80 	bl	a62c <d_print_comp>
    9f2c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    9f30:	2b3e      	cmp	r3, #62	; 0x3e
    9f32:	f000 8292 	beq.w	a45a <d_print_comp_inner+0x1f22>
    9f36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9f3a:	29ff      	cmp	r1, #255	; 0xff
    9f3c:	f000 827f 	beq.w	a43e <d_print_comp_inner+0x1f06>
    9f40:	233e      	movs	r3, #62	; 0x3e
    9f42:	1c4a      	adds	r2, r1, #1
    9f44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9f48:	5463      	strb	r3, [r4, r1]
    9f4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9f4e:	f7fe bb63 	b.w	8618 <d_print_comp_inner+0xe0>
    9f52:	68fb      	ldr	r3, [r7, #12]
    9f54:	681e      	ldr	r6, [r3, #0]
    9f56:	7833      	ldrb	r3, [r6, #0]
    9f58:	2b61      	cmp	r3, #97	; 0x61
    9f5a:	f040 8092 	bne.w	a082 <d_print_comp_inner+0x1b4a>
    9f5e:	7872      	ldrb	r2, [r6, #1]
    9f60:	2a64      	cmp	r2, #100	; 0x64
    9f62:	f040 808e 	bne.w	a082 <d_print_comp_inner+0x1b4a>
    9f66:	78b2      	ldrb	r2, [r6, #2]
    9f68:	2a00      	cmp	r2, #0
    9f6a:	f040 808a 	bne.w	a082 <d_print_comp_inner+0x1b4a>
    9f6e:	782a      	ldrb	r2, [r5, #0]
    9f70:	2a03      	cmp	r2, #3
    9f72:	f000 828c 	beq.w	a48e <d_print_comp_inner+0x1f56>
    9f76:	2a39      	cmp	r2, #57	; 0x39
    9f78:	f000 8294 	beq.w	a4a4 <d_print_comp_inner+0x1f6c>
    9f7c:	2b73      	cmp	r3, #115	; 0x73
    9f7e:	d111      	bne.n	9fa4 <d_print_comp_inner+0x1a6c>
    9f80:	7872      	ldrb	r2, [r6, #1]
    9f82:	2a5a      	cmp	r2, #90	; 0x5a
    9f84:	d135      	bne.n	9ff2 <d_print_comp_inner+0x1aba>
    9f86:	78b2      	ldrb	r2, [r6, #2]
    9f88:	bb9a      	cbnz	r2, 9ff2 <d_print_comp_inner+0x1aba>
    9f8a:	4629      	mov	r1, r5
    9f8c:	4620      	mov	r0, r4
    9f8e:	f7fc f8d7 	bl	6140 <d_find_pack>
    9f92:	f7fc f803 	bl	5f9c <d_pack_length>
    9f96:	4601      	mov	r1, r0
    9f98:	4620      	mov	r0, r4
    9f9a:	b015      	add	sp, #84	; 0x54
    9f9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fa0:	f7fc b97c 	b.w	629c <d_append_num>
    9fa4:	463a      	mov	r2, r7
    9fa6:	2111      	movs	r1, #17
    9fa8:	4620      	mov	r0, r4
    9faa:	f001 f97d 	bl	b2a8 <d_print_expr_op>
    9fae:	7833      	ldrb	r3, [r6, #0]
    9fb0:	2b67      	cmp	r3, #103	; 0x67
    9fb2:	d107      	bne.n	9fc4 <d_print_comp_inner+0x1a8c>
    9fb4:	7872      	ldrb	r2, [r6, #1]
    9fb6:	2a73      	cmp	r2, #115	; 0x73
    9fb8:	d104      	bne.n	9fc4 <d_print_comp_inner+0x1a8c>
    9fba:	78b2      	ldrb	r2, [r6, #2]
    9fbc:	b912      	cbnz	r2, 9fc4 <d_print_comp_inner+0x1a8c>
    9fbe:	462a      	mov	r2, r5
    9fc0:	f7fe bb4e 	b.w	8660 <d_print_comp_inner+0x128>
    9fc4:	2b73      	cmp	r3, #115	; 0x73
    9fc6:	f47f a922 	bne.w	920e <d_print_comp_inner+0xcd6>
    9fca:	7873      	ldrb	r3, [r6, #1]
    9fcc:	2b74      	cmp	r3, #116	; 0x74
    9fce:	f47f a91e 	bne.w	920e <d_print_comp_inner+0xcd6>
    9fd2:	78b3      	ldrb	r3, [r6, #2]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	f47f a91a 	bne.w	920e <d_print_comp_inner+0xcd6>
    9fda:	2128      	movs	r1, #40	; 0x28
    9fdc:	4620      	mov	r0, r4
    9fde:	f7fc f871 	bl	60c4 <d_append_char>
    9fe2:	2111      	movs	r1, #17
    9fe4:	462a      	mov	r2, r5
    9fe6:	4620      	mov	r0, r4
    9fe8:	f000 fb20 	bl	a62c <d_print_comp>
    9fec:	2129      	movs	r1, #41	; 0x29
    9fee:	f7fe bc17 	b.w	8820 <d_print_comp_inner+0x2e8>
    9ff2:	2b73      	cmp	r3, #115	; 0x73
    9ff4:	d1d6      	bne.n	9fa4 <d_print_comp_inner+0x1a6c>
    9ff6:	7873      	ldrb	r3, [r6, #1]
    9ff8:	2b50      	cmp	r3, #80	; 0x50
    9ffa:	d1d3      	bne.n	9fa4 <d_print_comp_inner+0x1a6c>
    9ffc:	78b3      	ldrb	r3, [r6, #2]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d1d0      	bne.n	9fa4 <d_print_comp_inner+0x1a6c>
    a002:	461e      	mov	r6, r3
    a004:	e004      	b.n	a010 <d_print_comp_inner+0x1ad8>
    a006:	3601      	adds	r6, #1
    a008:	692d      	ldr	r5, [r5, #16]
    a00a:	2d00      	cmp	r5, #0
    a00c:	f000 819a 	beq.w	a344 <d_print_comp_inner+0x1e0c>
    a010:	782b      	ldrb	r3, [r5, #0]
    a012:	2b2f      	cmp	r3, #47	; 0x2f
    a014:	f040 8196 	bne.w	a344 <d_print_comp_inner+0x1e0c>
    a018:	68eb      	ldr	r3, [r5, #12]
    a01a:	2b00      	cmp	r3, #0
    a01c:	f000 8192 	beq.w	a344 <d_print_comp_inner+0x1e0c>
    a020:	781a      	ldrb	r2, [r3, #0]
    a022:	2a4c      	cmp	r2, #76	; 0x4c
    a024:	d1ef      	bne.n	a006 <d_print_comp_inner+0x1ace>
    a026:	68d9      	ldr	r1, [r3, #12]
    a028:	4620      	mov	r0, r4
    a02a:	f7fc f889 	bl	6140 <d_find_pack>
    a02e:	4603      	mov	r3, r0
    a030:	b148      	cbz	r0, a046 <d_print_comp_inner+0x1b0e>
    a032:	2300      	movs	r3, #0
    a034:	e004      	b.n	a040 <d_print_comp_inner+0x1b08>
    a036:	68c2      	ldr	r2, [r0, #12]
    a038:	b12a      	cbz	r2, a046 <d_print_comp_inner+0x1b0e>
    a03a:	6900      	ldr	r0, [r0, #16]
    a03c:	3301      	adds	r3, #1
    a03e:	b110      	cbz	r0, a046 <d_print_comp_inner+0x1b0e>
    a040:	7802      	ldrb	r2, [r0, #0]
    a042:	2a2f      	cmp	r2, #47	; 0x2f
    a044:	d0f7      	beq.n	a036 <d_print_comp_inner+0x1afe>
    a046:	441e      	add	r6, r3
    a048:	e7de      	b.n	a008 <d_print_comp_inner+0x1ad0>
    a04a:	29ff      	cmp	r1, #255	; 0xff
    a04c:	f000 81d1 	beq.w	a3f2 <d_print_comp_inner+0x1eba>
    a050:	1c4b      	adds	r3, r1, #1
    a052:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a056:	2320      	movs	r3, #32
    a058:	5463      	strb	r3, [r4, r1]
    a05a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a05e:	e4c7      	b.n	99f0 <d_print_comp_inner+0x14b8>
    a060:	4632      	mov	r2, r6
    a062:	2111      	movs	r1, #17
    a064:	4620      	mov	r0, r4
    a066:	f000 fb0f 	bl	a688 <d_print_mod>
    a06a:	f7fe bb36 	b.w	86da <d_print_comp_inner+0x1a2>
    a06e:	491e      	ldr	r1, [pc, #120]	; (a0e8 <d_print_comp_inner+0x1bb0>)
    a070:	f7fc f8b0 	bl	61d4 <d_append_string>
    a074:	f7ff b8e0 	b.w	9238 <d_print_comp_inner+0xd00>
    a078:	2301      	movs	r3, #1
    a07a:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
    a07e:	f7fe bacb 	b.w	8618 <d_print_comp_inner+0xe0>
    a082:	782a      	ldrb	r2, [r5, #0]
    a084:	e777      	b.n	9f76 <d_print_comp_inner+0x1a3e>
    a086:	68f2      	ldr	r2, [r6, #12]
    a088:	460d      	mov	r5, r1
    a08a:	f7fe bb40 	b.w	870e <d_print_comp_inner+0x1d6>
    a08e:	2700      	movs	r7, #0
    a090:	5567      	strb	r7, [r4, r5]
    a092:	4629      	mov	r1, r5
    a094:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a098:	4620      	mov	r0, r4
    a09a:	4798      	blx	r3
    a09c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a0a0:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    a0a4:	3301      	adds	r3, #1
    a0a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a0aa:	463d      	mov	r5, r7
    a0ac:	f7fe bb48 	b.w	8740 <d_print_comp_inner+0x208>
    a0b0:	2600      	movs	r6, #0
    a0b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a0b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a0ba:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a0be:	4620      	mov	r0, r4
    a0c0:	4798      	blx	r3
    a0c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a0c6:	2201      	movs	r2, #1
    a0c8:	4413      	add	r3, r2
    a0ca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a0ce:	4631      	mov	r1, r6
    a0d0:	f7fe bd82 	b.w	8bd8 <d_print_comp_inner+0x6a0>
    a0d4:	4905      	ldr	r1, [pc, #20]	; (a0ec <d_print_comp_inner+0x1bb4>)
    a0d6:	4620      	mov	r0, r4
    a0d8:	f7fc f87c 	bl	61d4 <d_append_string>
    a0dc:	68ff      	ldr	r7, [r7, #12]
    a0de:	463a      	mov	r2, r7
    a0e0:	f7fe babe 	b.w	8660 <d_print_comp_inner+0x128>
    a0e4:	20002054 	.word	0x20002054
    a0e8:	20002228 	.word	0x20002228
    a0ec:	200020b4 	.word	0x200020b4
    a0f0:	2500      	movs	r5, #0
    a0f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a0f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a0fa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a0fe:	4620      	mov	r0, r4
    a100:	4798      	blx	r3
    a102:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a106:	2201      	movs	r2, #1
    a108:	4413      	add	r3, r2
    a10a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a10e:	4629      	mov	r1, r5
    a110:	f7fe be81 	b.w	8e16 <d_print_comp_inner+0x8de>
    a114:	2600      	movs	r6, #0
    a116:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a11a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a11e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    a122:	4798      	blx	r3
    a124:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    a128:	2301      	movs	r3, #1
    a12a:	441a      	add	r2, r3
    a12c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    a130:	4631      	mov	r1, r6
    a132:	f7fe bed2 	b.w	8eda <d_print_comp_inner+0x9a2>
    a136:	2500      	movs	r5, #0
    a138:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a13c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a140:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    a144:	4798      	blx	r3
    a146:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a14a:	2201      	movs	r2, #1
    a14c:	4413      	add	r3, r2
    a14e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a152:	4629      	mov	r1, r5
    a154:	f7fe ba91 	b.w	867a <d_print_comp_inner+0x142>
    a158:	2500      	movs	r5, #0
    a15a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a15e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a162:	4620      	mov	r0, r4
    a164:	4798      	blx	r3
    a166:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a16a:	3301      	adds	r3, #1
    a16c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a170:	4629      	mov	r1, r5
    a172:	2301      	movs	r3, #1
    a174:	f7ff bab6 	b.w	96e4 <d_print_comp_inner+0x11ac>
    a178:	2120      	movs	r1, #32
    a17a:	4620      	mov	r0, r4
    a17c:	f7fb ffa2 	bl	60c4 <d_append_char>
    a180:	f7ff baaa 	b.w	96d8 <d_print_comp_inner+0x11a0>
    a184:	2500      	movs	r5, #0
    a186:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a18a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a18e:	4620      	mov	r0, r4
    a190:	4798      	blx	r3
    a192:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a196:	3301      	adds	r3, #1
    a198:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a19c:	4629      	mov	r1, r5
    a19e:	2301      	movs	r3, #1
    a1a0:	f7ff ba8a 	b.w	96b8 <d_print_comp_inner+0x1180>
    a1a4:	2120      	movs	r1, #32
    a1a6:	4620      	mov	r0, r4
    a1a8:	f7fb ff8c 	bl	60c4 <d_append_char>
    a1ac:	f7ff ba7e 	b.w	96ac <d_print_comp_inner+0x1174>
    a1b0:	2700      	movs	r7, #0
    a1b2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a1b6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a1ba:	4620      	mov	r0, r4
    a1bc:	4798      	blx	r3
    a1be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a1c2:	68f2      	ldr	r2, [r6, #12]
    a1c4:	3301      	adds	r3, #1
    a1c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a1ca:	4639      	mov	r1, r7
    a1cc:	2301      	movs	r3, #1
    a1ce:	f7fe bb00 	b.w	87d2 <d_print_comp_inner+0x29a>
    a1d2:	212d      	movs	r1, #45	; 0x2d
    a1d4:	4620      	mov	r0, r4
    a1d6:	f7fb ff75 	bl	60c4 <d_append_char>
    a1da:	f7fe bb14 	b.w	8806 <d_print_comp_inner+0x2ce>
    a1de:	2700      	movs	r7, #0
    a1e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a1e4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a1e8:	4620      	mov	r0, r4
    a1ea:	4798      	blx	r3
    a1ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a1f0:	3301      	adds	r3, #1
    a1f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a1f6:	4639      	mov	r1, r7
    a1f8:	2301      	movs	r3, #1
    a1fa:	f7fe bafa 	b.w	87f2 <d_print_comp_inner+0x2ba>
    a1fe:	6933      	ldr	r3, [r6, #16]
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2b00      	cmp	r3, #0
    a204:	f47e aadf 	bne.w	87c6 <d_print_comp_inner+0x28e>
    a208:	2f3e      	cmp	r7, #62	; 0x3e
    a20a:	f000 81f6 	beq.w	a5fa <d_print_comp_inner+0x20c2>
    a20e:	6932      	ldr	r2, [r6, #16]
    a210:	2111      	movs	r1, #17
    a212:	4620      	mov	r0, r4
    a214:	3d02      	subs	r5, #2
    a216:	f000 fa09 	bl	a62c <d_print_comp>
    a21a:	2d04      	cmp	r5, #4
    a21c:	f63e a9fc 	bhi.w	8618 <d_print_comp_inner+0xe0>
    a220:	e8df f005 	tbb	[pc, r5]
    a224:	06090c0f 	.word	0x06090c0f
    a228:	03          	.byte	0x03
    a229:	00          	.byte	0x00
    a22a:	49c8      	ldr	r1, [pc, #800]	; (a54c <d_print_comp_inner+0x2014>)
    a22c:	f7fe bde3 	b.w	8df6 <d_print_comp_inner+0x8be>
    a230:	49c7      	ldr	r1, [pc, #796]	; (a550 <d_print_comp_inner+0x2018>)
    a232:	f7fe bde0 	b.w	8df6 <d_print_comp_inner+0x8be>
    a236:	49c7      	ldr	r1, [pc, #796]	; (a554 <d_print_comp_inner+0x201c>)
    a238:	f7fe bddd 	b.w	8df6 <d_print_comp_inner+0x8be>
    a23c:	216c      	movs	r1, #108	; 0x6c
    a23e:	f7fe baef 	b.w	8820 <d_print_comp_inner+0x2e8>
    a242:	2175      	movs	r1, #117	; 0x75
    a244:	f7fe baec 	b.w	8820 <d_print_comp_inner+0x2e8>
    a248:	781b      	ldrb	r3, [r3, #0]
    a24a:	2b73      	cmp	r3, #115	; 0x73
    a24c:	d00a      	beq.n	a264 <d_print_comp_inner+0x1d2c>
    a24e:	3b63      	subs	r3, #99	; 0x63
    a250:	b2db      	uxtb	r3, r3
    a252:	2b0f      	cmp	r3, #15
    a254:	f63e af77 	bhi.w	9146 <d_print_comp_inner+0xc0e>
    a258:	49bf      	ldr	r1, [pc, #764]	; (a558 <d_print_comp_inner+0x2020>)
    a25a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    a25e:	2b00      	cmp	r3, #0
    a260:	f43e af71 	beq.w	9146 <d_print_comp_inner+0xc0e>
    a264:	2111      	movs	r1, #17
    a266:	4620      	mov	r0, r4
    a268:	f001 f81e 	bl	b2a8 <d_print_expr_op>
    a26c:	213c      	movs	r1, #60	; 0x3c
    a26e:	4620      	mov	r0, r4
    a270:	f7fb ff28 	bl	60c4 <d_append_char>
    a274:	6933      	ldr	r3, [r6, #16]
    a276:	2111      	movs	r1, #17
    a278:	68da      	ldr	r2, [r3, #12]
    a27a:	4620      	mov	r0, r4
    a27c:	f000 f9d6 	bl	a62c <d_print_comp>
    a280:	49b6      	ldr	r1, [pc, #728]	; (a55c <d_print_comp_inner+0x2024>)
    a282:	4620      	mov	r0, r4
    a284:	f7fb ffa6 	bl	61d4 <d_append_string>
    a288:	6933      	ldr	r3, [r6, #16]
    a28a:	2111      	movs	r1, #17
    a28c:	691a      	ldr	r2, [r3, #16]
    a28e:	4620      	mov	r0, r4
    a290:	f000 f9cc 	bl	a62c <d_print_comp>
    a294:	2129      	movs	r1, #41	; 0x29
    a296:	f7fe bac3 	b.w	8820 <d_print_comp_inner+0x2e8>
    a29a:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
    a29e:	f1bc 0f00 	cmp.w	ip, #0
    a2a2:	f340 8107 	ble.w	a4b4 <d_print_comp_inner+0x1f7c>
    a2a6:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
    a2aa:	462b      	mov	r3, r5
    a2ac:	4670      	mov	r0, lr
    a2ae:	e004      	b.n	a2ba <d_print_comp_inner+0x1d82>
    a2b0:	4563      	cmp	r3, ip
    a2b2:	f100 0008 	add.w	r0, r0, #8
    a2b6:	f000 80fd 	beq.w	a4b4 <d_print_comp_inner+0x1f7c>
    a2ba:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
    a2be:	428a      	cmp	r2, r1
    a2c0:	f103 0301 	add.w	r3, r3, #1
    a2c4:	d1f4      	bne.n	a2b0 <d_print_comp_inner+0x1d78>
    a2c6:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
    a2ca:	4663      	mov	r3, ip
    a2cc:	f1bc 0f00 	cmp.w	ip, #0
    a2d0:	d104      	bne.n	a2dc <d_print_comp_inner+0x1da4>
    a2d2:	e09d      	b.n	a410 <d_print_comp_inner+0x1ed8>
    a2d4:	685b      	ldr	r3, [r3, #4]
    a2d6:	2b00      	cmp	r3, #0
    a2d8:	f000 809a 	beq.w	a410 <d_print_comp_inner+0x1ed8>
    a2dc:	6819      	ldr	r1, [r3, #0]
    a2de:	4291      	cmp	r1, r2
    a2e0:	d003      	beq.n	a2ea <d_print_comp_inner+0x1db2>
    a2e2:	42b1      	cmp	r1, r6
    a2e4:	d1f6      	bne.n	a2d4 <d_print_comp_inner+0x1d9c>
    a2e6:	459c      	cmp	ip, r3
    a2e8:	d0f4      	beq.n	a2d4 <d_print_comp_inner+0x1d9c>
    a2ea:	4611      	mov	r1, r2
    a2ec:	4620      	mov	r0, r4
    a2ee:	9201      	str	r2, [sp, #4]
    a2f0:	f7fb ff0a 	bl	6108 <d_lookup_template_argument>
    a2f4:	9a01      	ldr	r2, [sp, #4]
    a2f6:	2800      	cmp	r0, #0
    a2f8:	f43e a98b 	beq.w	8612 <d_print_comp_inner+0xda>
    a2fc:	7803      	ldrb	r3, [r0, #0]
    a2fe:	2b2f      	cmp	r3, #47	; 0x2f
    a300:	f47e a9fa 	bne.w	86f8 <d_print_comp_inner+0x1c0>
    a304:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    a308:	2900      	cmp	r1, #0
    a30a:	f6fe a9fe 	blt.w	870a <d_print_comp_inner+0x1d2>
    a30e:	f7fb fe77 	bl	6000 <d_index_template_argument.part.0>
    a312:	2800      	cmp	r0, #0
    a314:	f000 816a 	beq.w	a5ec <d_print_comp_inner+0x20b4>
    a318:	7803      	ldrb	r3, [r0, #0]
    a31a:	f7fe b9ed 	b.w	86f8 <d_print_comp_inner+0x1c0>
    a31e:	68c2      	ldr	r2, [r0, #12]
    a320:	f7fe b97e 	b.w	8620 <d_print_comp_inner+0xe8>
    a324:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a328:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a32c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a330:	4620      	mov	r0, r4
    a332:	4798      	blx	r3
    a334:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a338:	3301      	adds	r3, #1
    a33a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a33e:	4631      	mov	r1, r6
    a340:	2301      	movs	r3, #1
    a342:	e491      	b.n	9c68 <d_print_comp_inner+0x1730>
    a344:	4986      	ldr	r1, [pc, #536]	; (a560 <d_print_comp_inner+0x2028>)
    a346:	4632      	mov	r2, r6
    a348:	a804      	add	r0, sp, #16
    a34a:	f003 fa03 	bl	d754 <sprintf>
    a34e:	a804      	add	r0, sp, #16
    a350:	f004 f976 	bl	e640 <strlen>
    a354:	2800      	cmp	r0, #0
    a356:	f43e a95f 	beq.w	8618 <d_print_comp_inner+0xe0>
    a35a:	ad04      	add	r5, sp, #16
    a35c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a360:	182f      	adds	r7, r5, r0
    a362:	f04f 0800 	mov.w	r8, #0
    a366:	e009      	b.n	a37c <d_print_comp_inner+0x1e44>
    a368:	460b      	mov	r3, r1
    a36a:	3101      	adds	r1, #1
    a36c:	42af      	cmp	r7, r5
    a36e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a372:	54e6      	strb	r6, [r4, r3]
    a374:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    a378:	f43e a94e 	beq.w	8618 <d_print_comp_inner+0xe0>
    a37c:	29ff      	cmp	r1, #255	; 0xff
    a37e:	f815 6b01 	ldrb.w	r6, [r5], #1
    a382:	d1f1      	bne.n	a368 <d_print_comp_inner+0x1e30>
    a384:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a388:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a38c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a390:	4620      	mov	r0, r4
    a392:	4798      	blx	r3
    a394:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a398:	3301      	adds	r3, #1
    a39a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a39e:	2101      	movs	r1, #1
    a3a0:	2300      	movs	r3, #0
    a3a2:	e7e3      	b.n	a36c <d_print_comp_inner+0x1e34>
    a3a4:	2500      	movs	r5, #0
    a3a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a3aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a3ae:	4620      	mov	r0, r4
    a3b0:	4798      	blx	r3
    a3b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a3b6:	3301      	adds	r3, #1
    a3b8:	4629      	mov	r1, r5
    a3ba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a3be:	e4fe      	b.n	9dbe <d_print_comp_inner+0x1886>
    a3c0:	2111      	movs	r1, #17
    a3c2:	4620      	mov	r0, r4
    a3c4:	4652      	mov	r2, sl
    a3c6:	f001 f96b 	bl	b6a0 <d_print_subexpr>
    a3ca:	4966      	ldr	r1, [pc, #408]	; (a564 <d_print_comp_inner+0x202c>)
    a3cc:	f7fe bd13 	b.w	8df6 <d_print_comp_inner+0x8be>
    a3d0:	2500      	movs	r5, #0
    a3d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a3d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a3da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a3de:	4620      	mov	r0, r4
    a3e0:	4798      	blx	r3
    a3e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a3e6:	3301      	adds	r3, #1
    a3e8:	4629      	mov	r1, r5
    a3ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a3ee:	f7fe bf31 	b.w	9254 <d_print_comp_inner+0xd1c>
    a3f2:	2600      	movs	r6, #0
    a3f4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a3f8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a3fc:	4620      	mov	r0, r4
    a3fe:	4798      	blx	r3
    a400:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a404:	687d      	ldr	r5, [r7, #4]
    a406:	3301      	adds	r3, #1
    a408:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a40c:	4631      	mov	r1, r6
    a40e:	e61f      	b.n	a050 <d_print_comp_inner+0x1b18>
    a410:	6843      	ldr	r3, [r0, #4]
    a412:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
    a416:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a41a:	4611      	mov	r1, r2
    a41c:	4620      	mov	r0, r4
    a41e:	9201      	str	r2, [sp, #4]
    a420:	f7fb fe72 	bl	6108 <d_lookup_template_argument>
    a424:	9a01      	ldr	r2, [sp, #4]
    a426:	2800      	cmp	r0, #0
    a428:	f000 80e3 	beq.w	a5f2 <d_print_comp_inner+0x20ba>
    a42c:	2501      	movs	r5, #1
    a42e:	e765      	b.n	a2fc <d_print_comp_inner+0x1dc4>
    a430:	68ff      	ldr	r7, [r7, #12]
    a432:	2f00      	cmp	r7, #0
    a434:	f43e a8ed 	beq.w	8612 <d_print_comp_inner+0xda>
    a438:	783a      	ldrb	r2, [r7, #0]
    a43a:	f7fe bda9 	b.w	8f90 <d_print_comp_inner+0xa58>
    a43e:	2500      	movs	r5, #0
    a440:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    a444:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a448:	4620      	mov	r0, r4
    a44a:	4798      	blx	r3
    a44c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a450:	3301      	adds	r3, #1
    a452:	4629      	mov	r1, r5
    a454:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a458:	e572      	b.n	9f40 <d_print_comp_inner+0x1a08>
    a45a:	2120      	movs	r1, #32
    a45c:	4620      	mov	r0, r4
    a45e:	f7fb fe31 	bl	60c4 <d_append_char>
    a462:	e568      	b.n	9f36 <d_print_comp_inner+0x19fe>
    a464:	2500      	movs	r5, #0
    a466:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a46a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a46e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a472:	4620      	mov	r0, r4
    a474:	4798      	blx	r3
    a476:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a47a:	3301      	adds	r3, #1
    a47c:	4629      	mov	r1, r5
    a47e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a482:	e546      	b.n	9f12 <d_print_comp_inner+0x19da>
    a484:	2120      	movs	r1, #32
    a486:	4620      	mov	r0, r4
    a488:	f7fb fe1c 	bl	60c4 <d_append_char>
    a48c:	e53c      	b.n	9f08 <d_print_comp_inner+0x19d0>
    a48e:	68ea      	ldr	r2, [r5, #12]
    a490:	7811      	ldrb	r1, [r2, #0]
    a492:	2901      	cmp	r1, #1
    a494:	f47f ad72 	bne.w	9f7c <d_print_comp_inner+0x1a44>
    a498:	6929      	ldr	r1, [r5, #16]
    a49a:	7809      	ldrb	r1, [r1, #0]
    a49c:	2929      	cmp	r1, #41	; 0x29
    a49e:	bf08      	it	eq
    a4a0:	4615      	moveq	r5, r2
    a4a2:	e56b      	b.n	9f7c <d_print_comp_inner+0x1a44>
    a4a4:	68ea      	ldr	r2, [r5, #12]
    a4a6:	2111      	movs	r1, #17
    a4a8:	4620      	mov	r0, r4
    a4aa:	f001 f8f9 	bl	b6a0 <d_print_subexpr>
    a4ae:	463a      	mov	r2, r7
    a4b0:	f7fe beb6 	b.w	9220 <d_print_comp_inner+0xce8>
    a4b4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    a4b8:	4563      	cmp	r3, ip
    a4ba:	f77e a8aa 	ble.w	8612 <d_print_comp_inner+0xda>
    a4be:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    a4c2:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
    a4c6:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
    a4ca:	f10c 0001 	add.w	r0, ip, #1
    a4ce:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    a4d2:	3304      	adds	r3, #4
    a4d4:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
    a4d8:	f1be 0f00 	cmp.w	lr, #0
    a4dc:	f000 8092 	beq.w	a604 <d_print_comp_inner+0x20cc>
    a4e0:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
    a4e4:	4694      	mov	ip, r2
    a4e6:	e010      	b.n	a50a <d_print_comp_inner+0x1fd2>
    a4e8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    a4ec:	f8de 2004 	ldr.w	r2, [lr, #4]
    a4f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    a4f4:	3001      	adds	r0, #1
    a4f6:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    a4fa:	604a      	str	r2, [r1, #4]
    a4fc:	6019      	str	r1, [r3, #0]
    a4fe:	f8de e000 	ldr.w	lr, [lr]
    a502:	460b      	mov	r3, r1
    a504:	f1be 0f00 	cmp.w	lr, #0
    a508:	d07b      	beq.n	a602 <d_print_comp_inner+0x20ca>
    a50a:	4581      	cmp	r9, r0
    a50c:	dcec      	bgt.n	a4e8 <d_print_comp_inner+0x1fb0>
    a50e:	f7fe b880 	b.w	8612 <d_print_comp_inner+0xda>
    a512:	6912      	ldr	r2, [r2, #16]
    a514:	2111      	movs	r1, #17
    a516:	f000 f889 	bl	a62c <d_print_comp>
    a51a:	9b06      	ldr	r3, [sp, #24]
    a51c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    a520:	2b00      	cmp	r3, #0
    a522:	f43e af09 	beq.w	9338 <d_print_comp_inner+0xe00>
    a526:	f7fe b877 	b.w	8618 <d_print_comp_inner+0xe0>
    a52a:	68da      	ldr	r2, [r3, #12]
    a52c:	6891      	ldr	r1, [r2, #8]
    a52e:	2901      	cmp	r1, #1
    a530:	f47e ae1e 	bne.w	9170 <d_print_comp_inner+0xc38>
    a534:	6852      	ldr	r2, [r2, #4]
    a536:	7812      	ldrb	r2, [r2, #0]
    a538:	2a3e      	cmp	r2, #62	; 0x3e
    a53a:	f47e ae19 	bne.w	9170 <d_print_comp_inner+0xc38>
    a53e:	2128      	movs	r1, #40	; 0x28
    a540:	4620      	mov	r0, r4
    a542:	f7fb fdbf 	bl	60c4 <d_append_char>
    a546:	68f3      	ldr	r3, [r6, #12]
    a548:	f7fe be12 	b.w	9170 <d_print_comp_inner+0xc38>
    a54c:	2000227c 	.word	0x2000227c
    a550:	20002278 	.word	0x20002278
    a554:	20000890 	.word	0x20000890
    a558:	20000370 	.word	0x20000370
    a55c:	2000225c 	.word	0x2000225c
    a560:	20002054 	.word	0x20002054
    a564:	20002790 	.word	0x20002790
    a568:	4620      	mov	r0, r4
    a56a:	215b      	movs	r1, #91	; 0x5b
    a56c:	f7fb fdaa 	bl	60c4 <d_append_char>
    a570:	6933      	ldr	r3, [r6, #16]
    a572:	4620      	mov	r0, r4
    a574:	691a      	ldr	r2, [r3, #16]
    a576:	2111      	movs	r1, #17
    a578:	f000 f858 	bl	a62c <d_print_comp>
    a57c:	215d      	movs	r1, #93	; 0x5d
    a57e:	4620      	mov	r0, r4
    a580:	f7fb fda0 	bl	60c4 <d_append_char>
    a584:	f7fe be1c 	b.w	91c0 <d_print_comp_inner+0xc88>
    a588:	6913      	ldr	r3, [r2, #16]
    a58a:	68d2      	ldr	r2, [r2, #12]
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	2b29      	cmp	r3, #41	; 0x29
    a590:	bf1c      	itt	ne
    a592:	2301      	movne	r3, #1
    a594:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    a598:	2111      	movs	r1, #17
    a59a:	4620      	mov	r0, r4
    a59c:	f001 f880 	bl	b6a0 <d_print_subexpr>
    a5a0:	f7fe bdf7 	b.w	9192 <d_print_comp_inner+0xc5a>
    a5a4:	462a      	mov	r2, r5
    a5a6:	2111      	movs	r1, #17
    a5a8:	4620      	mov	r0, r4
    a5aa:	f000 fe7d 	bl	b2a8 <d_print_expr_op>
    a5ae:	f7fe be01 	b.w	91b4 <d_print_comp_inner+0xc7c>
    a5b2:	491c      	ldr	r1, [pc, #112]	; (a624 <d_print_comp_inner+0x20ec>)
    a5b4:	4620      	mov	r0, r4
    a5b6:	f7fb fe0d 	bl	61d4 <d_append_string>
    a5ba:	68f3      	ldr	r3, [r6, #12]
    a5bc:	b143      	cbz	r3, a5d0 <d_print_comp_inner+0x2098>
    a5be:	2111      	movs	r1, #17
    a5c0:	4620      	mov	r0, r4
    a5c2:	4632      	mov	r2, r6
    a5c4:	f001 f86c 	bl	b6a0 <d_print_subexpr>
    a5c8:	2120      	movs	r1, #32
    a5ca:	4620      	mov	r0, r4
    a5cc:	f7fb fd7a 	bl	60c4 <d_append_char>
    a5d0:	463a      	mov	r2, r7
    a5d2:	2111      	movs	r1, #17
    a5d4:	4620      	mov	r0, r4
    a5d6:	f000 f829 	bl	a62c <d_print_comp>
    a5da:	2d00      	cmp	r5, #0
    a5dc:	f47e ae17 	bne.w	920e <d_print_comp_inner+0xcd6>
    a5e0:	f7fe b81a 	b.w	8618 <d_print_comp_inner+0xe0>
    a5e4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a5e8:	f7fe b813 	b.w	8612 <d_print_comp_inner+0xda>
    a5ec:	2d00      	cmp	r5, #0
    a5ee:	f43e a810 	beq.w	8612 <d_print_comp_inner+0xda>
    a5f2:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
    a5f6:	f7fe b80c 	b.w	8612 <d_print_comp_inner+0xda>
    a5fa:	212d      	movs	r1, #45	; 0x2d
    a5fc:	f7fb fd62 	bl	60c4 <d_append_char>
    a600:	e605      	b.n	a20e <d_print_comp_inner+0x1cd6>
    a602:	4662      	mov	r2, ip
    a604:	2100      	movs	r1, #0
    a606:	6019      	str	r1, [r3, #0]
    a608:	e66f      	b.n	a2ea <d_print_comp_inner+0x1db2>
    a60a:	68f2      	ldr	r2, [r6, #12]
    a60c:	f7fe b817 	b.w	863e <d_print_comp_inner+0x106>
    a610:	463a      	mov	r2, r7
    a612:	2111      	movs	r1, #17
    a614:	f000 fe48 	bl	b2a8 <d_print_expr_op>
    a618:	f7fe bdf9 	b.w	920e <d_print_comp_inner+0xcd6>
    a61c:	4902      	ldr	r1, [pc, #8]	; (a628 <d_print_comp_inner+0x20f0>)
    a61e:	f7fe bbea 	b.w	8df6 <d_print_comp_inner+0x8be>
    a622:	bf00      	nop
    a624:	20002270 	.word	0x20002270
    a628:	20002280 	.word	0x20002280

0000a62c <d_print_comp>:
    a62c:	b530      	push	{r4, r5, lr}
    a62e:	4605      	mov	r5, r0
    a630:	b083      	sub	sp, #12
    a632:	b31a      	cbz	r2, a67c <d_print_comp+0x50>
    a634:	6853      	ldr	r3, [r2, #4]
    a636:	2b01      	cmp	r3, #1
    a638:	4614      	mov	r4, r2
    a63a:	dc1f      	bgt.n	a67c <d_print_comp+0x50>
    a63c:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
    a640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a644:	dc1a      	bgt.n	a67c <d_print_comp+0x50>
    a646:	3301      	adds	r3, #1
    a648:	6053      	str	r3, [r2, #4]
    a64a:	3101      	adds	r1, #1
    a64c:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
    a650:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    a654:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
    a658:	2111      	movs	r1, #17
    a65a:	e9cd 2300 	strd	r2, r3, [sp]
    a65e:	f7fd ff6b 	bl	8538 <d_print_comp_inner>
    a662:	6862      	ldr	r2, [r4, #4]
    a664:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    a668:	9901      	ldr	r1, [sp, #4]
    a66a:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
    a66e:	3a01      	subs	r2, #1
    a670:	3b01      	subs	r3, #1
    a672:	6062      	str	r2, [r4, #4]
    a674:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    a678:	b003      	add	sp, #12
    a67a:	bd30      	pop	{r4, r5, pc}
    a67c:	2301      	movs	r3, #1
    a67e:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
    a682:	b003      	add	sp, #12
    a684:	bd30      	pop	{r4, r5, pc}
    a686:	bf00      	nop

0000a688 <d_print_mod>:
    a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a68c:	7813      	ldrb	r3, [r2, #0]
    a68e:	3b03      	subs	r3, #3
    a690:	4615      	mov	r5, r2
    a692:	4604      	mov	r4, r0
    a694:	2b4e      	cmp	r3, #78	; 0x4e
    a696:	d850      	bhi.n	a73a <d_print_mod+0xb2>
    a698:	e8df f013 	tbh	[pc, r3, lsl #1]
    a69c:	004f011c 	.word	0x004f011c
    a6a0:	004f004f 	.word	0x004f004f
    a6a4:	004f004f 	.word	0x004f004f
    a6a8:	004f004f 	.word	0x004f004f
    a6ac:	004f004f 	.word	0x004f004f
    a6b0:	004f004f 	.word	0x004f004f
    a6b4:	004f004f 	.word	0x004f004f
    a6b8:	004f004f 	.word	0x004f004f
    a6bc:	004f004f 	.word	0x004f004f
    a6c0:	004f004f 	.word	0x004f004f
    a6c4:	004f004f 	.word	0x004f004f
    a6c8:	007c0055 	.word	0x007c0055
    a6cc:	005500a3 	.word	0x005500a3
    a6d0:	00a3007c 	.word	0x00a3007c
    a6d4:	00fc00ef 	.word	0x00fc00ef
    a6d8:	02870109 	.word	0x02870109
    a6dc:	01300122 	.word	0x01300122
    a6e0:	017b0155 	.word	0x017b0155
    a6e4:	004f004f 	.word	0x004f004f
    a6e8:	004f004f 	.word	0x004f004f
    a6ec:	004f01a1 	.word	0x004f01a1
    a6f0:	004f01d1 	.word	0x004f01d1
    a6f4:	004f004f 	.word	0x004f004f
    a6f8:	004f004f 	.word	0x004f004f
    a6fc:	004f004f 	.word	0x004f004f
    a700:	004f004f 	.word	0x004f004f
    a704:	004f004f 	.word	0x004f004f
    a708:	004f004f 	.word	0x004f004f
    a70c:	004f004f 	.word	0x004f004f
    a710:	004f004f 	.word	0x004f004f
    a714:	004f004f 	.word	0x004f004f
    a718:	004f004f 	.word	0x004f004f
    a71c:	004f004f 	.word	0x004f004f
    a720:	004f004f 	.word	0x004f004f
    a724:	004f004f 	.word	0x004f004f
    a728:	004f004f 	.word	0x004f004f
    a72c:	004f004f 	.word	0x004f004f
    a730:	01f8004f 	.word	0x01f8004f
    a734:	0234004f 	.word	0x0234004f
    a738:	00c8      	.short	0x00c8
    a73a:	462a      	mov	r2, r5
    a73c:	2111      	movs	r1, #17
    a73e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a742:	f7ff bf73 	b.w	a62c <d_print_comp>
    a746:	4ed6      	ldr	r6, [pc, #856]	; (aaa0 <d_print_mod+0x418>)
    a748:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a74c:	f106 0708 	add.w	r7, r6, #8
    a750:	2520      	movs	r5, #32
    a752:	f04f 0800 	mov.w	r8, #0
    a756:	e00b      	b.n	a770 <d_print_mod+0xe8>
    a758:	460b      	mov	r3, r1
    a75a:	3101      	adds	r1, #1
    a75c:	42be      	cmp	r6, r7
    a75e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a762:	54e5      	strb	r5, [r4, r3]
    a764:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a768:	f000 80c6 	beq.w	a8f8 <d_print_mod+0x270>
    a76c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    a770:	29ff      	cmp	r1, #255	; 0xff
    a772:	d1f1      	bne.n	a758 <d_print_mod+0xd0>
    a774:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a77c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a780:	4620      	mov	r0, r4
    a782:	4798      	blx	r3
    a784:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a788:	3301      	adds	r3, #1
    a78a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a78e:	2101      	movs	r1, #1
    a790:	2300      	movs	r3, #0
    a792:	e7e3      	b.n	a75c <d_print_mod+0xd4>
    a794:	4ec3      	ldr	r6, [pc, #780]	; (aaa4 <d_print_mod+0x41c>)
    a796:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a79a:	f106 0708 	add.w	r7, r6, #8
    a79e:	2520      	movs	r5, #32
    a7a0:	f04f 0800 	mov.w	r8, #0
    a7a4:	e00b      	b.n	a7be <d_print_mod+0x136>
    a7a6:	460b      	mov	r3, r1
    a7a8:	3101      	adds	r1, #1
    a7aa:	42b7      	cmp	r7, r6
    a7ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a7b0:	54e5      	strb	r5, [r4, r3]
    a7b2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a7b6:	f000 809f 	beq.w	a8f8 <d_print_mod+0x270>
    a7ba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    a7be:	29ff      	cmp	r1, #255	; 0xff
    a7c0:	d1f1      	bne.n	a7a6 <d_print_mod+0x11e>
    a7c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a7c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a7ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a7ce:	4620      	mov	r0, r4
    a7d0:	4798      	blx	r3
    a7d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a7d6:	3301      	adds	r3, #1
    a7d8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a7dc:	2101      	movs	r1, #1
    a7de:	2300      	movs	r3, #0
    a7e0:	e7e3      	b.n	a7aa <d_print_mod+0x122>
    a7e2:	4eb1      	ldr	r6, [pc, #708]	; (aaa8 <d_print_mod+0x420>)
    a7e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a7e8:	1d77      	adds	r7, r6, #5
    a7ea:	2520      	movs	r5, #32
    a7ec:	f04f 0800 	mov.w	r8, #0
    a7f0:	e00a      	b.n	a808 <d_print_mod+0x180>
    a7f2:	460b      	mov	r3, r1
    a7f4:	3101      	adds	r1, #1
    a7f6:	42b7      	cmp	r7, r6
    a7f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a7fc:	54e5      	strb	r5, [r4, r3]
    a7fe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a802:	d079      	beq.n	a8f8 <d_print_mod+0x270>
    a804:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    a808:	29ff      	cmp	r1, #255	; 0xff
    a80a:	d1f2      	bne.n	a7f2 <d_print_mod+0x16a>
    a80c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a814:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a818:	4620      	mov	r0, r4
    a81a:	4798      	blx	r3
    a81c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a820:	3301      	adds	r3, #1
    a822:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a826:	2101      	movs	r1, #1
    a828:	2300      	movs	r3, #0
    a82a:	e7e4      	b.n	a7f6 <d_print_mod+0x16e>
    a82c:	4f9f      	ldr	r7, [pc, #636]	; (aaac <d_print_mod+0x424>)
    a82e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a832:	f107 0905 	add.w	r9, r7, #5
    a836:	2620      	movs	r6, #32
    a838:	f04f 0800 	mov.w	r8, #0
    a83c:	e00b      	b.n	a856 <d_print_mod+0x1ce>
    a83e:	460b      	mov	r3, r1
    a840:	3101      	adds	r1, #1
    a842:	45b9      	cmp	r9, r7
    a844:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a848:	54e6      	strb	r6, [r4, r3]
    a84a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    a84e:	f000 817f 	beq.w	ab50 <d_print_mod+0x4c8>
    a852:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    a856:	29ff      	cmp	r1, #255	; 0xff
    a858:	d1f1      	bne.n	a83e <d_print_mod+0x1b6>
    a85a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a85e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a862:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a866:	4620      	mov	r0, r4
    a868:	4798      	blx	r3
    a86a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a86e:	3301      	adds	r3, #1
    a870:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a874:	2101      	movs	r1, #1
    a876:	2300      	movs	r3, #0
    a878:	e7e3      	b.n	a842 <d_print_mod+0x1ba>
    a87a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    a87e:	2bff      	cmp	r3, #255	; 0xff
    a880:	f000 81d0 	beq.w	ac24 <d_print_mod+0x59c>
    a884:	2220      	movs	r2, #32
    a886:	1c59      	adds	r1, r3, #1
    a888:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a88c:	54c2      	strb	r2, [r0, r3]
    a88e:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    a892:	e027      	b.n	a8e4 <d_print_mod+0x25c>
    a894:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    a898:	2bff      	cmp	r3, #255	; 0xff
    a89a:	f000 81b4 	beq.w	ac06 <d_print_mod+0x57e>
    a89e:	1c59      	adds	r1, r3, #1
    a8a0:	2220      	movs	r2, #32
    a8a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a8a6:	54e2      	strb	r2, [r4, r3]
    a8a8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a8ac:	e028      	b.n	a900 <d_print_mod+0x278>
    a8ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a8b2:	29ff      	cmp	r1, #255	; 0xff
    a8b4:	f000 8197 	beq.w	abe6 <d_print_mod+0x55e>
    a8b8:	1c4a      	adds	r2, r1, #1
    a8ba:	2320      	movs	r3, #32
    a8bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a8c0:	5463      	strb	r3, [r4, r1]
    a8c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a8c6:	692a      	ldr	r2, [r5, #16]
    a8c8:	4620      	mov	r0, r4
    a8ca:	2111      	movs	r1, #17
    a8cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a8d0:	f7ff beac 	b.w	a62c <d_print_comp>
    a8d4:	68ea      	ldr	r2, [r5, #12]
    a8d6:	2111      	movs	r1, #17
    a8d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a8dc:	f7ff bea6 	b.w	a62c <d_print_comp>
    a8e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a8e4:	29ff      	cmp	r1, #255	; 0xff
    a8e6:	f000 81bc 	beq.w	ac62 <d_print_mod+0x5da>
    a8ea:	1c4a      	adds	r2, r1, #1
    a8ec:	2326      	movs	r3, #38	; 0x26
    a8ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a8f2:	5463      	strb	r3, [r4, r1]
    a8f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a8fc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a900:	4d6b      	ldr	r5, [pc, #428]	; (aab0 <d_print_mod+0x428>)
    a902:	2626      	movs	r6, #38	; 0x26
    a904:	1c6f      	adds	r7, r5, #1
    a906:	f04f 0800 	mov.w	r8, #0
    a90a:	e00a      	b.n	a922 <d_print_mod+0x29a>
    a90c:	460b      	mov	r3, r1
    a90e:	3101      	adds	r1, #1
    a910:	42bd      	cmp	r5, r7
    a912:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a916:	54e6      	strb	r6, [r4, r3]
    a918:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    a91c:	d0ec      	beq.n	a8f8 <d_print_mod+0x270>
    a91e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    a922:	29ff      	cmp	r1, #255	; 0xff
    a924:	d1f2      	bne.n	a90c <d_print_mod+0x284>
    a926:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a92a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a92e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a932:	4620      	mov	r0, r4
    a934:	4798      	blx	r3
    a936:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a93a:	3301      	adds	r3, #1
    a93c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a940:	2101      	movs	r1, #1
    a942:	2300      	movs	r3, #0
    a944:	e7e4      	b.n	a910 <d_print_mod+0x288>
    a946:	4e5b      	ldr	r6, [pc, #364]	; (aab4 <d_print_mod+0x42c>)
    a948:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a94c:	f106 0708 	add.w	r7, r6, #8
    a950:	2520      	movs	r5, #32
    a952:	f04f 0800 	mov.w	r8, #0
    a956:	e00a      	b.n	a96e <d_print_mod+0x2e6>
    a958:	460b      	mov	r3, r1
    a95a:	3101      	adds	r1, #1
    a95c:	42b7      	cmp	r7, r6
    a95e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a962:	54e5      	strb	r5, [r4, r3]
    a964:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a968:	d0c6      	beq.n	a8f8 <d_print_mod+0x270>
    a96a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    a96e:	29ff      	cmp	r1, #255	; 0xff
    a970:	d1f2      	bne.n	a958 <d_print_mod+0x2d0>
    a972:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a976:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a97a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a97e:	4620      	mov	r0, r4
    a980:	4798      	blx	r3
    a982:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a986:	3301      	adds	r3, #1
    a988:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a98c:	2101      	movs	r1, #1
    a98e:	2300      	movs	r3, #0
    a990:	e7e4      	b.n	a95c <d_print_mod+0x2d4>
    a992:	4e49      	ldr	r6, [pc, #292]	; (aab8 <d_print_mod+0x430>)
    a994:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a998:	f106 070a 	add.w	r7, r6, #10
    a99c:	2520      	movs	r5, #32
    a99e:	f04f 0800 	mov.w	r8, #0
    a9a2:	e00a      	b.n	a9ba <d_print_mod+0x332>
    a9a4:	460b      	mov	r3, r1
    a9a6:	3101      	adds	r1, #1
    a9a8:	42b7      	cmp	r7, r6
    a9aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a9ae:	54e5      	strb	r5, [r4, r3]
    a9b0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a9b4:	d0a0      	beq.n	a8f8 <d_print_mod+0x270>
    a9b6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    a9ba:	29ff      	cmp	r1, #255	; 0xff
    a9bc:	d1f2      	bne.n	a9a4 <d_print_mod+0x31c>
    a9be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a9c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a9c6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a9ca:	4620      	mov	r0, r4
    a9cc:	4798      	blx	r3
    a9ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    a9d2:	3301      	adds	r3, #1
    a9d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    a9d8:	2101      	movs	r1, #1
    a9da:	2300      	movs	r3, #0
    a9dc:	e7e4      	b.n	a9a8 <d_print_mod+0x320>
    a9de:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    a9e2:	2b28      	cmp	r3, #40	; 0x28
    a9e4:	f040 80d5 	bne.w	ab92 <d_print_mod+0x50a>
    a9e8:	4e34      	ldr	r6, [pc, #208]	; (aabc <d_print_mod+0x434>)
    a9ea:	68ea      	ldr	r2, [r5, #12]
    a9ec:	2111      	movs	r1, #17
    a9ee:	4620      	mov	r0, r4
    a9f0:	f7ff fe1c 	bl	a62c <d_print_comp>
    a9f4:	1cb7      	adds	r7, r6, #2
    a9f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a9fa:	253a      	movs	r5, #58	; 0x3a
    a9fc:	f04f 0800 	mov.w	r8, #0
    aa00:	e00b      	b.n	aa1a <d_print_mod+0x392>
    aa02:	460b      	mov	r3, r1
    aa04:	3101      	adds	r1, #1
    aa06:	42b7      	cmp	r7, r6
    aa08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    aa0c:	54e5      	strb	r5, [r4, r3]
    aa0e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    aa12:	f43f af71 	beq.w	a8f8 <d_print_mod+0x270>
    aa16:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    aa1a:	29ff      	cmp	r1, #255	; 0xff
    aa1c:	d1f1      	bne.n	aa02 <d_print_mod+0x37a>
    aa1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    aa22:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    aa26:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    aa2a:	4620      	mov	r0, r4
    aa2c:	4798      	blx	r3
    aa2e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    aa32:	3301      	adds	r3, #1
    aa34:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    aa38:	2101      	movs	r1, #1
    aa3a:	2300      	movs	r3, #0
    aa3c:	e7e3      	b.n	aa06 <d_print_mod+0x37e>
    aa3e:	4f20      	ldr	r7, [pc, #128]	; (aac0 <d_print_mod+0x438>)
    aa40:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    aa44:	f107 0909 	add.w	r9, r7, #9
    aa48:	2620      	movs	r6, #32
    aa4a:	f04f 0800 	mov.w	r8, #0
    aa4e:	e00b      	b.n	aa68 <d_print_mod+0x3e0>
    aa50:	460b      	mov	r3, r1
    aa52:	3101      	adds	r1, #1
    aa54:	454f      	cmp	r7, r9
    aa56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    aa5a:	54e6      	strb	r6, [r4, r3]
    aa5c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    aa60:	f000 8085 	beq.w	ab6e <d_print_mod+0x4e6>
    aa64:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    aa68:	29ff      	cmp	r1, #255	; 0xff
    aa6a:	d1f1      	bne.n	aa50 <d_print_mod+0x3c8>
    aa6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    aa70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    aa74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    aa78:	4620      	mov	r0, r4
    aa7a:	4798      	blx	r3
    aa7c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    aa80:	3301      	adds	r3, #1
    aa82:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    aa86:	2101      	movs	r1, #1
    aa88:	2300      	movs	r3, #0
    aa8a:	e7e3      	b.n	aa54 <d_print_mod+0x3cc>
    aa8c:	4e0d      	ldr	r6, [pc, #52]	; (aac4 <d_print_mod+0x43c>)
    aa8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    aa92:	f106 0710 	add.w	r7, r6, #16
    aa96:	2520      	movs	r5, #32
    aa98:	f04f 0800 	mov.w	r8, #0
    aa9c:	e020      	b.n	aae0 <d_print_mod+0x458>
    aa9e:	bf00      	nop
    aaa0:	20002320 	.word	0x20002320
    aaa4:	2000232c 	.word	0x2000232c
    aaa8:	20002338 	.word	0x20002338
    aaac:	20002360 	.word	0x20002360
    aab0:	20002368 	.word	0x20002368
    aab4:	2000236c 	.word	0x2000236c
    aab8:	20002378 	.word	0x20002378
    aabc:	20002384 	.word	0x20002384
    aac0:	20002388 	.word	0x20002388
    aac4:	20002340 	.word	0x20002340
    aac8:	460b      	mov	r3, r1
    aaca:	3101      	adds	r1, #1
    aacc:	42b7      	cmp	r7, r6
    aace:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    aad2:	54e5      	strb	r5, [r4, r3]
    aad4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    aad8:	f43f af0e 	beq.w	a8f8 <d_print_mod+0x270>
    aadc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    aae0:	29ff      	cmp	r1, #255	; 0xff
    aae2:	d1f1      	bne.n	aac8 <d_print_mod+0x440>
    aae4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    aae8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    aaec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    aaf0:	4620      	mov	r0, r4
    aaf2:	4798      	blx	r3
    aaf4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    aaf8:	3301      	adds	r3, #1
    aafa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    aafe:	2101      	movs	r1, #1
    ab00:	2300      	movs	r3, #0
    ab02:	e7e3      	b.n	aacc <d_print_mod+0x444>
    ab04:	4f6d      	ldr	r7, [pc, #436]	; (acbc <d_print_mod+0x634>)
    ab06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ab0a:	f107 0908 	add.w	r9, r7, #8
    ab0e:	2620      	movs	r6, #32
    ab10:	f04f 0800 	mov.w	r8, #0
    ab14:	e00a      	b.n	ab2c <d_print_mod+0x4a4>
    ab16:	460b      	mov	r3, r1
    ab18:	3101      	adds	r1, #1
    ab1a:	45b9      	cmp	r9, r7
    ab1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ab20:	54e6      	strb	r6, [r4, r3]
    ab22:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ab26:	d013      	beq.n	ab50 <d_print_mod+0x4c8>
    ab28:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    ab2c:	29ff      	cmp	r1, #255	; 0xff
    ab2e:	d1f2      	bne.n	ab16 <d_print_mod+0x48e>
    ab30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ab34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ab38:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ab3c:	4620      	mov	r0, r4
    ab3e:	4798      	blx	r3
    ab40:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ab44:	3301      	adds	r3, #1
    ab46:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ab4a:	2101      	movs	r1, #1
    ab4c:	2300      	movs	r3, #0
    ab4e:	e7e4      	b.n	ab1a <d_print_mod+0x492>
    ab50:	692a      	ldr	r2, [r5, #16]
    ab52:	2a00      	cmp	r2, #0
    ab54:	f43f aed0 	beq.w	a8f8 <d_print_mod+0x270>
    ab58:	29ff      	cmp	r1, #255	; 0xff
    ab5a:	d032      	beq.n	abc2 <d_print_mod+0x53a>
    ab5c:	1c48      	adds	r0, r1, #1
    ab5e:	2328      	movs	r3, #40	; 0x28
    ab60:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    ab64:	5463      	strb	r3, [r4, r1]
    ab66:	2111      	movs	r1, #17
    ab68:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ab6c:	e001      	b.n	ab72 <d_print_mod+0x4ea>
    ab6e:	68ea      	ldr	r2, [r5, #12]
    ab70:	2111      	movs	r1, #17
    ab72:	4620      	mov	r0, r4
    ab74:	f7ff fd5a 	bl	a62c <d_print_comp>
    ab78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ab7c:	29ff      	cmp	r1, #255	; 0xff
    ab7e:	d061      	beq.n	ac44 <d_print_mod+0x5bc>
    ab80:	1c4a      	adds	r2, r1, #1
    ab82:	2329      	movs	r3, #41	; 0x29
    ab84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ab88:	5463      	strb	r3, [r4, r1]
    ab8a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ab92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ab96:	29ff      	cmp	r1, #255	; 0xff
    ab98:	d072      	beq.n	ac80 <d_print_mod+0x5f8>
    ab9a:	1c4a      	adds	r2, r1, #1
    ab9c:	2320      	movs	r3, #32
    ab9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    aba2:	5463      	strb	r3, [r4, r1]
    aba4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    aba8:	e71e      	b.n	a9e8 <d_print_mod+0x360>
    abaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    abae:	29ff      	cmp	r1, #255	; 0xff
    abb0:	d076      	beq.n	aca0 <d_print_mod+0x618>
    abb2:	1c4a      	adds	r2, r1, #1
    abb4:	232a      	movs	r3, #42	; 0x2a
    abb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    abba:	5463      	strb	r3, [r4, r1]
    abbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    abc0:	e69a      	b.n	a8f8 <d_print_mod+0x270>
    abc2:	2600      	movs	r6, #0
    abc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    abc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    abcc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    abd0:	4620      	mov	r0, r4
    abd2:	4798      	blx	r3
    abd4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    abd8:	692a      	ldr	r2, [r5, #16]
    abda:	3301      	adds	r3, #1
    abdc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    abe0:	2001      	movs	r0, #1
    abe2:	4631      	mov	r1, r6
    abe4:	e7bb      	b.n	ab5e <d_print_mod+0x4d6>
    abe6:	2600      	movs	r6, #0
    abe8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    abec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    abf0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    abf4:	4798      	blx	r3
    abf6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    abfa:	2201      	movs	r2, #1
    abfc:	4413      	add	r3, r2
    abfe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac02:	4631      	mov	r1, r6
    ac04:	e659      	b.n	a8ba <d_print_mod+0x232>
    ac06:	2500      	movs	r5, #0
    ac08:	4619      	mov	r1, r3
    ac0a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    ac0e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    ac12:	4798      	blx	r3
    ac14:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ac18:	2101      	movs	r1, #1
    ac1a:	440b      	add	r3, r1
    ac1c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac20:	462b      	mov	r3, r5
    ac22:	e63d      	b.n	a8a0 <d_print_mod+0x218>
    ac24:	2100      	movs	r1, #0
    ac26:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
    ac2a:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    ac2e:	4619      	mov	r1, r3
    ac30:	47a8      	blx	r5
    ac32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ac36:	2220      	movs	r2, #32
    ac38:	3301      	adds	r3, #1
    ac3a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac3e:	7022      	strb	r2, [r4, #0]
    ac40:	2101      	movs	r1, #1
    ac42:	e652      	b.n	a8ea <d_print_mod+0x262>
    ac44:	2500      	movs	r5, #0
    ac46:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    ac4a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    ac4e:	4620      	mov	r0, r4
    ac50:	4798      	blx	r3
    ac52:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ac56:	2201      	movs	r2, #1
    ac58:	4413      	add	r3, r2
    ac5a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac5e:	4629      	mov	r1, r5
    ac60:	e78f      	b.n	ab82 <d_print_mod+0x4fa>
    ac62:	2500      	movs	r5, #0
    ac64:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    ac68:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    ac6c:	4620      	mov	r0, r4
    ac6e:	4798      	blx	r3
    ac70:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ac74:	2201      	movs	r2, #1
    ac76:	4413      	add	r3, r2
    ac78:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac7c:	4629      	mov	r1, r5
    ac7e:	e635      	b.n	a8ec <d_print_mod+0x264>
    ac80:	2600      	movs	r6, #0
    ac82:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    ac86:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    ac8a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    ac8e:	4798      	blx	r3
    ac90:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ac94:	2201      	movs	r2, #1
    ac96:	4413      	add	r3, r2
    ac98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ac9c:	4631      	mov	r1, r6
    ac9e:	e77d      	b.n	ab9c <d_print_mod+0x514>
    aca0:	2500      	movs	r5, #0
    aca2:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    aca6:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    acaa:	4798      	blx	r3
    acac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    acb0:	2201      	movs	r2, #1
    acb2:	4413      	add	r3, r2
    acb4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    acb8:	4629      	mov	r1, r5
    acba:	e77b      	b.n	abb4 <d_print_mod+0x52c>
    acbc:	20002354 	.word	0x20002354

0000acc0 <d_print_function_type>:
    acc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    acc4:	4604      	mov	r4, r0
    acc6:	4616      	mov	r6, r2
    acc8:	461d      	mov	r5, r3
    acca:	b19b      	cbz	r3, acf4 <d_print_function_type+0x34>
    accc:	4f71      	ldr	r7, [pc, #452]	; (ae94 <d_print_function_type+0x1d4>)
    acce:	2001      	movs	r0, #1
    acd0:	689a      	ldr	r2, [r3, #8]
    acd2:	b97a      	cbnz	r2, acf4 <d_print_function_type+0x34>
    acd4:	685a      	ldr	r2, [r3, #4]
    acd6:	7811      	ldrb	r1, [r2, #0]
    acd8:	3919      	subs	r1, #25
    acda:	b2c9      	uxtb	r1, r1
    acdc:	2912      	cmp	r1, #18
    acde:	fa00 f201 	lsl.w	r2, r0, r1
    ace2:	d804      	bhi.n	acee <d_print_function_type+0x2e>
    ace4:	423a      	tst	r2, r7
    ace6:	d135      	bne.n	ad54 <d_print_function_type+0x94>
    ace8:	f412 6f60 	tst.w	r2, #3584	; 0xe00
    acec:	d174      	bne.n	add8 <d_print_function_type+0x118>
    acee:	681b      	ldr	r3, [r3, #0]
    acf0:	2b00      	cmp	r3, #0
    acf2:	d1ed      	bne.n	acd0 <d_print_function_type+0x10>
    acf4:	2300      	movs	r3, #0
    acf6:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
    acfa:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    acfe:	462a      	mov	r2, r5
    ad00:	2111      	movs	r1, #17
    ad02:	4620      	mov	r0, r4
    ad04:	f000 f8c8 	bl	ae98 <d_print_mod_list>
    ad08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ad0c:	2bff      	cmp	r3, #255	; 0xff
    ad0e:	d04b      	beq.n	ada8 <d_print_function_type+0xe8>
    ad10:	2228      	movs	r2, #40	; 0x28
    ad12:	1c59      	adds	r1, r3, #1
    ad14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ad18:	54e2      	strb	r2, [r4, r3]
    ad1a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    ad1e:	6932      	ldr	r2, [r6, #16]
    ad20:	b12a      	cbz	r2, ad2e <d_print_function_type+0x6e>
    ad22:	2111      	movs	r1, #17
    ad24:	4620      	mov	r0, r4
    ad26:	f7ff fc81 	bl	a62c <d_print_comp>
    ad2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ad2e:	29ff      	cmp	r1, #255	; 0xff
    ad30:	d076      	beq.n	ae20 <d_print_function_type+0x160>
    ad32:	1c4b      	adds	r3, r1, #1
    ad34:	2229      	movs	r2, #41	; 0x29
    ad36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ad3a:	4620      	mov	r0, r4
    ad3c:	5462      	strb	r2, [r4, r1]
    ad3e:	2301      	movs	r3, #1
    ad40:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    ad44:	2111      	movs	r1, #17
    ad46:	462a      	mov	r2, r5
    ad48:	f000 f8a6 	bl	ae98 <d_print_mod_list>
    ad4c:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    ad50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad54:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    ad58:	2b20      	cmp	r3, #32
    ad5a:	d145      	bne.n	ade8 <d_print_function_type+0x128>
    ad5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ad60:	29ff      	cmp	r1, #255	; 0xff
    ad62:	d04e      	beq.n	ae02 <d_print_function_type+0x142>
    ad64:	1c4b      	adds	r3, r1, #1
    ad66:	f04f 0828 	mov.w	r8, #40	; 0x28
    ad6a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ad6e:	f804 8001 	strb.w	r8, [r4, r1]
    ad72:	f04f 0900 	mov.w	r9, #0
    ad76:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
    ad7a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    ad7e:	2111      	movs	r1, #17
    ad80:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    ad84:	464b      	mov	r3, r9
    ad86:	462a      	mov	r2, r5
    ad88:	4620      	mov	r0, r4
    ad8a:	f000 f885 	bl	ae98 <d_print_mod_list>
    ad8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ad92:	29ff      	cmp	r1, #255	; 0xff
    ad94:	d053      	beq.n	ae3e <d_print_function_type+0x17e>
    ad96:	1c4b      	adds	r3, r1, #1
    ad98:	2229      	movs	r2, #41	; 0x29
    ad9a:	2bff      	cmp	r3, #255	; 0xff
    ad9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ada0:	5462      	strb	r2, [r4, r1]
    ada2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    ada6:	d1b3      	bne.n	ad10 <d_print_function_type+0x50>
    ada8:	4619      	mov	r1, r3
    adaa:	2300      	movs	r3, #0
    adac:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
    adb0:	4620      	mov	r0, r4
    adb2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    adb6:	4798      	blx	r3
    adb8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    adbc:	3301      	adds	r3, #1
    adbe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    adc2:	2328      	movs	r3, #40	; 0x28
    adc4:	7023      	strb	r3, [r4, #0]
    adc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    adca:	6932      	ldr	r2, [r6, #16]
    adcc:	2101      	movs	r1, #1
    adce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    add2:	2a00      	cmp	r2, #0
    add4:	d1a5      	bne.n	ad22 <d_print_function_type+0x62>
    add6:	e7ac      	b.n	ad32 <d_print_function_type+0x72>
    add8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    addc:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    ade0:	2a28      	cmp	r2, #40	; 0x28
    ade2:	d0bb      	beq.n	ad5c <d_print_function_type+0x9c>
    ade4:	2b20      	cmp	r3, #32
    ade6:	d0b9      	beq.n	ad5c <d_print_function_type+0x9c>
    ade8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    adec:	2bff      	cmp	r3, #255	; 0xff
    adee:	d03e      	beq.n	ae6e <d_print_function_type+0x1ae>
    adf0:	1c59      	adds	r1, r3, #1
    adf2:	2220      	movs	r2, #32
    adf4:	29ff      	cmp	r1, #255	; 0xff
    adf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    adfa:	54e2      	strb	r2, [r4, r3]
    adfc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    ae00:	d1b0      	bne.n	ad64 <d_print_function_type+0xa4>
    ae02:	2700      	movs	r7, #0
    ae04:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    ae08:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    ae0c:	4620      	mov	r0, r4
    ae0e:	4798      	blx	r3
    ae10:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ae14:	3301      	adds	r3, #1
    ae16:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ae1a:	4639      	mov	r1, r7
    ae1c:	2301      	movs	r3, #1
    ae1e:	e7a2      	b.n	ad66 <d_print_function_type+0xa6>
    ae20:	2600      	movs	r6, #0
    ae22:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    ae26:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    ae2a:	4620      	mov	r0, r4
    ae2c:	4798      	blx	r3
    ae2e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ae32:	3301      	adds	r3, #1
    ae34:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ae38:	4631      	mov	r1, r6
    ae3a:	2301      	movs	r3, #1
    ae3c:	e77a      	b.n	ad34 <d_print_function_type+0x74>
    ae3e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    ae42:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ae46:	4620      	mov	r0, r4
    ae48:	4798      	blx	r3
    ae4a:	f642 0329 	movw	r3, #10281	; 0x2829
    ae4e:	8023      	strh	r3, [r4, #0]
    ae50:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    ae54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ae58:	6932      	ldr	r2, [r6, #16]
    ae5a:	3301      	adds	r3, #1
    ae5c:	2102      	movs	r1, #2
    ae5e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ae62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ae66:	2a00      	cmp	r2, #0
    ae68:	f47f af5b 	bne.w	ad22 <d_print_function_type+0x62>
    ae6c:	e761      	b.n	ad32 <d_print_function_type+0x72>
    ae6e:	2200      	movs	r2, #0
    ae70:	4619      	mov	r1, r3
    ae72:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    ae76:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
    ae7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ae7e:	4620      	mov	r0, r4
    ae80:	47b8      	blx	r7
    ae82:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ae86:	2220      	movs	r2, #32
    ae88:	3301      	adds	r3, #1
    ae8a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ae8e:	7022      	strb	r2, [r4, #0]
    ae90:	2101      	movs	r1, #1
    ae92:	e767      	b.n	ad64 <d_print_function_type+0xa4>
    ae94:	00043107 	.word	0x00043107

0000ae98 <d_print_mod_list>:
    ae98:	2a00      	cmp	r2, #0
    ae9a:	f000 80c2 	beq.w	b022 <d_print_mod_list+0x18a>
    ae9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aea2:	4605      	mov	r5, r0
    aea4:	b088      	sub	sp, #32
    aea6:	461e      	mov	r6, r3
    aea8:	4614      	mov	r4, r2
    aeaa:	2701      	movs	r7, #1
    aeac:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    aeb0:	b9ca      	cbnz	r2, aee6 <d_print_mod_list+0x4e>
    aeb2:	68a2      	ldr	r2, [r4, #8]
    aeb4:	bb0a      	cbnz	r2, aefa <d_print_mod_list+0x62>
    aeb6:	6862      	ldr	r2, [r4, #4]
    aeb8:	7811      	ldrb	r1, [r2, #0]
    aeba:	b1be      	cbz	r6, aeec <d_print_mod_list+0x54>
    aebc:	68e3      	ldr	r3, [r4, #12]
    aebe:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
    aec2:	60a7      	str	r7, [r4, #8]
    aec4:	2929      	cmp	r1, #41	; 0x29
    aec6:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    aeca:	d024      	beq.n	af16 <d_print_mod_list+0x7e>
    aecc:	292a      	cmp	r1, #42	; 0x2a
    aece:	d02c      	beq.n	af2a <d_print_mod_list+0x92>
    aed0:	2902      	cmp	r1, #2
    aed2:	d034      	beq.n	af3e <d_print_mod_list+0xa6>
    aed4:	2111      	movs	r1, #17
    aed6:	4628      	mov	r0, r5
    aed8:	f7ff fbd6 	bl	a688 <d_print_mod>
    aedc:	6824      	ldr	r4, [r4, #0]
    aede:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    aee2:	2c00      	cmp	r4, #0
    aee4:	d1e2      	bne.n	aeac <d_print_mod_list+0x14>
    aee6:	b008      	add	sp, #32
    aee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aeec:	294e      	cmp	r1, #78	; 0x4e
    aeee:	d004      	beq.n	aefa <d_print_mod_list+0x62>
    aef0:	d807      	bhi.n	af02 <d_print_mod_list+0x6a>
    aef2:	f1a1 031c 	sub.w	r3, r1, #28
    aef6:	2b04      	cmp	r3, #4
    aef8:	d8e0      	bhi.n	aebc <d_print_mod_list+0x24>
    aefa:	6824      	ldr	r4, [r4, #0]
    aefc:	2c00      	cmp	r4, #0
    aefe:	d1d5      	bne.n	aeac <d_print_mod_list+0x14>
    af00:	e7f1      	b.n	aee6 <d_print_mod_list+0x4e>
    af02:	3950      	subs	r1, #80	; 0x50
    af04:	2901      	cmp	r1, #1
    af06:	d9f8      	bls.n	aefa <d_print_mod_list+0x62>
    af08:	68e3      	ldr	r3, [r4, #12]
    af0a:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
    af0e:	60a7      	str	r7, [r4, #8]
    af10:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    af14:	e7de      	b.n	aed4 <d_print_mod_list+0x3c>
    af16:	6823      	ldr	r3, [r4, #0]
    af18:	2111      	movs	r1, #17
    af1a:	4628      	mov	r0, r5
    af1c:	f7ff fed0 	bl	acc0 <d_print_function_type>
    af20:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    af24:	b008      	add	sp, #32
    af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af2a:	6823      	ldr	r3, [r4, #0]
    af2c:	2111      	movs	r1, #17
    af2e:	4628      	mov	r0, r5
    af30:	f000 f8d6 	bl	b0e0 <d_print_array_type>
    af34:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    af38:	b008      	add	sp, #32
    af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af3e:	4e64      	ldr	r6, [pc, #400]	; (b0d0 <d_print_mod_list+0x238>)
    af40:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
    af44:	68d2      	ldr	r2, [r2, #12]
    af46:	f04f 0900 	mov.w	r9, #0
    af4a:	2111      	movs	r1, #17
    af4c:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
    af50:	4628      	mov	r0, r5
    af52:	f7ff fb6b 	bl	a62c <d_print_comp>
    af56:	f106 0a01 	add.w	sl, r6, #1
    af5a:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
    af5e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    af62:	273a      	movs	r7, #58	; 0x3a
    af64:	e00a      	b.n	af7c <d_print_mod_list+0xe4>
    af66:	460b      	mov	r3, r1
    af68:	3101      	adds	r1, #1
    af6a:	4556      	cmp	r6, sl
    af6c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    af70:	54ef      	strb	r7, [r5, r3]
    af72:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
    af76:	d013      	beq.n	afa0 <d_print_mod_list+0x108>
    af78:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    af7c:	29ff      	cmp	r1, #255	; 0xff
    af7e:	d1f2      	bne.n	af66 <d_print_mod_list+0xce>
    af80:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    af84:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    af88:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
    af8c:	4628      	mov	r0, r5
    af8e:	4798      	blx	r3
    af90:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    af94:	3301      	adds	r3, #1
    af96:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    af9a:	2101      	movs	r1, #1
    af9c:	2300      	movs	r3, #0
    af9e:	e7e4      	b.n	af6a <d_print_mod_list+0xd2>
    afa0:	6863      	ldr	r3, [r4, #4]
    afa2:	691c      	ldr	r4, [r3, #16]
    afa4:	7823      	ldrb	r3, [r4, #0]
    afa6:	2b48      	cmp	r3, #72	; 0x48
    afa8:	d017      	beq.n	afda <d_print_mod_list+0x142>
    afaa:	2b4e      	cmp	r3, #78	; 0x4e
    afac:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
    afb0:	f1a3 011c 	sub.w	r1, r3, #28
    afb4:	d00e      	beq.n	afd4 <d_print_mod_list+0x13c>
    afb6:	d80b      	bhi.n	afd0 <d_print_mod_list+0x138>
    afb8:	2904      	cmp	r1, #4
    afba:	d90b      	bls.n	afd4 <d_print_mod_list+0x13c>
    afbc:	4622      	mov	r2, r4
    afbe:	2111      	movs	r1, #17
    afc0:	4628      	mov	r0, r5
    afc2:	f7ff fb33 	bl	a62c <d_print_comp>
    afc6:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    afca:	b008      	add	sp, #32
    afcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    afd0:	2a01      	cmp	r2, #1
    afd2:	d8f3      	bhi.n	afbc <d_print_mod_list+0x124>
    afd4:	68e4      	ldr	r4, [r4, #12]
    afd6:	7823      	ldrb	r3, [r4, #0]
    afd8:	e7e7      	b.n	afaa <d_print_mod_list+0x112>
    afda:	4f3e      	ldr	r7, [pc, #248]	; (b0d4 <d_print_mod_list+0x23c>)
    afdc:	267b      	movs	r6, #123	; 0x7b
    afde:	f107 0a0c 	add.w	sl, r7, #12
    afe2:	f04f 0900 	mov.w	r9, #0
    afe6:	e00a      	b.n	affe <d_print_mod_list+0x166>
    afe8:	460b      	mov	r3, r1
    afea:	3101      	adds	r1, #1
    afec:	4557      	cmp	r7, sl
    afee:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    aff2:	54ee      	strb	r6, [r5, r3]
    aff4:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
    aff8:	d014      	beq.n	b024 <d_print_mod_list+0x18c>
    affa:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    affe:	29ff      	cmp	r1, #255	; 0xff
    b000:	d1f2      	bne.n	afe8 <d_print_mod_list+0x150>
    b002:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b006:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b00a:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
    b00e:	4628      	mov	r0, r5
    b010:	4798      	blx	r3
    b012:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    b016:	3301      	adds	r3, #1
    b018:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    b01c:	2101      	movs	r1, #1
    b01e:	2300      	movs	r3, #0
    b020:	e7e4      	b.n	afec <d_print_mod_list+0x154>
    b022:	4770      	bx	lr
    b024:	6922      	ldr	r2, [r4, #16]
    b026:	492c      	ldr	r1, [pc, #176]	; (b0d8 <d_print_mod_list+0x240>)
    b028:	3201      	adds	r2, #1
    b02a:	a801      	add	r0, sp, #4
    b02c:	f002 fb92 	bl	d754 <sprintf>
    b030:	a801      	add	r0, sp, #4
    b032:	f003 fb05 	bl	e640 <strlen>
    b036:	b320      	cbz	r0, b082 <d_print_mod_list+0x1ea>
    b038:	ae01      	add	r6, sp, #4
    b03a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b03e:	eb06 0a00 	add.w	sl, r6, r0
    b042:	f04f 0900 	mov.w	r9, #0
    b046:	e008      	b.n	b05a <d_print_mod_list+0x1c2>
    b048:	460b      	mov	r3, r1
    b04a:	3101      	adds	r1, #1
    b04c:	4556      	cmp	r6, sl
    b04e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b052:	54ef      	strb	r7, [r5, r3]
    b054:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
    b058:	d015      	beq.n	b086 <d_print_mod_list+0x1ee>
    b05a:	29ff      	cmp	r1, #255	; 0xff
    b05c:	f816 7b01 	ldrb.w	r7, [r6], #1
    b060:	d1f2      	bne.n	b048 <d_print_mod_list+0x1b0>
    b062:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b066:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b06a:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
    b06e:	4628      	mov	r0, r5
    b070:	4798      	blx	r3
    b072:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    b076:	3301      	adds	r3, #1
    b078:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    b07c:	2101      	movs	r1, #1
    b07e:	2300      	movs	r3, #0
    b080:	e7e4      	b.n	b04c <d_print_mod_list+0x1b4>
    b082:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b086:	4f15      	ldr	r7, [pc, #84]	; (b0dc <d_print_mod_list+0x244>)
    b088:	267d      	movs	r6, #125	; 0x7d
    b08a:	f107 0a02 	add.w	sl, r7, #2
    b08e:	f04f 0900 	mov.w	r9, #0
    b092:	e00a      	b.n	b0aa <d_print_mod_list+0x212>
    b094:	460b      	mov	r3, r1
    b096:	3101      	adds	r1, #1
    b098:	4557      	cmp	r7, sl
    b09a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b09e:	54ee      	strb	r6, [r5, r3]
    b0a0:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
    b0a4:	d096      	beq.n	afd4 <d_print_mod_list+0x13c>
    b0a6:	f817 6f01 	ldrb.w	r6, [r7, #1]!
    b0aa:	29ff      	cmp	r1, #255	; 0xff
    b0ac:	d1f2      	bne.n	b094 <d_print_mod_list+0x1fc>
    b0ae:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b0b2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b0b6:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
    b0ba:	4628      	mov	r0, r5
    b0bc:	4798      	blx	r3
    b0be:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    b0c2:	3301      	adds	r3, #1
    b0c4:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    b0c8:	2101      	movs	r1, #1
    b0ca:	2300      	movs	r3, #0
    b0cc:	e7e4      	b.n	b098 <d_print_mod_list+0x200>
    b0ce:	bf00      	nop
    b0d0:	200020a0 	.word	0x200020a0
    b0d4:	200020a4 	.word	0x200020a4
    b0d8:	20002054 	.word	0x20002054
    b0dc:	200020b4 	.word	0x200020b4

0000b0e0 <d_print_array_type>:
    b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0e4:	4604      	mov	r4, r0
    b0e6:	4617      	mov	r7, r2
    b0e8:	b153      	cbz	r3, b100 <d_print_array_type+0x20>
    b0ea:	461e      	mov	r6, r3
    b0ec:	689d      	ldr	r5, [r3, #8]
    b0ee:	b37d      	cbz	r5, b150 <d_print_array_type+0x70>
    b0f0:	681b      	ldr	r3, [r3, #0]
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	d1fa      	bne.n	b0ec <d_print_array_type+0xc>
    b0f6:	4632      	mov	r2, r6
    b0f8:	2111      	movs	r1, #17
    b0fa:	4620      	mov	r0, r4
    b0fc:	f7ff fecc 	bl	ae98 <d_print_mod_list>
    b100:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b104:	2bff      	cmp	r3, #255	; 0xff
    b106:	f000 809d 	beq.w	b244 <d_print_array_type+0x164>
    b10a:	1c59      	adds	r1, r3, #1
    b10c:	2220      	movs	r2, #32
    b10e:	29ff      	cmp	r1, #255	; 0xff
    b110:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b114:	54e2      	strb	r2, [r4, r3]
    b116:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b11a:	d027      	beq.n	b16c <d_print_array_type+0x8c>
    b11c:	225b      	movs	r2, #91	; 0x5b
    b11e:	1c4b      	adds	r3, r1, #1
    b120:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b124:	5462      	strb	r2, [r4, r1]
    b126:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b12a:	68fa      	ldr	r2, [r7, #12]
    b12c:	b12a      	cbz	r2, b13a <d_print_array_type+0x5a>
    b12e:	2111      	movs	r1, #17
    b130:	4620      	mov	r0, r4
    b132:	f7ff fa7b 	bl	a62c <d_print_comp>
    b136:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b13a:	2bff      	cmp	r3, #255	; 0xff
    b13c:	d02f      	beq.n	b19e <d_print_array_type+0xbe>
    b13e:	1c59      	adds	r1, r3, #1
    b140:	225d      	movs	r2, #93	; 0x5d
    b142:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b146:	54e2      	strb	r2, [r4, r3]
    b148:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b150:	685b      	ldr	r3, [r3, #4]
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	2b2a      	cmp	r3, #42	; 0x2a
    b156:	d132      	bne.n	b1be <d_print_array_type+0xde>
    b158:	2111      	movs	r1, #17
    b15a:	462b      	mov	r3, r5
    b15c:	4632      	mov	r2, r6
    b15e:	4620      	mov	r0, r4
    b160:	f7ff fe9a 	bl	ae98 <d_print_mod_list>
    b164:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b168:	29ff      	cmp	r1, #255	; 0xff
    b16a:	d1d7      	bne.n	b11c <d_print_array_type+0x3c>
    b16c:	2200      	movs	r2, #0
    b16e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b172:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    b176:	4620      	mov	r0, r4
    b178:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b17c:	4798      	blx	r3
    b17e:	225b      	movs	r2, #91	; 0x5b
    b180:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b184:	7022      	strb	r2, [r4, #0]
    b186:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b18a:	68fa      	ldr	r2, [r7, #12]
    b18c:	1c59      	adds	r1, r3, #1
    b18e:	2301      	movs	r3, #1
    b190:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
    b194:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b198:	2a00      	cmp	r2, #0
    b19a:	d1c8      	bne.n	b12e <d_print_array_type+0x4e>
    b19c:	e7cf      	b.n	b13e <d_print_array_type+0x5e>
    b19e:	2500      	movs	r5, #0
    b1a0:	4619      	mov	r1, r3
    b1a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b1a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    b1aa:	4620      	mov	r0, r4
    b1ac:	4798      	blx	r3
    b1ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b1b2:	2101      	movs	r1, #1
    b1b4:	440b      	add	r3, r1
    b1b6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b1ba:	462b      	mov	r3, r5
    b1bc:	e7c0      	b.n	b140 <d_print_array_type+0x60>
    b1be:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b2a4 <d_print_array_type+0x1c4>
    b1c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b1c6:	f04f 0920 	mov.w	r9, #32
    b1ca:	f108 0a01 	add.w	sl, r8, #1
    b1ce:	e00c      	b.n	b1ea <d_print_array_type+0x10a>
    b1d0:	460b      	mov	r3, r1
    b1d2:	45d0      	cmp	r8, sl
    b1d4:	f101 0101 	add.w	r1, r1, #1
    b1d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b1dc:	f804 9003 	strb.w	r9, [r4, r3]
    b1e0:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
    b1e4:	d01a      	beq.n	b21c <d_print_array_type+0x13c>
    b1e6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    b1ea:	29ff      	cmp	r1, #255	; 0xff
    b1ec:	d1f0      	bne.n	b1d0 <d_print_array_type+0xf0>
    b1ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b1f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b1f6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b1fa:	4620      	mov	r0, r4
    b1fc:	4798      	blx	r3
    b1fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b202:	3301      	adds	r3, #1
    b204:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b208:	2300      	movs	r3, #0
    b20a:	2101      	movs	r1, #1
    b20c:	45d0      	cmp	r8, sl
    b20e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b212:	f804 9003 	strb.w	r9, [r4, r3]
    b216:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
    b21a:	d1e4      	bne.n	b1e6 <d_print_array_type+0x106>
    b21c:	2111      	movs	r1, #17
    b21e:	2300      	movs	r3, #0
    b220:	4632      	mov	r2, r6
    b222:	4620      	mov	r0, r4
    b224:	f7ff fe38 	bl	ae98 <d_print_mod_list>
    b228:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b22c:	29ff      	cmp	r1, #255	; 0xff
    b22e:	d026      	beq.n	b27e <d_print_array_type+0x19e>
    b230:	1c4b      	adds	r3, r1, #1
    b232:	2229      	movs	r2, #41	; 0x29
    b234:	2bff      	cmp	r3, #255	; 0xff
    b236:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b23a:	5462      	strb	r2, [r4, r1]
    b23c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b240:	f47f af63 	bne.w	b10a <d_print_array_type+0x2a>
    b244:	2200      	movs	r2, #0
    b246:	4619      	mov	r1, r3
    b248:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    b24c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    b250:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b254:	4620      	mov	r0, r4
    b256:	47a8      	blx	r5
    b258:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b25c:	225b      	movs	r2, #91	; 0x5b
    b25e:	f645 3120 	movw	r1, #23328	; 0x5b20
    b262:	8021      	strh	r1, [r4, #0]
    b264:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b268:	68fa      	ldr	r2, [r7, #12]
    b26a:	3301      	adds	r3, #1
    b26c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b270:	2302      	movs	r3, #2
    b272:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b276:	2a00      	cmp	r2, #0
    b278:	f47f af59 	bne.w	b12e <d_print_array_type+0x4e>
    b27c:	e75f      	b.n	b13e <d_print_array_type+0x5e>
    b27e:	2200      	movs	r2, #0
    b280:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b284:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    b288:	4620      	mov	r0, r4
    b28a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b28e:	4798      	blx	r3
    b290:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b294:	2229      	movs	r2, #41	; 0x29
    b296:	3301      	adds	r3, #1
    b298:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b29c:	7022      	strb	r2, [r4, #0]
    b29e:	2301      	movs	r3, #1
    b2a0:	e733      	b.n	b10a <d_print_array_type+0x2a>
    b2a2:	bf00      	nop
    b2a4:	200022a0 	.word	0x200022a0

0000b2a8 <d_print_expr_op>:
    b2a8:	7811      	ldrb	r1, [r2, #0]
    b2aa:	2932      	cmp	r1, #50	; 0x32
    b2ac:	d002      	beq.n	b2b4 <d_print_expr_op+0xc>
    b2ae:	2111      	movs	r1, #17
    b2b0:	f7ff b9bc 	b.w	a62c <d_print_comp>
    b2b4:	68d3      	ldr	r3, [r2, #12]
    b2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2ba:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
    b2be:	b367      	cbz	r7, b31a <d_print_expr_op+0x72>
    b2c0:	442f      	add	r7, r5
    b2c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b2c6:	4604      	mov	r4, r0
    b2c8:	3d01      	subs	r5, #1
    b2ca:	3f01      	subs	r7, #1
    b2cc:	f04f 0800 	mov.w	r8, #0
    b2d0:	e009      	b.n	b2e6 <d_print_expr_op+0x3e>
    b2d2:	460b      	mov	r3, r1
    b2d4:	42bd      	cmp	r5, r7
    b2d6:	f101 0101 	add.w	r1, r1, #1
    b2da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b2de:	54e6      	strb	r6, [r4, r3]
    b2e0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b2e4:	d019      	beq.n	b31a <d_print_expr_op+0x72>
    b2e6:	29ff      	cmp	r1, #255	; 0xff
    b2e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    b2ec:	d1f1      	bne.n	b2d2 <d_print_expr_op+0x2a>
    b2ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b2f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b2f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    b2fa:	4620      	mov	r0, r4
    b2fc:	4798      	blx	r3
    b2fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b302:	3301      	adds	r3, #1
    b304:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b308:	2300      	movs	r3, #0
    b30a:	2101      	movs	r1, #1
    b30c:	42bd      	cmp	r5, r7
    b30e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b312:	54e6      	strb	r6, [r4, r3]
    b314:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b318:	d1e5      	bne.n	b2e6 <d_print_expr_op+0x3e>
    b31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b31e:	bf00      	nop

0000b320 <d_demangle_callback.constprop.0>:
    b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b324:	ed2d 8b02 	vpush	{d8}
    b328:	b0e7      	sub	sp, #412	; 0x19c
    b32a:	7803      	ldrb	r3, [r0, #0]
    b32c:	af00      	add	r7, sp, #0
    b32e:	2b5f      	cmp	r3, #95	; 0x5f
    b330:	e9c7 2100 	strd	r2, r1, [r7]
    b334:	4605      	mov	r5, r0
    b336:	f000 8144 	beq.w	b5c2 <d_demangle_callback.constprop.0+0x2a2>
    b33a:	49a9      	ldr	r1, [pc, #676]	; (b5e0 <d_demangle_callback.constprop.0+0x2c0>)
    b33c:	2208      	movs	r2, #8
    b33e:	4628      	mov	r0, r5
    b340:	f002 fed2 	bl	e0e8 <strncmp>
    b344:	2800      	cmp	r0, #0
    b346:	f000 8107 	beq.w	b558 <d_demangle_callback.constprop.0+0x238>
    b34a:	f04f 0900 	mov.w	r9, #0
    b34e:	2301      	movs	r3, #1
    b350:	f1b9 0f02 	cmp.w	r9, #2
    b354:	647b      	str	r3, [r7, #68]	; 0x44
    b356:	bf0c      	ite	eq
    b358:	2345      	moveq	r3, #69	; 0x45
    b35a:	2346      	movne	r3, #70	; 0x46
    b35c:	f1a9 0a02 	sub.w	sl, r9, #2
    b360:	ee08 3a10 	vmov	s16, r3
    b364:	fa5f fa8a 	uxtb.w	sl, sl
    b368:	4628      	mov	r0, r5
    b36a:	f003 f969 	bl	e640 <strlen>
    b36e:	182b      	adds	r3, r5, r0
    b370:	0042      	lsls	r2, r0, #1
    b372:	2100      	movs	r1, #0
    b374:	e9c7 5303 	strd	r5, r3, [r7, #12]
    b378:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    b37c:	f04f 0311 	mov.w	r3, #17
    b380:	e9c7 3505 	strd	r3, r5, [r7, #20]
    b384:	e9c7 1208 	strd	r1, r2, [r7, #32]
    b388:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
    b38c:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
    b390:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
    b394:	64b9      	str	r1, [r7, #72]	; 0x48
    b396:	f200 811b 	bhi.w	b5d0 <d_demangle_callback.constprop.0+0x2b0>
    b39a:	0083      	lsls	r3, r0, #2
    b39c:	46e8      	mov	r8, sp
    b39e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b3a2:	3307      	adds	r3, #7
    b3a4:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
    b3a8:	4685      	mov	sp, r0
    b3aa:	f023 0307 	bic.w	r3, r3, #7
    b3ae:	466e      	mov	r6, sp
    b3b0:	f1b9 0f01 	cmp.w	r9, #1
    b3b4:	ebad 0d03 	sub.w	sp, sp, r3
    b3b8:	61fe      	str	r6, [r7, #28]
    b3ba:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
    b3be:	d040      	beq.n	b442 <d_demangle_callback.constprop.0+0x122>
    b3c0:	f1ba 0f01 	cmp.w	sl, #1
    b3c4:	d835      	bhi.n	b432 <d_demangle_callback.constprop.0+0x112>
    b3c6:	7aeb      	ldrb	r3, [r5, #11]
    b3c8:	f105 040b 	add.w	r4, r5, #11
    b3cc:	2b5f      	cmp	r3, #95	; 0x5f
    b3ce:	61bc      	str	r4, [r7, #24]
    b3d0:	d103      	bne.n	b3da <d_demangle_callback.constprop.0+0xba>
    b3d2:	7b2b      	ldrb	r3, [r5, #12]
    b3d4:	2b5a      	cmp	r3, #90	; 0x5a
    b3d6:	f000 80b0 	beq.w	b53a <d_demangle_callback.constprop.0+0x21a>
    b3da:	2a00      	cmp	r2, #0
    b3dc:	f340 80ab 	ble.w	b536 <d_demangle_callback.constprop.0+0x216>
    b3e0:	4620      	mov	r0, r4
    b3e2:	f003 f92d 	bl	e640 <strlen>
    b3e6:	2300      	movs	r3, #0
    b3e8:	2201      	movs	r2, #1
    b3ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
    b3ee:	623a      	str	r2, [r7, #32]
    b3f0:	2800      	cmp	r0, #0
    b3f2:	f000 80a0 	beq.w	b536 <d_demangle_callback.constprop.0+0x216>
    b3f6:	e9c6 4003 	strd	r4, r0, [r6, #12]
    b3fa:	7033      	strb	r3, [r6, #0]
    b3fc:	2300      	movs	r3, #0
    b3fe:	4632      	mov	r2, r6
    b400:	ee18 1a10 	vmov	r1, s16
    b404:	f107 000c 	add.w	r0, r7, #12
    b408:	f7fa fc6c 	bl	5ce4 <d_make_comp>
    b40c:	4606      	mov	r6, r0
    b40e:	4620      	mov	r0, r4
    b410:	f003 f916 	bl	e640 <strlen>
    b414:	1823      	adds	r3, r4, r0
    b416:	61bb      	str	r3, [r7, #24]
    b418:	5c23      	ldrb	r3, [r4, r0]
    b41a:	b913      	cbnz	r3, b422 <d_demangle_callback.constprop.0+0x102>
    b41c:	2e00      	cmp	r6, #0
    b41e:	f040 80e1 	bne.w	b5e4 <d_demangle_callback.constprop.0+0x2c4>
    b422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b424:	3301      	adds	r3, #1
    b426:	f040 80c3 	bne.w	b5b0 <d_demangle_callback.constprop.0+0x290>
    b42a:	2300      	movs	r3, #0
    b42c:	647b      	str	r3, [r7, #68]	; 0x44
    b42e:	46c5      	mov	sp, r8
    b430:	e79a      	b.n	b368 <d_demangle_callback.constprop.0+0x48>
    b432:	f107 000c 	add.w	r0, r7, #12
    b436:	f7fb f8a7 	bl	6588 <d_type>
    b43a:	69bb      	ldr	r3, [r7, #24]
    b43c:	4606      	mov	r6, r0
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	e7eb      	b.n	b41a <d_demangle_callback.constprop.0+0xfa>
    b442:	782b      	ldrb	r3, [r5, #0]
    b444:	2b5f      	cmp	r3, #95	; 0x5f
    b446:	d1ec      	bne.n	b422 <d_demangle_callback.constprop.0+0x102>
    b448:	786b      	ldrb	r3, [r5, #1]
    b44a:	1c6a      	adds	r2, r5, #1
    b44c:	2b5a      	cmp	r3, #90	; 0x5a
    b44e:	61ba      	str	r2, [r7, #24]
    b450:	d1e7      	bne.n	b422 <d_demangle_callback.constprop.0+0x102>
    b452:	78ab      	ldrb	r3, [r5, #2]
    b454:	1caa      	adds	r2, r5, #2
    b456:	2b47      	cmp	r3, #71	; 0x47
    b458:	61ba      	str	r2, [r7, #24]
    b45a:	f000 809b 	beq.w	b594 <d_demangle_callback.constprop.0+0x274>
    b45e:	2b54      	cmp	r3, #84	; 0x54
    b460:	f000 8098 	beq.w	b594 <d_demangle_callback.constprop.0+0x274>
    b464:	4649      	mov	r1, r9
    b466:	f107 000c 	add.w	r0, r7, #12
    b46a:	f7fc ffe9 	bl	8440 <d_encoding.part.0>
    b46e:	697b      	ldr	r3, [r7, #20]
    b470:	07db      	lsls	r3, r3, #31
    b472:	4606      	mov	r6, r0
    b474:	f140 8097 	bpl.w	b5a6 <d_demangle_callback.constprop.0+0x286>
    b478:	69ba      	ldr	r2, [r7, #24]
    b47a:	7813      	ldrb	r3, [r2, #0]
    b47c:	2b2e      	cmp	r3, #46	; 0x2e
    b47e:	d1cc      	bne.n	b41a <d_demangle_callback.constprop.0+0xfa>
    b480:	4633      	mov	r3, r6
    b482:	4616      	mov	r6, r2
    b484:	461a      	mov	r2, r3
    b486:	7873      	ldrb	r3, [r6, #1]
    b488:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    b48c:	2919      	cmp	r1, #25
    b48e:	f04f 0b00 	mov.w	fp, #0
    b492:	d945      	bls.n	b520 <d_demangle_callback.constprop.0+0x200>
    b494:	2b5f      	cmp	r3, #95	; 0x5f
    b496:	d043      	beq.n	b520 <d_demangle_callback.constprop.0+0x200>
    b498:	3b30      	subs	r3, #48	; 0x30
    b49a:	2b09      	cmp	r3, #9
    b49c:	f200 80fd 	bhi.w	b69a <d_demangle_callback.constprop.0+0x37a>
    b4a0:	7831      	ldrb	r1, [r6, #0]
    b4a2:	4634      	mov	r4, r6
    b4a4:	292e      	cmp	r1, #46	; 0x2e
    b4a6:	d112      	bne.n	b4ce <d_demangle_callback.constprop.0+0x1ae>
    b4a8:	7863      	ldrb	r3, [r4, #1]
    b4aa:	3b30      	subs	r3, #48	; 0x30
    b4ac:	2b09      	cmp	r3, #9
    b4ae:	d80e      	bhi.n	b4ce <d_demangle_callback.constprop.0+0x1ae>
    b4b0:	78a3      	ldrb	r3, [r4, #2]
    b4b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    b4b6:	1ca0      	adds	r0, r4, #2
    b4b8:	2909      	cmp	r1, #9
    b4ba:	4604      	mov	r4, r0
    b4bc:	d805      	bhi.n	b4ca <d_demangle_callback.constprop.0+0x1aa>
    b4be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    b4c2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    b4c6:	2909      	cmp	r1, #9
    b4c8:	d9f9      	bls.n	b4be <d_demangle_callback.constprop.0+0x19e>
    b4ca:	2b2e      	cmp	r3, #46	; 0x2e
    b4cc:	d0ec      	beq.n	b4a8 <d_demangle_callback.constprop.0+0x188>
    b4ce:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
    b4d2:	4299      	cmp	r1, r3
    b4d4:	61bc      	str	r4, [r7, #24]
    b4d6:	eba4 0006 	sub.w	r0, r4, r6
    b4da:	da67      	bge.n	b5ac <d_demangle_callback.constprop.0+0x28c>
    b4dc:	f8d7 c01c 	ldr.w	ip, [r7, #28]
    b4e0:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
    b4e4:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
    b4e8:	3101      	adds	r1, #1
    b4ea:	2800      	cmp	r0, #0
    b4ec:	e9c3 bb01 	strd	fp, fp, [r3, #4]
    b4f0:	6239      	str	r1, [r7, #32]
    b4f2:	dd5b      	ble.n	b5ac <d_demangle_callback.constprop.0+0x28c>
    b4f4:	e9c3 bb01 	strd	fp, fp, [r3, #4]
    b4f8:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
    b4fc:	e9c3 6003 	strd	r6, r0, [r3, #12]
    b500:	214f      	movs	r1, #79	; 0x4f
    b502:	f107 000c 	add.w	r0, r7, #12
    b506:	f7fa fbed 	bl	5ce4 <d_make_comp>
    b50a:	7823      	ldrb	r3, [r4, #0]
    b50c:	2b2e      	cmp	r3, #46	; 0x2e
    b50e:	4602      	mov	r2, r0
    b510:	f040 80c1 	bne.w	b696 <d_demangle_callback.constprop.0+0x376>
    b514:	4626      	mov	r6, r4
    b516:	7873      	ldrb	r3, [r6, #1]
    b518:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    b51c:	2919      	cmp	r1, #25
    b51e:	d8b9      	bhi.n	b494 <d_demangle_callback.constprop.0+0x174>
    b520:	1cb3      	adds	r3, r6, #2
    b522:	461c      	mov	r4, r3
    b524:	f813 1b01 	ldrb.w	r1, [r3], #1
    b528:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
    b52c:	2819      	cmp	r0, #25
    b52e:	d9f8      	bls.n	b522 <d_demangle_callback.constprop.0+0x202>
    b530:	295f      	cmp	r1, #95	; 0x5f
    b532:	d0f6      	beq.n	b522 <d_demangle_callback.constprop.0+0x202>
    b534:	e7b6      	b.n	b4a4 <d_demangle_callback.constprop.0+0x184>
    b536:	2600      	movs	r6, #0
    b538:	e760      	b.n	b3fc <d_demangle_callback.constprop.0+0xdc>
    b53a:	7b6b      	ldrb	r3, [r5, #13]
    b53c:	f105 020d 	add.w	r2, r5, #13
    b540:	2b47      	cmp	r3, #71	; 0x47
    b542:	61ba      	str	r2, [r7, #24]
    b544:	f107 000c 	add.w	r0, r7, #12
    b548:	d001      	beq.n	b54e <d_demangle_callback.constprop.0+0x22e>
    b54a:	2b54      	cmp	r3, #84	; 0x54
    b54c:	d11d      	bne.n	b58a <d_demangle_callback.constprop.0+0x26a>
    b54e:	f7fc fbef 	bl	7d30 <d_special_name>
    b552:	69bc      	ldr	r4, [r7, #24]
    b554:	4606      	mov	r6, r0
    b556:	e751      	b.n	b3fc <d_demangle_callback.constprop.0+0xdc>
    b558:	7a2b      	ldrb	r3, [r5, #8]
    b55a:	2b2e      	cmp	r3, #46	; 0x2e
    b55c:	d004      	beq.n	b568 <d_demangle_callback.constprop.0+0x248>
    b55e:	2b5f      	cmp	r3, #95	; 0x5f
    b560:	d002      	beq.n	b568 <d_demangle_callback.constprop.0+0x248>
    b562:	2b24      	cmp	r3, #36	; 0x24
    b564:	f47f aef1 	bne.w	b34a <d_demangle_callback.constprop.0+0x2a>
    b568:	7a6b      	ldrb	r3, [r5, #9]
    b56a:	2b44      	cmp	r3, #68	; 0x44
    b56c:	d002      	beq.n	b574 <d_demangle_callback.constprop.0+0x254>
    b56e:	2b49      	cmp	r3, #73	; 0x49
    b570:	f47f aeeb 	bne.w	b34a <d_demangle_callback.constprop.0+0x2a>
    b574:	7aaa      	ldrb	r2, [r5, #10]
    b576:	2a5f      	cmp	r2, #95	; 0x5f
    b578:	f47f aee7 	bne.w	b34a <d_demangle_callback.constprop.0+0x2a>
    b57c:	2b49      	cmp	r3, #73	; 0x49
    b57e:	bf0c      	ite	eq
    b580:	f04f 0902 	moveq.w	r9, #2
    b584:	f04f 0903 	movne.w	r9, #3
    b588:	e6e1      	b.n	b34e <d_demangle_callback.constprop.0+0x2e>
    b58a:	f7fc ff59 	bl	8440 <d_encoding.part.0>
    b58e:	69bc      	ldr	r4, [r7, #24]
    b590:	4606      	mov	r6, r0
    b592:	e733      	b.n	b3fc <d_demangle_callback.constprop.0+0xdc>
    b594:	f107 000c 	add.w	r0, r7, #12
    b598:	f7fc fbca 	bl	7d30 <d_special_name>
    b59c:	697b      	ldr	r3, [r7, #20]
    b59e:	07db      	lsls	r3, r3, #31
    b5a0:	4606      	mov	r6, r0
    b5a2:	f53f af69 	bmi.w	b478 <d_demangle_callback.constprop.0+0x158>
    b5a6:	69bb      	ldr	r3, [r7, #24]
    b5a8:	781b      	ldrb	r3, [r3, #0]
    b5aa:	e736      	b.n	b41a <d_demangle_callback.constprop.0+0xfa>
    b5ac:	2300      	movs	r3, #0
    b5ae:	e7a7      	b.n	b500 <d_demangle_callback.constprop.0+0x1e0>
    b5b0:	2000      	movs	r0, #0
    b5b2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
    b5b6:	46c5      	mov	sp, r8
    b5b8:	46bd      	mov	sp, r7
    b5ba:	ecbd 8b02 	vpop	{d8}
    b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5c2:	7843      	ldrb	r3, [r0, #1]
    b5c4:	2b5a      	cmp	r3, #90	; 0x5a
    b5c6:	f47f aeb8 	bne.w	b33a <d_demangle_callback.constprop.0+0x1a>
    b5ca:	f04f 0901 	mov.w	r9, #1
    b5ce:	e6be      	b.n	b34e <d_demangle_callback.constprop.0+0x2e>
    b5d0:	4608      	mov	r0, r1
    b5d2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
    b5d6:	46bd      	mov	sp, r7
    b5d8:	ecbd 8b02 	vpop	{d8}
    b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5e0:	20002394 	.word	0x20002394
    b5e4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
    b5e8:	687a      	ldr	r2, [r7, #4]
    b5ea:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    b5ee:	4631      	mov	r1, r6
    b5f0:	683a      	ldr	r2, [r7, #0]
    b5f2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    b5f6:	4620      	mov	r0, r4
    b5f8:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
    b5fc:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
    b600:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
    b604:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
    b608:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
    b60c:	607b      	str	r3, [r7, #4]
    b60e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b612:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b616:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b61a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    b61e:	f7fa fc53 	bl	5ec8 <d_count_templates_scopes>
    b622:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    b62c:	da01      	bge.n	b632 <d_demangle_callback.constprop.0+0x312>
    b62e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b632:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    b636:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    b63a:	2901      	cmp	r1, #1
    b63c:	fb01 f303 	mul.w	r3, r1, r3
    b640:	4632      	mov	r2, r6
    b642:	bfb8      	it	lt
    b644:	2101      	movlt	r1, #1
    b646:	466e      	mov	r6, sp
    b648:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
    b64c:	2b01      	cmp	r3, #1
    b64e:	468d      	mov	sp, r1
    b650:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    b654:	4668      	mov	r0, sp
    b656:	bfb8      	it	lt
    b658:	2301      	movlt	r3, #1
    b65a:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
    b65e:	469d      	mov	sp, r3
    b660:	2500      	movs	r5, #0
    b662:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
    b666:	4620      	mov	r0, r4
    b668:	2111      	movs	r1, #17
    b66a:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
    b66e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    b672:	f7fe ffdb 	bl	a62c <d_print_comp>
    b676:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b67a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b67e:	5465      	strb	r5, [r4, r1]
    b680:	4620      	mov	r0, r4
    b682:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b686:	46b5      	mov	sp, r6
    b688:	4798      	blx	r3
    b68a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    b68e:	fab0 f080 	clz	r0, r0
    b692:	0940      	lsrs	r0, r0, #5
    b694:	e78d      	b.n	b5b2 <d_demangle_callback.constprop.0+0x292>
    b696:	4606      	mov	r6, r0
    b698:	e6bf      	b.n	b41a <d_demangle_callback.constprop.0+0xfa>
    b69a:	4616      	mov	r6, r2
    b69c:	e783      	b.n	b5a6 <d_demangle_callback.constprop.0+0x286>
    b69e:	bf00      	nop

0000b6a0 <d_print_subexpr>:
    b6a0:	b570      	push	{r4, r5, r6, lr}
    b6a2:	7813      	ldrb	r3, [r2, #0]
    b6a4:	2b01      	cmp	r3, #1
    b6a6:	b082      	sub	sp, #8
    b6a8:	4615      	mov	r5, r2
    b6aa:	4604      	mov	r4, r0
    b6ac:	d903      	bls.n	b6b6 <d_print_subexpr+0x16>
    b6ae:	2b31      	cmp	r3, #49	; 0x31
    b6b0:	d001      	beq.n	b6b6 <d_print_subexpr+0x16>
    b6b2:	2b06      	cmp	r3, #6
    b6b4:	d138      	bne.n	b728 <d_print_subexpr+0x88>
    b6b6:	2601      	movs	r6, #1
    b6b8:	686b      	ldr	r3, [r5, #4]
    b6ba:	2b01      	cmp	r3, #1
    b6bc:	dc22      	bgt.n	b704 <d_print_subexpr+0x64>
    b6be:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    b6c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    b6c6:	dc1d      	bgt.n	b704 <d_print_subexpr+0x64>
    b6c8:	3301      	adds	r3, #1
    b6ca:	3201      	adds	r2, #1
    b6cc:	606b      	str	r3, [r5, #4]
    b6ce:	2111      	movs	r1, #17
    b6d0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    b6d4:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    b6d8:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
    b6dc:	462a      	mov	r2, r5
    b6de:	4620      	mov	r0, r4
    b6e0:	9301      	str	r3, [sp, #4]
    b6e2:	9500      	str	r5, [sp, #0]
    b6e4:	f7fc ff28 	bl	8538 <d_print_comp_inner>
    b6e8:	686a      	ldr	r2, [r5, #4]
    b6ea:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    b6ee:	9901      	ldr	r1, [sp, #4]
    b6f0:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    b6f4:	3a01      	subs	r2, #1
    b6f6:	3b01      	subs	r3, #1
    b6f8:	606a      	str	r2, [r5, #4]
    b6fa:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b6fe:	b136      	cbz	r6, b70e <d_print_subexpr+0x6e>
    b700:	b002      	add	sp, #8
    b702:	bd70      	pop	{r4, r5, r6, pc}
    b704:	2301      	movs	r3, #1
    b706:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    b70a:	2e00      	cmp	r6, #0
    b70c:	d1f8      	bne.n	b700 <d_print_subexpr+0x60>
    b70e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b712:	29ff      	cmp	r1, #255	; 0xff
    b714:	d015      	beq.n	b742 <d_print_subexpr+0xa2>
    b716:	1c4a      	adds	r2, r1, #1
    b718:	2329      	movs	r3, #41	; 0x29
    b71a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    b71e:	5463      	strb	r3, [r4, r1]
    b720:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b724:	b002      	add	sp, #8
    b726:	bd70      	pop	{r4, r5, r6, pc}
    b728:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b72c:	29ff      	cmp	r1, #255	; 0xff
    b72e:	d016      	beq.n	b75e <d_print_subexpr+0xbe>
    b730:	1c4a      	adds	r2, r1, #1
    b732:	2328      	movs	r3, #40	; 0x28
    b734:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    b738:	2600      	movs	r6, #0
    b73a:	5463      	strb	r3, [r4, r1]
    b73c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b740:	e7ba      	b.n	b6b8 <d_print_subexpr+0x18>
    b742:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    b746:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    b74a:	4620      	mov	r0, r4
    b74c:	4798      	blx	r3
    b74e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b752:	2201      	movs	r2, #1
    b754:	4413      	add	r3, r2
    b756:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b75a:	4631      	mov	r1, r6
    b75c:	e7dc      	b.n	b718 <d_print_subexpr+0x78>
    b75e:	2600      	movs	r6, #0
    b760:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    b764:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    b768:	4798      	blx	r3
    b76a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b76e:	2201      	movs	r2, #1
    b770:	4413      	add	r3, r2
    b772:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b776:	4631      	mov	r1, r6
    b778:	e7db      	b.n	b732 <d_print_subexpr+0x92>
    b77a:	bf00      	nop

0000b77c <d_maybe_print_fold_expression>:
    b77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b780:	68d3      	ldr	r3, [r2, #12]
    b782:	68db      	ldr	r3, [r3, #12]
    b784:	681b      	ldr	r3, [r3, #0]
    b786:	7819      	ldrb	r1, [r3, #0]
    b788:	2966      	cmp	r1, #102	; 0x66
    b78a:	d178      	bne.n	b87e <d_maybe_print_fold_expression+0x102>
    b78c:	6912      	ldr	r2, [r2, #16]
    b78e:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
    b792:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
    b796:	f89a 2000 	ldrb.w	r2, [sl]
    b79a:	2a3c      	cmp	r2, #60	; 0x3c
    b79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b7a0:	bf08      	it	eq
    b7a2:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
    b7a6:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    b7aa:	785b      	ldrb	r3, [r3, #1]
    b7ac:	bf18      	it	ne
    b7ae:	f04f 0900 	movne.w	r9, #0
    b7b2:	2b6c      	cmp	r3, #108	; 0x6c
    b7b4:	4604      	mov	r4, r0
    b7b6:	f000 80a2 	beq.w	b8fe <d_maybe_print_fold_expression+0x182>
    b7ba:	d863      	bhi.n	b884 <d_maybe_print_fold_expression+0x108>
    b7bc:	2b4c      	cmp	r3, #76	; 0x4c
    b7be:	d001      	beq.n	b7c4 <d_maybe_print_fold_expression+0x48>
    b7c0:	2b52      	cmp	r3, #82	; 0x52
    b7c2:	d157      	bne.n	b874 <d_maybe_print_fold_expression+0xf8>
    b7c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b7c8:	29ff      	cmp	r1, #255	; 0xff
    b7ca:	f000 80eb 	beq.w	b9a4 <d_maybe_print_fold_expression+0x228>
    b7ce:	1c4b      	adds	r3, r1, #1
    b7d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b7d4:	2328      	movs	r3, #40	; 0x28
    b7d6:	5463      	strb	r3, [r4, r1]
    b7d8:	4652      	mov	r2, sl
    b7da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b7de:	2111      	movs	r1, #17
    b7e0:	4620      	mov	r0, r4
    b7e2:	4e78      	ldr	r6, [pc, #480]	; (b9c4 <d_maybe_print_fold_expression+0x248>)
    b7e4:	f7ff ff5c 	bl	b6a0 <d_print_subexpr>
    b7e8:	2111      	movs	r1, #17
    b7ea:	4642      	mov	r2, r8
    b7ec:	4620      	mov	r0, r4
    b7ee:	f7ff fd5b 	bl	b2a8 <d_print_expr_op>
    b7f2:	f106 0b02 	add.w	fp, r6, #2
    b7f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b7fa:	252e      	movs	r5, #46	; 0x2e
    b7fc:	f04f 0a00 	mov.w	sl, #0
    b800:	e00b      	b.n	b81a <d_maybe_print_fold_expression+0x9e>
    b802:	460b      	mov	r3, r1
    b804:	455e      	cmp	r6, fp
    b806:	f101 0101 	add.w	r1, r1, #1
    b80a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b80e:	54e5      	strb	r5, [r4, r3]
    b810:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    b814:	d019      	beq.n	b84a <d_maybe_print_fold_expression+0xce>
    b816:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    b81a:	29ff      	cmp	r1, #255	; 0xff
    b81c:	d1f1      	bne.n	b802 <d_maybe_print_fold_expression+0x86>
    b81e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b822:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b826:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    b82a:	4620      	mov	r0, r4
    b82c:	4798      	blx	r3
    b82e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b832:	3301      	adds	r3, #1
    b834:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b838:	2300      	movs	r3, #0
    b83a:	2101      	movs	r1, #1
    b83c:	455e      	cmp	r6, fp
    b83e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b842:	54e5      	strb	r5, [r4, r3]
    b844:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    b848:	d1e5      	bne.n	b816 <d_maybe_print_fold_expression+0x9a>
    b84a:	4642      	mov	r2, r8
    b84c:	2111      	movs	r1, #17
    b84e:	4620      	mov	r0, r4
    b850:	f7ff fd2a 	bl	b2a8 <d_print_expr_op>
    b854:	464a      	mov	r2, r9
    b856:	2111      	movs	r1, #17
    b858:	4620      	mov	r0, r4
    b85a:	f7ff ff21 	bl	b6a0 <d_print_subexpr>
    b85e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b862:	29ff      	cmp	r1, #255	; 0xff
    b864:	d07f      	beq.n	b966 <d_maybe_print_fold_expression+0x1ea>
    b866:	1c4a      	adds	r2, r1, #1
    b868:	2329      	movs	r3, #41	; 0x29
    b86a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    b86e:	5463      	strb	r3, [r4, r1]
    b870:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b874:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
    b878:	2001      	movs	r0, #1
    b87a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b87e:	2000      	movs	r0, #0
    b880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b884:	2b72      	cmp	r3, #114	; 0x72
    b886:	d1f5      	bne.n	b874 <d_maybe_print_fold_expression+0xf8>
    b888:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b88c:	29ff      	cmp	r1, #255	; 0xff
    b88e:	d07b      	beq.n	b988 <d_maybe_print_fold_expression+0x20c>
    b890:	1c4b      	adds	r3, r1, #1
    b892:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b896:	2328      	movs	r3, #40	; 0x28
    b898:	5463      	strb	r3, [r4, r1]
    b89a:	4652      	mov	r2, sl
    b89c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b8a0:	2111      	movs	r1, #17
    b8a2:	4620      	mov	r0, r4
    b8a4:	4e48      	ldr	r6, [pc, #288]	; (b9c8 <d_maybe_print_fold_expression+0x24c>)
    b8a6:	f7ff fefb 	bl	b6a0 <d_print_subexpr>
    b8aa:	4642      	mov	r2, r8
    b8ac:	2111      	movs	r1, #17
    b8ae:	4620      	mov	r0, r4
    b8b0:	f7ff fcfa 	bl	b2a8 <d_print_expr_op>
    b8b4:	f106 0903 	add.w	r9, r6, #3
    b8b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b8bc:	252e      	movs	r5, #46	; 0x2e
    b8be:	f04f 0800 	mov.w	r8, #0
    b8c2:	e00a      	b.n	b8da <d_maybe_print_fold_expression+0x15e>
    b8c4:	460b      	mov	r3, r1
    b8c6:	3101      	adds	r1, #1
    b8c8:	454e      	cmp	r6, r9
    b8ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b8ce:	54e5      	strb	r5, [r4, r3]
    b8d0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    b8d4:	d0ce      	beq.n	b874 <d_maybe_print_fold_expression+0xf8>
    b8d6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    b8da:	29ff      	cmp	r1, #255	; 0xff
    b8dc:	d1f2      	bne.n	b8c4 <d_maybe_print_fold_expression+0x148>
    b8de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b8e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b8e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    b8ea:	4620      	mov	r0, r4
    b8ec:	4798      	blx	r3
    b8ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b8f2:	3301      	adds	r3, #1
    b8f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b8f8:	2101      	movs	r1, #1
    b8fa:	2300      	movs	r3, #0
    b8fc:	e7e4      	b.n	b8c8 <d_maybe_print_fold_expression+0x14c>
    b8fe:	4d33      	ldr	r5, [pc, #204]	; (b9cc <d_maybe_print_fold_expression+0x250>)
    b900:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b904:	2628      	movs	r6, #40	; 0x28
    b906:	f105 0b03 	add.w	fp, r5, #3
    b90a:	f04f 0900 	mov.w	r9, #0
    b90e:	e00b      	b.n	b928 <d_maybe_print_fold_expression+0x1ac>
    b910:	460b      	mov	r3, r1
    b912:	45ab      	cmp	fp, r5
    b914:	f101 0101 	add.w	r1, r1, #1
    b918:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b91c:	54e6      	strb	r6, [r4, r3]
    b91e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b922:	d019      	beq.n	b958 <d_maybe_print_fold_expression+0x1dc>
    b924:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    b928:	29ff      	cmp	r1, #255	; 0xff
    b92a:	d1f1      	bne.n	b910 <d_maybe_print_fold_expression+0x194>
    b92c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b934:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    b938:	4620      	mov	r0, r4
    b93a:	4798      	blx	r3
    b93c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b940:	3301      	adds	r3, #1
    b942:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b946:	2300      	movs	r3, #0
    b948:	2101      	movs	r1, #1
    b94a:	45ab      	cmp	fp, r5
    b94c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b950:	54e6      	strb	r6, [r4, r3]
    b952:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b956:	d1e5      	bne.n	b924 <d_maybe_print_fold_expression+0x1a8>
    b958:	4642      	mov	r2, r8
    b95a:	2111      	movs	r1, #17
    b95c:	4620      	mov	r0, r4
    b95e:	f7ff fca3 	bl	b2a8 <d_print_expr_op>
    b962:	4652      	mov	r2, sl
    b964:	e777      	b.n	b856 <d_maybe_print_fold_expression+0xda>
    b966:	2500      	movs	r5, #0
    b968:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b96c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b970:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b974:	4620      	mov	r0, r4
    b976:	4798      	blx	r3
    b978:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b97c:	2201      	movs	r2, #1
    b97e:	4413      	add	r3, r2
    b980:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b984:	4629      	mov	r1, r5
    b986:	e76f      	b.n	b868 <d_maybe_print_fold_expression+0xec>
    b988:	2500      	movs	r5, #0
    b98a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    b98e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    b992:	4798      	blx	r3
    b994:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b998:	3301      	adds	r3, #1
    b99a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b99e:	4629      	mov	r1, r5
    b9a0:	2301      	movs	r3, #1
    b9a2:	e776      	b.n	b892 <d_maybe_print_fold_expression+0x116>
    b9a4:	2500      	movs	r5, #0
    b9a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    b9aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b9ae:	4620      	mov	r0, r4
    b9b0:	4798      	blx	r3
    b9b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b9b6:	3301      	adds	r3, #1
    b9b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    b9bc:	4629      	mov	r1, r5
    b9be:	2301      	movs	r3, #1
    b9c0:	e706      	b.n	b7d0 <d_maybe_print_fold_expression+0x54>
    b9c2:	bf00      	nop
    b9c4:	20002790 	.word	0x20002790
    b9c8:	2000207c 	.word	0x2000207c
    b9cc:	20002074 	.word	0x20002074

0000b9d0 <d_maybe_print_designated_init>:
    b9d0:	7813      	ldrb	r3, [r2, #0]
    b9d2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b9d6:	2b38      	cmp	r3, #56	; 0x38
    b9d8:	d001      	beq.n	b9de <d_maybe_print_designated_init+0xe>
    b9da:	2000      	movs	r0, #0
    b9dc:	4770      	bx	lr
    b9de:	68d3      	ldr	r3, [r2, #12]
    b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9e4:	68db      	ldr	r3, [r3, #12]
    b9e6:	681f      	ldr	r7, [r3, #0]
    b9e8:	783b      	ldrb	r3, [r7, #0]
    b9ea:	2b64      	cmp	r3, #100	; 0x64
    b9ec:	d002      	beq.n	b9f4 <d_maybe_print_designated_init+0x24>
    b9ee:	2000      	movs	r0, #0
    b9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9f4:	787b      	ldrb	r3, [r7, #1]
    b9f6:	2b69      	cmp	r3, #105	; 0x69
    b9f8:	4604      	mov	r4, r0
    b9fa:	d011      	beq.n	ba20 <d_maybe_print_designated_init+0x50>
    b9fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ba00:	2b58      	cmp	r3, #88	; 0x58
    ba02:	d1f4      	bne.n	b9ee <d_maybe_print_designated_init+0x1e>
    ba04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ba08:	6913      	ldr	r3, [r2, #16]
    ba0a:	29ff      	cmp	r1, #255	; 0xff
    ba0c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
    ba10:	f000 808e 	beq.w	bb30 <d_maybe_print_designated_init+0x160>
    ba14:	1c4b      	adds	r3, r1, #1
    ba16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ba1a:	235b      	movs	r3, #91	; 0x5b
    ba1c:	5463      	strb	r3, [r4, r1]
    ba1e:	e00c      	b.n	ba3a <d_maybe_print_designated_init+0x6a>
    ba20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ba24:	6913      	ldr	r3, [r2, #16]
    ba26:	29ff      	cmp	r1, #255	; 0xff
    ba28:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
    ba2c:	f000 80b1 	beq.w	bb92 <d_maybe_print_designated_init+0x1c2>
    ba30:	1c4b      	adds	r3, r1, #1
    ba32:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ba36:	232e      	movs	r3, #46	; 0x2e
    ba38:	5463      	strb	r3, [r4, r1]
    ba3a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ba3e:	462a      	mov	r2, r5
    ba40:	2111      	movs	r1, #17
    ba42:	4620      	mov	r0, r4
    ba44:	f7fe fdf2 	bl	a62c <d_print_comp>
    ba48:	787b      	ldrb	r3, [r7, #1]
    ba4a:	2b58      	cmp	r3, #88	; 0x58
    ba4c:	d03a      	beq.n	bac4 <d_maybe_print_designated_init+0xf4>
    ba4e:	2b69      	cmp	r3, #105	; 0x69
    ba50:	d00b      	beq.n	ba6a <d_maybe_print_designated_init+0x9a>
    ba52:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ba56:	29ff      	cmp	r1, #255	; 0xff
    ba58:	f000 808a 	beq.w	bb70 <d_maybe_print_designated_init+0x1a0>
    ba5c:	1c4a      	adds	r2, r1, #1
    ba5e:	235d      	movs	r3, #93	; 0x5d
    ba60:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ba64:	5463      	strb	r3, [r4, r1]
    ba66:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ba6a:	7833      	ldrb	r3, [r6, #0]
    ba6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ba70:	2b38      	cmp	r3, #56	; 0x38
    ba72:	d012      	beq.n	ba9a <d_maybe_print_designated_init+0xca>
    ba74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ba78:	29ff      	cmp	r1, #255	; 0xff
    ba7a:	d068      	beq.n	bb4e <d_maybe_print_designated_init+0x17e>
    ba7c:	1c4a      	adds	r2, r1, #1
    ba7e:	233d      	movs	r3, #61	; 0x3d
    ba80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ba84:	4620      	mov	r0, r4
    ba86:	5463      	strb	r3, [r4, r1]
    ba88:	4632      	mov	r2, r6
    ba8a:	2111      	movs	r1, #17
    ba8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ba90:	f7ff fe06 	bl	b6a0 <d_print_subexpr>
    ba94:	2001      	movs	r0, #1
    ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba9a:	68f3      	ldr	r3, [r6, #12]
    ba9c:	68db      	ldr	r3, [r3, #12]
    ba9e:	681b      	ldr	r3, [r3, #0]
    baa0:	781a      	ldrb	r2, [r3, #0]
    baa2:	2a64      	cmp	r2, #100	; 0x64
    baa4:	d1e6      	bne.n	ba74 <d_maybe_print_designated_init+0xa4>
    baa6:	785b      	ldrb	r3, [r3, #1]
    baa8:	2b69      	cmp	r3, #105	; 0x69
    baaa:	d003      	beq.n	bab4 <d_maybe_print_designated_init+0xe4>
    baac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bab0:	2b58      	cmp	r3, #88	; 0x58
    bab2:	d1df      	bne.n	ba74 <d_maybe_print_designated_init+0xa4>
    bab4:	4620      	mov	r0, r4
    bab6:	4632      	mov	r2, r6
    bab8:	2111      	movs	r1, #17
    baba:	f7fe fdb7 	bl	a62c <d_print_comp>
    babe:	2001      	movs	r0, #1
    bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bac4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; bbb0 <d_maybe_print_designated_init+0x1e0>
    bac8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    bacc:	f108 0a04 	add.w	sl, r8, #4
    bad0:	2520      	movs	r5, #32
    bad2:	f04f 0900 	mov.w	r9, #0
    bad6:	e00b      	b.n	baf0 <d_maybe_print_designated_init+0x120>
    bad8:	460b      	mov	r3, r1
    bada:	45c2      	cmp	sl, r8
    badc:	f101 0101 	add.w	r1, r1, #1
    bae0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    bae4:	54e5      	strb	r5, [r4, r3]
    bae6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    baea:	d019      	beq.n	bb20 <d_maybe_print_designated_init+0x150>
    baec:	f818 5f01 	ldrb.w	r5, [r8, #1]!
    baf0:	29ff      	cmp	r1, #255	; 0xff
    baf2:	d1f1      	bne.n	bad8 <d_maybe_print_designated_init+0x108>
    baf4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    baf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    bafc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    bb00:	4620      	mov	r0, r4
    bb02:	4798      	blx	r3
    bb04:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    bb08:	3301      	adds	r3, #1
    bb0a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bb0e:	2300      	movs	r3, #0
    bb10:	2101      	movs	r1, #1
    bb12:	45c2      	cmp	sl, r8
    bb14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    bb18:	54e5      	strb	r5, [r4, r3]
    bb1a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    bb1e:	d1e5      	bne.n	baec <d_maybe_print_designated_init+0x11c>
    bb20:	68f2      	ldr	r2, [r6, #12]
    bb22:	2111      	movs	r1, #17
    bb24:	4620      	mov	r0, r4
    bb26:	f7fe fd81 	bl	a62c <d_print_comp>
    bb2a:	6936      	ldr	r6, [r6, #16]
    bb2c:	787b      	ldrb	r3, [r7, #1]
    bb2e:	e78e      	b.n	ba4e <d_maybe_print_designated_init+0x7e>
    bb30:	f04f 0800 	mov.w	r8, #0
    bb34:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    bb38:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    bb3c:	4798      	blx	r3
    bb3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    bb42:	3301      	adds	r3, #1
    bb44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bb48:	4641      	mov	r1, r8
    bb4a:	2301      	movs	r3, #1
    bb4c:	e763      	b.n	ba16 <d_maybe_print_designated_init+0x46>
    bb4e:	2500      	movs	r5, #0
    bb50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    bb54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    bb58:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    bb5c:	4620      	mov	r0, r4
    bb5e:	4798      	blx	r3
    bb60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    bb64:	2201      	movs	r2, #1
    bb66:	4413      	add	r3, r2
    bb68:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bb6c:	4629      	mov	r1, r5
    bb6e:	e786      	b.n	ba7e <d_maybe_print_designated_init+0xae>
    bb70:	2500      	movs	r5, #0
    bb72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    bb76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    bb7a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    bb7e:	4620      	mov	r0, r4
    bb80:	4798      	blx	r3
    bb82:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    bb86:	2201      	movs	r2, #1
    bb88:	4413      	add	r3, r2
    bb8a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bb8e:	4629      	mov	r1, r5
    bb90:	e765      	b.n	ba5e <d_maybe_print_designated_init+0x8e>
    bb92:	f04f 0800 	mov.w	r8, #0
    bb96:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
    bb9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    bb9e:	4798      	blx	r3
    bba0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    bba4:	3301      	adds	r3, #1
    bba6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bbaa:	4641      	mov	r1, r8
    bbac:	2301      	movs	r3, #1
    bbae:	e740      	b.n	ba32 <d_maybe_print_designated_init+0x62>
    bbb0:	2000206c 	.word	0x2000206c

0000bbb4 <__cxa_demangle>:
    bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbb8:	461e      	mov	r6, r3
    bbba:	b084      	sub	sp, #16
    bbbc:	2800      	cmp	r0, #0
    bbbe:	d040      	beq.n	bc42 <__cxa_demangle+0x8e>
    bbc0:	460c      	mov	r4, r1
    bbc2:	4615      	mov	r5, r2
    bbc4:	b109      	cbz	r1, bbca <__cxa_demangle+0x16>
    bbc6:	2a00      	cmp	r2, #0
    bbc8:	d03b      	beq.n	bc42 <__cxa_demangle+0x8e>
    bbca:	2300      	movs	r3, #0
    bbcc:	4929      	ldr	r1, [pc, #164]	; (bc74 <__cxa_demangle+0xc0>)
    bbce:	466a      	mov	r2, sp
    bbd0:	e9cd 3300 	strd	r3, r3, [sp]
    bbd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bbd8:	f7ff fba2 	bl	b320 <d_demangle_callback.constprop.0>
    bbdc:	2800      	cmp	r0, #0
    bbde:	d039      	beq.n	bc54 <__cxa_demangle+0xa0>
    bbe0:	9b03      	ldr	r3, [sp, #12]
    bbe2:	9f00      	ldr	r7, [sp, #0]
    bbe4:	b9d3      	cbnz	r3, bc1c <__cxa_demangle+0x68>
    bbe6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    bbea:	2f00      	cmp	r7, #0
    bbec:	d03c      	beq.n	bc68 <__cxa_demangle+0xb4>
    bbee:	b32c      	cbz	r4, bc3c <__cxa_demangle+0x88>
    bbf0:	4638      	mov	r0, r7
    bbf2:	f002 fd25 	bl	e640 <strlen>
    bbf6:	682b      	ldr	r3, [r5, #0]
    bbf8:	4298      	cmp	r0, r3
    bbfa:	d219      	bcs.n	bc30 <__cxa_demangle+0x7c>
    bbfc:	4639      	mov	r1, r7
    bbfe:	1c42      	adds	r2, r0, #1
    bc00:	4620      	mov	r0, r4
    bc02:	f7f7 f9a5 	bl	2f50 <memcpy>
    bc06:	4638      	mov	r0, r7
    bc08:	f001 f8e8 	bl	cddc <free>
    bc0c:	4627      	mov	r7, r4
    bc0e:	b10e      	cbz	r6, bc14 <__cxa_demangle+0x60>
    bc10:	2300      	movs	r3, #0
    bc12:	6033      	str	r3, [r6, #0]
    bc14:	4638      	mov	r0, r7
    bc16:	b004      	add	sp, #16
    bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc1c:	f04f 0801 	mov.w	r8, #1
    bc20:	2f00      	cmp	r7, #0
    bc22:	d1e4      	bne.n	bbee <__cxa_demangle+0x3a>
    bc24:	b18e      	cbz	r6, bc4a <__cxa_demangle+0x96>
    bc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc2a:	6033      	str	r3, [r6, #0]
    bc2c:	2700      	movs	r7, #0
    bc2e:	e7f1      	b.n	bc14 <__cxa_demangle+0x60>
    bc30:	4620      	mov	r0, r4
    bc32:	f001 f8d3 	bl	cddc <free>
    bc36:	f8c5 8000 	str.w	r8, [r5]
    bc3a:	e7e8      	b.n	bc0e <__cxa_demangle+0x5a>
    bc3c:	2d00      	cmp	r5, #0
    bc3e:	d1fa      	bne.n	bc36 <__cxa_demangle+0x82>
    bc40:	e7e5      	b.n	bc0e <__cxa_demangle+0x5a>
    bc42:	b116      	cbz	r6, bc4a <__cxa_demangle+0x96>
    bc44:	f06f 0302 	mvn.w	r3, #2
    bc48:	6033      	str	r3, [r6, #0]
    bc4a:	2700      	movs	r7, #0
    bc4c:	4638      	mov	r0, r7
    bc4e:	b004      	add	sp, #16
    bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc54:	9800      	ldr	r0, [sp, #0]
    bc56:	f001 f8c1 	bl	cddc <free>
    bc5a:	2e00      	cmp	r6, #0
    bc5c:	d0f5      	beq.n	bc4a <__cxa_demangle+0x96>
    bc5e:	f06f 0301 	mvn.w	r3, #1
    bc62:	6033      	str	r3, [r6, #0]
    bc64:	2700      	movs	r7, #0
    bc66:	e7d5      	b.n	bc14 <__cxa_demangle+0x60>
    bc68:	2e00      	cmp	r6, #0
    bc6a:	d0ee      	beq.n	bc4a <__cxa_demangle+0x96>
    bc6c:	f1b8 0f01 	cmp.w	r8, #1
    bc70:	d0d9      	beq.n	bc26 <__cxa_demangle+0x72>
    bc72:	e7f4      	b.n	bc5e <__cxa_demangle+0xaa>
    bc74:	0000601d 	.word	0x0000601d

0000bc78 <__cxxabiv1::__is_gxx_exception_class(char*)>:
    bc78:	7803      	ldrb	r3, [r0, #0]
    bc7a:	2b47      	cmp	r3, #71	; 0x47
    bc7c:	d001      	beq.n	bc82 <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
    bc7e:	2000      	movs	r0, #0
    bc80:	4770      	bx	lr
    bc82:	7843      	ldrb	r3, [r0, #1]
    bc84:	2b4e      	cmp	r3, #78	; 0x4e
    bc86:	d1fa      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bc88:	7883      	ldrb	r3, [r0, #2]
    bc8a:	2b55      	cmp	r3, #85	; 0x55
    bc8c:	d1f7      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bc8e:	78c3      	ldrb	r3, [r0, #3]
    bc90:	2b43      	cmp	r3, #67	; 0x43
    bc92:	d1f4      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bc94:	7903      	ldrb	r3, [r0, #4]
    bc96:	2b43      	cmp	r3, #67	; 0x43
    bc98:	d1f1      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bc9a:	7943      	ldrb	r3, [r0, #5]
    bc9c:	2b2b      	cmp	r3, #43	; 0x2b
    bc9e:	d1ee      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bca0:	7983      	ldrb	r3, [r0, #6]
    bca2:	2b2b      	cmp	r3, #43	; 0x2b
    bca4:	d1eb      	bne.n	bc7e <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
    bca6:	79c0      	ldrb	r0, [r0, #7]
    bca8:	2801      	cmp	r0, #1
    bcaa:	bf8c      	ite	hi
    bcac:	2000      	movhi	r0, #0
    bcae:	2001      	movls	r0, #1
    bcb0:	4770      	bx	lr
    bcb2:	bf00      	nop

0000bcb4 <__cxa_call_terminate>:
    bcb4:	b510      	push	{r4, lr}
    bcb6:	b130      	cbz	r0, bcc6 <__cxa_call_terminate+0x12>
    bcb8:	4604      	mov	r4, r0
    bcba:	f000 f87d 	bl	bdb8 <__cxa_begin_catch>
    bcbe:	4620      	mov	r0, r4
    bcc0:	f7ff ffda 	bl	bc78 <__cxxabiv1::__is_gxx_exception_class(char*)>
    bcc4:	b908      	cbnz	r0, bcca <__cxa_call_terminate+0x16>
    bcc6:	f7f9 fc85 	bl	55d4 <std::terminate()>
    bcca:	f854 0c14 	ldr.w	r0, [r4, #-20]
    bcce:	f7f9 fc79 	bl	55c4 <__cxxabiv1::__terminate(void (*)())>
    bcd2:	bf00      	nop

0000bcd4 <__cxa_call_unexpected>:
    bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcd8:	b085      	sub	sp, #20
    bcda:	4602      	mov	r2, r0
    bcdc:	f7ff ffcc 	bl	bc78 <__cxxabiv1::__is_gxx_exception_class(char*)>
    bce0:	b138      	cbz	r0, bcf2 <__cxa_call_unexpected+0x1e>
    bce2:	e952 7406 	ldrd	r7, r4, [r2, #-24]
    bce6:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
    bcea:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
    bcee:	2600      	movs	r6, #0
    bcf0:	e005      	b.n	bcfe <__cxa_call_unexpected+0x2a>
    bcf2:	4604      	mov	r4, r0
    bcf4:	4607      	mov	r7, r0
    bcf6:	2601      	movs	r6, #1
    bcf8:	4605      	mov	r5, r0
    bcfa:	4680      	mov	r8, r0
    bcfc:	4682      	mov	sl, r0
    bcfe:	4610      	mov	r0, r2
    bd00:	f000 f85a 	bl	bdb8 <__cxa_begin_catch>
    bd04:	b10e      	cbz	r6, bd0a <__cxa_call_unexpected+0x36>
    bd06:	f7f9 fc73 	bl	55f0 <std::unexpected()>
    bd0a:	4638      	mov	r0, r7
    bd0c:	f7f9 fc6c 	bl	55e8 <__cxxabiv1::__unexpected(void (*)())>
    bd10:	f000 f852 	bl	bdb8 <__cxa_begin_catch>
    bd14:	b10e      	cbz	r6, bd1a <__cxa_call_unexpected+0x46>
    bd16:	f7f9 fc5d 	bl	55d4 <std::terminate()>
    bd1a:	f7f9 f935 	bl	4f88 <__cxa_get_globals_fast>
    bd1e:	6807      	ldr	r7, [r0, #0]
    bd20:	f8df b090 	ldr.w	fp, [pc, #144]	; bdb4 <__cxa_call_unexpected+0xe0>
    bd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd28:	2b01      	cmp	r3, #1
    bd2a:	bf0c      	ite	eq
    bd2c:	683b      	ldreq	r3, [r7, #0]
    bd2e:	f107 0378 	addne.w	r3, r7, #120	; 0x78
    bd32:	9302      	str	r3, [sp, #8]
    bd34:	f028 0303 	bic.w	r3, r8, #3
    bd38:	9301      	str	r3, [sp, #4]
    bd3a:	3720      	adds	r7, #32
    bd3c:	f04f 0900 	mov.w	r9, #0
    bd40:	45ca      	cmp	sl, r9
    bd42:	dd20      	ble.n	bd86 <__cxa_call_unexpected+0xb2>
    bd44:	f8d5 8000 	ldr.w	r8, [r5]
    bd48:	f1b8 0f00 	cmp.w	r8, #0
    bd4c:	d000      	beq.n	bd50 <__cxa_call_unexpected+0x7c>
    bd4e:	44a8      	add	r8, r5
    bd50:	ab02      	add	r3, sp, #8
    bd52:	2200      	movs	r2, #0
    bd54:	4641      	mov	r1, r8
    bd56:	4638      	mov	r0, r7
    bd58:	f7f9 f844 	bl	4de4 <__cxa_type_match>
    bd5c:	b108      	cbz	r0, bd62 <__cxa_call_unexpected+0x8e>
    bd5e:	f7f9 fccf 	bl	5700 <__cxa_rethrow>
    bd62:	f8d8 3000 	ldr.w	r3, [r8]
    bd66:	9003      	str	r0, [sp, #12]
    bd68:	aa03      	add	r2, sp, #12
    bd6a:	4640      	mov	r0, r8
    bd6c:	4659      	mov	r1, fp
    bd6e:	f8d3 8010 	ldr.w	r8, [r3, #16]
    bd72:	2301      	movs	r3, #1
    bd74:	47c0      	blx	r8
    bd76:	9b01      	ldr	r3, [sp, #4]
    bd78:	2800      	cmp	r0, #0
    bd7a:	bf18      	it	ne
    bd7c:	4606      	movne	r6, r0
    bd7e:	f109 0901 	add.w	r9, r9, #1
    bd82:	441d      	add	r5, r3
    bd84:	e7dc      	b.n	bd40 <__cxa_call_unexpected+0x6c>
    bd86:	b146      	cbz	r6, bd9a <__cxa_call_unexpected+0xc6>
    bd88:	2004      	movs	r0, #4
    bd8a:	f7f8 ffe9 	bl	4d60 <__cxa_allocate_exception>
    bd8e:	4b07      	ldr	r3, [pc, #28]	; (bdac <__cxa_call_unexpected+0xd8>)
    bd90:	4a07      	ldr	r2, [pc, #28]	; (bdb0 <__cxa_call_unexpected+0xdc>)
    bd92:	4908      	ldr	r1, [pc, #32]	; (bdb4 <__cxa_call_unexpected+0xe0>)
    bd94:	6003      	str	r3, [r0, #0]
    bd96:	f7f9 fc97 	bl	56c8 <__cxa_throw>
    bd9a:	4620      	mov	r0, r4
    bd9c:	f7f9 fc12 	bl	55c4 <__cxxabiv1::__terminate(void (*)())>
    bda0:	f000 f848 	bl	be34 <__cxa_end_catch>
    bda4:	f000 f846 	bl	be34 <__cxa_end_catch>
    bda8:	f7f9 f816 	bl	4dd8 <__cxa_end_cleanup>
    bdac:	20001638 	.word	0x20001638
    bdb0:	00004f6d 	.word	0x00004f6d
    bdb4:	200013f8 	.word	0x200013f8

0000bdb8 <__cxa_begin_catch>:
    bdb8:	b538      	push	{r3, r4, r5, lr}
    bdba:	4604      	mov	r4, r0
    bdbc:	f7f9 f8e8 	bl	4f90 <__cxa_get_globals>
    bdc0:	4622      	mov	r2, r4
    bdc2:	6805      	ldr	r5, [r0, #0]
    bdc4:	f812 3920 	ldrb.w	r3, [r2], #-32
    bdc8:	2b47      	cmp	r3, #71	; 0x47
    bdca:	d003      	beq.n	bdd4 <__cxa_begin_catch+0x1c>
    bdcc:	bb85      	cbnz	r5, be30 <__cxa_begin_catch+0x78>
    bdce:	6002      	str	r2, [r0, #0]
    bdd0:	4628      	mov	r0, r5
    bdd2:	bd38      	pop	{r3, r4, r5, pc}
    bdd4:	7863      	ldrb	r3, [r4, #1]
    bdd6:	2b4e      	cmp	r3, #78	; 0x4e
    bdd8:	d1f8      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bdda:	78a3      	ldrb	r3, [r4, #2]
    bddc:	2b55      	cmp	r3, #85	; 0x55
    bdde:	d1f5      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bde0:	78e3      	ldrb	r3, [r4, #3]
    bde2:	2b43      	cmp	r3, #67	; 0x43
    bde4:	d1f2      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bde6:	7923      	ldrb	r3, [r4, #4]
    bde8:	2b43      	cmp	r3, #67	; 0x43
    bdea:	d1ef      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bdec:	7963      	ldrb	r3, [r4, #5]
    bdee:	2b2b      	cmp	r3, #43	; 0x2b
    bdf0:	d1ec      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bdf2:	79a3      	ldrb	r3, [r4, #6]
    bdf4:	2b2b      	cmp	r3, #43	; 0x2b
    bdf6:	d1e9      	bne.n	bdcc <__cxa_begin_catch+0x14>
    bdf8:	79e3      	ldrb	r3, [r4, #7]
    bdfa:	2b01      	cmp	r3, #1
    bdfc:	d8e6      	bhi.n	bdcc <__cxa_begin_catch+0x14>
    bdfe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    be02:	2b00      	cmp	r3, #0
    be04:	db11      	blt.n	be2a <__cxa_begin_catch+0x72>
    be06:	3301      	adds	r3, #1
    be08:	f844 3c0c 	str.w	r3, [r4, #-12]
    be0c:	6843      	ldr	r3, [r0, #4]
    be0e:	3b01      	subs	r3, #1
    be10:	6043      	str	r3, [r0, #4]
    be12:	4295      	cmp	r5, r2
    be14:	bf18      	it	ne
    be16:	f844 5c10 	strne.w	r5, [r4, #-16]
    be1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    be1c:	bf18      	it	ne
    be1e:	6002      	strne	r2, [r0, #0]
    be20:	4620      	mov	r0, r4
    be22:	f000 fa13 	bl	c24c <_Unwind_Complete>
    be26:	4628      	mov	r0, r5
    be28:	bd38      	pop	{r3, r4, r5, pc}
    be2a:	f1c3 0301 	rsb	r3, r3, #1
    be2e:	e7eb      	b.n	be08 <__cxa_begin_catch+0x50>
    be30:	f7f9 fbd0 	bl	55d4 <std::terminate()>

0000be34 <__cxa_end_catch>:
    be34:	b508      	push	{r3, lr}
    be36:	f7f9 f8a7 	bl	4f88 <__cxa_get_globals_fast>
    be3a:	6803      	ldr	r3, [r0, #0]
    be3c:	b37b      	cbz	r3, be9e <__cxa_end_catch+0x6a>
    be3e:	f893 2020 	ldrb.w	r2, [r3, #32]
    be42:	2a47      	cmp	r2, #71	; 0x47
    be44:	d007      	beq.n	be56 <__cxa_end_catch+0x22>
    be46:	2200      	movs	r2, #0
    be48:	6002      	str	r2, [r0, #0]
    be4a:	f103 0020 	add.w	r0, r3, #32
    be4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    be52:	f000 b9fd 	b.w	c250 <_Unwind_DeleteException>
    be56:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    be5a:	2a4e      	cmp	r2, #78	; 0x4e
    be5c:	d1f3      	bne.n	be46 <__cxa_end_catch+0x12>
    be5e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    be62:	2a55      	cmp	r2, #85	; 0x55
    be64:	d1ef      	bne.n	be46 <__cxa_end_catch+0x12>
    be66:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    be6a:	2a43      	cmp	r2, #67	; 0x43
    be6c:	d1eb      	bne.n	be46 <__cxa_end_catch+0x12>
    be6e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    be72:	2a43      	cmp	r2, #67	; 0x43
    be74:	d1e7      	bne.n	be46 <__cxa_end_catch+0x12>
    be76:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    be7a:	2a2b      	cmp	r2, #43	; 0x2b
    be7c:	d1e3      	bne.n	be46 <__cxa_end_catch+0x12>
    be7e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    be82:	2a2b      	cmp	r2, #43	; 0x2b
    be84:	d1df      	bne.n	be46 <__cxa_end_catch+0x12>
    be86:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    be8a:	2a01      	cmp	r2, #1
    be8c:	d8db      	bhi.n	be46 <__cxa_end_catch+0x12>
    be8e:	695a      	ldr	r2, [r3, #20]
    be90:	2a00      	cmp	r2, #0
    be92:	db05      	blt.n	bea0 <__cxa_end_catch+0x6c>
    be94:	3a01      	subs	r2, #1
    be96:	d008      	beq.n	beaa <__cxa_end_catch+0x76>
    be98:	1c51      	adds	r1, r2, #1
    be9a:	d00e      	beq.n	beba <__cxa_end_catch+0x86>
    be9c:	615a      	str	r2, [r3, #20]
    be9e:	bd08      	pop	{r3, pc}
    bea0:	3201      	adds	r2, #1
    bea2:	d1fb      	bne.n	be9c <__cxa_end_catch+0x68>
    bea4:	6919      	ldr	r1, [r3, #16]
    bea6:	6001      	str	r1, [r0, #0]
    bea8:	e7f8      	b.n	be9c <__cxa_end_catch+0x68>
    beaa:	691a      	ldr	r2, [r3, #16]
    beac:	6002      	str	r2, [r0, #0]
    beae:	f103 0020 	add.w	r0, r3, #32
    beb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    beb6:	f000 b9cb 	b.w	c250 <_Unwind_DeleteException>
    beba:	f7f9 fb8b 	bl	55d4 <std::terminate()>
    bebe:	bf00      	nop

0000bec0 <__cxa_current_exception_type>:
    bec0:	b508      	push	{r3, lr}
    bec2:	f7f9 f865 	bl	4f90 <__cxa_get_globals>
    bec6:	6800      	ldr	r0, [r0, #0]
    bec8:	b130      	cbz	r0, bed8 <__cxa_current_exception_type+0x18>
    beca:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    bece:	2b01      	cmp	r3, #1
    bed0:	bf04      	itt	eq
    bed2:	6800      	ldreq	r0, [r0, #0]
    bed4:	3878      	subeq	r0, #120	; 0x78
    bed6:	6800      	ldr	r0, [r0, #0]
    bed8:	bd08      	pop	{r3, pc}
    beda:	bf00      	nop

0000bedc <selfrel_offset31>:
    bedc:	6803      	ldr	r3, [r0, #0]
    bede:	005a      	lsls	r2, r3, #1
    bee0:	bf4c      	ite	mi
    bee2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    bee6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    beea:	4418      	add	r0, r3
    beec:	4770      	bx	lr
    beee:	bf00      	nop

0000bef0 <search_EIT_table>:
    bef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bef4:	b329      	cbz	r1, bf42 <search_EIT_table+0x52>
    bef6:	1e4f      	subs	r7, r1, #1
    bef8:	4604      	mov	r4, r0
    befa:	4615      	mov	r5, r2
    befc:	463e      	mov	r6, r7
    befe:	f04f 0800 	mov.w	r8, #0
    bf02:	eb08 0106 	add.w	r1, r8, r6
    bf06:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    bf0a:	1049      	asrs	r1, r1, #1
    bf0c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    bf10:	4648      	mov	r0, r9
    bf12:	f7ff ffe3 	bl	bedc <selfrel_offset31>
    bf16:	4603      	mov	r3, r0
    bf18:	00c8      	lsls	r0, r1, #3
    bf1a:	3008      	adds	r0, #8
    bf1c:	428f      	cmp	r7, r1
    bf1e:	4420      	add	r0, r4
    bf20:	d009      	beq.n	bf36 <search_EIT_table+0x46>
    bf22:	42ab      	cmp	r3, r5
    bf24:	d809      	bhi.n	bf3a <search_EIT_table+0x4a>
    bf26:	f7ff ffd9 	bl	bedc <selfrel_offset31>
    bf2a:	3801      	subs	r0, #1
    bf2c:	42a8      	cmp	r0, r5
    bf2e:	d20a      	bcs.n	bf46 <search_EIT_table+0x56>
    bf30:	f101 0801 	add.w	r8, r1, #1
    bf34:	e7e5      	b.n	bf02 <search_EIT_table+0x12>
    bf36:	42ab      	cmp	r3, r5
    bf38:	d905      	bls.n	bf46 <search_EIT_table+0x56>
    bf3a:	4588      	cmp	r8, r1
    bf3c:	d001      	beq.n	bf42 <search_EIT_table+0x52>
    bf3e:	1e4e      	subs	r6, r1, #1
    bf40:	e7df      	b.n	bf02 <search_EIT_table+0x12>
    bf42:	f04f 0900 	mov.w	r9, #0
    bf46:	4648      	mov	r0, r9
    bf48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bf4c <__gnu_unwind_get_pr_addr>:
    bf4c:	2801      	cmp	r0, #1
    bf4e:	d007      	beq.n	bf60 <__gnu_unwind_get_pr_addr+0x14>
    bf50:	2802      	cmp	r0, #2
    bf52:	d007      	beq.n	bf64 <__gnu_unwind_get_pr_addr+0x18>
    bf54:	4b04      	ldr	r3, [pc, #16]	; (bf68 <__gnu_unwind_get_pr_addr+0x1c>)
    bf56:	2800      	cmp	r0, #0
    bf58:	bf0c      	ite	eq
    bf5a:	4618      	moveq	r0, r3
    bf5c:	2000      	movne	r0, #0
    bf5e:	4770      	bx	lr
    bf60:	4802      	ldr	r0, [pc, #8]	; (bf6c <__gnu_unwind_get_pr_addr+0x20>)
    bf62:	4770      	bx	lr
    bf64:	4802      	ldr	r0, [pc, #8]	; (bf70 <__gnu_unwind_get_pr_addr+0x24>)
    bf66:	4770      	bx	lr
    bf68:	0000c61d 	.word	0x0000c61d
    bf6c:	0000c625 	.word	0x0000c625
    bf70:	0000c62d 	.word	0x0000c62d

0000bf74 <get_eit_entry>:
    bf74:	b530      	push	{r4, r5, lr}
    bf76:	4b22      	ldr	r3, [pc, #136]	; (c000 <get_eit_entry+0x8c>)
    bf78:	b083      	sub	sp, #12
    bf7a:	4604      	mov	r4, r0
    bf7c:	1e8d      	subs	r5, r1, #2
    bf7e:	b343      	cbz	r3, bfd2 <get_eit_entry+0x5e>
    bf80:	a901      	add	r1, sp, #4
    bf82:	4628      	mov	r0, r5
    bf84:	f3af 8000 	nop.w
    bf88:	b1f0      	cbz	r0, bfc8 <get_eit_entry+0x54>
    bf8a:	9901      	ldr	r1, [sp, #4]
    bf8c:	462a      	mov	r2, r5
    bf8e:	f7ff ffaf 	bl	bef0 <search_EIT_table>
    bf92:	4601      	mov	r1, r0
    bf94:	b1c0      	cbz	r0, bfc8 <get_eit_entry+0x54>
    bf96:	f7ff ffa1 	bl	bedc <selfrel_offset31>
    bf9a:	684b      	ldr	r3, [r1, #4]
    bf9c:	64a0      	str	r0, [r4, #72]	; 0x48
    bf9e:	2b01      	cmp	r3, #1
    bfa0:	d02b      	beq.n	bffa <get_eit_entry+0x86>
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	f101 0004 	add.w	r0, r1, #4
    bfa8:	db25      	blt.n	bff6 <get_eit_entry+0x82>
    bfaa:	f7ff ff97 	bl	bedc <selfrel_offset31>
    bfae:	2300      	movs	r3, #0
    bfb0:	6523      	str	r3, [r4, #80]	; 0x50
    bfb2:	6803      	ldr	r3, [r0, #0]
    bfb4:	64e0      	str	r0, [r4, #76]	; 0x4c
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	db12      	blt.n	bfe0 <get_eit_entry+0x6c>
    bfba:	f7ff ff8f 	bl	bedc <selfrel_offset31>
    bfbe:	4603      	mov	r3, r0
    bfc0:	2000      	movs	r0, #0
    bfc2:	6123      	str	r3, [r4, #16]
    bfc4:	b003      	add	sp, #12
    bfc6:	bd30      	pop	{r4, r5, pc}
    bfc8:	2300      	movs	r3, #0
    bfca:	2009      	movs	r0, #9
    bfcc:	6123      	str	r3, [r4, #16]
    bfce:	b003      	add	sp, #12
    bfd0:	bd30      	pop	{r4, r5, pc}
    bfd2:	4b0c      	ldr	r3, [pc, #48]	; (c004 <get_eit_entry+0x90>)
    bfd4:	490c      	ldr	r1, [pc, #48]	; (c008 <get_eit_entry+0x94>)
    bfd6:	1ac9      	subs	r1, r1, r3
    bfd8:	10c9      	asrs	r1, r1, #3
    bfda:	4618      	mov	r0, r3
    bfdc:	9101      	str	r1, [sp, #4]
    bfde:	e7d5      	b.n	bf8c <get_eit_entry+0x18>
    bfe0:	f3c3 6003 	ubfx	r0, r3, #24, #4
    bfe4:	f7ff ffb2 	bl	bf4c <__gnu_unwind_get_pr_addr>
    bfe8:	1e03      	subs	r3, r0, #0
    bfea:	bf0c      	ite	eq
    bfec:	2009      	moveq	r0, #9
    bfee:	2000      	movne	r0, #0
    bff0:	6123      	str	r3, [r4, #16]
    bff2:	b003      	add	sp, #12
    bff4:	bd30      	pop	{r4, r5, pc}
    bff6:	2301      	movs	r3, #1
    bff8:	e7da      	b.n	bfb0 <get_eit_entry+0x3c>
    bffa:	2300      	movs	r3, #0
    bffc:	2005      	movs	r0, #5
    bffe:	e7e0      	b.n	bfc2 <get_eit_entry+0x4e>
    c000:	00000000 	.word	0x00000000
    c004:	000136b4 	.word	0x000136b4
    c008:	000139a0 	.word	0x000139a0

0000c00c <restore_non_core_regs>:
    c00c:	6803      	ldr	r3, [r0, #0]
    c00e:	07da      	lsls	r2, r3, #31
    c010:	b510      	push	{r4, lr}
    c012:	4604      	mov	r4, r0
    c014:	d406      	bmi.n	c024 <restore_non_core_regs+0x18>
    c016:	079b      	lsls	r3, r3, #30
    c018:	f100 0048 	add.w	r0, r0, #72	; 0x48
    c01c:	d509      	bpl.n	c032 <restore_non_core_regs+0x26>
    c01e:	f000 fc75 	bl	c90c <__gnu_Unwind_Restore_VFP_D>
    c022:	6823      	ldr	r3, [r4, #0]
    c024:	0759      	lsls	r1, r3, #29
    c026:	d509      	bpl.n	c03c <restore_non_core_regs+0x30>
    c028:	071a      	lsls	r2, r3, #28
    c02a:	d50e      	bpl.n	c04a <restore_non_core_regs+0x3e>
    c02c:	06db      	lsls	r3, r3, #27
    c02e:	d513      	bpl.n	c058 <restore_non_core_regs+0x4c>
    c030:	bd10      	pop	{r4, pc}
    c032:	f000 fc63 	bl	c8fc <__gnu_Unwind_Restore_VFP>
    c036:	6823      	ldr	r3, [r4, #0]
    c038:	0759      	lsls	r1, r3, #29
    c03a:	d4f5      	bmi.n	c028 <restore_non_core_regs+0x1c>
    c03c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    c040:	f000 fc6c 	bl	c91c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    c044:	6823      	ldr	r3, [r4, #0]
    c046:	071a      	lsls	r2, r3, #28
    c048:	d4f0      	bmi.n	c02c <restore_non_core_regs+0x20>
    c04a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    c04e:	f000 fc6d 	bl	c92c <__gnu_Unwind_Restore_WMMXD>
    c052:	6823      	ldr	r3, [r4, #0]
    c054:	06db      	lsls	r3, r3, #27
    c056:	d4eb      	bmi.n	c030 <restore_non_core_regs+0x24>
    c058:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    c05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c060:	f000 bca8 	b.w	c9b4 <__gnu_Unwind_Restore_WMMXC>

0000c064 <_Unwind_decode_typeinfo_ptr.constprop.0>:
    c064:	4603      	mov	r3, r0
    c066:	6800      	ldr	r0, [r0, #0]
    c068:	b100      	cbz	r0, c06c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
    c06a:	4418      	add	r0, r3
    c06c:	4770      	bx	lr
    c06e:	bf00      	nop

0000c070 <_Unwind_DebugHook>:
    c070:	4770      	bx	lr
    c072:	bf00      	nop

0000c074 <unwind_phase2>:
    c074:	b570      	push	{r4, r5, r6, lr}
    c076:	4604      	mov	r4, r0
    c078:	460e      	mov	r6, r1
    c07a:	6c31      	ldr	r1, [r6, #64]	; 0x40
    c07c:	4620      	mov	r0, r4
    c07e:	f7ff ff79 	bl	bf74 <get_eit_entry>
    c082:	4605      	mov	r5, r0
    c084:	b988      	cbnz	r0, c0aa <unwind_phase2+0x36>
    c086:	6c32      	ldr	r2, [r6, #64]	; 0x40
    c088:	6162      	str	r2, [r4, #20]
    c08a:	6923      	ldr	r3, [r4, #16]
    c08c:	4632      	mov	r2, r6
    c08e:	4621      	mov	r1, r4
    c090:	2001      	movs	r0, #1
    c092:	4798      	blx	r3
    c094:	2808      	cmp	r0, #8
    c096:	d0f0      	beq.n	c07a <unwind_phase2+0x6>
    c098:	2807      	cmp	r0, #7
    c09a:	d106      	bne.n	c0aa <unwind_phase2+0x36>
    c09c:	4628      	mov	r0, r5
    c09e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    c0a0:	f7ff ffe6 	bl	c070 <_Unwind_DebugHook>
    c0a4:	1d30      	adds	r0, r6, #4
    c0a6:	f000 fc1d 	bl	c8e4 <__restore_core_regs>
    c0aa:	f7f7 f919 	bl	32e0 <abort>
    c0ae:	bf00      	nop

0000c0b0 <unwind_phase2_forced>:
    c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0b4:	1d0d      	adds	r5, r1, #4
    c0b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
    c0ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
    c0be:	4607      	mov	r7, r0
    c0c0:	4614      	mov	r4, r2
    c0c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c0c4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    c0c8:	f10d 0c0c 	add.w	ip, sp, #12
    c0cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c0d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c0d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c0d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c0d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c0dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c0e0:	ae02      	add	r6, sp, #8
    c0e2:	f04f 0e00 	mov.w	lr, #0
    c0e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    c0ea:	f8c6 e000 	str.w	lr, [r6]
    c0ee:	e020      	b.n	c132 <unwind_phase2_forced+0x82>
    c0f0:	6c33      	ldr	r3, [r6, #64]	; 0x40
    c0f2:	617b      	str	r3, [r7, #20]
    c0f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    c0f8:	4631      	mov	r1, r6
    c0fa:	a87a      	add	r0, sp, #488	; 0x1e8
    c0fc:	f7f6 ff28 	bl	2f50 <memcpy>
    c100:	693b      	ldr	r3, [r7, #16]
    c102:	aa7a      	add	r2, sp, #488	; 0x1e8
    c104:	4639      	mov	r1, r7
    c106:	4650      	mov	r0, sl
    c108:	4798      	blx	r3
    c10a:	9b88      	ldr	r3, [sp, #544]	; 0x220
    c10c:	6473      	str	r3, [r6, #68]	; 0x44
    c10e:	4621      	mov	r1, r4
    c110:	e9cd 6900 	strd	r6, r9, [sp]
    c114:	4605      	mov	r5, r0
    c116:	463b      	mov	r3, r7
    c118:	463a      	mov	r2, r7
    c11a:	2001      	movs	r0, #1
    c11c:	47c0      	blx	r8
    c11e:	4604      	mov	r4, r0
    c120:	b9e0      	cbnz	r0, c15c <unwind_phase2_forced+0xac>
    c122:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    c126:	a97a      	add	r1, sp, #488	; 0x1e8
    c128:	4630      	mov	r0, r6
    c12a:	f7f6 ff11 	bl	2f50 <memcpy>
    c12e:	2d08      	cmp	r5, #8
    c130:	d11a      	bne.n	c168 <unwind_phase2_forced+0xb8>
    c132:	6c31      	ldr	r1, [r6, #64]	; 0x40
    c134:	4638      	mov	r0, r7
    c136:	f7ff ff1d 	bl	bf74 <get_eit_entry>
    c13a:	3409      	adds	r4, #9
    c13c:	fa5f fa84 	uxtb.w	sl, r4
    c140:	4605      	mov	r5, r0
    c142:	2800      	cmp	r0, #0
    c144:	d0d4      	beq.n	c0f0 <unwind_phase2_forced+0x40>
    c146:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    c148:	6473      	str	r3, [r6, #68]	; 0x44
    c14a:	463a      	mov	r2, r7
    c14c:	e9cd 6900 	strd	r6, r9, [sp]
    c150:	463b      	mov	r3, r7
    c152:	f04a 0110 	orr.w	r1, sl, #16
    c156:	2001      	movs	r0, #1
    c158:	47c0      	blx	r8
    c15a:	b100      	cbz	r0, c15e <unwind_phase2_forced+0xae>
    c15c:	2509      	movs	r5, #9
    c15e:	4628      	mov	r0, r5
    c160:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c168:	2d07      	cmp	r5, #7
    c16a:	d1f7      	bne.n	c15c <unwind_phase2_forced+0xac>
    c16c:	4620      	mov	r0, r4
    c16e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    c170:	f7ff ff7e 	bl	c070 <_Unwind_DebugHook>
    c174:	a803      	add	r0, sp, #12
    c176:	f000 fbb5 	bl	c8e4 <__restore_core_regs>
    c17a:	bf00      	nop

0000c17c <__gnu_Unwind_RaiseException>:
    c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c17e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    c180:	640b      	str	r3, [r1, #64]	; 0x40
    c182:	f101 0c04 	add.w	ip, r1, #4
    c186:	460e      	mov	r6, r1
    c188:	4605      	mov	r5, r0
    c18a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c18e:	b0f9      	sub	sp, #484	; 0x1e4
    c190:	ac01      	add	r4, sp, #4
    c192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c194:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c19a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c19e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c1a0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    c1a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c1a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    c1ac:	9700      	str	r7, [sp, #0]
    c1ae:	e006      	b.n	c1be <__gnu_Unwind_RaiseException+0x42>
    c1b0:	692b      	ldr	r3, [r5, #16]
    c1b2:	466a      	mov	r2, sp
    c1b4:	4629      	mov	r1, r5
    c1b6:	4798      	blx	r3
    c1b8:	2808      	cmp	r0, #8
    c1ba:	4604      	mov	r4, r0
    c1bc:	d108      	bne.n	c1d0 <__gnu_Unwind_RaiseException+0x54>
    c1be:	9910      	ldr	r1, [sp, #64]	; 0x40
    c1c0:	4628      	mov	r0, r5
    c1c2:	f7ff fed7 	bl	bf74 <get_eit_entry>
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d0f2      	beq.n	c1b0 <__gnu_Unwind_RaiseException+0x34>
    c1ca:	2009      	movs	r0, #9
    c1cc:	b079      	add	sp, #484	; 0x1e4
    c1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1d0:	4668      	mov	r0, sp
    c1d2:	f7ff ff1b 	bl	c00c <restore_non_core_regs>
    c1d6:	2c06      	cmp	r4, #6
    c1d8:	d1f7      	bne.n	c1ca <__gnu_Unwind_RaiseException+0x4e>
    c1da:	4631      	mov	r1, r6
    c1dc:	4628      	mov	r0, r5
    c1de:	f7ff ff49 	bl	c074 <unwind_phase2>
    c1e2:	bf00      	nop

0000c1e4 <__gnu_Unwind_ForcedUnwind>:
    c1e4:	60c1      	str	r1, [r0, #12]
    c1e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    c1e8:	6182      	str	r2, [r0, #24]
    c1ea:	6419      	str	r1, [r3, #64]	; 0x40
    c1ec:	2200      	movs	r2, #0
    c1ee:	4619      	mov	r1, r3
    c1f0:	f7ff bf5e 	b.w	c0b0 <unwind_phase2_forced>

0000c1f4 <__gnu_Unwind_Resume>:
    c1f4:	b570      	push	{r4, r5, r6, lr}
    c1f6:	68c6      	ldr	r6, [r0, #12]
    c1f8:	6943      	ldr	r3, [r0, #20]
    c1fa:	640b      	str	r3, [r1, #64]	; 0x40
    c1fc:	b9ae      	cbnz	r6, c22a <__gnu_Unwind_Resume+0x36>
    c1fe:	6903      	ldr	r3, [r0, #16]
    c200:	460a      	mov	r2, r1
    c202:	4604      	mov	r4, r0
    c204:	460d      	mov	r5, r1
    c206:	4601      	mov	r1, r0
    c208:	2002      	movs	r0, #2
    c20a:	4798      	blx	r3
    c20c:	2807      	cmp	r0, #7
    c20e:	d005      	beq.n	c21c <__gnu_Unwind_Resume+0x28>
    c210:	2808      	cmp	r0, #8
    c212:	d10f      	bne.n	c234 <__gnu_Unwind_Resume+0x40>
    c214:	4629      	mov	r1, r5
    c216:	4620      	mov	r0, r4
    c218:	f7ff ff2c 	bl	c074 <unwind_phase2>
    c21c:	4630      	mov	r0, r6
    c21e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c220:	f7ff ff26 	bl	c070 <_Unwind_DebugHook>
    c224:	1d28      	adds	r0, r5, #4
    c226:	f000 fb5d 	bl	c8e4 <__restore_core_regs>
    c22a:	2201      	movs	r2, #1
    c22c:	f7ff ff40 	bl	c0b0 <unwind_phase2_forced>
    c230:	f7f7 f856 	bl	32e0 <abort>
    c234:	f7f7 f854 	bl	32e0 <abort>

0000c238 <__gnu_Unwind_Resume_or_Rethrow>:
    c238:	68c2      	ldr	r2, [r0, #12]
    c23a:	b122      	cbz	r2, c246 <__gnu_Unwind_Resume_or_Rethrow+0xe>
    c23c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    c23e:	640a      	str	r2, [r1, #64]	; 0x40
    c240:	2200      	movs	r2, #0
    c242:	f7ff bf35 	b.w	c0b0 <unwind_phase2_forced>
    c246:	f7ff bf99 	b.w	c17c <__gnu_Unwind_RaiseException>
    c24a:	bf00      	nop

0000c24c <_Unwind_Complete>:
    c24c:	4770      	bx	lr
    c24e:	bf00      	nop

0000c250 <_Unwind_DeleteException>:
    c250:	6883      	ldr	r3, [r0, #8]
    c252:	4601      	mov	r1, r0
    c254:	b10b      	cbz	r3, c25a <_Unwind_DeleteException+0xa>
    c256:	2001      	movs	r0, #1
    c258:	4718      	bx	r3
    c25a:	4770      	bx	lr

0000c25c <_Unwind_VRS_Get>:
    c25c:	2901      	cmp	r1, #1
    c25e:	d012      	beq.n	c286 <_Unwind_VRS_Get+0x2a>
    c260:	d809      	bhi.n	c276 <_Unwind_VRS_Get+0x1a>
    c262:	b973      	cbnz	r3, c282 <_Unwind_VRS_Get+0x26>
    c264:	2a0f      	cmp	r2, #15
    c266:	d80c      	bhi.n	c282 <_Unwind_VRS_Get+0x26>
    c268:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    c26c:	4618      	mov	r0, r3
    c26e:	6853      	ldr	r3, [r2, #4]
    c270:	9a00      	ldr	r2, [sp, #0]
    c272:	6013      	str	r3, [r2, #0]
    c274:	4770      	bx	lr
    c276:	3903      	subs	r1, #3
    c278:	2901      	cmp	r1, #1
    c27a:	bf94      	ite	ls
    c27c:	2001      	movls	r0, #1
    c27e:	2002      	movhi	r0, #2
    c280:	4770      	bx	lr
    c282:	2002      	movs	r0, #2
    c284:	4770      	bx	lr
    c286:	4608      	mov	r0, r1
    c288:	4770      	bx	lr
    c28a:	bf00      	nop

0000c28c <_Unwind_GetGR>:
    c28c:	b500      	push	{lr}
    c28e:	b085      	sub	sp, #20
    c290:	460a      	mov	r2, r1
    c292:	2300      	movs	r3, #0
    c294:	a903      	add	r1, sp, #12
    c296:	9100      	str	r1, [sp, #0]
    c298:	4619      	mov	r1, r3
    c29a:	f7ff ffdf 	bl	c25c <_Unwind_VRS_Get>
    c29e:	9803      	ldr	r0, [sp, #12]
    c2a0:	b005      	add	sp, #20
    c2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a6:	bf00      	nop

0000c2a8 <_Unwind_VRS_Set>:
    c2a8:	2901      	cmp	r1, #1
    c2aa:	d012      	beq.n	c2d2 <_Unwind_VRS_Set+0x2a>
    c2ac:	d809      	bhi.n	c2c2 <_Unwind_VRS_Set+0x1a>
    c2ae:	b973      	cbnz	r3, c2ce <_Unwind_VRS_Set+0x26>
    c2b0:	2a0f      	cmp	r2, #15
    c2b2:	d80c      	bhi.n	c2ce <_Unwind_VRS_Set+0x26>
    c2b4:	9900      	ldr	r1, [sp, #0]
    c2b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    c2ba:	6809      	ldr	r1, [r1, #0]
    c2bc:	6051      	str	r1, [r2, #4]
    c2be:	4618      	mov	r0, r3
    c2c0:	4770      	bx	lr
    c2c2:	3903      	subs	r1, #3
    c2c4:	2901      	cmp	r1, #1
    c2c6:	bf94      	ite	ls
    c2c8:	2001      	movls	r0, #1
    c2ca:	2002      	movhi	r0, #2
    c2cc:	4770      	bx	lr
    c2ce:	2002      	movs	r0, #2
    c2d0:	4770      	bx	lr
    c2d2:	4608      	mov	r0, r1
    c2d4:	4770      	bx	lr
    c2d6:	bf00      	nop

0000c2d8 <_Unwind_SetGR>:
    c2d8:	b510      	push	{r4, lr}
    c2da:	b084      	sub	sp, #16
    c2dc:	2300      	movs	r3, #0
    c2de:	ac03      	add	r4, sp, #12
    c2e0:	9203      	str	r2, [sp, #12]
    c2e2:	9400      	str	r4, [sp, #0]
    c2e4:	460a      	mov	r2, r1
    c2e6:	4619      	mov	r1, r3
    c2e8:	f7ff ffde 	bl	c2a8 <_Unwind_VRS_Set>
    c2ec:	b004      	add	sp, #16
    c2ee:	bd10      	pop	{r4, pc}

0000c2f0 <__gnu_Unwind_Backtrace>:
    c2f0:	b570      	push	{r4, r5, r6, lr}
    c2f2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    c2f4:	6413      	str	r3, [r2, #64]	; 0x40
    c2f6:	f102 0c04 	add.w	ip, r2, #4
    c2fa:	4605      	mov	r5, r0
    c2fc:	460c      	mov	r4, r1
    c2fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c302:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
    c306:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
    c30a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    c30e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    c316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c31a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    c31e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    c322:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    c326:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    c32a:	9616      	str	r6, [sp, #88]	; 0x58
    c32c:	e010      	b.n	c350 <__gnu_Unwind_Backtrace+0x60>
    c32e:	f7ff ffd3 	bl	c2d8 <_Unwind_SetGR>
    c332:	4621      	mov	r1, r4
    c334:	a816      	add	r0, sp, #88	; 0x58
    c336:	47a8      	blx	r5
    c338:	4603      	mov	r3, r0
    c33a:	aa16      	add	r2, sp, #88	; 0x58
    c33c:	4669      	mov	r1, sp
    c33e:	2008      	movs	r0, #8
    c340:	b983      	cbnz	r3, c364 <__gnu_Unwind_Backtrace+0x74>
    c342:	9b04      	ldr	r3, [sp, #16]
    c344:	4798      	blx	r3
    c346:	2805      	cmp	r0, #5
    c348:	4606      	mov	r6, r0
    c34a:	d00c      	beq.n	c366 <__gnu_Unwind_Backtrace+0x76>
    c34c:	2809      	cmp	r0, #9
    c34e:	d009      	beq.n	c364 <__gnu_Unwind_Backtrace+0x74>
    c350:	9926      	ldr	r1, [sp, #152]	; 0x98
    c352:	4668      	mov	r0, sp
    c354:	f7ff fe0e 	bl	bf74 <get_eit_entry>
    c358:	4603      	mov	r3, r0
    c35a:	466a      	mov	r2, sp
    c35c:	210c      	movs	r1, #12
    c35e:	a816      	add	r0, sp, #88	; 0x58
    c360:	2b00      	cmp	r3, #0
    c362:	d0e4      	beq.n	c32e <__gnu_Unwind_Backtrace+0x3e>
    c364:	2609      	movs	r6, #9
    c366:	a816      	add	r0, sp, #88	; 0x58
    c368:	f7ff fe50 	bl	c00c <restore_non_core_regs>
    c36c:	4630      	mov	r0, r6
    c36e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
    c372:	bd70      	pop	{r4, r5, r6, pc}

0000c374 <__gnu_unwind_pr_common>:
    c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c378:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    c37a:	b089      	sub	sp, #36	; 0x24
    c37c:	461e      	mov	r6, r3
    c37e:	f854 3b04 	ldr.w	r3, [r4], #4
    c382:	9406      	str	r4, [sp, #24]
    c384:	460d      	mov	r5, r1
    c386:	4617      	mov	r7, r2
    c388:	f000 0803 	and.w	r8, r0, #3
    c38c:	2e00      	cmp	r6, #0
    c38e:	d079      	beq.n	c484 <__gnu_unwind_pr_common+0x110>
    c390:	0c1a      	lsrs	r2, r3, #16
    c392:	f88d 201d 	strb.w	r2, [sp, #29]
    c396:	041b      	lsls	r3, r3, #16
    c398:	b2d2      	uxtb	r2, r2
    c39a:	9305      	str	r3, [sp, #20]
    c39c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    c3a0:	2302      	movs	r3, #2
    c3a2:	f88d 301c 	strb.w	r3, [sp, #28]
    c3a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    c3a8:	f1b8 0f02 	cmp.w	r8, #2
    c3ac:	bf08      	it	eq
    c3ae:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    c3b0:	f013 0301 	ands.w	r3, r3, #1
    c3b4:	d00c      	beq.n	c3d0 <__gnu_unwind_pr_common+0x5c>
    c3b6:	a905      	add	r1, sp, #20
    c3b8:	4638      	mov	r0, r7
    c3ba:	f000 fb95 	bl	cae8 <__gnu_unwind_execute>
    c3be:	b918      	cbnz	r0, c3c8 <__gnu_unwind_pr_common+0x54>
    c3c0:	2008      	movs	r0, #8
    c3c2:	b009      	add	sp, #36	; 0x24
    c3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3c8:	2009      	movs	r0, #9
    c3ca:	b009      	add	sp, #36	; 0x24
    c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3d0:	f8d4 a000 	ldr.w	sl, [r4]
    c3d4:	f1ba 0f00 	cmp.w	sl, #0
    c3d8:	d0ed      	beq.n	c3b6 <__gnu_unwind_pr_common+0x42>
    c3da:	9301      	str	r3, [sp, #4]
    c3dc:	f000 0308 	and.w	r3, r0, #8
    c3e0:	9302      	str	r3, [sp, #8]
    c3e2:	2e02      	cmp	r6, #2
    c3e4:	d04a      	beq.n	c47c <__gnu_unwind_pr_common+0x108>
    c3e6:	f8b4 a000 	ldrh.w	sl, [r4]
    c3ea:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    c3ee:	3404      	adds	r4, #4
    c3f0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    c3f2:	f029 0b01 	bic.w	fp, r9, #1
    c3f6:	210f      	movs	r1, #15
    c3f8:	4638      	mov	r0, r7
    c3fa:	449b      	add	fp, r3
    c3fc:	f7ff ff46 	bl	c28c <_Unwind_GetGR>
    c400:	4583      	cmp	fp, r0
    c402:	d839      	bhi.n	c478 <__gnu_unwind_pr_common+0x104>
    c404:	f02a 0201 	bic.w	r2, sl, #1
    c408:	445a      	add	r2, fp
    c40a:	4282      	cmp	r2, r0
    c40c:	bf94      	ite	ls
    c40e:	2200      	movls	r2, #0
    c410:	2201      	movhi	r2, #1
    c412:	ea4f 0349 	mov.w	r3, r9, lsl #1
    c416:	f003 0302 	and.w	r3, r3, #2
    c41a:	f00a 0a01 	and.w	sl, sl, #1
    c41e:	ea43 030a 	orr.w	r3, r3, sl
    c422:	2b01      	cmp	r3, #1
    c424:	d04b      	beq.n	c4be <__gnu_unwind_pr_common+0x14a>
    c426:	2b02      	cmp	r3, #2
    c428:	d032      	beq.n	c490 <__gnu_unwind_pr_common+0x11c>
    c42a:	2b00      	cmp	r3, #0
    c42c:	d1cc      	bne.n	c3c8 <__gnu_unwind_pr_common+0x54>
    c42e:	f1b8 0f00 	cmp.w	r8, #0
    c432:	d002      	beq.n	c43a <__gnu_unwind_pr_common+0xc6>
    c434:	2a00      	cmp	r2, #0
    c436:	f040 80cd 	bne.w	c5d4 <__gnu_unwind_pr_common+0x260>
    c43a:	3404      	adds	r4, #4
    c43c:	f8d4 a000 	ldr.w	sl, [r4]
    c440:	f1ba 0f00 	cmp.w	sl, #0
    c444:	d1cd      	bne.n	c3e2 <__gnu_unwind_pr_common+0x6e>
    c446:	a905      	add	r1, sp, #20
    c448:	4638      	mov	r0, r7
    c44a:	f000 fb4d 	bl	cae8 <__gnu_unwind_execute>
    c44e:	2800      	cmp	r0, #0
    c450:	d1ba      	bne.n	c3c8 <__gnu_unwind_pr_common+0x54>
    c452:	9b01      	ldr	r3, [sp, #4]
    c454:	2b00      	cmp	r3, #0
    c456:	d0b3      	beq.n	c3c0 <__gnu_unwind_pr_common+0x4c>
    c458:	210f      	movs	r1, #15
    c45a:	4638      	mov	r0, r7
    c45c:	f7ff ff16 	bl	c28c <_Unwind_GetGR>
    c460:	210e      	movs	r1, #14
    c462:	4602      	mov	r2, r0
    c464:	4638      	mov	r0, r7
    c466:	f7ff ff37 	bl	c2d8 <_Unwind_SetGR>
    c46a:	4638      	mov	r0, r7
    c46c:	4a6a      	ldr	r2, [pc, #424]	; (c618 <__gnu_unwind_pr_common+0x2a4>)
    c46e:	210f      	movs	r1, #15
    c470:	f7ff ff32 	bl	c2d8 <_Unwind_SetGR>
    c474:	2007      	movs	r0, #7
    c476:	e7a8      	b.n	c3ca <__gnu_unwind_pr_common+0x56>
    c478:	2200      	movs	r2, #0
    c47a:	e7ca      	b.n	c412 <__gnu_unwind_pr_common+0x9e>
    c47c:	f8d4 9004 	ldr.w	r9, [r4, #4]
    c480:	3408      	adds	r4, #8
    c482:	e7b5      	b.n	c3f0 <__gnu_unwind_pr_common+0x7c>
    c484:	021b      	lsls	r3, r3, #8
    c486:	9305      	str	r3, [sp, #20]
    c488:	f88d 601d 	strb.w	r6, [sp, #29]
    c48c:	2303      	movs	r3, #3
    c48e:	e788      	b.n	c3a2 <__gnu_unwind_pr_common+0x2e>
    c490:	f8d4 9000 	ldr.w	r9, [r4]
    c494:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
    c498:	f1b8 0f00 	cmp.w	r8, #0
    c49c:	d146      	bne.n	c52c <__gnu_unwind_pr_common+0x1b8>
    c49e:	b12a      	cbz	r2, c4ac <__gnu_unwind_pr_common+0x138>
    c4a0:	9b02      	ldr	r3, [sp, #8]
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d05b      	beq.n	c55e <__gnu_unwind_pr_common+0x1ea>
    c4a6:	f1bb 0f00 	cmp.w	fp, #0
    c4aa:	d073      	beq.n	c594 <__gnu_unwind_pr_common+0x220>
    c4ac:	f1b9 0f00 	cmp.w	r9, #0
    c4b0:	da00      	bge.n	c4b4 <__gnu_unwind_pr_common+0x140>
    c4b2:	3404      	adds	r4, #4
    c4b4:	f10b 0b01 	add.w	fp, fp, #1
    c4b8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    c4bc:	e7be      	b.n	c43c <__gnu_unwind_pr_common+0xc8>
    c4be:	f1b8 0f00 	cmp.w	r8, #0
    c4c2:	d119      	bne.n	c4f8 <__gnu_unwind_pr_common+0x184>
    c4c4:	b1b2      	cbz	r2, c4f4 <__gnu_unwind_pr_common+0x180>
    c4c6:	6861      	ldr	r1, [r4, #4]
    c4c8:	6822      	ldr	r2, [r4, #0]
    c4ca:	1c88      	adds	r0, r1, #2
    c4cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    c4d0:	f43f af7a 	beq.w	c3c8 <__gnu_unwind_pr_common+0x54>
    c4d4:	f105 0358 	add.w	r3, r5, #88	; 0x58
    c4d8:	3101      	adds	r1, #1
    c4da:	9304      	str	r3, [sp, #16]
    c4dc:	f000 808e 	beq.w	c5fc <__gnu_unwind_pr_common+0x288>
    c4e0:	1d20      	adds	r0, r4, #4
    c4e2:	f7ff fdbf 	bl	c064 <_Unwind_decode_typeinfo_ptr.constprop.0>
    c4e6:	ab04      	add	r3, sp, #16
    c4e8:	4601      	mov	r1, r0
    c4ea:	4628      	mov	r0, r5
    c4ec:	f7f8 fc7a 	bl	4de4 <__cxa_type_match>
    c4f0:	2800      	cmp	r0, #0
    c4f2:	d159      	bne.n	c5a8 <__gnu_unwind_pr_common+0x234>
    c4f4:	3408      	adds	r4, #8
    c4f6:	e7a1      	b.n	c43c <__gnu_unwind_pr_common+0xc8>
    c4f8:	210d      	movs	r1, #13
    c4fa:	4638      	mov	r0, r7
    c4fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
    c500:	f7ff fec4 	bl	c28c <_Unwind_GetGR>
    c504:	4581      	cmp	r9, r0
    c506:	d1f5      	bne.n	c4f4 <__gnu_unwind_pr_common+0x180>
    c508:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c50a:	429c      	cmp	r4, r3
    c50c:	d1f2      	bne.n	c4f4 <__gnu_unwind_pr_common+0x180>
    c50e:	4620      	mov	r0, r4
    c510:	f7ff fce4 	bl	bedc <selfrel_offset31>
    c514:	210f      	movs	r1, #15
    c516:	4602      	mov	r2, r0
    c518:	4638      	mov	r0, r7
    c51a:	f7ff fedd 	bl	c2d8 <_Unwind_SetGR>
    c51e:	4638      	mov	r0, r7
    c520:	462a      	mov	r2, r5
    c522:	2100      	movs	r1, #0
    c524:	f7ff fed8 	bl	c2d8 <_Unwind_SetGR>
    c528:	2007      	movs	r0, #7
    c52a:	e74e      	b.n	c3ca <__gnu_unwind_pr_common+0x56>
    c52c:	210d      	movs	r1, #13
    c52e:	4638      	mov	r0, r7
    c530:	f8d5 a020 	ldr.w	sl, [r5, #32]
    c534:	f7ff feaa 	bl	c28c <_Unwind_GetGR>
    c538:	4582      	cmp	sl, r0
    c53a:	d1b7      	bne.n	c4ac <__gnu_unwind_pr_common+0x138>
    c53c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c53e:	429c      	cmp	r4, r3
    c540:	d1b4      	bne.n	c4ac <__gnu_unwind_pr_common+0x138>
    c542:	2304      	movs	r3, #4
    c544:	2200      	movs	r2, #0
    c546:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
    c54a:	18e3      	adds	r3, r4, r3
    c54c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    c550:	636b      	str	r3, [r5, #52]	; 0x34
    c552:	6823      	ldr	r3, [r4, #0]
    c554:	2b00      	cmp	r3, #0
    c556:	db59      	blt.n	c60c <__gnu_unwind_pr_common+0x298>
    c558:	2301      	movs	r3, #1
    c55a:	9301      	str	r3, [sp, #4]
    c55c:	e7aa      	b.n	c4b4 <__gnu_unwind_pr_common+0x140>
    c55e:	4699      	mov	r9, r3
    c560:	f105 0358 	add.w	r3, r5, #88	; 0x58
    c564:	f8cd 800c 	str.w	r8, [sp, #12]
    c568:	f104 0a04 	add.w	sl, r4, #4
    c56c:	46b0      	mov	r8, r6
    c56e:	461e      	mov	r6, r3
    c570:	e00e      	b.n	c590 <__gnu_unwind_pr_common+0x21c>
    c572:	4650      	mov	r0, sl
    c574:	9604      	str	r6, [sp, #16]
    c576:	f7ff fd75 	bl	c064 <_Unwind_decode_typeinfo_ptr.constprop.0>
    c57a:	2200      	movs	r2, #0
    c57c:	4601      	mov	r1, r0
    c57e:	ab04      	add	r3, sp, #16
    c580:	4628      	mov	r0, r5
    c582:	f109 0901 	add.w	r9, r9, #1
    c586:	f10a 0a04 	add.w	sl, sl, #4
    c58a:	f7f8 fc2b 	bl	4de4 <__cxa_type_match>
    c58e:	b9d8      	cbnz	r0, c5c8 <__gnu_unwind_pr_common+0x254>
    c590:	45d9      	cmp	r9, fp
    c592:	d1ee      	bne.n	c572 <__gnu_unwind_pr_common+0x1fe>
    c594:	210d      	movs	r1, #13
    c596:	4638      	mov	r0, r7
    c598:	f7ff fe78 	bl	c28c <_Unwind_GetGR>
    c59c:	9b04      	ldr	r3, [sp, #16]
    c59e:	6228      	str	r0, [r5, #32]
    c5a0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    c5a4:	2006      	movs	r0, #6
    c5a6:	e710      	b.n	c3ca <__gnu_unwind_pr_common+0x56>
    c5a8:	4681      	mov	r9, r0
    c5aa:	210d      	movs	r1, #13
    c5ac:	4638      	mov	r0, r7
    c5ae:	f7ff fe6d 	bl	c28c <_Unwind_GetGR>
    c5b2:	f1b9 0f02 	cmp.w	r9, #2
    c5b6:	bf04      	itt	eq
    c5b8:	462b      	moveq	r3, r5
    c5ba:	9a04      	ldreq	r2, [sp, #16]
    c5bc:	6228      	str	r0, [r5, #32]
    c5be:	bf14      	ite	ne
    c5c0:	9b04      	ldrne	r3, [sp, #16]
    c5c2:	f843 2f2c 	streq.w	r2, [r3, #44]!
    c5c6:	e7eb      	b.n	c5a0 <__gnu_unwind_pr_common+0x22c>
    c5c8:	4646      	mov	r6, r8
    c5ca:	f8d4 9000 	ldr.w	r9, [r4]
    c5ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c5d2:	e76b      	b.n	c4ac <__gnu_unwind_pr_common+0x138>
    c5d4:	4620      	mov	r0, r4
    c5d6:	f7ff fc81 	bl	bedc <selfrel_offset31>
    c5da:	3404      	adds	r4, #4
    c5dc:	4602      	mov	r2, r0
    c5de:	63ac      	str	r4, [r5, #56]	; 0x38
    c5e0:	4628      	mov	r0, r5
    c5e2:	4614      	mov	r4, r2
    c5e4:	f7f8 fc56 	bl	4e94 <__cxa_begin_cleanup>
    c5e8:	2800      	cmp	r0, #0
    c5ea:	f43f aeed 	beq.w	c3c8 <__gnu_unwind_pr_common+0x54>
    c5ee:	4638      	mov	r0, r7
    c5f0:	4622      	mov	r2, r4
    c5f2:	210f      	movs	r1, #15
    c5f4:	f7ff fe70 	bl	c2d8 <_Unwind_SetGR>
    c5f8:	2007      	movs	r0, #7
    c5fa:	e6e6      	b.n	c3ca <__gnu_unwind_pr_common+0x56>
    c5fc:	210d      	movs	r1, #13
    c5fe:	4638      	mov	r0, r7
    c600:	9301      	str	r3, [sp, #4]
    c602:	f7ff fe43 	bl	c28c <_Unwind_GetGR>
    c606:	9b01      	ldr	r3, [sp, #4]
    c608:	6228      	str	r0, [r5, #32]
    c60a:	e7c9      	b.n	c5a0 <__gnu_unwind_pr_common+0x22c>
    c60c:	f10b 0001 	add.w	r0, fp, #1
    c610:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    c614:	e77c      	b.n	c510 <__gnu_unwind_pr_common+0x19c>
    c616:	bf00      	nop
    c618:	0000bcd5 	.word	0x0000bcd5

0000c61c <__aeabi_unwind_cpp_pr0>:
    c61c:	2300      	movs	r3, #0
    c61e:	f7ff bea9 	b.w	c374 <__gnu_unwind_pr_common>
    c622:	bf00      	nop

0000c624 <__aeabi_unwind_cpp_pr1>:
    c624:	2301      	movs	r3, #1
    c626:	f7ff bea5 	b.w	c374 <__gnu_unwind_pr_common>
    c62a:	bf00      	nop

0000c62c <__aeabi_unwind_cpp_pr2>:
    c62c:	2302      	movs	r3, #2
    c62e:	f7ff bea1 	b.w	c374 <__gnu_unwind_pr_common>
    c632:	bf00      	nop

0000c634 <_Unwind_VRS_Pop>:
    c634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c638:	4606      	mov	r6, r0
    c63a:	b0c3      	sub	sp, #268	; 0x10c
    c63c:	4691      	mov	r9, r2
    c63e:	461c      	mov	r4, r3
    c640:	2904      	cmp	r1, #4
    c642:	f200 809b 	bhi.w	c77c <_Unwind_VRS_Pop+0x148>
    c646:	e8df f001 	tbb	[pc, r1]
    c64a:	567b      	.short	0x567b
    c64c:	2e99      	.short	0x2e99
    c64e:	03          	.byte	0x03
    c64f:	00          	.byte	0x00
    c650:	2c00      	cmp	r4, #0
    c652:	f040 8093 	bne.w	c77c <_Unwind_VRS_Pop+0x148>
    c656:	2a10      	cmp	r2, #16
    c658:	f200 8090 	bhi.w	c77c <_Unwind_VRS_Pop+0x148>
    c65c:	6803      	ldr	r3, [r0, #0]
    c65e:	06dc      	lsls	r4, r3, #27
    c660:	f100 80f3 	bmi.w	c84a <_Unwind_VRS_Pop+0x216>
    c664:	af20      	add	r7, sp, #128	; 0x80
    c666:	4638      	mov	r0, r7
    c668:	f000 f9ae 	bl	c9c8 <__gnu_Unwind_Save_WMMXC>
    c66c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    c66e:	4639      	mov	r1, r7
    c670:	2300      	movs	r3, #0
    c672:	f04f 0c01 	mov.w	ip, #1
    c676:	fa0c f203 	lsl.w	r2, ip, r3
    c67a:	ea12 0f09 	tst.w	r2, r9
    c67e:	4620      	mov	r0, r4
    c680:	f103 0301 	add.w	r3, r3, #1
    c684:	d003      	beq.n	c68e <_Unwind_VRS_Pop+0x5a>
    c686:	f850 2b04 	ldr.w	r2, [r0], #4
    c68a:	600a      	str	r2, [r1, #0]
    c68c:	4604      	mov	r4, r0
    c68e:	2b04      	cmp	r3, #4
    c690:	f101 0104 	add.w	r1, r1, #4
    c694:	d1ef      	bne.n	c676 <_Unwind_VRS_Pop+0x42>
    c696:	4638      	mov	r0, r7
    c698:	63b4      	str	r4, [r6, #56]	; 0x38
    c69a:	f000 f98b 	bl	c9b4 <__gnu_Unwind_Restore_WMMXC>
    c69e:	2000      	movs	r0, #0
    c6a0:	b043      	add	sp, #268	; 0x10c
    c6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c6a6:	2c03      	cmp	r4, #3
    c6a8:	d168      	bne.n	c77c <_Unwind_VRS_Pop+0x148>
    c6aa:	b294      	uxth	r4, r2
    c6ac:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    c6b0:	2b10      	cmp	r3, #16
    c6b2:	ea4f 4912 	mov.w	r9, r2, lsr #16
    c6b6:	d861      	bhi.n	c77c <_Unwind_VRS_Pop+0x148>
    c6b8:	6803      	ldr	r3, [r0, #0]
    c6ba:	071d      	lsls	r5, r3, #28
    c6bc:	f100 80cd 	bmi.w	c85a <_Unwind_VRS_Pop+0x226>
    c6c0:	af20      	add	r7, sp, #128	; 0x80
    c6c2:	4638      	mov	r0, r7
    c6c4:	f000 f954 	bl	c970 <__gnu_Unwind_Save_WMMXD>
    c6c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    c6ca:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
    c6ce:	b154      	cbz	r4, c6e6 <_Unwind_VRS_Pop+0xb2>
    c6d0:	460b      	mov	r3, r1
    c6d2:	1ad0      	subs	r0, r2, r3
    c6d4:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    c6d8:	00e4      	lsls	r4, r4, #3
    c6da:	581d      	ldr	r5, [r3, r0]
    c6dc:	f843 5b04 	str.w	r5, [r3], #4
    c6e0:	428b      	cmp	r3, r1
    c6e2:	d1fa      	bne.n	c6da <_Unwind_VRS_Pop+0xa6>
    c6e4:	4422      	add	r2, r4
    c6e6:	4638      	mov	r0, r7
    c6e8:	63b2      	str	r2, [r6, #56]	; 0x38
    c6ea:	f000 f91f 	bl	c92c <__gnu_Unwind_Restore_WMMXD>
    c6ee:	2000      	movs	r0, #0
    c6f0:	b043      	add	sp, #268	; 0x10c
    c6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c6f6:	2c01      	cmp	r4, #1
    c6f8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c6fc:	fa1f f982 	uxth.w	r9, r2
    c700:	d038      	beq.n	c774 <_Unwind_VRS_Pop+0x140>
    c702:	2c05      	cmp	r4, #5
    c704:	d13a      	bne.n	c77c <_Unwind_VRS_Pop+0x148>
    c706:	eb08 0309 	add.w	r3, r8, r9
    c70a:	2b20      	cmp	r3, #32
    c70c:	d836      	bhi.n	c77c <_Unwind_VRS_Pop+0x148>
    c70e:	f1b8 0f0f 	cmp.w	r8, #15
    c712:	d976      	bls.n	c802 <_Unwind_VRS_Pop+0x1ce>
    c714:	f1b9 0f00 	cmp.w	r9, #0
    c718:	f040 8083 	bne.w	c822 <_Unwind_VRS_Pop+0x1ee>
    c71c:	2b0f      	cmp	r3, #15
    c71e:	d80b      	bhi.n	c738 <_Unwind_VRS_Pop+0x104>
    c720:	6833      	ldr	r3, [r6, #0]
    c722:	07d8      	lsls	r0, r3, #31
    c724:	d508      	bpl.n	c738 <_Unwind_VRS_Pop+0x104>
    c726:	4630      	mov	r0, r6
    c728:	f023 0301 	bic.w	r3, r3, #1
    c72c:	f043 0302 	orr.w	r3, r3, #2
    c730:	f840 3b48 	str.w	r3, [r0], #72
    c734:	f000 f8ee 	bl	c914 <__gnu_Unwind_Save_VFP_D>
    c738:	2000      	movs	r0, #0
    c73a:	b043      	add	sp, #268	; 0x10c
    c73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c740:	b9e4      	cbnz	r4, c77c <_Unwind_VRS_Pop+0x148>
    c742:	6b87      	ldr	r7, [r0, #56]	; 0x38
    c744:	4623      	mov	r3, r4
    c746:	fa1f fc82 	uxth.w	ip, r2
    c74a:	2001      	movs	r0, #1
    c74c:	1d34      	adds	r4, r6, #4
    c74e:	fa00 f203 	lsl.w	r2, r0, r3
    c752:	ea12 0f0c 	tst.w	r2, ip
    c756:	4639      	mov	r1, r7
    c758:	d004      	beq.n	c764 <_Unwind_VRS_Pop+0x130>
    c75a:	f851 2b04 	ldr.w	r2, [r1], #4
    c75e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    c762:	460f      	mov	r7, r1
    c764:	3301      	adds	r3, #1
    c766:	2b10      	cmp	r3, #16
    c768:	d1f1      	bne.n	c74e <_Unwind_VRS_Pop+0x11a>
    c76a:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
    c76e:	d1e3      	bne.n	c738 <_Unwind_VRS_Pop+0x104>
    c770:	63b7      	str	r7, [r6, #56]	; 0x38
    c772:	e004      	b.n	c77e <_Unwind_VRS_Pop+0x14a>
    c774:	eb08 0309 	add.w	r3, r8, r9
    c778:	2b10      	cmp	r3, #16
    c77a:	d903      	bls.n	c784 <_Unwind_VRS_Pop+0x150>
    c77c:	2002      	movs	r0, #2
    c77e:	b043      	add	sp, #268	; 0x10c
    c780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c784:	f1b8 0f0f 	cmp.w	r8, #15
    c788:	d8f8      	bhi.n	c77c <_Unwind_VRS_Pop+0x148>
    c78a:	6833      	ldr	r3, [r6, #0]
    c78c:	07da      	lsls	r2, r3, #31
    c78e:	d506      	bpl.n	c79e <_Unwind_VRS_Pop+0x16a>
    c790:	4630      	mov	r0, r6
    c792:	f023 0303 	bic.w	r3, r3, #3
    c796:	f840 3b48 	str.w	r3, [r0], #72
    c79a:	f000 f8b3 	bl	c904 <__gnu_Unwind_Save_VFP>
    c79e:	af20      	add	r7, sp, #128	; 0x80
    c7a0:	4638      	mov	r0, r7
    c7a2:	464d      	mov	r5, r9
    c7a4:	f000 f8ae 	bl	c904 <__gnu_Unwind_Save_VFP>
    c7a8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    c7aa:	2d00      	cmp	r5, #0
    c7ac:	d05e      	beq.n	c86c <_Unwind_VRS_Pop+0x238>
    c7ae:	f04f 0900 	mov.w	r9, #0
    c7b2:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
    c7b6:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
    c7ba:	3904      	subs	r1, #4
    c7bc:	f852 0b04 	ldr.w	r0, [r2], #4
    c7c0:	f841 0f04 	str.w	r0, [r1, #4]!
    c7c4:	429a      	cmp	r2, r3
    c7c6:	d1f9      	bne.n	c7bc <_Unwind_VRS_Pop+0x188>
    c7c8:	f1b9 0f00 	cmp.w	r9, #0
    c7cc:	d054      	beq.n	c878 <_Unwind_VRS_Pop+0x244>
    c7ce:	466f      	mov	r7, sp
    c7d0:	4641      	mov	r1, r8
    c7d2:	2910      	cmp	r1, #16
    c7d4:	bf38      	it	cc
    c7d6:	2110      	movcc	r1, #16
    c7d8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    c7dc:	3984      	subs	r1, #132	; 0x84
    c7de:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
    c7e2:	f853 5b04 	ldr.w	r5, [r3], #4
    c7e6:	f841 5f04 	str.w	r5, [r1, #4]!
    c7ea:	429a      	cmp	r2, r3
    c7ec:	d1f9      	bne.n	c7e2 <_Unwind_VRS_Pop+0x1ae>
    c7ee:	2c01      	cmp	r4, #1
    c7f0:	d03b      	beq.n	c86a <_Unwind_VRS_Pop+0x236>
    c7f2:	f1b8 0f0f 	cmp.w	r8, #15
    c7f6:	63b2      	str	r2, [r6, #56]	; 0x38
    c7f8:	d958      	bls.n	c8ac <_Unwind_VRS_Pop+0x278>
    c7fa:	4638      	mov	r0, r7
    c7fc:	f000 f88e 	bl	c91c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    c800:	e79a      	b.n	c738 <_Unwind_VRS_Pop+0x104>
    c802:	2b10      	cmp	r3, #16
    c804:	d954      	bls.n	c8b0 <_Unwind_VRS_Pop+0x27c>
    c806:	6832      	ldr	r2, [r6, #0]
    c808:	07d7      	lsls	r7, r2, #31
    c80a:	f1a3 0910 	sub.w	r9, r3, #16
    c80e:	d509      	bpl.n	c824 <_Unwind_VRS_Pop+0x1f0>
    c810:	f022 0301 	bic.w	r3, r2, #1
    c814:	4630      	mov	r0, r6
    c816:	f043 0302 	orr.w	r3, r3, #2
    c81a:	f840 3b48 	str.w	r3, [r0], #72
    c81e:	f000 f879 	bl	c914 <__gnu_Unwind_Save_VFP_D>
    c822:	6832      	ldr	r2, [r6, #0]
    c824:	0753      	lsls	r3, r2, #29
    c826:	d439      	bmi.n	c89c <_Unwind_VRS_Pop+0x268>
    c828:	f1b8 0f0f 	cmp.w	r8, #15
    c82c:	d802      	bhi.n	c834 <_Unwind_VRS_Pop+0x200>
    c82e:	a820      	add	r0, sp, #128	; 0x80
    c830:	f000 f870 	bl	c914 <__gnu_Unwind_Save_VFP_D>
    c834:	466f      	mov	r7, sp
    c836:	4638      	mov	r0, r7
    c838:	f1c8 0510 	rsb	r5, r8, #16
    c83c:	f000 f872 	bl	c924 <__gnu_Unwind_Save_VFP_D_16_to_31>
    c840:	2d00      	cmp	r5, #0
    c842:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    c844:	dd28      	ble.n	c898 <_Unwind_VRS_Pop+0x264>
    c846:	af20      	add	r7, sp, #128	; 0x80
    c848:	e7b3      	b.n	c7b2 <_Unwind_VRS_Pop+0x17e>
    c84a:	f023 0310 	bic.w	r3, r3, #16
    c84e:	6003      	str	r3, [r0, #0]
    c850:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
    c854:	f000 f8b8 	bl	c9c8 <__gnu_Unwind_Save_WMMXC>
    c858:	e704      	b.n	c664 <_Unwind_VRS_Pop+0x30>
    c85a:	f023 0308 	bic.w	r3, r3, #8
    c85e:	6003      	str	r3, [r0, #0]
    c860:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    c864:	f000 f884 	bl	c970 <__gnu_Unwind_Save_WMMXD>
    c868:	e72a      	b.n	c6c0 <_Unwind_VRS_Pop+0x8c>
    c86a:	af20      	add	r7, sp, #128	; 0x80
    c86c:	3204      	adds	r2, #4
    c86e:	63b2      	str	r2, [r6, #56]	; 0x38
    c870:	4638      	mov	r0, r7
    c872:	f000 f843 	bl	c8fc <__gnu_Unwind_Restore_VFP>
    c876:	e75f      	b.n	c738 <_Unwind_VRS_Pop+0x104>
    c878:	2c01      	cmp	r4, #1
    c87a:	d0f7      	beq.n	c86c <_Unwind_VRS_Pop+0x238>
    c87c:	f1b8 0f0f 	cmp.w	r8, #15
    c880:	63b2      	str	r2, [r6, #56]	; 0x38
    c882:	f63f af59 	bhi.w	c738 <_Unwind_VRS_Pop+0x104>
    c886:	4638      	mov	r0, r7
    c888:	f000 f840 	bl	c90c <__gnu_Unwind_Restore_VFP_D>
    c88c:	f1b9 0f00 	cmp.w	r9, #0
    c890:	f43f af52 	beq.w	c738 <_Unwind_VRS_Pop+0x104>
    c894:	466f      	mov	r7, sp
    c896:	e7b0      	b.n	c7fa <_Unwind_VRS_Pop+0x1c6>
    c898:	4613      	mov	r3, r2
    c89a:	e799      	b.n	c7d0 <_Unwind_VRS_Pop+0x19c>
    c89c:	4630      	mov	r0, r6
    c89e:	f022 0204 	bic.w	r2, r2, #4
    c8a2:	f840 2bd0 	str.w	r2, [r0], #208
    c8a6:	f000 f83d 	bl	c924 <__gnu_Unwind_Save_VFP_D_16_to_31>
    c8aa:	e7bd      	b.n	c828 <_Unwind_VRS_Pop+0x1f4>
    c8ac:	af20      	add	r7, sp, #128	; 0x80
    c8ae:	e7ea      	b.n	c886 <_Unwind_VRS_Pop+0x252>
    c8b0:	6833      	ldr	r3, [r6, #0]
    c8b2:	07d9      	lsls	r1, r3, #31
    c8b4:	d508      	bpl.n	c8c8 <_Unwind_VRS_Pop+0x294>
    c8b6:	f023 0301 	bic.w	r3, r3, #1
    c8ba:	4630      	mov	r0, r6
    c8bc:	f043 0302 	orr.w	r3, r3, #2
    c8c0:	f840 3b48 	str.w	r3, [r0], #72
    c8c4:	f000 f826 	bl	c914 <__gnu_Unwind_Save_VFP_D>
    c8c8:	af20      	add	r7, sp, #128	; 0x80
    c8ca:	4638      	mov	r0, r7
    c8cc:	464d      	mov	r5, r9
    c8ce:	f000 f821 	bl	c914 <__gnu_Unwind_Save_VFP_D>
    c8d2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    c8d4:	2d00      	cmp	r5, #0
    c8d6:	f47f af6a 	bne.w	c7ae <_Unwind_VRS_Pop+0x17a>
    c8da:	4638      	mov	r0, r7
    c8dc:	f000 f816 	bl	c90c <__gnu_Unwind_Restore_VFP_D>
    c8e0:	e72a      	b.n	c738 <_Unwind_VRS_Pop+0x104>
    c8e2:	bf00      	nop

0000c8e4 <__restore_core_regs>:
    c8e4:	f100 0134 	add.w	r1, r0, #52	; 0x34
    c8e8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    c8ec:	469c      	mov	ip, r3
    c8ee:	46a6      	mov	lr, r4
    c8f0:	f84c 5d04 	str.w	r5, [ip, #-4]!
    c8f4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    c8f8:	46e5      	mov	sp, ip
    c8fa:	bd00      	pop	{pc}

0000c8fc <__gnu_Unwind_Restore_VFP>:
    c8fc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    c900:	4770      	bx	lr
    c902:	bf00      	nop

0000c904 <__gnu_Unwind_Save_VFP>:
    c904:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    c908:	4770      	bx	lr
    c90a:	bf00      	nop

0000c90c <__gnu_Unwind_Restore_VFP_D>:
    c90c:	ec90 0b20 	vldmia	r0, {d0-d15}
    c910:	4770      	bx	lr
    c912:	bf00      	nop

0000c914 <__gnu_Unwind_Save_VFP_D>:
    c914:	ec80 0b20 	vstmia	r0, {d0-d15}
    c918:	4770      	bx	lr
    c91a:	bf00      	nop

0000c91c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    c91c:	ecd0 0b20 	vldmia	r0, {d16-d31}
    c920:	4770      	bx	lr
    c922:	bf00      	nop

0000c924 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    c924:	ecc0 0b20 	vstmia	r0, {d16-d31}
    c928:	4770      	bx	lr
    c92a:	bf00      	nop

0000c92c <__gnu_Unwind_Restore_WMMXD>:
    c92c:	ecf0 0102 	ldfe	f0, [r0], #8
    c930:	ecf0 1102 	ldfe	f1, [r0], #8
    c934:	ecf0 2102 	ldfe	f2, [r0], #8
    c938:	ecf0 3102 	ldfe	f3, [r0], #8
    c93c:	ecf0 4102 	ldfe	f4, [r0], #8
    c940:	ecf0 5102 	ldfe	f5, [r0], #8
    c944:	ecf0 6102 	ldfe	f6, [r0], #8
    c948:	ecf0 7102 	ldfe	f7, [r0], #8
    c94c:	ecf0 8102 	ldfp	f0, [r0], #8
    c950:	ecf0 9102 	ldfp	f1, [r0], #8
    c954:	ecf0 a102 	ldfp	f2, [r0], #8
    c958:	ecf0 b102 	ldfp	f3, [r0], #8
    c95c:	ecf0 c102 	ldfp	f4, [r0], #8
    c960:	ecf0 d102 	ldfp	f5, [r0], #8
    c964:	ecf0 e102 	ldfp	f6, [r0], #8
    c968:	ecf0 f102 	ldfp	f7, [r0], #8
    c96c:	4770      	bx	lr
    c96e:	bf00      	nop

0000c970 <__gnu_Unwind_Save_WMMXD>:
    c970:	ece0 0102 	stfe	f0, [r0], #8
    c974:	ece0 1102 	stfe	f1, [r0], #8
    c978:	ece0 2102 	stfe	f2, [r0], #8
    c97c:	ece0 3102 	stfe	f3, [r0], #8
    c980:	ece0 4102 	stfe	f4, [r0], #8
    c984:	ece0 5102 	stfe	f5, [r0], #8
    c988:	ece0 6102 	stfe	f6, [r0], #8
    c98c:	ece0 7102 	stfe	f7, [r0], #8
    c990:	ece0 8102 	stfp	f0, [r0], #8
    c994:	ece0 9102 	stfp	f1, [r0], #8
    c998:	ece0 a102 	stfp	f2, [r0], #8
    c99c:	ece0 b102 	stfp	f3, [r0], #8
    c9a0:	ece0 c102 	stfp	f4, [r0], #8
    c9a4:	ece0 d102 	stfp	f5, [r0], #8
    c9a8:	ece0 e102 	stfp	f6, [r0], #8
    c9ac:	ece0 f102 	stfp	f7, [r0], #8
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop

0000c9b4 <__gnu_Unwind_Restore_WMMXC>:
    c9b4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    c9b8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    c9bc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    c9c0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    c9c4:	4770      	bx	lr
    c9c6:	bf00      	nop

0000c9c8 <__gnu_Unwind_Save_WMMXC>:
    c9c8:	fca0 8101 	stc2	1, cr8, [r0], #4
    c9cc:	fca0 9101 	stc2	1, cr9, [r0], #4
    c9d0:	fca0 a101 	stc2	1, cr10, [r0], #4
    c9d4:	fca0 b101 	stc2	1, cr11, [r0], #4
    c9d8:	4770      	bx	lr
    c9da:	bf00      	nop

0000c9dc <_Unwind_RaiseException>:
    c9dc:	46ec      	mov	ip, sp
    c9de:	b500      	push	{lr}
    c9e0:	e92d 5000 	stmdb	sp!, {ip, lr}
    c9e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    c9e8:	f04f 0300 	mov.w	r3, #0
    c9ec:	e92d 000c 	stmdb	sp!, {r2, r3}
    c9f0:	a901      	add	r1, sp, #4
    c9f2:	f7ff fbc3 	bl	c17c <__gnu_Unwind_RaiseException>
    c9f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    c9fa:	b012      	add	sp, #72	; 0x48
    c9fc:	4770      	bx	lr
    c9fe:	bf00      	nop

0000ca00 <_Unwind_Resume>:
    ca00:	46ec      	mov	ip, sp
    ca02:	b500      	push	{lr}
    ca04:	e92d 5000 	stmdb	sp!, {ip, lr}
    ca08:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ca0c:	f04f 0300 	mov.w	r3, #0
    ca10:	e92d 000c 	stmdb	sp!, {r2, r3}
    ca14:	a901      	add	r1, sp, #4
    ca16:	f7ff fbed 	bl	c1f4 <__gnu_Unwind_Resume>
    ca1a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    ca1e:	b012      	add	sp, #72	; 0x48
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop

0000ca24 <_Unwind_Resume_or_Rethrow>:
    ca24:	46ec      	mov	ip, sp
    ca26:	b500      	push	{lr}
    ca28:	e92d 5000 	stmdb	sp!, {ip, lr}
    ca2c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ca30:	f04f 0300 	mov.w	r3, #0
    ca34:	e92d 000c 	stmdb	sp!, {r2, r3}
    ca38:	a901      	add	r1, sp, #4
    ca3a:	f7ff fbfd 	bl	c238 <__gnu_Unwind_Resume_or_Rethrow>
    ca3e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    ca42:	b012      	add	sp, #72	; 0x48
    ca44:	4770      	bx	lr
    ca46:	bf00      	nop

0000ca48 <_Unwind_ForcedUnwind>:
    ca48:	46ec      	mov	ip, sp
    ca4a:	b500      	push	{lr}
    ca4c:	e92d 5000 	stmdb	sp!, {ip, lr}
    ca50:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ca54:	f04f 0300 	mov.w	r3, #0
    ca58:	e92d 000c 	stmdb	sp!, {r2, r3}
    ca5c:	ab01      	add	r3, sp, #4
    ca5e:	f7ff fbc1 	bl	c1e4 <__gnu_Unwind_ForcedUnwind>
    ca62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    ca66:	b012      	add	sp, #72	; 0x48
    ca68:	4770      	bx	lr
    ca6a:	bf00      	nop

0000ca6c <_Unwind_Backtrace>:
    ca6c:	46ec      	mov	ip, sp
    ca6e:	b500      	push	{lr}
    ca70:	e92d 5000 	stmdb	sp!, {ip, lr}
    ca74:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ca78:	f04f 0300 	mov.w	r3, #0
    ca7c:	e92d 000c 	stmdb	sp!, {r2, r3}
    ca80:	aa01      	add	r2, sp, #4
    ca82:	f7ff fc35 	bl	c2f0 <__gnu_Unwind_Backtrace>
    ca86:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    ca8a:	b012      	add	sp, #72	; 0x48
    ca8c:	4770      	bx	lr
    ca8e:	bf00      	nop

0000ca90 <next_unwind_byte>:
    ca90:	7a02      	ldrb	r2, [r0, #8]
    ca92:	4603      	mov	r3, r0
    ca94:	b97a      	cbnz	r2, cab6 <next_unwind_byte+0x26>
    ca96:	7a42      	ldrb	r2, [r0, #9]
    ca98:	b1a2      	cbz	r2, cac4 <next_unwind_byte+0x34>
    ca9a:	6841      	ldr	r1, [r0, #4]
    ca9c:	3a01      	subs	r2, #1
    ca9e:	b410      	push	{r4}
    caa0:	7242      	strb	r2, [r0, #9]
    caa2:	6808      	ldr	r0, [r1, #0]
    caa4:	2203      	movs	r2, #3
    caa6:	1d0c      	adds	r4, r1, #4
    caa8:	721a      	strb	r2, [r3, #8]
    caaa:	0202      	lsls	r2, r0, #8
    caac:	605c      	str	r4, [r3, #4]
    caae:	0e00      	lsrs	r0, r0, #24
    cab0:	bc10      	pop	{r4}
    cab2:	601a      	str	r2, [r3, #0]
    cab4:	4770      	bx	lr
    cab6:	6800      	ldr	r0, [r0, #0]
    cab8:	3a01      	subs	r2, #1
    caba:	721a      	strb	r2, [r3, #8]
    cabc:	0202      	lsls	r2, r0, #8
    cabe:	601a      	str	r2, [r3, #0]
    cac0:	0e00      	lsrs	r0, r0, #24
    cac2:	4770      	bx	lr
    cac4:	20b0      	movs	r0, #176	; 0xb0
    cac6:	4770      	bx	lr

0000cac8 <_Unwind_GetGR.constprop.0>:
    cac8:	b500      	push	{lr}
    caca:	b085      	sub	sp, #20
    cacc:	2300      	movs	r3, #0
    cace:	aa03      	add	r2, sp, #12
    cad0:	9200      	str	r2, [sp, #0]
    cad2:	4619      	mov	r1, r3
    cad4:	220c      	movs	r2, #12
    cad6:	f7ff fbc1 	bl	c25c <_Unwind_VRS_Get>
    cada:	9803      	ldr	r0, [sp, #12]
    cadc:	b005      	add	sp, #20
    cade:	f85d fb04 	ldr.w	pc, [sp], #4
    cae2:	bf00      	nop

0000cae4 <unwind_UCB_from_context>:
    cae4:	f7ff bff0 	b.w	cac8 <_Unwind_GetGR.constprop.0>

0000cae8 <__gnu_unwind_execute>:
    cae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    caec:	b085      	sub	sp, #20
    caee:	4607      	mov	r7, r0
    caf0:	460e      	mov	r6, r1
    caf2:	f04f 0800 	mov.w	r8, #0
    caf6:	ad03      	add	r5, sp, #12
    caf8:	4630      	mov	r0, r6
    cafa:	f7ff ffc9 	bl	ca90 <next_unwind_byte>
    cafe:	28b0      	cmp	r0, #176	; 0xb0
    cb00:	4604      	mov	r4, r0
    cb02:	f000 80cb 	beq.w	cc9c <__gnu_unwind_execute+0x1b4>
    cb06:	0603      	lsls	r3, r0, #24
    cb08:	d540      	bpl.n	cb8c <__gnu_unwind_execute+0xa4>
    cb0a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    cb0e:	2b80      	cmp	r3, #128	; 0x80
    cb10:	d056      	beq.n	cbc0 <__gnu_unwind_execute+0xd8>
    cb12:	2bb0      	cmp	r3, #176	; 0xb0
    cb14:	d07d      	beq.n	cc12 <__gnu_unwind_execute+0x12a>
    cb16:	d81c      	bhi.n	cb52 <__gnu_unwind_execute+0x6a>
    cb18:	2b90      	cmp	r3, #144	; 0x90
    cb1a:	f000 8093 	beq.w	cc44 <__gnu_unwind_execute+0x15c>
    cb1e:	2ba0      	cmp	r3, #160	; 0xa0
    cb20:	d113      	bne.n	cb4a <__gnu_unwind_execute+0x62>
    cb22:	43c3      	mvns	r3, r0
    cb24:	f003 0307 	and.w	r3, r3, #7
    cb28:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    cb2c:	411a      	asrs	r2, r3
    cb2e:	0701      	lsls	r1, r0, #28
    cb30:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    cb34:	f04f 0300 	mov.w	r3, #0
    cb38:	bf48      	it	mi
    cb3a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    cb3e:	4619      	mov	r1, r3
    cb40:	4638      	mov	r0, r7
    cb42:	f7ff fd77 	bl	c634 <_Unwind_VRS_Pop>
    cb46:	2800      	cmp	r0, #0
    cb48:	d0d6      	beq.n	caf8 <__gnu_unwind_execute+0x10>
    cb4a:	2009      	movs	r0, #9
    cb4c:	b005      	add	sp, #20
    cb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cb52:	2bc0      	cmp	r3, #192	; 0xc0
    cb54:	d14b      	bne.n	cbee <__gnu_unwind_execute+0x106>
    cb56:	28c6      	cmp	r0, #198	; 0xc6
    cb58:	f000 8089 	beq.w	cc6e <__gnu_unwind_execute+0x186>
    cb5c:	28c7      	cmp	r0, #199	; 0xc7
    cb5e:	f000 80a2 	beq.w	cca6 <__gnu_unwind_execute+0x1be>
    cb62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    cb66:	2bc0      	cmp	r3, #192	; 0xc0
    cb68:	f000 80bc 	beq.w	cce4 <__gnu_unwind_execute+0x1fc>
    cb6c:	28c8      	cmp	r0, #200	; 0xc8
    cb6e:	f000 80bf 	beq.w	ccf0 <__gnu_unwind_execute+0x208>
    cb72:	28c9      	cmp	r0, #201	; 0xc9
    cb74:	d1e9      	bne.n	cb4a <__gnu_unwind_execute+0x62>
    cb76:	4630      	mov	r0, r6
    cb78:	f7ff ff8a 	bl	ca90 <next_unwind_byte>
    cb7c:	0302      	lsls	r2, r0, #12
    cb7e:	f000 000f 	and.w	r0, r0, #15
    cb82:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    cb86:	3001      	adds	r0, #1
    cb88:	4302      	orrs	r2, r0
    cb8a:	e039      	b.n	cc00 <__gnu_unwind_execute+0x118>
    cb8c:	0083      	lsls	r3, r0, #2
    cb8e:	b2db      	uxtb	r3, r3
    cb90:	f103 0904 	add.w	r9, r3, #4
    cb94:	2300      	movs	r3, #0
    cb96:	4619      	mov	r1, r3
    cb98:	9500      	str	r5, [sp, #0]
    cb9a:	220d      	movs	r2, #13
    cb9c:	4638      	mov	r0, r7
    cb9e:	f7ff fb5d 	bl	c25c <_Unwind_VRS_Get>
    cba2:	9b03      	ldr	r3, [sp, #12]
    cba4:	0660      	lsls	r0, r4, #25
    cba6:	bf4c      	ite	mi
    cba8:	eba3 0309 	submi.w	r3, r3, r9
    cbac:	444b      	addpl	r3, r9
    cbae:	9303      	str	r3, [sp, #12]
    cbb0:	2300      	movs	r3, #0
    cbb2:	9500      	str	r5, [sp, #0]
    cbb4:	220d      	movs	r2, #13
    cbb6:	4619      	mov	r1, r3
    cbb8:	4638      	mov	r0, r7
    cbba:	f7ff fb75 	bl	c2a8 <_Unwind_VRS_Set>
    cbbe:	e79b      	b.n	caf8 <__gnu_unwind_execute+0x10>
    cbc0:	0204      	lsls	r4, r0, #8
    cbc2:	4630      	mov	r0, r6
    cbc4:	f7ff ff64 	bl	ca90 <next_unwind_byte>
    cbc8:	4320      	orrs	r0, r4
    cbca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cbce:	d0bc      	beq.n	cb4a <__gnu_unwind_execute+0x62>
    cbd0:	0104      	lsls	r4, r0, #4
    cbd2:	2300      	movs	r3, #0
    cbd4:	b2a2      	uxth	r2, r4
    cbd6:	4619      	mov	r1, r3
    cbd8:	4638      	mov	r0, r7
    cbda:	f7ff fd2b 	bl	c634 <_Unwind_VRS_Pop>
    cbde:	2800      	cmp	r0, #0
    cbe0:	d1b3      	bne.n	cb4a <__gnu_unwind_execute+0x62>
    cbe2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    cbe6:	bf18      	it	ne
    cbe8:	f04f 0801 	movne.w	r8, #1
    cbec:	e784      	b.n	caf8 <__gnu_unwind_execute+0x10>
    cbee:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    cbf2:	2bd0      	cmp	r3, #208	; 0xd0
    cbf4:	d1a9      	bne.n	cb4a <__gnu_unwind_execute+0x62>
    cbf6:	f000 0207 	and.w	r2, r0, #7
    cbfa:	3201      	adds	r2, #1
    cbfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    cc00:	2305      	movs	r3, #5
    cc02:	2101      	movs	r1, #1
    cc04:	4638      	mov	r0, r7
    cc06:	f7ff fd15 	bl	c634 <_Unwind_VRS_Pop>
    cc0a:	2800      	cmp	r0, #0
    cc0c:	f43f af74 	beq.w	caf8 <__gnu_unwind_execute+0x10>
    cc10:	e79b      	b.n	cb4a <__gnu_unwind_execute+0x62>
    cc12:	28b1      	cmp	r0, #177	; 0xb1
    cc14:	d037      	beq.n	cc86 <__gnu_unwind_execute+0x19e>
    cc16:	28b2      	cmp	r0, #178	; 0xb2
    cc18:	f000 8087 	beq.w	cd2a <__gnu_unwind_execute+0x242>
    cc1c:	28b3      	cmp	r0, #179	; 0xb3
    cc1e:	d056      	beq.n	ccce <__gnu_unwind_execute+0x1e6>
    cc20:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    cc24:	2bb4      	cmp	r3, #180	; 0xb4
    cc26:	d090      	beq.n	cb4a <__gnu_unwind_execute+0x62>
    cc28:	f000 0207 	and.w	r2, r0, #7
    cc2c:	3201      	adds	r2, #1
    cc2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    cc32:	2301      	movs	r3, #1
    cc34:	4619      	mov	r1, r3
    cc36:	4638      	mov	r0, r7
    cc38:	f7ff fcfc 	bl	c634 <_Unwind_VRS_Pop>
    cc3c:	2800      	cmp	r0, #0
    cc3e:	f43f af5b 	beq.w	caf8 <__gnu_unwind_execute+0x10>
    cc42:	e782      	b.n	cb4a <__gnu_unwind_execute+0x62>
    cc44:	f000 030d 	and.w	r3, r0, #13
    cc48:	2b0d      	cmp	r3, #13
    cc4a:	f43f af7e 	beq.w	cb4a <__gnu_unwind_execute+0x62>
    cc4e:	2300      	movs	r3, #0
    cc50:	f000 020f 	and.w	r2, r0, #15
    cc54:	4619      	mov	r1, r3
    cc56:	9500      	str	r5, [sp, #0]
    cc58:	4638      	mov	r0, r7
    cc5a:	f7ff faff 	bl	c25c <_Unwind_VRS_Get>
    cc5e:	2300      	movs	r3, #0
    cc60:	9500      	str	r5, [sp, #0]
    cc62:	220d      	movs	r2, #13
    cc64:	4619      	mov	r1, r3
    cc66:	4638      	mov	r0, r7
    cc68:	f7ff fb1e 	bl	c2a8 <_Unwind_VRS_Set>
    cc6c:	e744      	b.n	caf8 <__gnu_unwind_execute+0x10>
    cc6e:	4630      	mov	r0, r6
    cc70:	f7ff ff0e 	bl	ca90 <next_unwind_byte>
    cc74:	0302      	lsls	r2, r0, #12
    cc76:	f000 000f 	and.w	r0, r0, #15
    cc7a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    cc7e:	3001      	adds	r0, #1
    cc80:	4302      	orrs	r2, r0
    cc82:	2303      	movs	r3, #3
    cc84:	e7d6      	b.n	cc34 <__gnu_unwind_execute+0x14c>
    cc86:	4630      	mov	r0, r6
    cc88:	f7ff ff02 	bl	ca90 <next_unwind_byte>
    cc8c:	4602      	mov	r2, r0
    cc8e:	2800      	cmp	r0, #0
    cc90:	f43f af5b 	beq.w	cb4a <__gnu_unwind_execute+0x62>
    cc94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    cc98:	d0cc      	beq.n	cc34 <__gnu_unwind_execute+0x14c>
    cc9a:	e756      	b.n	cb4a <__gnu_unwind_execute+0x62>
    cc9c:	f1b8 0f00 	cmp.w	r8, #0
    cca0:	d032      	beq.n	cd08 <__gnu_unwind_execute+0x220>
    cca2:	2000      	movs	r0, #0
    cca4:	e752      	b.n	cb4c <__gnu_unwind_execute+0x64>
    cca6:	4630      	mov	r0, r6
    cca8:	f7ff fef2 	bl	ca90 <next_unwind_byte>
    ccac:	4602      	mov	r2, r0
    ccae:	2800      	cmp	r0, #0
    ccb0:	f43f af4b 	beq.w	cb4a <__gnu_unwind_execute+0x62>
    ccb4:	f010 0ff0 	tst.w	r0, #240	; 0xf0
    ccb8:	f47f af47 	bne.w	cb4a <__gnu_unwind_execute+0x62>
    ccbc:	2300      	movs	r3, #0
    ccbe:	2104      	movs	r1, #4
    ccc0:	4638      	mov	r0, r7
    ccc2:	f7ff fcb7 	bl	c634 <_Unwind_VRS_Pop>
    ccc6:	2800      	cmp	r0, #0
    ccc8:	f43f af16 	beq.w	caf8 <__gnu_unwind_execute+0x10>
    cccc:	e73d      	b.n	cb4a <__gnu_unwind_execute+0x62>
    ccce:	4630      	mov	r0, r6
    ccd0:	f7ff fede 	bl	ca90 <next_unwind_byte>
    ccd4:	0302      	lsls	r2, r0, #12
    ccd6:	f000 000f 	and.w	r0, r0, #15
    ccda:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    ccde:	3001      	adds	r0, #1
    cce0:	4302      	orrs	r2, r0
    cce2:	e7a6      	b.n	cc32 <__gnu_unwind_execute+0x14a>
    cce4:	f000 020f 	and.w	r2, r0, #15
    cce8:	3201      	adds	r2, #1
    ccea:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    ccee:	e7c8      	b.n	cc82 <__gnu_unwind_execute+0x19a>
    ccf0:	4630      	mov	r0, r6
    ccf2:	f7ff fecd 	bl	ca90 <next_unwind_byte>
    ccf6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ccfa:	f000 030f 	and.w	r3, r0, #15
    ccfe:	3210      	adds	r2, #16
    cd00:	3301      	adds	r3, #1
    cd02:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    cd06:	e77b      	b.n	cc00 <__gnu_unwind_execute+0x118>
    cd08:	ac03      	add	r4, sp, #12
    cd0a:	4643      	mov	r3, r8
    cd0c:	220e      	movs	r2, #14
    cd0e:	4641      	mov	r1, r8
    cd10:	9400      	str	r4, [sp, #0]
    cd12:	4638      	mov	r0, r7
    cd14:	f7ff faa2 	bl	c25c <_Unwind_VRS_Get>
    cd18:	9400      	str	r4, [sp, #0]
    cd1a:	4643      	mov	r3, r8
    cd1c:	220f      	movs	r2, #15
    cd1e:	4641      	mov	r1, r8
    cd20:	4638      	mov	r0, r7
    cd22:	f7ff fac1 	bl	c2a8 <_Unwind_VRS_Set>
    cd26:	4640      	mov	r0, r8
    cd28:	e710      	b.n	cb4c <__gnu_unwind_execute+0x64>
    cd2a:	2300      	movs	r3, #0
    cd2c:	220d      	movs	r2, #13
    cd2e:	4619      	mov	r1, r3
    cd30:	9500      	str	r5, [sp, #0]
    cd32:	4638      	mov	r0, r7
    cd34:	f7ff fa92 	bl	c25c <_Unwind_VRS_Get>
    cd38:	4630      	mov	r0, r6
    cd3a:	f7ff fea9 	bl	ca90 <next_unwind_byte>
    cd3e:	0602      	lsls	r2, r0, #24
    cd40:	9c03      	ldr	r4, [sp, #12]
    cd42:	f04f 0902 	mov.w	r9, #2
    cd46:	d50c      	bpl.n	cd62 <__gnu_unwind_execute+0x27a>
    cd48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    cd4c:	fa00 f009 	lsl.w	r0, r0, r9
    cd50:	4404      	add	r4, r0
    cd52:	4630      	mov	r0, r6
    cd54:	9403      	str	r4, [sp, #12]
    cd56:	f7ff fe9b 	bl	ca90 <next_unwind_byte>
    cd5a:	0603      	lsls	r3, r0, #24
    cd5c:	f109 0907 	add.w	r9, r9, #7
    cd60:	d4f2      	bmi.n	cd48 <__gnu_unwind_execute+0x260>
    cd62:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    cd66:	fa03 f309 	lsl.w	r3, r3, r9
    cd6a:	f504 7401 	add.w	r4, r4, #516	; 0x204
    cd6e:	4423      	add	r3, r4
    cd70:	e71d      	b.n	cbae <__gnu_unwind_execute+0xc6>
    cd72:	bf00      	nop

0000cd74 <__gnu_unwind_frame>:
    cd74:	b510      	push	{r4, lr}
    cd76:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    cd78:	6853      	ldr	r3, [r2, #4]
    cd7a:	b084      	sub	sp, #16
    cd7c:	f04f 0c03 	mov.w	ip, #3
    cd80:	3208      	adds	r2, #8
    cd82:	021c      	lsls	r4, r3, #8
    cd84:	4608      	mov	r0, r1
    cd86:	0e1b      	lsrs	r3, r3, #24
    cd88:	a901      	add	r1, sp, #4
    cd8a:	9401      	str	r4, [sp, #4]
    cd8c:	9202      	str	r2, [sp, #8]
    cd8e:	f88d c00c 	strb.w	ip, [sp, #12]
    cd92:	f88d 300d 	strb.w	r3, [sp, #13]
    cd96:	f7ff fea7 	bl	cae8 <__gnu_unwind_execute>
    cd9a:	b004      	add	sp, #16
    cd9c:	bd10      	pop	{r4, pc}
    cd9e:	bf00      	nop

0000cda0 <_Unwind_GetRegionStart>:
    cda0:	b508      	push	{r3, lr}
    cda2:	f7ff fe9f 	bl	cae4 <unwind_UCB_from_context>
    cda6:	6c80      	ldr	r0, [r0, #72]	; 0x48
    cda8:	bd08      	pop	{r3, pc}
    cdaa:	bf00      	nop

0000cdac <_Unwind_GetLanguageSpecificData>:
    cdac:	b508      	push	{r3, lr}
    cdae:	f7ff fe99 	bl	cae4 <unwind_UCB_from_context>
    cdb2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    cdb4:	79c3      	ldrb	r3, [r0, #7]
    cdb6:	3302      	adds	r3, #2
    cdb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cdbc:	bd08      	pop	{r3, pc}
    cdbe:	bf00      	nop

0000cdc0 <_Unwind_GetDataRelBase>:
    cdc0:	b508      	push	{r3, lr}
    cdc2:	f7f6 fa8d 	bl	32e0 <abort>

0000cdc6 <_Unwind_GetTextRelBase>:
    cdc6:	b508      	push	{r3, lr}
    cdc8:	f7ff fffa 	bl	cdc0 <_Unwind_GetDataRelBase>

0000cdcc <malloc>:
    cdcc:	4b02      	ldr	r3, [pc, #8]	; (cdd8 <malloc+0xc>)
    cdce:	4601      	mov	r1, r0
    cdd0:	6818      	ldr	r0, [r3, #0]
    cdd2:	f000 b80b 	b.w	cdec <_malloc_r>
    cdd6:	bf00      	nop
    cdd8:	2000359c 	.word	0x2000359c

0000cddc <free>:
    cddc:	4b02      	ldr	r3, [pc, #8]	; (cde8 <free+0xc>)
    cdde:	4601      	mov	r1, r0
    cde0:	6818      	ldr	r0, [r3, #0]
    cde2:	f001 bd2f 	b.w	e844 <_free_r>
    cde6:	bf00      	nop
    cde8:	2000359c 	.word	0x2000359c

0000cdec <_malloc_r>:
    cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdf0:	f101 060b 	add.w	r6, r1, #11
    cdf4:	2e16      	cmp	r6, #22
    cdf6:	b083      	sub	sp, #12
    cdf8:	4604      	mov	r4, r0
    cdfa:	d824      	bhi.n	ce46 <_malloc_r+0x5a>
    cdfc:	2910      	cmp	r1, #16
    cdfe:	f200 80ba 	bhi.w	cf76 <_malloc_r+0x18a>
    ce02:	f000 faa3 	bl	d34c <__malloc_lock>
    ce06:	2610      	movs	r6, #16
    ce08:	2218      	movs	r2, #24
    ce0a:	2002      	movs	r0, #2
    ce0c:	4fb5      	ldr	r7, [pc, #724]	; (d0e4 <_malloc_r+0x2f8>)
    ce0e:	443a      	add	r2, r7
    ce10:	f1a2 0108 	sub.w	r1, r2, #8
    ce14:	6853      	ldr	r3, [r2, #4]
    ce16:	428b      	cmp	r3, r1
    ce18:	f000 80ba 	beq.w	cf90 <_malloc_r+0x1a4>
    ce1c:	685a      	ldr	r2, [r3, #4]
    ce1e:	68d9      	ldr	r1, [r3, #12]
    ce20:	f022 0203 	bic.w	r2, r2, #3
    ce24:	441a      	add	r2, r3
    ce26:	689d      	ldr	r5, [r3, #8]
    ce28:	60e9      	str	r1, [r5, #12]
    ce2a:	608d      	str	r5, [r1, #8]
    ce2c:	6851      	ldr	r1, [r2, #4]
    ce2e:	f041 0101 	orr.w	r1, r1, #1
    ce32:	4620      	mov	r0, r4
    ce34:	6051      	str	r1, [r2, #4]
    ce36:	f103 0508 	add.w	r5, r3, #8
    ce3a:	f000 fa8d 	bl	d358 <__malloc_unlock>
    ce3e:	4628      	mov	r0, r5
    ce40:	b003      	add	sp, #12
    ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce46:	f036 0607 	bics.w	r6, r6, #7
    ce4a:	f100 8094 	bmi.w	cf76 <_malloc_r+0x18a>
    ce4e:	42b1      	cmp	r1, r6
    ce50:	f200 8091 	bhi.w	cf76 <_malloc_r+0x18a>
    ce54:	f000 fa7a 	bl	d34c <__malloc_lock>
    ce58:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ce5c:	f0c0 819a 	bcc.w	d194 <_malloc_r+0x3a8>
    ce60:	0a73      	lsrs	r3, r6, #9
    ce62:	f000 808f 	beq.w	cf84 <_malloc_r+0x198>
    ce66:	2b04      	cmp	r3, #4
    ce68:	f200 816f 	bhi.w	d14a <_malloc_r+0x35e>
    ce6c:	09b3      	lsrs	r3, r6, #6
    ce6e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ce72:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    ce76:	00c3      	lsls	r3, r0, #3
    ce78:	4f9a      	ldr	r7, [pc, #616]	; (d0e4 <_malloc_r+0x2f8>)
    ce7a:	443b      	add	r3, r7
    ce7c:	f1a3 0508 	sub.w	r5, r3, #8
    ce80:	685b      	ldr	r3, [r3, #4]
    ce82:	429d      	cmp	r5, r3
    ce84:	d106      	bne.n	ce94 <_malloc_r+0xa8>
    ce86:	e00c      	b.n	cea2 <_malloc_r+0xb6>
    ce88:	2900      	cmp	r1, #0
    ce8a:	f280 8127 	bge.w	d0dc <_malloc_r+0x2f0>
    ce8e:	68db      	ldr	r3, [r3, #12]
    ce90:	429d      	cmp	r5, r3
    ce92:	d006      	beq.n	cea2 <_malloc_r+0xb6>
    ce94:	685a      	ldr	r2, [r3, #4]
    ce96:	f022 0203 	bic.w	r2, r2, #3
    ce9a:	1b91      	subs	r1, r2, r6
    ce9c:	290f      	cmp	r1, #15
    ce9e:	ddf3      	ble.n	ce88 <_malloc_r+0x9c>
    cea0:	4660      	mov	r0, ip
    cea2:	693d      	ldr	r5, [r7, #16]
    cea4:	f8df c250 	ldr.w	ip, [pc, #592]	; d0f8 <_malloc_r+0x30c>
    cea8:	4565      	cmp	r5, ip
    ceaa:	d07c      	beq.n	cfa6 <_malloc_r+0x1ba>
    ceac:	686a      	ldr	r2, [r5, #4]
    ceae:	f022 0203 	bic.w	r2, r2, #3
    ceb2:	1b93      	subs	r3, r2, r6
    ceb4:	2b0f      	cmp	r3, #15
    ceb6:	f300 817b 	bgt.w	d1b0 <_malloc_r+0x3c4>
    ceba:	2b00      	cmp	r3, #0
    cebc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    cec0:	f280 816c 	bge.w	d19c <_malloc_r+0x3b0>
    cec4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    cec8:	f080 811a 	bcs.w	d100 <_malloc_r+0x314>
    cecc:	08d3      	lsrs	r3, r2, #3
    cece:	6879      	ldr	r1, [r7, #4]
    ced0:	3301      	adds	r3, #1
    ced2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ced6:	2201      	movs	r2, #1
    ced8:	fa02 f20e 	lsl.w	r2, r2, lr
    cedc:	430a      	orrs	r2, r1
    cede:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    cee2:	f8c5 e008 	str.w	lr, [r5, #8]
    cee6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ceea:	3908      	subs	r1, #8
    ceec:	60e9      	str	r1, [r5, #12]
    ceee:	607a      	str	r2, [r7, #4]
    cef0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    cef4:	f8ce 500c 	str.w	r5, [lr, #12]
    cef8:	1083      	asrs	r3, r0, #2
    cefa:	2101      	movs	r1, #1
    cefc:	4099      	lsls	r1, r3
    cefe:	4291      	cmp	r1, r2
    cf00:	d857      	bhi.n	cfb2 <_malloc_r+0x1c6>
    cf02:	4211      	tst	r1, r2
    cf04:	d106      	bne.n	cf14 <_malloc_r+0x128>
    cf06:	f020 0003 	bic.w	r0, r0, #3
    cf0a:	0049      	lsls	r1, r1, #1
    cf0c:	4211      	tst	r1, r2
    cf0e:	f100 0004 	add.w	r0, r0, #4
    cf12:	d0fa      	beq.n	cf0a <_malloc_r+0x11e>
    cf14:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    cf18:	464d      	mov	r5, r9
    cf1a:	4686      	mov	lr, r0
    cf1c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    cf20:	4545      	cmp	r5, r8
    cf22:	d108      	bne.n	cf36 <_malloc_r+0x14a>
    cf24:	e11d      	b.n	d162 <_malloc_r+0x376>
    cf26:	2b00      	cmp	r3, #0
    cf28:	f280 8124 	bge.w	d174 <_malloc_r+0x388>
    cf2c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    cf30:	4545      	cmp	r5, r8
    cf32:	f000 8116 	beq.w	d162 <_malloc_r+0x376>
    cf36:	f8d8 2004 	ldr.w	r2, [r8, #4]
    cf3a:	f022 0203 	bic.w	r2, r2, #3
    cf3e:	1b93      	subs	r3, r2, r6
    cf40:	2b0f      	cmp	r3, #15
    cf42:	ddf0      	ble.n	cf26 <_malloc_r+0x13a>
    cf44:	4620      	mov	r0, r4
    cf46:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    cf4a:	eb08 0106 	add.w	r1, r8, r6
    cf4e:	f046 0601 	orr.w	r6, r6, #1
    cf52:	f8c8 6004 	str.w	r6, [r8, #4]
    cf56:	60ec      	str	r4, [r5, #12]
    cf58:	60a5      	str	r5, [r4, #8]
    cf5a:	f043 0401 	orr.w	r4, r3, #1
    cf5e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    cf62:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    cf66:	604c      	str	r4, [r1, #4]
    cf68:	f848 3002 	str.w	r3, [r8, r2]
    cf6c:	f000 f9f4 	bl	d358 <__malloc_unlock>
    cf70:	f108 0508 	add.w	r5, r8, #8
    cf74:	e002      	b.n	cf7c <_malloc_r+0x190>
    cf76:	230c      	movs	r3, #12
    cf78:	6023      	str	r3, [r4, #0]
    cf7a:	2500      	movs	r5, #0
    cf7c:	4628      	mov	r0, r5
    cf7e:	b003      	add	sp, #12
    cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf84:	f44f 7300 	mov.w	r3, #512	; 0x200
    cf88:	2040      	movs	r0, #64	; 0x40
    cf8a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    cf8e:	e773      	b.n	ce78 <_malloc_r+0x8c>
    cf90:	68d3      	ldr	r3, [r2, #12]
    cf92:	429a      	cmp	r2, r3
    cf94:	bf08      	it	eq
    cf96:	3002      	addeq	r0, #2
    cf98:	f47f af40 	bne.w	ce1c <_malloc_r+0x30>
    cf9c:	693d      	ldr	r5, [r7, #16]
    cf9e:	f8df c158 	ldr.w	ip, [pc, #344]	; d0f8 <_malloc_r+0x30c>
    cfa2:	4565      	cmp	r5, ip
    cfa4:	d182      	bne.n	ceac <_malloc_r+0xc0>
    cfa6:	687a      	ldr	r2, [r7, #4]
    cfa8:	1083      	asrs	r3, r0, #2
    cfaa:	2101      	movs	r1, #1
    cfac:	4099      	lsls	r1, r3
    cfae:	4291      	cmp	r1, r2
    cfb0:	d9a7      	bls.n	cf02 <_malloc_r+0x116>
    cfb2:	68bd      	ldr	r5, [r7, #8]
    cfb4:	686b      	ldr	r3, [r5, #4]
    cfb6:	f023 0903 	bic.w	r9, r3, #3
    cfba:	454e      	cmp	r6, r9
    cfbc:	d803      	bhi.n	cfc6 <_malloc_r+0x1da>
    cfbe:	eba9 0306 	sub.w	r3, r9, r6
    cfc2:	2b0f      	cmp	r3, #15
    cfc4:	dc7a      	bgt.n	d0bc <_malloc_r+0x2d0>
    cfc6:	f8df b134 	ldr.w	fp, [pc, #308]	; d0fc <_malloc_r+0x310>
    cfca:	4b47      	ldr	r3, [pc, #284]	; (d0e8 <_malloc_r+0x2fc>)
    cfcc:	f8db 2000 	ldr.w	r2, [fp]
    cfd0:	681b      	ldr	r3, [r3, #0]
    cfd2:	3201      	adds	r2, #1
    cfd4:	4433      	add	r3, r6
    cfd6:	eb05 0a09 	add.w	sl, r5, r9
    cfda:	f000 8133 	beq.w	d244 <_malloc_r+0x458>
    cfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    cfe2:	330f      	adds	r3, #15
    cfe4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    cfe8:	f028 080f 	bic.w	r8, r8, #15
    cfec:	4641      	mov	r1, r8
    cfee:	4620      	mov	r0, r4
    cff0:	f001 f8fe 	bl	e1f0 <_sbrk_r>
    cff4:	1c41      	adds	r1, r0, #1
    cff6:	4602      	mov	r2, r0
    cff8:	f000 80f3 	beq.w	d1e2 <_malloc_r+0x3f6>
    cffc:	4582      	cmp	sl, r0
    cffe:	f200 80ee 	bhi.w	d1de <_malloc_r+0x3f2>
    d002:	4b3a      	ldr	r3, [pc, #232]	; (d0ec <_malloc_r+0x300>)
    d004:	6819      	ldr	r1, [r3, #0]
    d006:	4441      	add	r1, r8
    d008:	6019      	str	r1, [r3, #0]
    d00a:	4608      	mov	r0, r1
    d00c:	f000 814e 	beq.w	d2ac <_malloc_r+0x4c0>
    d010:	f8db 1000 	ldr.w	r1, [fp]
    d014:	9301      	str	r3, [sp, #4]
    d016:	3101      	adds	r1, #1
    d018:	bf1b      	ittet	ne
    d01a:	eba2 010a 	subne.w	r1, r2, sl
    d01e:	1809      	addne	r1, r1, r0
    d020:	f8cb 2000 	streq.w	r2, [fp]
    d024:	6019      	strne	r1, [r3, #0]
    d026:	f012 0b07 	ands.w	fp, r2, #7
    d02a:	f000 8117 	beq.w	d25c <_malloc_r+0x470>
    d02e:	f1cb 0108 	rsb	r1, fp, #8
    d032:	440a      	add	r2, r1
    d034:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d038:	4490      	add	r8, r2
    d03a:	3108      	adds	r1, #8
    d03c:	eba1 0108 	sub.w	r1, r1, r8
    d040:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d044:	4651      	mov	r1, sl
    d046:	4620      	mov	r0, r4
    d048:	9200      	str	r2, [sp, #0]
    d04a:	f001 f8d1 	bl	e1f0 <_sbrk_r>
    d04e:	1c42      	adds	r2, r0, #1
    d050:	e9dd 2300 	ldrd	r2, r3, [sp]
    d054:	f000 814f 	beq.w	d2f6 <_malloc_r+0x50a>
    d058:	1a80      	subs	r0, r0, r2
    d05a:	eb00 080a 	add.w	r8, r0, sl
    d05e:	6819      	ldr	r1, [r3, #0]
    d060:	60ba      	str	r2, [r7, #8]
    d062:	f048 0001 	orr.w	r0, r8, #1
    d066:	4451      	add	r1, sl
    d068:	42bd      	cmp	r5, r7
    d06a:	6050      	str	r0, [r2, #4]
    d06c:	6019      	str	r1, [r3, #0]
    d06e:	f000 8129 	beq.w	d2c4 <_malloc_r+0x4d8>
    d072:	f1b9 0f0f 	cmp.w	r9, #15
    d076:	f240 8127 	bls.w	d2c8 <_malloc_r+0x4dc>
    d07a:	6868      	ldr	r0, [r5, #4]
    d07c:	f1a9 0c0c 	sub.w	ip, r9, #12
    d080:	f02c 0c07 	bic.w	ip, ip, #7
    d084:	f000 0001 	and.w	r0, r0, #1
    d088:	ea40 000c 	orr.w	r0, r0, ip
    d08c:	6068      	str	r0, [r5, #4]
    d08e:	f04f 0e05 	mov.w	lr, #5
    d092:	eb05 000c 	add.w	r0, r5, ip
    d096:	f1bc 0f0f 	cmp.w	ip, #15
    d09a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d09e:	f200 8132 	bhi.w	d306 <_malloc_r+0x51a>
    d0a2:	6850      	ldr	r0, [r2, #4]
    d0a4:	4615      	mov	r5, r2
    d0a6:	4b12      	ldr	r3, [pc, #72]	; (d0f0 <_malloc_r+0x304>)
    d0a8:	681a      	ldr	r2, [r3, #0]
    d0aa:	428a      	cmp	r2, r1
    d0ac:	bf38      	it	cc
    d0ae:	6019      	strcc	r1, [r3, #0]
    d0b0:	4b10      	ldr	r3, [pc, #64]	; (d0f4 <_malloc_r+0x308>)
    d0b2:	681a      	ldr	r2, [r3, #0]
    d0b4:	428a      	cmp	r2, r1
    d0b6:	bf38      	it	cc
    d0b8:	6019      	strcc	r1, [r3, #0]
    d0ba:	e094      	b.n	d1e6 <_malloc_r+0x3fa>
    d0bc:	19aa      	adds	r2, r5, r6
    d0be:	f043 0301 	orr.w	r3, r3, #1
    d0c2:	f046 0601 	orr.w	r6, r6, #1
    d0c6:	606e      	str	r6, [r5, #4]
    d0c8:	4620      	mov	r0, r4
    d0ca:	60ba      	str	r2, [r7, #8]
    d0cc:	6053      	str	r3, [r2, #4]
    d0ce:	f000 f943 	bl	d358 <__malloc_unlock>
    d0d2:	3508      	adds	r5, #8
    d0d4:	4628      	mov	r0, r5
    d0d6:	b003      	add	sp, #12
    d0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0dc:	68d9      	ldr	r1, [r3, #12]
    d0de:	441a      	add	r2, r3
    d0e0:	e6a1      	b.n	ce26 <_malloc_r+0x3a>
    d0e2:	bf00      	nop
    d0e4:	20003180 	.word	0x20003180
    d0e8:	20003eb8 	.word	0x20003eb8
    d0ec:	20003e88 	.word	0x20003e88
    d0f0:	20003eb0 	.word	0x20003eb0
    d0f4:	20003eb4 	.word	0x20003eb4
    d0f8:	20003188 	.word	0x20003188
    d0fc:	20003588 	.word	0x20003588
    d100:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d104:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d108:	d363      	bcc.n	d1d2 <_malloc_r+0x3e6>
    d10a:	2b14      	cmp	r3, #20
    d10c:	f200 80b7 	bhi.w	d27e <_malloc_r+0x492>
    d110:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d114:	00c9      	lsls	r1, r1, #3
    d116:	335b      	adds	r3, #91	; 0x5b
    d118:	eb07 0e01 	add.w	lr, r7, r1
    d11c:	5879      	ldr	r1, [r7, r1]
    d11e:	f1ae 0e08 	sub.w	lr, lr, #8
    d122:	458e      	cmp	lr, r1
    d124:	f000 8091 	beq.w	d24a <_malloc_r+0x45e>
    d128:	684b      	ldr	r3, [r1, #4]
    d12a:	f023 0303 	bic.w	r3, r3, #3
    d12e:	4293      	cmp	r3, r2
    d130:	d902      	bls.n	d138 <_malloc_r+0x34c>
    d132:	6889      	ldr	r1, [r1, #8]
    d134:	458e      	cmp	lr, r1
    d136:	d1f7      	bne.n	d128 <_malloc_r+0x33c>
    d138:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d13c:	687a      	ldr	r2, [r7, #4]
    d13e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d142:	f8ce 5008 	str.w	r5, [lr, #8]
    d146:	60cd      	str	r5, [r1, #12]
    d148:	e6d6      	b.n	cef8 <_malloc_r+0x10c>
    d14a:	2b14      	cmp	r3, #20
    d14c:	d959      	bls.n	d202 <_malloc_r+0x416>
    d14e:	2b54      	cmp	r3, #84	; 0x54
    d150:	f200 809d 	bhi.w	d28e <_malloc_r+0x4a2>
    d154:	0b33      	lsrs	r3, r6, #12
    d156:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d15a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d15e:	00c3      	lsls	r3, r0, #3
    d160:	e68a      	b.n	ce78 <_malloc_r+0x8c>
    d162:	f10e 0e01 	add.w	lr, lr, #1
    d166:	f01e 0f03 	tst.w	lr, #3
    d16a:	f105 0508 	add.w	r5, r5, #8
    d16e:	f47f aed5 	bne.w	cf1c <_malloc_r+0x130>
    d172:	e051      	b.n	d218 <_malloc_r+0x42c>
    d174:	4442      	add	r2, r8
    d176:	4645      	mov	r5, r8
    d178:	6853      	ldr	r3, [r2, #4]
    d17a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d17e:	f043 0301 	orr.w	r3, r3, #1
    d182:	6053      	str	r3, [r2, #4]
    d184:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d188:	4620      	mov	r0, r4
    d18a:	60d9      	str	r1, [r3, #12]
    d18c:	608b      	str	r3, [r1, #8]
    d18e:	f000 f8e3 	bl	d358 <__malloc_unlock>
    d192:	e6f3      	b.n	cf7c <_malloc_r+0x190>
    d194:	08f0      	lsrs	r0, r6, #3
    d196:	f106 0208 	add.w	r2, r6, #8
    d19a:	e637      	b.n	ce0c <_malloc_r+0x20>
    d19c:	442a      	add	r2, r5
    d19e:	4620      	mov	r0, r4
    d1a0:	6853      	ldr	r3, [r2, #4]
    d1a2:	f043 0301 	orr.w	r3, r3, #1
    d1a6:	6053      	str	r3, [r2, #4]
    d1a8:	3508      	adds	r5, #8
    d1aa:	f000 f8d5 	bl	d358 <__malloc_unlock>
    d1ae:	e6e5      	b.n	cf7c <_malloc_r+0x190>
    d1b0:	19a9      	adds	r1, r5, r6
    d1b2:	4620      	mov	r0, r4
    d1b4:	f046 0601 	orr.w	r6, r6, #1
    d1b8:	f043 0401 	orr.w	r4, r3, #1
    d1bc:	606e      	str	r6, [r5, #4]
    d1be:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d1c2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d1c6:	604c      	str	r4, [r1, #4]
    d1c8:	50ab      	str	r3, [r5, r2]
    d1ca:	f000 f8c5 	bl	d358 <__malloc_unlock>
    d1ce:	3508      	adds	r5, #8
    d1d0:	e6d4      	b.n	cf7c <_malloc_r+0x190>
    d1d2:	0993      	lsrs	r3, r2, #6
    d1d4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d1d8:	00c9      	lsls	r1, r1, #3
    d1da:	3338      	adds	r3, #56	; 0x38
    d1dc:	e79c      	b.n	d118 <_malloc_r+0x32c>
    d1de:	42bd      	cmp	r5, r7
    d1e0:	d05f      	beq.n	d2a2 <_malloc_r+0x4b6>
    d1e2:	68bd      	ldr	r5, [r7, #8]
    d1e4:	6868      	ldr	r0, [r5, #4]
    d1e6:	f020 0803 	bic.w	r8, r0, #3
    d1ea:	4546      	cmp	r6, r8
    d1ec:	eba8 0306 	sub.w	r3, r8, r6
    d1f0:	d802      	bhi.n	d1f8 <_malloc_r+0x40c>
    d1f2:	2b0f      	cmp	r3, #15
    d1f4:	f73f af62 	bgt.w	d0bc <_malloc_r+0x2d0>
    d1f8:	4620      	mov	r0, r4
    d1fa:	f000 f8ad 	bl	d358 <__malloc_unlock>
    d1fe:	2500      	movs	r5, #0
    d200:	e6bc      	b.n	cf7c <_malloc_r+0x190>
    d202:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d206:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d20a:	00c3      	lsls	r3, r0, #3
    d20c:	e634      	b.n	ce78 <_malloc_r+0x8c>
    d20e:	f859 3908 	ldr.w	r3, [r9], #-8
    d212:	454b      	cmp	r3, r9
    d214:	f040 8096 	bne.w	d344 <_malloc_r+0x558>
    d218:	f010 0f03 	tst.w	r0, #3
    d21c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    d220:	d1f5      	bne.n	d20e <_malloc_r+0x422>
    d222:	687b      	ldr	r3, [r7, #4]
    d224:	ea23 0301 	bic.w	r3, r3, r1
    d228:	607b      	str	r3, [r7, #4]
    d22a:	0049      	lsls	r1, r1, #1
    d22c:	4299      	cmp	r1, r3
    d22e:	f63f aec0 	bhi.w	cfb2 <_malloc_r+0x1c6>
    d232:	b919      	cbnz	r1, d23c <_malloc_r+0x450>
    d234:	e6bd      	b.n	cfb2 <_malloc_r+0x1c6>
    d236:	0049      	lsls	r1, r1, #1
    d238:	f10e 0e04 	add.w	lr, lr, #4
    d23c:	4219      	tst	r1, r3
    d23e:	d0fa      	beq.n	d236 <_malloc_r+0x44a>
    d240:	4670      	mov	r0, lr
    d242:	e667      	b.n	cf14 <_malloc_r+0x128>
    d244:	f103 0810 	add.w	r8, r3, #16
    d248:	e6d0      	b.n	cfec <_malloc_r+0x200>
    d24a:	109a      	asrs	r2, r3, #2
    d24c:	f04f 0801 	mov.w	r8, #1
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	fa08 f202 	lsl.w	r2, r8, r2
    d256:	431a      	orrs	r2, r3
    d258:	607a      	str	r2, [r7, #4]
    d25a:	e770      	b.n	d13e <_malloc_r+0x352>
    d25c:	eb02 0108 	add.w	r1, r2, r8
    d260:	4249      	negs	r1, r1
    d262:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d266:	4651      	mov	r1, sl
    d268:	4620      	mov	r0, r4
    d26a:	9200      	str	r2, [sp, #0]
    d26c:	f000 ffc0 	bl	e1f0 <_sbrk_r>
    d270:	1c43      	adds	r3, r0, #1
    d272:	e9dd 2300 	ldrd	r2, r3, [sp]
    d276:	f47f aeef 	bne.w	d058 <_malloc_r+0x26c>
    d27a:	46da      	mov	sl, fp
    d27c:	e6ef      	b.n	d05e <_malloc_r+0x272>
    d27e:	2b54      	cmp	r3, #84	; 0x54
    d280:	d825      	bhi.n	d2ce <_malloc_r+0x4e2>
    d282:	0b13      	lsrs	r3, r2, #12
    d284:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d288:	00c9      	lsls	r1, r1, #3
    d28a:	336e      	adds	r3, #110	; 0x6e
    d28c:	e744      	b.n	d118 <_malloc_r+0x32c>
    d28e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d292:	d825      	bhi.n	d2e0 <_malloc_r+0x4f4>
    d294:	0bf3      	lsrs	r3, r6, #15
    d296:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d29a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d29e:	00c3      	lsls	r3, r0, #3
    d2a0:	e5ea      	b.n	ce78 <_malloc_r+0x8c>
    d2a2:	4b29      	ldr	r3, [pc, #164]	; (d348 <_malloc_r+0x55c>)
    d2a4:	6818      	ldr	r0, [r3, #0]
    d2a6:	4440      	add	r0, r8
    d2a8:	6018      	str	r0, [r3, #0]
    d2aa:	e6b1      	b.n	d010 <_malloc_r+0x224>
    d2ac:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d2b0:	f1bc 0f00 	cmp.w	ip, #0
    d2b4:	f47f aeac 	bne.w	d010 <_malloc_r+0x224>
    d2b8:	68bd      	ldr	r5, [r7, #8]
    d2ba:	44c8      	add	r8, r9
    d2bc:	f048 0001 	orr.w	r0, r8, #1
    d2c0:	6068      	str	r0, [r5, #4]
    d2c2:	e6f0      	b.n	d0a6 <_malloc_r+0x2ba>
    d2c4:	4615      	mov	r5, r2
    d2c6:	e6ee      	b.n	d0a6 <_malloc_r+0x2ba>
    d2c8:	2301      	movs	r3, #1
    d2ca:	6053      	str	r3, [r2, #4]
    d2cc:	e794      	b.n	d1f8 <_malloc_r+0x40c>
    d2ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d2d2:	d823      	bhi.n	d31c <_malloc_r+0x530>
    d2d4:	0bd3      	lsrs	r3, r2, #15
    d2d6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d2da:	00c9      	lsls	r1, r1, #3
    d2dc:	3377      	adds	r3, #119	; 0x77
    d2de:	e71b      	b.n	d118 <_malloc_r+0x32c>
    d2e0:	f240 5254 	movw	r2, #1364	; 0x554
    d2e4:	4293      	cmp	r3, r2
    d2e6:	d823      	bhi.n	d330 <_malloc_r+0x544>
    d2e8:	0cb3      	lsrs	r3, r6, #18
    d2ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d2ee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d2f2:	00c3      	lsls	r3, r0, #3
    d2f4:	e5c0      	b.n	ce78 <_malloc_r+0x8c>
    d2f6:	f1ab 0b08 	sub.w	fp, fp, #8
    d2fa:	44d8      	add	r8, fp
    d2fc:	eba8 0802 	sub.w	r8, r8, r2
    d300:	f04f 0a00 	mov.w	sl, #0
    d304:	e6ab      	b.n	d05e <_malloc_r+0x272>
    d306:	f105 0108 	add.w	r1, r5, #8
    d30a:	4620      	mov	r0, r4
    d30c:	9300      	str	r3, [sp, #0]
    d30e:	f001 fa99 	bl	e844 <_free_r>
    d312:	68bd      	ldr	r5, [r7, #8]
    d314:	9b00      	ldr	r3, [sp, #0]
    d316:	6868      	ldr	r0, [r5, #4]
    d318:	6819      	ldr	r1, [r3, #0]
    d31a:	e6c4      	b.n	d0a6 <_malloc_r+0x2ba>
    d31c:	f240 5154 	movw	r1, #1364	; 0x554
    d320:	428b      	cmp	r3, r1
    d322:	d80b      	bhi.n	d33c <_malloc_r+0x550>
    d324:	0c93      	lsrs	r3, r2, #18
    d326:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d32a:	00c9      	lsls	r1, r1, #3
    d32c:	337c      	adds	r3, #124	; 0x7c
    d32e:	e6f3      	b.n	d118 <_malloc_r+0x32c>
    d330:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d334:	207f      	movs	r0, #127	; 0x7f
    d336:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d33a:	e59d      	b.n	ce78 <_malloc_r+0x8c>
    d33c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d340:	237e      	movs	r3, #126	; 0x7e
    d342:	e6e9      	b.n	d118 <_malloc_r+0x32c>
    d344:	687b      	ldr	r3, [r7, #4]
    d346:	e770      	b.n	d22a <_malloc_r+0x43e>
    d348:	20003e88 	.word	0x20003e88

0000d34c <__malloc_lock>:
    d34c:	4801      	ldr	r0, [pc, #4]	; (d354 <__malloc_lock+0x8>)
    d34e:	f001 b91d 	b.w	e58c <__retarget_lock_acquire_recursive>
    d352:	bf00      	nop
    d354:	20003e80 	.word	0x20003e80

0000d358 <__malloc_unlock>:
    d358:	4801      	ldr	r0, [pc, #4]	; (d360 <__malloc_unlock+0x8>)
    d35a:	f001 b919 	b.w	e590 <__retarget_lock_release_recursive>
    d35e:	bf00      	nop
    d360:	20003e80 	.word	0x20003e80

0000d364 <realloc>:
    d364:	b410      	push	{r4}
    d366:	4c04      	ldr	r4, [pc, #16]	; (d378 <realloc+0x14>)
    d368:	4603      	mov	r3, r0
    d36a:	460a      	mov	r2, r1
    d36c:	6820      	ldr	r0, [r4, #0]
    d36e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d372:	4619      	mov	r1, r3
    d374:	f000 b802 	b.w	d37c <_realloc_r>
    d378:	2000359c 	.word	0x2000359c

0000d37c <_realloc_r>:
    d37c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d380:	4617      	mov	r7, r2
    d382:	2900      	cmp	r1, #0
    d384:	f000 8098 	beq.w	d4b8 <_realloc_r+0x13c>
    d388:	460c      	mov	r4, r1
    d38a:	f107 050b 	add.w	r5, r7, #11
    d38e:	4680      	mov	r8, r0
    d390:	f7ff ffdc 	bl	d34c <__malloc_lock>
    d394:	2d16      	cmp	r5, #22
    d396:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d39a:	d85b      	bhi.n	d454 <_realloc_r+0xd8>
    d39c:	2510      	movs	r5, #16
    d39e:	462a      	mov	r2, r5
    d3a0:	42af      	cmp	r7, r5
    d3a2:	d85c      	bhi.n	d45e <_realloc_r+0xe2>
    d3a4:	f021 0603 	bic.w	r6, r1, #3
    d3a8:	4296      	cmp	r6, r2
    d3aa:	f1a4 0908 	sub.w	r9, r4, #8
    d3ae:	da62      	bge.n	d476 <_realloc_r+0xfa>
    d3b0:	4bbc      	ldr	r3, [pc, #752]	; (d6a4 <_realloc_r+0x328>)
    d3b2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d3b6:	eb09 0006 	add.w	r0, r9, r6
    d3ba:	4584      	cmp	ip, r0
    d3bc:	f000 8097 	beq.w	d4ee <_realloc_r+0x172>
    d3c0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d3c4:	f02c 0301 	bic.w	r3, ip, #1
    d3c8:	4403      	add	r3, r0
    d3ca:	685b      	ldr	r3, [r3, #4]
    d3cc:	07db      	lsls	r3, r3, #31
    d3ce:	d468      	bmi.n	d4a2 <_realloc_r+0x126>
    d3d0:	f02c 0c03 	bic.w	ip, ip, #3
    d3d4:	eb06 030c 	add.w	r3, r6, ip
    d3d8:	4293      	cmp	r3, r2
    d3da:	da47      	bge.n	d46c <_realloc_r+0xf0>
    d3dc:	07cb      	lsls	r3, r1, #31
    d3de:	d410      	bmi.n	d402 <_realloc_r+0x86>
    d3e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d3e4:	eba9 0a03 	sub.w	sl, r9, r3
    d3e8:	f8da 3004 	ldr.w	r3, [sl, #4]
    d3ec:	f023 0103 	bic.w	r1, r3, #3
    d3f0:	448c      	add	ip, r1
    d3f2:	44b4      	add	ip, r6
    d3f4:	4594      	cmp	ip, r2
    d3f6:	f280 8111 	bge.w	d61c <_realloc_r+0x2a0>
    d3fa:	1873      	adds	r3, r6, r1
    d3fc:	4293      	cmp	r3, r2
    d3fe:	f280 80e8 	bge.w	d5d2 <_realloc_r+0x256>
    d402:	4639      	mov	r1, r7
    d404:	4640      	mov	r0, r8
    d406:	f7ff fcf1 	bl	cdec <_malloc_r>
    d40a:	4607      	mov	r7, r0
    d40c:	b1e0      	cbz	r0, d448 <_realloc_r+0xcc>
    d40e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d412:	f023 0301 	bic.w	r3, r3, #1
    d416:	444b      	add	r3, r9
    d418:	f1a0 0208 	sub.w	r2, r0, #8
    d41c:	4293      	cmp	r3, r2
    d41e:	f000 80d2 	beq.w	d5c6 <_realloc_r+0x24a>
    d422:	1f32      	subs	r2, r6, #4
    d424:	2a24      	cmp	r2, #36	; 0x24
    d426:	f200 80f5 	bhi.w	d614 <_realloc_r+0x298>
    d42a:	2a13      	cmp	r2, #19
    d42c:	f200 80ac 	bhi.w	d588 <_realloc_r+0x20c>
    d430:	4603      	mov	r3, r0
    d432:	4622      	mov	r2, r4
    d434:	6811      	ldr	r1, [r2, #0]
    d436:	6019      	str	r1, [r3, #0]
    d438:	6851      	ldr	r1, [r2, #4]
    d43a:	6059      	str	r1, [r3, #4]
    d43c:	6892      	ldr	r2, [r2, #8]
    d43e:	609a      	str	r2, [r3, #8]
    d440:	4621      	mov	r1, r4
    d442:	4640      	mov	r0, r8
    d444:	f001 f9fe 	bl	e844 <_free_r>
    d448:	4640      	mov	r0, r8
    d44a:	f7ff ff85 	bl	d358 <__malloc_unlock>
    d44e:	4638      	mov	r0, r7
    d450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d454:	f025 0507 	bic.w	r5, r5, #7
    d458:	2d00      	cmp	r5, #0
    d45a:	462a      	mov	r2, r5
    d45c:	daa0      	bge.n	d3a0 <_realloc_r+0x24>
    d45e:	230c      	movs	r3, #12
    d460:	f8c8 3000 	str.w	r3, [r8]
    d464:	2700      	movs	r7, #0
    d466:	4638      	mov	r0, r7
    d468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d46c:	461e      	mov	r6, r3
    d46e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    d472:	60d3      	str	r3, [r2, #12]
    d474:	609a      	str	r2, [r3, #8]
    d476:	1b73      	subs	r3, r6, r5
    d478:	2b0f      	cmp	r3, #15
    d47a:	d822      	bhi.n	d4c2 <_realloc_r+0x146>
    d47c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d480:	f003 0301 	and.w	r3, r3, #1
    d484:	4333      	orrs	r3, r6
    d486:	444e      	add	r6, r9
    d488:	f8c9 3004 	str.w	r3, [r9, #4]
    d48c:	6873      	ldr	r3, [r6, #4]
    d48e:	f043 0301 	orr.w	r3, r3, #1
    d492:	6073      	str	r3, [r6, #4]
    d494:	4640      	mov	r0, r8
    d496:	4627      	mov	r7, r4
    d498:	f7ff ff5e 	bl	d358 <__malloc_unlock>
    d49c:	4638      	mov	r0, r7
    d49e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4a2:	07c9      	lsls	r1, r1, #31
    d4a4:	d4ad      	bmi.n	d402 <_realloc_r+0x86>
    d4a6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d4aa:	eba9 0a03 	sub.w	sl, r9, r3
    d4ae:	f8da 1004 	ldr.w	r1, [sl, #4]
    d4b2:	f021 0103 	bic.w	r1, r1, #3
    d4b6:	e7a0      	b.n	d3fa <_realloc_r+0x7e>
    d4b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4bc:	4611      	mov	r1, r2
    d4be:	f7ff bc95 	b.w	cdec <_malloc_r>
    d4c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d4c6:	eb09 0105 	add.w	r1, r9, r5
    d4ca:	f002 0201 	and.w	r2, r2, #1
    d4ce:	444e      	add	r6, r9
    d4d0:	f043 0301 	orr.w	r3, r3, #1
    d4d4:	432a      	orrs	r2, r5
    d4d6:	f8c9 2004 	str.w	r2, [r9, #4]
    d4da:	604b      	str	r3, [r1, #4]
    d4dc:	6873      	ldr	r3, [r6, #4]
    d4de:	f043 0301 	orr.w	r3, r3, #1
    d4e2:	3108      	adds	r1, #8
    d4e4:	6073      	str	r3, [r6, #4]
    d4e6:	4640      	mov	r0, r8
    d4e8:	f001 f9ac 	bl	e844 <_free_r>
    d4ec:	e7d2      	b.n	d494 <_realloc_r+0x118>
    d4ee:	f8dc 0004 	ldr.w	r0, [ip, #4]
    d4f2:	f020 0b03 	bic.w	fp, r0, #3
    d4f6:	eb06 0c0b 	add.w	ip, r6, fp
    d4fa:	f105 0010 	add.w	r0, r5, #16
    d4fe:	4584      	cmp	ip, r0
    d500:	da4d      	bge.n	d59e <_realloc_r+0x222>
    d502:	07c9      	lsls	r1, r1, #31
    d504:	f53f af7d 	bmi.w	d402 <_realloc_r+0x86>
    d508:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d50c:	eba9 0a01 	sub.w	sl, r9, r1
    d510:	f8da 1004 	ldr.w	r1, [sl, #4]
    d514:	f021 0103 	bic.w	r1, r1, #3
    d518:	448b      	add	fp, r1
    d51a:	44b3      	add	fp, r6
    d51c:	4558      	cmp	r0, fp
    d51e:	f73f af6c 	bgt.w	d3fa <_realloc_r+0x7e>
    d522:	4657      	mov	r7, sl
    d524:	f8da 100c 	ldr.w	r1, [sl, #12]
    d528:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d52c:	1f32      	subs	r2, r6, #4
    d52e:	2a24      	cmp	r2, #36	; 0x24
    d530:	60c1      	str	r1, [r0, #12]
    d532:	6088      	str	r0, [r1, #8]
    d534:	f200 80db 	bhi.w	d6ee <_realloc_r+0x372>
    d538:	2a13      	cmp	r2, #19
    d53a:	f240 80d6 	bls.w	d6ea <_realloc_r+0x36e>
    d53e:	6821      	ldr	r1, [r4, #0]
    d540:	f8ca 1008 	str.w	r1, [sl, #8]
    d544:	6861      	ldr	r1, [r4, #4]
    d546:	f8ca 100c 	str.w	r1, [sl, #12]
    d54a:	2a1b      	cmp	r2, #27
    d54c:	f200 80df 	bhi.w	d70e <_realloc_r+0x392>
    d550:	3408      	adds	r4, #8
    d552:	f10a 0210 	add.w	r2, sl, #16
    d556:	6821      	ldr	r1, [r4, #0]
    d558:	6011      	str	r1, [r2, #0]
    d55a:	6861      	ldr	r1, [r4, #4]
    d55c:	6051      	str	r1, [r2, #4]
    d55e:	68a1      	ldr	r1, [r4, #8]
    d560:	6091      	str	r1, [r2, #8]
    d562:	eb0a 0105 	add.w	r1, sl, r5
    d566:	ebab 0205 	sub.w	r2, fp, r5
    d56a:	f042 0201 	orr.w	r2, r2, #1
    d56e:	6099      	str	r1, [r3, #8]
    d570:	604a      	str	r2, [r1, #4]
    d572:	f8da 3004 	ldr.w	r3, [sl, #4]
    d576:	f003 0301 	and.w	r3, r3, #1
    d57a:	432b      	orrs	r3, r5
    d57c:	4640      	mov	r0, r8
    d57e:	f8ca 3004 	str.w	r3, [sl, #4]
    d582:	f7ff fee9 	bl	d358 <__malloc_unlock>
    d586:	e76e      	b.n	d466 <_realloc_r+0xea>
    d588:	6823      	ldr	r3, [r4, #0]
    d58a:	6003      	str	r3, [r0, #0]
    d58c:	6863      	ldr	r3, [r4, #4]
    d58e:	6043      	str	r3, [r0, #4]
    d590:	2a1b      	cmp	r2, #27
    d592:	d868      	bhi.n	d666 <_realloc_r+0x2ea>
    d594:	f104 0208 	add.w	r2, r4, #8
    d598:	f100 0308 	add.w	r3, r0, #8
    d59c:	e74a      	b.n	d434 <_realloc_r+0xb8>
    d59e:	eb09 0205 	add.w	r2, r9, r5
    d5a2:	609a      	str	r2, [r3, #8]
    d5a4:	ebac 0305 	sub.w	r3, ip, r5
    d5a8:	f043 0301 	orr.w	r3, r3, #1
    d5ac:	6053      	str	r3, [r2, #4]
    d5ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d5b2:	f003 0301 	and.w	r3, r3, #1
    d5b6:	432b      	orrs	r3, r5
    d5b8:	4640      	mov	r0, r8
    d5ba:	f844 3c04 	str.w	r3, [r4, #-4]
    d5be:	f7ff fecb 	bl	d358 <__malloc_unlock>
    d5c2:	4627      	mov	r7, r4
    d5c4:	e74f      	b.n	d466 <_realloc_r+0xea>
    d5c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d5ca:	f023 0303 	bic.w	r3, r3, #3
    d5ce:	441e      	add	r6, r3
    d5d0:	e751      	b.n	d476 <_realloc_r+0xfa>
    d5d2:	4657      	mov	r7, sl
    d5d4:	f8da 100c 	ldr.w	r1, [sl, #12]
    d5d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d5dc:	1f32      	subs	r2, r6, #4
    d5de:	2a24      	cmp	r2, #36	; 0x24
    d5e0:	60c1      	str	r1, [r0, #12]
    d5e2:	6088      	str	r0, [r1, #8]
    d5e4:	d84c      	bhi.n	d680 <_realloc_r+0x304>
    d5e6:	2a13      	cmp	r2, #19
    d5e8:	d948      	bls.n	d67c <_realloc_r+0x300>
    d5ea:	6821      	ldr	r1, [r4, #0]
    d5ec:	f8ca 1008 	str.w	r1, [sl, #8]
    d5f0:	6861      	ldr	r1, [r4, #4]
    d5f2:	f8ca 100c 	str.w	r1, [sl, #12]
    d5f6:	2a1b      	cmp	r2, #27
    d5f8:	d856      	bhi.n	d6a8 <_realloc_r+0x32c>
    d5fa:	3408      	adds	r4, #8
    d5fc:	f10a 0210 	add.w	r2, sl, #16
    d600:	461e      	mov	r6, r3
    d602:	6823      	ldr	r3, [r4, #0]
    d604:	6013      	str	r3, [r2, #0]
    d606:	6863      	ldr	r3, [r4, #4]
    d608:	6053      	str	r3, [r2, #4]
    d60a:	68a3      	ldr	r3, [r4, #8]
    d60c:	6093      	str	r3, [r2, #8]
    d60e:	46d1      	mov	r9, sl
    d610:	463c      	mov	r4, r7
    d612:	e730      	b.n	d476 <_realloc_r+0xfa>
    d614:	4621      	mov	r1, r4
    d616:	f000 fc99 	bl	df4c <memmove>
    d61a:	e711      	b.n	d440 <_realloc_r+0xc4>
    d61c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    d620:	4657      	mov	r7, sl
    d622:	60cb      	str	r3, [r1, #12]
    d624:	6099      	str	r1, [r3, #8]
    d626:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d62a:	f8da 300c 	ldr.w	r3, [sl, #12]
    d62e:	60cb      	str	r3, [r1, #12]
    d630:	1f32      	subs	r2, r6, #4
    d632:	2a24      	cmp	r2, #36	; 0x24
    d634:	6099      	str	r1, [r3, #8]
    d636:	d82d      	bhi.n	d694 <_realloc_r+0x318>
    d638:	2a13      	cmp	r2, #19
    d63a:	d929      	bls.n	d690 <_realloc_r+0x314>
    d63c:	6823      	ldr	r3, [r4, #0]
    d63e:	f8ca 3008 	str.w	r3, [sl, #8]
    d642:	6863      	ldr	r3, [r4, #4]
    d644:	f8ca 300c 	str.w	r3, [sl, #12]
    d648:	2a1b      	cmp	r2, #27
    d64a:	d842      	bhi.n	d6d2 <_realloc_r+0x356>
    d64c:	3408      	adds	r4, #8
    d64e:	f10a 0310 	add.w	r3, sl, #16
    d652:	6822      	ldr	r2, [r4, #0]
    d654:	601a      	str	r2, [r3, #0]
    d656:	6862      	ldr	r2, [r4, #4]
    d658:	605a      	str	r2, [r3, #4]
    d65a:	68a2      	ldr	r2, [r4, #8]
    d65c:	609a      	str	r2, [r3, #8]
    d65e:	4666      	mov	r6, ip
    d660:	46d1      	mov	r9, sl
    d662:	463c      	mov	r4, r7
    d664:	e707      	b.n	d476 <_realloc_r+0xfa>
    d666:	68a3      	ldr	r3, [r4, #8]
    d668:	6083      	str	r3, [r0, #8]
    d66a:	68e3      	ldr	r3, [r4, #12]
    d66c:	60c3      	str	r3, [r0, #12]
    d66e:	2a24      	cmp	r2, #36	; 0x24
    d670:	d026      	beq.n	d6c0 <_realloc_r+0x344>
    d672:	f104 0210 	add.w	r2, r4, #16
    d676:	f100 0310 	add.w	r3, r0, #16
    d67a:	e6db      	b.n	d434 <_realloc_r+0xb8>
    d67c:	463a      	mov	r2, r7
    d67e:	e7bf      	b.n	d600 <_realloc_r+0x284>
    d680:	4621      	mov	r1, r4
    d682:	4638      	mov	r0, r7
    d684:	461e      	mov	r6, r3
    d686:	46d1      	mov	r9, sl
    d688:	f000 fc60 	bl	df4c <memmove>
    d68c:	463c      	mov	r4, r7
    d68e:	e6f2      	b.n	d476 <_realloc_r+0xfa>
    d690:	463b      	mov	r3, r7
    d692:	e7de      	b.n	d652 <_realloc_r+0x2d6>
    d694:	4621      	mov	r1, r4
    d696:	4638      	mov	r0, r7
    d698:	4666      	mov	r6, ip
    d69a:	46d1      	mov	r9, sl
    d69c:	f000 fc56 	bl	df4c <memmove>
    d6a0:	463c      	mov	r4, r7
    d6a2:	e6e8      	b.n	d476 <_realloc_r+0xfa>
    d6a4:	20003180 	.word	0x20003180
    d6a8:	68a1      	ldr	r1, [r4, #8]
    d6aa:	f8ca 1010 	str.w	r1, [sl, #16]
    d6ae:	68e1      	ldr	r1, [r4, #12]
    d6b0:	f8ca 1014 	str.w	r1, [sl, #20]
    d6b4:	2a24      	cmp	r2, #36	; 0x24
    d6b6:	d020      	beq.n	d6fa <_realloc_r+0x37e>
    d6b8:	3410      	adds	r4, #16
    d6ba:	f10a 0218 	add.w	r2, sl, #24
    d6be:	e79f      	b.n	d600 <_realloc_r+0x284>
    d6c0:	6923      	ldr	r3, [r4, #16]
    d6c2:	6103      	str	r3, [r0, #16]
    d6c4:	6961      	ldr	r1, [r4, #20]
    d6c6:	6141      	str	r1, [r0, #20]
    d6c8:	f104 0218 	add.w	r2, r4, #24
    d6cc:	f100 0318 	add.w	r3, r0, #24
    d6d0:	e6b0      	b.n	d434 <_realloc_r+0xb8>
    d6d2:	68a3      	ldr	r3, [r4, #8]
    d6d4:	f8ca 3010 	str.w	r3, [sl, #16]
    d6d8:	68e3      	ldr	r3, [r4, #12]
    d6da:	f8ca 3014 	str.w	r3, [sl, #20]
    d6de:	2a24      	cmp	r2, #36	; 0x24
    d6e0:	d021      	beq.n	d726 <_realloc_r+0x3aa>
    d6e2:	3410      	adds	r4, #16
    d6e4:	f10a 0318 	add.w	r3, sl, #24
    d6e8:	e7b3      	b.n	d652 <_realloc_r+0x2d6>
    d6ea:	463a      	mov	r2, r7
    d6ec:	e733      	b.n	d556 <_realloc_r+0x1da>
    d6ee:	4621      	mov	r1, r4
    d6f0:	4638      	mov	r0, r7
    d6f2:	f000 fc2b 	bl	df4c <memmove>
    d6f6:	4b16      	ldr	r3, [pc, #88]	; (d750 <_realloc_r+0x3d4>)
    d6f8:	e733      	b.n	d562 <_realloc_r+0x1e6>
    d6fa:	6922      	ldr	r2, [r4, #16]
    d6fc:	f8ca 2018 	str.w	r2, [sl, #24]
    d700:	6962      	ldr	r2, [r4, #20]
    d702:	f8ca 201c 	str.w	r2, [sl, #28]
    d706:	3418      	adds	r4, #24
    d708:	f10a 0220 	add.w	r2, sl, #32
    d70c:	e778      	b.n	d600 <_realloc_r+0x284>
    d70e:	68a1      	ldr	r1, [r4, #8]
    d710:	f8ca 1010 	str.w	r1, [sl, #16]
    d714:	68e1      	ldr	r1, [r4, #12]
    d716:	f8ca 1014 	str.w	r1, [sl, #20]
    d71a:	2a24      	cmp	r2, #36	; 0x24
    d71c:	d00d      	beq.n	d73a <_realloc_r+0x3be>
    d71e:	3410      	adds	r4, #16
    d720:	f10a 0218 	add.w	r2, sl, #24
    d724:	e717      	b.n	d556 <_realloc_r+0x1da>
    d726:	6923      	ldr	r3, [r4, #16]
    d728:	f8ca 3018 	str.w	r3, [sl, #24]
    d72c:	6963      	ldr	r3, [r4, #20]
    d72e:	f8ca 301c 	str.w	r3, [sl, #28]
    d732:	3418      	adds	r4, #24
    d734:	f10a 0320 	add.w	r3, sl, #32
    d738:	e78b      	b.n	d652 <_realloc_r+0x2d6>
    d73a:	6922      	ldr	r2, [r4, #16]
    d73c:	f8ca 2018 	str.w	r2, [sl, #24]
    d740:	6962      	ldr	r2, [r4, #20]
    d742:	f8ca 201c 	str.w	r2, [sl, #28]
    d746:	3418      	adds	r4, #24
    d748:	f10a 0220 	add.w	r2, sl, #32
    d74c:	e703      	b.n	d556 <_realloc_r+0x1da>
    d74e:	bf00      	nop
    d750:	20003180 	.word	0x20003180

0000d754 <sprintf>:
    d754:	b40e      	push	{r1, r2, r3}
    d756:	b510      	push	{r4, lr}
    d758:	b09d      	sub	sp, #116	; 0x74
    d75a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d75e:	ab1f      	add	r3, sp, #124	; 0x7c
    d760:	e9cd 0106 	strd	r0, r1, [sp, #24]
    d764:	9104      	str	r1, [sp, #16]
    d766:	4909      	ldr	r1, [pc, #36]	; (d78c <sprintf+0x38>)
    d768:	f853 2b04 	ldr.w	r2, [r3], #4
    d76c:	9002      	str	r0, [sp, #8]
    d76e:	4c08      	ldr	r4, [pc, #32]	; (d790 <sprintf+0x3c>)
    d770:	6808      	ldr	r0, [r1, #0]
    d772:	9301      	str	r3, [sp, #4]
    d774:	a902      	add	r1, sp, #8
    d776:	9405      	str	r4, [sp, #20]
    d778:	f001 f982 	bl	ea80 <_svfprintf_r>
    d77c:	9b02      	ldr	r3, [sp, #8]
    d77e:	2200      	movs	r2, #0
    d780:	701a      	strb	r2, [r3, #0]
    d782:	b01d      	add	sp, #116	; 0x74
    d784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d788:	b003      	add	sp, #12
    d78a:	4770      	bx	lr
    d78c:	2000359c 	.word	0x2000359c
    d790:	ffff0208 	.word	0xffff0208

0000d794 <stdio_exit_handler>:
    d794:	4a02      	ldr	r2, [pc, #8]	; (d7a0 <stdio_exit_handler+0xc>)
    d796:	4903      	ldr	r1, [pc, #12]	; (d7a4 <stdio_exit_handler+0x10>)
    d798:	4803      	ldr	r0, [pc, #12]	; (d7a8 <stdio_exit_handler+0x14>)
    d79a:	f000 bab7 	b.w	dd0c <_fwalk_sglue>
    d79e:	bf00      	nop
    d7a0:	20003590 	.word	0x20003590
    d7a4:	00010e8d 	.word	0x00010e8d
    d7a8:	20002e78 	.word	0x20002e78

0000d7ac <cleanup_stdio>:
    d7ac:	4b0c      	ldr	r3, [pc, #48]	; (d7e0 <cleanup_stdio+0x34>)
    d7ae:	6841      	ldr	r1, [r0, #4]
    d7b0:	4299      	cmp	r1, r3
    d7b2:	b510      	push	{r4, lr}
    d7b4:	4604      	mov	r4, r0
    d7b6:	d001      	beq.n	d7bc <cleanup_stdio+0x10>
    d7b8:	f003 fb68 	bl	10e8c <_fclose_r>
    d7bc:	68a1      	ldr	r1, [r4, #8]
    d7be:	4b09      	ldr	r3, [pc, #36]	; (d7e4 <cleanup_stdio+0x38>)
    d7c0:	4299      	cmp	r1, r3
    d7c2:	d002      	beq.n	d7ca <cleanup_stdio+0x1e>
    d7c4:	4620      	mov	r0, r4
    d7c6:	f003 fb61 	bl	10e8c <_fclose_r>
    d7ca:	68e1      	ldr	r1, [r4, #12]
    d7cc:	4b06      	ldr	r3, [pc, #24]	; (d7e8 <cleanup_stdio+0x3c>)
    d7ce:	4299      	cmp	r1, r3
    d7d0:	d004      	beq.n	d7dc <cleanup_stdio+0x30>
    d7d2:	4620      	mov	r0, r4
    d7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d7d8:	f003 bb58 	b.w	10e8c <_fclose_r>
    d7dc:	bd10      	pop	{r4, pc}
    d7de:	bf00      	nop
    d7e0:	20003ebc 	.word	0x20003ebc
    d7e4:	20003f24 	.word	0x20003f24
    d7e8:	20003f8c 	.word	0x20003f8c

0000d7ec <global_stdio_init.part.0>:
    d7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7f0:	4c2a      	ldr	r4, [pc, #168]	; (d89c <global_stdio_init.part.0+0xb0>)
    d7f2:	4b2b      	ldr	r3, [pc, #172]	; (d8a0 <global_stdio_init.part.0+0xb4>)
    d7f4:	482b      	ldr	r0, [pc, #172]	; (d8a4 <global_stdio_init.part.0+0xb8>)
    d7f6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d8b8 <global_stdio_init.part.0+0xcc>
    d7fa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d8bc <global_stdio_init.part.0+0xd0>
    d7fe:	4f2a      	ldr	r7, [pc, #168]	; (d8a8 <global_stdio_init.part.0+0xbc>)
    d800:	6018      	str	r0, [r3, #0]
    d802:	2500      	movs	r5, #0
    d804:	2304      	movs	r3, #4
    d806:	2208      	movs	r2, #8
    d808:	4629      	mov	r1, r5
    d80a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d80e:	4e27      	ldr	r6, [pc, #156]	; (d8ac <global_stdio_init.part.0+0xc0>)
    d810:	6665      	str	r5, [r4, #100]	; 0x64
    d812:	e9c4 5302 	strd	r5, r3, [r4, #8]
    d816:	e9c4 5500 	strd	r5, r5, [r4]
    d81a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d81e:	61a5      	str	r5, [r4, #24]
    d820:	f000 fc10 	bl	e044 <memset>
    d824:	4b22      	ldr	r3, [pc, #136]	; (d8b0 <global_stdio_init.part.0+0xc4>)
    d826:	6763      	str	r3, [r4, #116]	; 0x74
    d828:	2208      	movs	r2, #8
    d82a:	4629      	mov	r1, r5
    d82c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d830:	e9c4 4907 	strd	r4, r9, [r4, #28]
    d834:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    d838:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    d83c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    d840:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    d844:	6725      	str	r5, [r4, #112]	; 0x70
    d846:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    d84a:	62e6      	str	r6, [r4, #44]	; 0x2c
    d84c:	f000 fbfa 	bl	e044 <memset>
    d850:	4b18      	ldr	r3, [pc, #96]	; (d8b4 <global_stdio_init.part.0+0xc8>)
    d852:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    d856:	4629      	mov	r1, r5
    d858:	f104 0368 	add.w	r3, r4, #104	; 0x68
    d85c:	2208      	movs	r2, #8
    d85e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    d862:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    d866:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    d86a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    d86e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    d872:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    d876:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    d87a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    d87e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    d882:	f000 fbdf 	bl	e044 <memset>
    d886:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    d88a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    d88e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    d892:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    d896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d89a:	bf00      	nop
    d89c:	20003ebc 	.word	0x20003ebc
    d8a0:	20003ff4 	.word	0x20003ff4
    d8a4:	0000d795 	.word	0x0000d795
    d8a8:	0001113d 	.word	0x0001113d
    d8ac:	0001115d 	.word	0x0001115d
    d8b0:	00010009 	.word	0x00010009
    d8b4:	00020012 	.word	0x00020012
    d8b8:	000110d9 	.word	0x000110d9
    d8bc:	000110fd 	.word	0x000110fd

0000d8c0 <__sinit>:
    d8c0:	b510      	push	{r4, lr}
    d8c2:	4604      	mov	r4, r0
    d8c4:	480a      	ldr	r0, [pc, #40]	; (d8f0 <__sinit+0x30>)
    d8c6:	f000 fe61 	bl	e58c <__retarget_lock_acquire_recursive>
    d8ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d8cc:	b923      	cbnz	r3, d8d8 <__sinit+0x18>
    d8ce:	4b09      	ldr	r3, [pc, #36]	; (d8f4 <__sinit+0x34>)
    d8d0:	4a09      	ldr	r2, [pc, #36]	; (d8f8 <__sinit+0x38>)
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	6362      	str	r2, [r4, #52]	; 0x34
    d8d6:	b123      	cbz	r3, d8e2 <__sinit+0x22>
    d8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8dc:	4804      	ldr	r0, [pc, #16]	; (d8f0 <__sinit+0x30>)
    d8de:	f000 be57 	b.w	e590 <__retarget_lock_release_recursive>
    d8e2:	f7ff ff83 	bl	d7ec <global_stdio_init.part.0>
    d8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8ea:	4801      	ldr	r0, [pc, #4]	; (d8f0 <__sinit+0x30>)
    d8ec:	f000 be50 	b.w	e590 <__retarget_lock_release_recursive>
    d8f0:	20003e84 	.word	0x20003e84
    d8f4:	20003ff4 	.word	0x20003ff4
    d8f8:	0000d7ad 	.word	0x0000d7ad

0000d8fc <__sfp_lock_acquire>:
    d8fc:	4801      	ldr	r0, [pc, #4]	; (d904 <__sfp_lock_acquire+0x8>)
    d8fe:	f000 be45 	b.w	e58c <__retarget_lock_acquire_recursive>
    d902:	bf00      	nop
    d904:	20003e84 	.word	0x20003e84

0000d908 <__sfp_lock_release>:
    d908:	4801      	ldr	r0, [pc, #4]	; (d910 <__sfp_lock_release+0x8>)
    d90a:	f000 be41 	b.w	e590 <__retarget_lock_release_recursive>
    d90e:	bf00      	nop
    d910:	20003e84 	.word	0x20003e84

0000d914 <fputc>:
    d914:	b530      	push	{r4, r5, lr}
    d916:	4b17      	ldr	r3, [pc, #92]	; (d974 <fputc+0x60>)
    d918:	681d      	ldr	r5, [r3, #0]
    d91a:	460c      	mov	r4, r1
    d91c:	b083      	sub	sp, #12
    d91e:	4601      	mov	r1, r0
    d920:	b10d      	cbz	r5, d926 <fputc+0x12>
    d922:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d924:	b1fb      	cbz	r3, d966 <fputc+0x52>
    d926:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d928:	07db      	lsls	r3, r3, #31
    d92a:	d402      	bmi.n	d932 <fputc+0x1e>
    d92c:	89a3      	ldrh	r3, [r4, #12]
    d92e:	0598      	lsls	r0, r3, #22
    d930:	d513      	bpl.n	d95a <fputc+0x46>
    d932:	4622      	mov	r2, r4
    d934:	4628      	mov	r0, r5
    d936:	f002 feb1 	bl	1069c <_putc_r>
    d93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d93c:	07da      	lsls	r2, r3, #31
    d93e:	4605      	mov	r5, r0
    d940:	d402      	bmi.n	d948 <fputc+0x34>
    d942:	89a3      	ldrh	r3, [r4, #12]
    d944:	059b      	lsls	r3, r3, #22
    d946:	d502      	bpl.n	d94e <fputc+0x3a>
    d948:	4628      	mov	r0, r5
    d94a:	b003      	add	sp, #12
    d94c:	bd30      	pop	{r4, r5, pc}
    d94e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d950:	f000 fe1e 	bl	e590 <__retarget_lock_release_recursive>
    d954:	4628      	mov	r0, r5
    d956:	b003      	add	sp, #12
    d958:	bd30      	pop	{r4, r5, pc}
    d95a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d95c:	9101      	str	r1, [sp, #4]
    d95e:	f000 fe15 	bl	e58c <__retarget_lock_acquire_recursive>
    d962:	9901      	ldr	r1, [sp, #4]
    d964:	e7e5      	b.n	d932 <fputc+0x1e>
    d966:	9001      	str	r0, [sp, #4]
    d968:	4628      	mov	r0, r5
    d96a:	f7ff ffa9 	bl	d8c0 <__sinit>
    d96e:	9901      	ldr	r1, [sp, #4]
    d970:	e7d9      	b.n	d926 <fputc+0x12>
    d972:	bf00      	nop
    d974:	2000359c 	.word	0x2000359c

0000d978 <_fputs_r>:
    d978:	b530      	push	{r4, r5, lr}
    d97a:	b087      	sub	sp, #28
    d97c:	4605      	mov	r5, r0
    d97e:	4608      	mov	r0, r1
    d980:	4614      	mov	r4, r2
    d982:	9101      	str	r1, [sp, #4]
    d984:	f000 fe5c 	bl	e640 <strlen>
    d988:	aa01      	add	r2, sp, #4
    d98a:	2301      	movs	r3, #1
    d98c:	e9cd 0202 	strd	r0, r2, [sp, #8]
    d990:	9005      	str	r0, [sp, #20]
    d992:	9304      	str	r3, [sp, #16]
    d994:	b10d      	cbz	r5, d99a <_fputs_r+0x22>
    d996:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d998:	b36b      	cbz	r3, d9f6 <_fputs_r+0x7e>
    d99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d99c:	f013 0f01 	tst.w	r3, #1
    d9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d9a4:	b29a      	uxth	r2, r3
    d9a6:	d101      	bne.n	d9ac <_fputs_r+0x34>
    d9a8:	0598      	lsls	r0, r3, #22
    d9aa:	d51d      	bpl.n	d9e8 <_fputs_r+0x70>
    d9ac:	0491      	lsls	r1, r2, #18
    d9ae:	d406      	bmi.n	d9be <_fputs_r+0x46>
    d9b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d9b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d9b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    d9ba:	81a3      	strh	r3, [r4, #12]
    d9bc:	6662      	str	r2, [r4, #100]	; 0x64
    d9be:	aa03      	add	r2, sp, #12
    d9c0:	4628      	mov	r0, r5
    d9c2:	4621      	mov	r1, r4
    d9c4:	f000 f828 	bl	da18 <__sfvwrite_r>
    d9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d9ca:	07da      	lsls	r2, r3, #31
    d9cc:	4605      	mov	r5, r0
    d9ce:	d402      	bmi.n	d9d6 <_fputs_r+0x5e>
    d9d0:	89a3      	ldrh	r3, [r4, #12]
    d9d2:	059b      	lsls	r3, r3, #22
    d9d4:	d502      	bpl.n	d9dc <_fputs_r+0x64>
    d9d6:	4628      	mov	r0, r5
    d9d8:	b007      	add	sp, #28
    d9da:	bd30      	pop	{r4, r5, pc}
    d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d9de:	f000 fdd7 	bl	e590 <__retarget_lock_release_recursive>
    d9e2:	4628      	mov	r0, r5
    d9e4:	b007      	add	sp, #28
    d9e6:	bd30      	pop	{r4, r5, pc}
    d9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d9ea:	f000 fdcf 	bl	e58c <__retarget_lock_acquire_recursive>
    d9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d9f2:	b29a      	uxth	r2, r3
    d9f4:	e7da      	b.n	d9ac <_fputs_r+0x34>
    d9f6:	4628      	mov	r0, r5
    d9f8:	f7ff ff62 	bl	d8c0 <__sinit>
    d9fc:	e7cd      	b.n	d99a <_fputs_r+0x22>
    d9fe:	bf00      	nop

0000da00 <fputs>:
    da00:	b410      	push	{r4}
    da02:	4c04      	ldr	r4, [pc, #16]	; (da14 <fputs+0x14>)
    da04:	4603      	mov	r3, r0
    da06:	460a      	mov	r2, r1
    da08:	6820      	ldr	r0, [r4, #0]
    da0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    da0e:	4619      	mov	r1, r3
    da10:	f7ff bfb2 	b.w	d978 <_fputs_r>
    da14:	2000359c 	.word	0x2000359c

0000da18 <__sfvwrite_r>:
    da18:	6893      	ldr	r3, [r2, #8]
    da1a:	2b00      	cmp	r3, #0
    da1c:	f000 8085 	beq.w	db2a <__sfvwrite_r+0x112>
    da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da24:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    da28:	460c      	mov	r4, r1
    da2a:	0719      	lsls	r1, r3, #28
    da2c:	4680      	mov	r8, r0
    da2e:	b083      	sub	sp, #12
    da30:	4617      	mov	r7, r2
    da32:	b298      	uxth	r0, r3
    da34:	d525      	bpl.n	da82 <__sfvwrite_r+0x6a>
    da36:	6923      	ldr	r3, [r4, #16]
    da38:	b31b      	cbz	r3, da82 <__sfvwrite_r+0x6a>
    da3a:	f010 0302 	ands.w	r3, r0, #2
    da3e:	683d      	ldr	r5, [r7, #0]
    da40:	d02d      	beq.n	da9e <__sfvwrite_r+0x86>
    da42:	f04f 0a00 	mov.w	sl, #0
    da46:	f8df b2c0 	ldr.w	fp, [pc, #704]	; dd08 <__sfvwrite_r+0x2f0>
    da4a:	4656      	mov	r6, sl
    da4c:	46b9      	mov	r9, r7
    da4e:	455e      	cmp	r6, fp
    da50:	4633      	mov	r3, r6
    da52:	4652      	mov	r2, sl
    da54:	bf28      	it	cs
    da56:	465b      	movcs	r3, fp
    da58:	4640      	mov	r0, r8
    da5a:	2e00      	cmp	r6, #0
    da5c:	d052      	beq.n	db04 <__sfvwrite_r+0xec>
    da5e:	69e1      	ldr	r1, [r4, #28]
    da60:	6a67      	ldr	r7, [r4, #36]	; 0x24
    da62:	47b8      	blx	r7
    da64:	2800      	cmp	r0, #0
    da66:	dd56      	ble.n	db16 <__sfvwrite_r+0xfe>
    da68:	f8d9 3008 	ldr.w	r3, [r9, #8]
    da6c:	1a1b      	subs	r3, r3, r0
    da6e:	4482      	add	sl, r0
    da70:	1a36      	subs	r6, r6, r0
    da72:	f8c9 3008 	str.w	r3, [r9, #8]
    da76:	2b00      	cmp	r3, #0
    da78:	d1e9      	bne.n	da4e <__sfvwrite_r+0x36>
    da7a:	2000      	movs	r0, #0
    da7c:	b003      	add	sp, #12
    da7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da82:	4621      	mov	r1, r4
    da84:	4640      	mov	r0, r8
    da86:	f000 f9cb 	bl	de20 <__swsetup_r>
    da8a:	2800      	cmp	r0, #0
    da8c:	f040 8138 	bne.w	dd00 <__sfvwrite_r+0x2e8>
    da90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    da94:	683d      	ldr	r5, [r7, #0]
    da96:	b298      	uxth	r0, r3
    da98:	f010 0302 	ands.w	r3, r0, #2
    da9c:	d1d1      	bne.n	da42 <__sfvwrite_r+0x2a>
    da9e:	f010 0901 	ands.w	r9, r0, #1
    daa2:	d144      	bne.n	db2e <__sfvwrite_r+0x116>
    daa4:	464e      	mov	r6, r9
    daa6:	9700      	str	r7, [sp, #0]
    daa8:	b346      	cbz	r6, dafc <__sfvwrite_r+0xe4>
    daaa:	0582      	lsls	r2, r0, #22
    daac:	f8d4 b008 	ldr.w	fp, [r4, #8]
    dab0:	f140 8085 	bpl.w	dbbe <__sfvwrite_r+0x1a6>
    dab4:	45b3      	cmp	fp, r6
    dab6:	465a      	mov	r2, fp
    dab8:	f200 80b4 	bhi.w	dc24 <__sfvwrite_r+0x20c>
    dabc:	f410 6f90 	tst.w	r0, #1152	; 0x480
    dac0:	f040 80c1 	bne.w	dc46 <__sfvwrite_r+0x22e>
    dac4:	6820      	ldr	r0, [r4, #0]
    dac6:	9201      	str	r2, [sp, #4]
    dac8:	4649      	mov	r1, r9
    daca:	f000 fa3f 	bl	df4c <memmove>
    dace:	68a3      	ldr	r3, [r4, #8]
    dad0:	9a01      	ldr	r2, [sp, #4]
    dad2:	eba3 010b 	sub.w	r1, r3, fp
    dad6:	6823      	ldr	r3, [r4, #0]
    dad8:	60a1      	str	r1, [r4, #8]
    dada:	4413      	add	r3, r2
    dadc:	46b2      	mov	sl, r6
    dade:	6023      	str	r3, [r4, #0]
    dae0:	2600      	movs	r6, #0
    dae2:	9a00      	ldr	r2, [sp, #0]
    dae4:	6893      	ldr	r3, [r2, #8]
    dae6:	eba3 030a 	sub.w	r3, r3, sl
    daea:	44d1      	add	r9, sl
    daec:	6093      	str	r3, [r2, #8]
    daee:	2b00      	cmp	r3, #0
    daf0:	d0c3      	beq.n	da7a <__sfvwrite_r+0x62>
    daf2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    daf6:	b280      	uxth	r0, r0
    daf8:	2e00      	cmp	r6, #0
    dafa:	d1d6      	bne.n	daaa <__sfvwrite_r+0x92>
    dafc:	e9d5 9600 	ldrd	r9, r6, [r5]
    db00:	3508      	adds	r5, #8
    db02:	e7d1      	b.n	daa8 <__sfvwrite_r+0x90>
    db04:	e9d5 a600 	ldrd	sl, r6, [r5]
    db08:	3508      	adds	r5, #8
    db0a:	e7a0      	b.n	da4e <__sfvwrite_r+0x36>
    db0c:	4621      	mov	r1, r4
    db0e:	4640      	mov	r0, r8
    db10:	f003 fab8 	bl	11084 <_fflush_r>
    db14:	b388      	cbz	r0, db7a <__sfvwrite_r+0x162>
    db16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    db1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db22:	81a3      	strh	r3, [r4, #12]
    db24:	b003      	add	sp, #12
    db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db2a:	2000      	movs	r0, #0
    db2c:	4770      	bx	lr
    db2e:	461e      	mov	r6, r3
    db30:	46ba      	mov	sl, r7
    db32:	4699      	mov	r9, r3
    db34:	4618      	mov	r0, r3
    db36:	9500      	str	r5, [sp, #0]
    db38:	461f      	mov	r7, r3
    db3a:	b366      	cbz	r6, db96 <__sfvwrite_r+0x17e>
    db3c:	2800      	cmp	r0, #0
    db3e:	d032      	beq.n	dba6 <__sfvwrite_r+0x18e>
    db40:	464a      	mov	r2, r9
    db42:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    db46:	6820      	ldr	r0, [r4, #0]
    db48:	68a5      	ldr	r5, [r4, #8]
    db4a:	42b2      	cmp	r2, r6
    db4c:	bf28      	it	cs
    db4e:	4632      	movcs	r2, r6
    db50:	4288      	cmp	r0, r1
    db52:	d904      	bls.n	db5e <__sfvwrite_r+0x146>
    db54:	eb05 0b03 	add.w	fp, r5, r3
    db58:	455a      	cmp	r2, fp
    db5a:	f300 80a7 	bgt.w	dcac <__sfvwrite_r+0x294>
    db5e:	4293      	cmp	r3, r2
    db60:	dc64      	bgt.n	dc2c <__sfvwrite_r+0x214>
    db62:	69e1      	ldr	r1, [r4, #28]
    db64:	6a65      	ldr	r5, [r4, #36]	; 0x24
    db66:	463a      	mov	r2, r7
    db68:	4640      	mov	r0, r8
    db6a:	47a8      	blx	r5
    db6c:	f1b0 0b00 	subs.w	fp, r0, #0
    db70:	ddd1      	ble.n	db16 <__sfvwrite_r+0xfe>
    db72:	ebb9 090b 	subs.w	r9, r9, fp
    db76:	d0c9      	beq.n	db0c <__sfvwrite_r+0xf4>
    db78:	2001      	movs	r0, #1
    db7a:	f8da 3008 	ldr.w	r3, [sl, #8]
    db7e:	eba3 030b 	sub.w	r3, r3, fp
    db82:	445f      	add	r7, fp
    db84:	eba6 060b 	sub.w	r6, r6, fp
    db88:	f8ca 3008 	str.w	r3, [sl, #8]
    db8c:	2b00      	cmp	r3, #0
    db8e:	f43f af74 	beq.w	da7a <__sfvwrite_r+0x62>
    db92:	2e00      	cmp	r6, #0
    db94:	d1d2      	bne.n	db3c <__sfvwrite_r+0x124>
    db96:	9a00      	ldr	r2, [sp, #0]
    db98:	6856      	ldr	r6, [r2, #4]
    db9a:	4613      	mov	r3, r2
    db9c:	3208      	adds	r2, #8
    db9e:	9200      	str	r2, [sp, #0]
    dba0:	2e00      	cmp	r6, #0
    dba2:	d0f8      	beq.n	db96 <__sfvwrite_r+0x17e>
    dba4:	681f      	ldr	r7, [r3, #0]
    dba6:	4632      	mov	r2, r6
    dba8:	210a      	movs	r1, #10
    dbaa:	4638      	mov	r0, r7
    dbac:	f000 fcf8 	bl	e5a0 <memchr>
    dbb0:	2800      	cmp	r0, #0
    dbb2:	f000 809c 	beq.w	dcee <__sfvwrite_r+0x2d6>
    dbb6:	3001      	adds	r0, #1
    dbb8:	eba0 0907 	sub.w	r9, r0, r7
    dbbc:	e7c0      	b.n	db40 <__sfvwrite_r+0x128>
    dbbe:	6820      	ldr	r0, [r4, #0]
    dbc0:	6923      	ldr	r3, [r4, #16]
    dbc2:	4298      	cmp	r0, r3
    dbc4:	d816      	bhi.n	dbf4 <__sfvwrite_r+0x1dc>
    dbc6:	6962      	ldr	r2, [r4, #20]
    dbc8:	42b2      	cmp	r2, r6
    dbca:	d813      	bhi.n	dbf4 <__sfvwrite_r+0x1dc>
    dbcc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dbd0:	42b3      	cmp	r3, r6
    dbd2:	bf28      	it	cs
    dbd4:	4633      	movcs	r3, r6
    dbd6:	69e1      	ldr	r1, [r4, #28]
    dbd8:	fb93 f3f2 	sdiv	r3, r3, r2
    dbdc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dbde:	fb02 f303 	mul.w	r3, r2, r3
    dbe2:	4640      	mov	r0, r8
    dbe4:	464a      	mov	r2, r9
    dbe6:	47b8      	blx	r7
    dbe8:	f1b0 0a00 	subs.w	sl, r0, #0
    dbec:	dd93      	ble.n	db16 <__sfvwrite_r+0xfe>
    dbee:	eba6 060a 	sub.w	r6, r6, sl
    dbf2:	e776      	b.n	dae2 <__sfvwrite_r+0xca>
    dbf4:	45b3      	cmp	fp, r6
    dbf6:	46da      	mov	sl, fp
    dbf8:	bf28      	it	cs
    dbfa:	46b2      	movcs	sl, r6
    dbfc:	4652      	mov	r2, sl
    dbfe:	4649      	mov	r1, r9
    dc00:	f000 f9a4 	bl	df4c <memmove>
    dc04:	68a3      	ldr	r3, [r4, #8]
    dc06:	6822      	ldr	r2, [r4, #0]
    dc08:	eba3 030a 	sub.w	r3, r3, sl
    dc0c:	4452      	add	r2, sl
    dc0e:	60a3      	str	r3, [r4, #8]
    dc10:	6022      	str	r2, [r4, #0]
    dc12:	2b00      	cmp	r3, #0
    dc14:	d1eb      	bne.n	dbee <__sfvwrite_r+0x1d6>
    dc16:	4621      	mov	r1, r4
    dc18:	4640      	mov	r0, r8
    dc1a:	f003 fa33 	bl	11084 <_fflush_r>
    dc1e:	2800      	cmp	r0, #0
    dc20:	d0e5      	beq.n	dbee <__sfvwrite_r+0x1d6>
    dc22:	e778      	b.n	db16 <__sfvwrite_r+0xfe>
    dc24:	6820      	ldr	r0, [r4, #0]
    dc26:	46b3      	mov	fp, r6
    dc28:	4632      	mov	r2, r6
    dc2a:	e74c      	b.n	dac6 <__sfvwrite_r+0xae>
    dc2c:	4639      	mov	r1, r7
    dc2e:	9201      	str	r2, [sp, #4]
    dc30:	f000 f98c 	bl	df4c <memmove>
    dc34:	9a01      	ldr	r2, [sp, #4]
    dc36:	68a3      	ldr	r3, [r4, #8]
    dc38:	1a9b      	subs	r3, r3, r2
    dc3a:	60a3      	str	r3, [r4, #8]
    dc3c:	6823      	ldr	r3, [r4, #0]
    dc3e:	4413      	add	r3, r2
    dc40:	6023      	str	r3, [r4, #0]
    dc42:	4693      	mov	fp, r2
    dc44:	e795      	b.n	db72 <__sfvwrite_r+0x15a>
    dc46:	6823      	ldr	r3, [r4, #0]
    dc48:	6921      	ldr	r1, [r4, #16]
    dc4a:	eba3 0b01 	sub.w	fp, r3, r1
    dc4e:	6963      	ldr	r3, [r4, #20]
    dc50:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    dc54:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    dc58:	f10b 0301 	add.w	r3, fp, #1
    dc5c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    dc60:	4433      	add	r3, r6
    dc62:	4553      	cmp	r3, sl
    dc64:	4652      	mov	r2, sl
    dc66:	bf84      	itt	hi
    dc68:	469a      	movhi	sl, r3
    dc6a:	4652      	movhi	r2, sl
    dc6c:	0543      	lsls	r3, r0, #21
    dc6e:	d52c      	bpl.n	dcca <__sfvwrite_r+0x2b2>
    dc70:	4611      	mov	r1, r2
    dc72:	4640      	mov	r0, r8
    dc74:	f7ff f8ba 	bl	cdec <_malloc_r>
    dc78:	2800      	cmp	r0, #0
    dc7a:	d03b      	beq.n	dcf4 <__sfvwrite_r+0x2dc>
    dc7c:	465a      	mov	r2, fp
    dc7e:	6921      	ldr	r1, [r4, #16]
    dc80:	9001      	str	r0, [sp, #4]
    dc82:	f7f5 f965 	bl	2f50 <memcpy>
    dc86:	89a2      	ldrh	r2, [r4, #12]
    dc88:	9b01      	ldr	r3, [sp, #4]
    dc8a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    dc8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc92:	81a2      	strh	r2, [r4, #12]
    dc94:	eb03 000b 	add.w	r0, r3, fp
    dc98:	6123      	str	r3, [r4, #16]
    dc9a:	ebaa 030b 	sub.w	r3, sl, fp
    dc9e:	f8c4 a014 	str.w	sl, [r4, #20]
    dca2:	60a3      	str	r3, [r4, #8]
    dca4:	6020      	str	r0, [r4, #0]
    dca6:	46b3      	mov	fp, r6
    dca8:	4632      	mov	r2, r6
    dcaa:	e70c      	b.n	dac6 <__sfvwrite_r+0xae>
    dcac:	4639      	mov	r1, r7
    dcae:	465a      	mov	r2, fp
    dcb0:	f000 f94c 	bl	df4c <memmove>
    dcb4:	6823      	ldr	r3, [r4, #0]
    dcb6:	445b      	add	r3, fp
    dcb8:	6023      	str	r3, [r4, #0]
    dcba:	4621      	mov	r1, r4
    dcbc:	4640      	mov	r0, r8
    dcbe:	f003 f9e1 	bl	11084 <_fflush_r>
    dcc2:	2800      	cmp	r0, #0
    dcc4:	f43f af55 	beq.w	db72 <__sfvwrite_r+0x15a>
    dcc8:	e725      	b.n	db16 <__sfvwrite_r+0xfe>
    dcca:	4640      	mov	r0, r8
    dccc:	f7ff fb56 	bl	d37c <_realloc_r>
    dcd0:	4603      	mov	r3, r0
    dcd2:	2800      	cmp	r0, #0
    dcd4:	d1de      	bne.n	dc94 <__sfvwrite_r+0x27c>
    dcd6:	6921      	ldr	r1, [r4, #16]
    dcd8:	4640      	mov	r0, r8
    dcda:	f000 fdb3 	bl	e844 <_free_r>
    dcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dce2:	220c      	movs	r2, #12
    dce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dce8:	f8c8 2000 	str.w	r2, [r8]
    dcec:	e715      	b.n	db1a <__sfvwrite_r+0x102>
    dcee:	1c72      	adds	r2, r6, #1
    dcf0:	4691      	mov	r9, r2
    dcf2:	e726      	b.n	db42 <__sfvwrite_r+0x12a>
    dcf4:	220c      	movs	r2, #12
    dcf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dcfa:	f8c8 2000 	str.w	r2, [r8]
    dcfe:	e70c      	b.n	db1a <__sfvwrite_r+0x102>
    dd00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd04:	e6ba      	b.n	da7c <__sfvwrite_r+0x64>
    dd06:	bf00      	nop
    dd08:	7ffffc00 	.word	0x7ffffc00

0000dd0c <_fwalk_sglue>:
    dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd10:	4680      	mov	r8, r0
    dd12:	460f      	mov	r7, r1
    dd14:	4616      	mov	r6, r2
    dd16:	f04f 0900 	mov.w	r9, #0
    dd1a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    dd1e:	3d01      	subs	r5, #1
    dd20:	d411      	bmi.n	dd46 <_fwalk_sglue+0x3a>
    dd22:	89a3      	ldrh	r3, [r4, #12]
    dd24:	2b01      	cmp	r3, #1
    dd26:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    dd2a:	d908      	bls.n	dd3e <_fwalk_sglue+0x32>
    dd2c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    dd30:	3301      	adds	r3, #1
    dd32:	4621      	mov	r1, r4
    dd34:	d003      	beq.n	dd3e <_fwalk_sglue+0x32>
    dd36:	4640      	mov	r0, r8
    dd38:	47b8      	blx	r7
    dd3a:	ea49 0900 	orr.w	r9, r9, r0
    dd3e:	1c6b      	adds	r3, r5, #1
    dd40:	f104 0468 	add.w	r4, r4, #104	; 0x68
    dd44:	d1ed      	bne.n	dd22 <_fwalk_sglue+0x16>
    dd46:	6836      	ldr	r6, [r6, #0]
    dd48:	2e00      	cmp	r6, #0
    dd4a:	d1e6      	bne.n	dd1a <_fwalk_sglue+0xe>
    dd4c:	4648      	mov	r0, r9
    dd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd52:	bf00      	nop

0000dd54 <_fwrite_r>:
    dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd58:	b086      	sub	sp, #24
    dd5a:	fb02 f703 	mul.w	r7, r2, r3
    dd5e:	461d      	mov	r5, r3
    dd60:	ab01      	add	r3, sp, #4
    dd62:	9303      	str	r3, [sp, #12]
    dd64:	2301      	movs	r3, #1
    dd66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dd68:	9101      	str	r1, [sp, #4]
    dd6a:	4690      	mov	r8, r2
    dd6c:	9702      	str	r7, [sp, #8]
    dd6e:	9705      	str	r7, [sp, #20]
    dd70:	9304      	str	r3, [sp, #16]
    dd72:	4606      	mov	r6, r0
    dd74:	b110      	cbz	r0, dd7c <_fwrite_r+0x28>
    dd76:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d03d      	beq.n	ddf8 <_fwrite_r+0xa4>
    dd7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dd7e:	f013 0f01 	tst.w	r3, #1
    dd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dd86:	b29a      	uxth	r2, r3
    dd88:	d101      	bne.n	dd8e <_fwrite_r+0x3a>
    dd8a:	0599      	lsls	r1, r3, #22
    dd8c:	d52d      	bpl.n	ddea <_fwrite_r+0x96>
    dd8e:	0492      	lsls	r2, r2, #18
    dd90:	d406      	bmi.n	dda0 <_fwrite_r+0x4c>
    dd92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dd96:	81a3      	strh	r3, [r4, #12]
    dd98:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dd9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    dd9e:	6663      	str	r3, [r4, #100]	; 0x64
    dda0:	4630      	mov	r0, r6
    dda2:	aa03      	add	r2, sp, #12
    dda4:	4621      	mov	r1, r4
    dda6:	f7ff fe37 	bl	da18 <__sfvwrite_r>
    ddaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ddac:	b178      	cbz	r0, ddce <_fwrite_r+0x7a>
    ddae:	07da      	lsls	r2, r3, #31
    ddb0:	d506      	bpl.n	ddc0 <_fwrite_r+0x6c>
    ddb2:	9b05      	ldr	r3, [sp, #20]
    ddb4:	1aff      	subs	r7, r7, r3
    ddb6:	fbb7 f0f8 	udiv	r0, r7, r8
    ddba:	b006      	add	sp, #24
    ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddc0:	89a3      	ldrh	r3, [r4, #12]
    ddc2:	059b      	lsls	r3, r3, #22
    ddc4:	d4f5      	bmi.n	ddb2 <_fwrite_r+0x5e>
    ddc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ddc8:	f000 fbe2 	bl	e590 <__retarget_lock_release_recursive>
    ddcc:	e7f1      	b.n	ddb2 <_fwrite_r+0x5e>
    ddce:	07d8      	lsls	r0, r3, #31
    ddd0:	d407      	bmi.n	dde2 <_fwrite_r+0x8e>
    ddd2:	89a3      	ldrh	r3, [r4, #12]
    ddd4:	0599      	lsls	r1, r3, #22
    ddd6:	d404      	bmi.n	dde2 <_fwrite_r+0x8e>
    ddd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ddda:	f000 fbd9 	bl	e590 <__retarget_lock_release_recursive>
    ddde:	4628      	mov	r0, r5
    dde0:	e7eb      	b.n	ddba <_fwrite_r+0x66>
    dde2:	4628      	mov	r0, r5
    dde4:	b006      	add	sp, #24
    dde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ddec:	f000 fbce 	bl	e58c <__retarget_lock_acquire_recursive>
    ddf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ddf4:	b29a      	uxth	r2, r3
    ddf6:	e7ca      	b.n	dd8e <_fwrite_r+0x3a>
    ddf8:	f7ff fd62 	bl	d8c0 <__sinit>
    ddfc:	e7be      	b.n	dd7c <_fwrite_r+0x28>
    ddfe:	bf00      	nop

0000de00 <fwrite>:
    de00:	b510      	push	{r4, lr}
    de02:	4c06      	ldr	r4, [pc, #24]	; (de1c <fwrite+0x1c>)
    de04:	b082      	sub	sp, #8
    de06:	4684      	mov	ip, r0
    de08:	9300      	str	r3, [sp, #0]
    de0a:	6820      	ldr	r0, [r4, #0]
    de0c:	4613      	mov	r3, r2
    de0e:	460a      	mov	r2, r1
    de10:	4661      	mov	r1, ip
    de12:	f7ff ff9f 	bl	dd54 <_fwrite_r>
    de16:	b002      	add	sp, #8
    de18:	bd10      	pop	{r4, pc}
    de1a:	bf00      	nop
    de1c:	2000359c 	.word	0x2000359c

0000de20 <__swsetup_r>:
    de20:	b538      	push	{r3, r4, r5, lr}
    de22:	4b31      	ldr	r3, [pc, #196]	; (dee8 <__swsetup_r+0xc8>)
    de24:	681b      	ldr	r3, [r3, #0]
    de26:	4605      	mov	r5, r0
    de28:	460c      	mov	r4, r1
    de2a:	b113      	cbz	r3, de32 <__swsetup_r+0x12>
    de2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    de2e:	2a00      	cmp	r2, #0
    de30:	d04e      	beq.n	ded0 <__swsetup_r+0xb0>
    de32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de36:	0718      	lsls	r0, r3, #28
    de38:	b29a      	uxth	r2, r3
    de3a:	d51c      	bpl.n	de76 <__swsetup_r+0x56>
    de3c:	6921      	ldr	r1, [r4, #16]
    de3e:	b329      	cbz	r1, de8c <__swsetup_r+0x6c>
    de40:	f012 0001 	ands.w	r0, r2, #1
    de44:	d007      	beq.n	de56 <__swsetup_r+0x36>
    de46:	2000      	movs	r0, #0
    de48:	60a0      	str	r0, [r4, #8]
    de4a:	6960      	ldr	r0, [r4, #20]
    de4c:	4240      	negs	r0, r0
    de4e:	61a0      	str	r0, [r4, #24]
    de50:	b139      	cbz	r1, de62 <__swsetup_r+0x42>
    de52:	2000      	movs	r0, #0
    de54:	bd38      	pop	{r3, r4, r5, pc}
    de56:	0795      	lsls	r5, r2, #30
    de58:	bf58      	it	pl
    de5a:	6960      	ldrpl	r0, [r4, #20]
    de5c:	60a0      	str	r0, [r4, #8]
    de5e:	2900      	cmp	r1, #0
    de60:	d1f7      	bne.n	de52 <__swsetup_r+0x32>
    de62:	0612      	lsls	r2, r2, #24
    de64:	bf58      	it	pl
    de66:	4608      	movpl	r0, r1
    de68:	d5f4      	bpl.n	de54 <__swsetup_r+0x34>
    de6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de6e:	81a3      	strh	r3, [r4, #12]
    de70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de74:	bd38      	pop	{r3, r4, r5, pc}
    de76:	06d1      	lsls	r1, r2, #27
    de78:	d52e      	bpl.n	ded8 <__swsetup_r+0xb8>
    de7a:	0752      	lsls	r2, r2, #29
    de7c:	d414      	bmi.n	dea8 <__swsetup_r+0x88>
    de7e:	6921      	ldr	r1, [r4, #16]
    de80:	f043 0308 	orr.w	r3, r3, #8
    de84:	81a3      	strh	r3, [r4, #12]
    de86:	b29a      	uxth	r2, r3
    de88:	2900      	cmp	r1, #0
    de8a:	d1d9      	bne.n	de40 <__swsetup_r+0x20>
    de8c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    de90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    de94:	d0d4      	beq.n	de40 <__swsetup_r+0x20>
    de96:	4621      	mov	r1, r4
    de98:	4628      	mov	r0, r5
    de9a:	f002 fb93 	bl	105c4 <__smakebuf_r>
    de9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dea2:	6921      	ldr	r1, [r4, #16]
    dea4:	b29a      	uxth	r2, r3
    dea6:	e7cb      	b.n	de40 <__swsetup_r+0x20>
    dea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    deaa:	b151      	cbz	r1, dec2 <__swsetup_r+0xa2>
    deac:	f104 0240 	add.w	r2, r4, #64	; 0x40
    deb0:	4291      	cmp	r1, r2
    deb2:	d004      	beq.n	debe <__swsetup_r+0x9e>
    deb4:	4628      	mov	r0, r5
    deb6:	f000 fcc5 	bl	e844 <_free_r>
    deba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    debe:	2200      	movs	r2, #0
    dec0:	6322      	str	r2, [r4, #48]	; 0x30
    dec2:	6921      	ldr	r1, [r4, #16]
    dec4:	2200      	movs	r2, #0
    dec6:	e9c4 1200 	strd	r1, r2, [r4]
    deca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    dece:	e7d7      	b.n	de80 <__swsetup_r+0x60>
    ded0:	4618      	mov	r0, r3
    ded2:	f7ff fcf5 	bl	d8c0 <__sinit>
    ded6:	e7ac      	b.n	de32 <__swsetup_r+0x12>
    ded8:	2209      	movs	r2, #9
    deda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dede:	602a      	str	r2, [r5, #0]
    dee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dee4:	81a3      	strh	r3, [r4, #12]
    dee6:	bd38      	pop	{r3, r4, r5, pc}
    dee8:	2000359c 	.word	0x2000359c

0000deec <memcmp>:
    deec:	2a03      	cmp	r2, #3
    deee:	b570      	push	{r4, r5, r6, lr}
    def0:	d914      	bls.n	df1c <memcmp+0x30>
    def2:	ea40 0301 	orr.w	r3, r0, r1
    def6:	079b      	lsls	r3, r3, #30
    def8:	d122      	bne.n	df40 <memcmp+0x54>
    defa:	4604      	mov	r4, r0
    defc:	460b      	mov	r3, r1
    defe:	4619      	mov	r1, r3
    df00:	4620      	mov	r0, r4
    df02:	680e      	ldr	r6, [r1, #0]
    df04:	6805      	ldr	r5, [r0, #0]
    df06:	42b5      	cmp	r5, r6
    df08:	f104 0404 	add.w	r4, r4, #4
    df0c:	f103 0304 	add.w	r3, r3, #4
    df10:	d116      	bne.n	df40 <memcmp+0x54>
    df12:	3a04      	subs	r2, #4
    df14:	2a03      	cmp	r2, #3
    df16:	4620      	mov	r0, r4
    df18:	4619      	mov	r1, r3
    df1a:	d8f0      	bhi.n	defe <memcmp+0x12>
    df1c:	1e54      	subs	r4, r2, #1
    df1e:	b19a      	cbz	r2, df48 <memcmp+0x5c>
    df20:	1e42      	subs	r2, r0, #1
    df22:	3901      	subs	r1, #1
    df24:	e001      	b.n	df2a <memcmp+0x3e>
    df26:	18c3      	adds	r3, r0, r3
    df28:	d00c      	beq.n	df44 <memcmp+0x58>
    df2a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    df2e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    df32:	45e6      	cmp	lr, ip
    df34:	eba4 0302 	sub.w	r3, r4, r2
    df38:	d0f5      	beq.n	df26 <memcmp+0x3a>
    df3a:	ebae 000c 	sub.w	r0, lr, ip
    df3e:	bd70      	pop	{r4, r5, r6, pc}
    df40:	1e54      	subs	r4, r2, #1
    df42:	e7ed      	b.n	df20 <memcmp+0x34>
    df44:	4618      	mov	r0, r3
    df46:	bd70      	pop	{r4, r5, r6, pc}
    df48:	4610      	mov	r0, r2
    df4a:	bd70      	pop	{r4, r5, r6, pc}

0000df4c <memmove>:
    df4c:	4288      	cmp	r0, r1
    df4e:	d90d      	bls.n	df6c <memmove+0x20>
    df50:	188b      	adds	r3, r1, r2
    df52:	4283      	cmp	r3, r0
    df54:	d90a      	bls.n	df6c <memmove+0x20>
    df56:	eb00 0c02 	add.w	ip, r0, r2
    df5a:	b1ba      	cbz	r2, df8c <memmove+0x40>
    df5c:	4662      	mov	r2, ip
    df5e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    df62:	f802 cd01 	strb.w	ip, [r2, #-1]!
    df66:	4299      	cmp	r1, r3
    df68:	d1f9      	bne.n	df5e <memmove+0x12>
    df6a:	4770      	bx	lr
    df6c:	2a0f      	cmp	r2, #15
    df6e:	d80e      	bhi.n	df8e <memmove+0x42>
    df70:	4603      	mov	r3, r0
    df72:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    df76:	b14a      	cbz	r2, df8c <memmove+0x40>
    df78:	f10c 0c01 	add.w	ip, ip, #1
    df7c:	3b01      	subs	r3, #1
    df7e:	448c      	add	ip, r1
    df80:	f811 2b01 	ldrb.w	r2, [r1], #1
    df84:	f803 2f01 	strb.w	r2, [r3, #1]!
    df88:	4561      	cmp	r1, ip
    df8a:	d1f9      	bne.n	df80 <memmove+0x34>
    df8c:	4770      	bx	lr
    df8e:	ea40 0301 	orr.w	r3, r0, r1
    df92:	079b      	lsls	r3, r3, #30
    df94:	d150      	bne.n	e038 <memmove+0xec>
    df96:	f1a2 0310 	sub.w	r3, r2, #16
    df9a:	b570      	push	{r4, r5, r6, lr}
    df9c:	f101 0c20 	add.w	ip, r1, #32
    dfa0:	f023 050f 	bic.w	r5, r3, #15
    dfa4:	f101 0e10 	add.w	lr, r1, #16
    dfa8:	f100 0410 	add.w	r4, r0, #16
    dfac:	44ac      	add	ip, r5
    dfae:	091b      	lsrs	r3, r3, #4
    dfb0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    dfb4:	f844 5c10 	str.w	r5, [r4, #-16]
    dfb8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    dfbc:	f844 5c0c 	str.w	r5, [r4, #-12]
    dfc0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    dfc4:	f844 5c08 	str.w	r5, [r4, #-8]
    dfc8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    dfcc:	f844 5c04 	str.w	r5, [r4, #-4]
    dfd0:	f10e 0e10 	add.w	lr, lr, #16
    dfd4:	45e6      	cmp	lr, ip
    dfd6:	f104 0410 	add.w	r4, r4, #16
    dfda:	d1e9      	bne.n	dfb0 <memmove+0x64>
    dfdc:	3301      	adds	r3, #1
    dfde:	f012 0f0c 	tst.w	r2, #12
    dfe2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    dfe6:	f002 040f 	and.w	r4, r2, #15
    dfea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    dfee:	d027      	beq.n	e040 <memmove+0xf4>
    dff0:	3c04      	subs	r4, #4
    dff2:	f024 0603 	bic.w	r6, r4, #3
    dff6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    dffa:	441e      	add	r6, r3
    dffc:	1f1c      	subs	r4, r3, #4
    dffe:	468e      	mov	lr, r1
    e000:	f85e 5b04 	ldr.w	r5, [lr], #4
    e004:	f844 5f04 	str.w	r5, [r4, #4]!
    e008:	42b4      	cmp	r4, r6
    e00a:	d1f9      	bne.n	e000 <memmove+0xb4>
    e00c:	f10c 0401 	add.w	r4, ip, #1
    e010:	f002 0203 	and.w	r2, r2, #3
    e014:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e01c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    e020:	b14a      	cbz	r2, e036 <memmove+0xea>
    e022:	f10c 0c01 	add.w	ip, ip, #1
    e026:	3b01      	subs	r3, #1
    e028:	448c      	add	ip, r1
    e02a:	f811 2b01 	ldrb.w	r2, [r1], #1
    e02e:	f803 2f01 	strb.w	r2, [r3, #1]!
    e032:	4561      	cmp	r1, ip
    e034:	d1f9      	bne.n	e02a <memmove+0xde>
    e036:	bd70      	pop	{r4, r5, r6, pc}
    e038:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    e03c:	4603      	mov	r3, r0
    e03e:	e79b      	b.n	df78 <memmove+0x2c>
    e040:	4622      	mov	r2, r4
    e042:	e7eb      	b.n	e01c <memmove+0xd0>

0000e044 <memset>:
    e044:	0783      	lsls	r3, r0, #30
    e046:	b530      	push	{r4, r5, lr}
    e048:	d048      	beq.n	e0dc <memset+0x98>
    e04a:	1e54      	subs	r4, r2, #1
    e04c:	2a00      	cmp	r2, #0
    e04e:	d03f      	beq.n	e0d0 <memset+0x8c>
    e050:	b2ca      	uxtb	r2, r1
    e052:	4603      	mov	r3, r0
    e054:	e001      	b.n	e05a <memset+0x16>
    e056:	3c01      	subs	r4, #1
    e058:	d33a      	bcc.n	e0d0 <memset+0x8c>
    e05a:	f803 2b01 	strb.w	r2, [r3], #1
    e05e:	079d      	lsls	r5, r3, #30
    e060:	d1f9      	bne.n	e056 <memset+0x12>
    e062:	2c03      	cmp	r4, #3
    e064:	d92d      	bls.n	e0c2 <memset+0x7e>
    e066:	b2cd      	uxtb	r5, r1
    e068:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e06c:	2c0f      	cmp	r4, #15
    e06e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e072:	d936      	bls.n	e0e2 <memset+0x9e>
    e074:	f1a4 0210 	sub.w	r2, r4, #16
    e078:	f022 0c0f 	bic.w	ip, r2, #15
    e07c:	f103 0e20 	add.w	lr, r3, #32
    e080:	44e6      	add	lr, ip
    e082:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e086:	f103 0210 	add.w	r2, r3, #16
    e08a:	e942 5504 	strd	r5, r5, [r2, #-16]
    e08e:	e942 5502 	strd	r5, r5, [r2, #-8]
    e092:	3210      	adds	r2, #16
    e094:	4572      	cmp	r2, lr
    e096:	d1f8      	bne.n	e08a <memset+0x46>
    e098:	f10c 0201 	add.w	r2, ip, #1
    e09c:	f014 0f0c 	tst.w	r4, #12
    e0a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e0a4:	f004 0c0f 	and.w	ip, r4, #15
    e0a8:	d013      	beq.n	e0d2 <memset+0x8e>
    e0aa:	f1ac 0304 	sub.w	r3, ip, #4
    e0ae:	f023 0303 	bic.w	r3, r3, #3
    e0b2:	3304      	adds	r3, #4
    e0b4:	4413      	add	r3, r2
    e0b6:	f842 5b04 	str.w	r5, [r2], #4
    e0ba:	4293      	cmp	r3, r2
    e0bc:	d1fb      	bne.n	e0b6 <memset+0x72>
    e0be:	f00c 0403 	and.w	r4, ip, #3
    e0c2:	b12c      	cbz	r4, e0d0 <memset+0x8c>
    e0c4:	b2c9      	uxtb	r1, r1
    e0c6:	441c      	add	r4, r3
    e0c8:	f803 1b01 	strb.w	r1, [r3], #1
    e0cc:	429c      	cmp	r4, r3
    e0ce:	d1fb      	bne.n	e0c8 <memset+0x84>
    e0d0:	bd30      	pop	{r4, r5, pc}
    e0d2:	4664      	mov	r4, ip
    e0d4:	4613      	mov	r3, r2
    e0d6:	2c00      	cmp	r4, #0
    e0d8:	d1f4      	bne.n	e0c4 <memset+0x80>
    e0da:	e7f9      	b.n	e0d0 <memset+0x8c>
    e0dc:	4603      	mov	r3, r0
    e0de:	4614      	mov	r4, r2
    e0e0:	e7bf      	b.n	e062 <memset+0x1e>
    e0e2:	461a      	mov	r2, r3
    e0e4:	46a4      	mov	ip, r4
    e0e6:	e7e0      	b.n	e0aa <memset+0x66>

0000e0e8 <strncmp>:
    e0e8:	2a00      	cmp	r2, #0
    e0ea:	d03e      	beq.n	e16a <strncmp+0x82>
    e0ec:	ea40 0301 	orr.w	r3, r0, r1
    e0f0:	079b      	lsls	r3, r3, #30
    e0f2:	b530      	push	{r4, r5, lr}
    e0f4:	4684      	mov	ip, r0
    e0f6:	d12f      	bne.n	e158 <strncmp+0x70>
    e0f8:	2a03      	cmp	r2, #3
    e0fa:	d92d      	bls.n	e158 <strncmp+0x70>
    e0fc:	460b      	mov	r3, r1
    e0fe:	e008      	b.n	e112 <strncmp+0x2a>
    e100:	3a04      	subs	r2, #4
    e102:	4684      	mov	ip, r0
    e104:	4619      	mov	r1, r3
    e106:	d025      	beq.n	e154 <strncmp+0x6c>
    e108:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    e10c:	d122      	bne.n	e154 <strncmp+0x6c>
    e10e:	2a03      	cmp	r2, #3
    e110:	d922      	bls.n	e158 <strncmp+0x70>
    e112:	6804      	ldr	r4, [r0, #0]
    e114:	4619      	mov	r1, r3
    e116:	f853 5b04 	ldr.w	r5, [r3], #4
    e11a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    e11e:	42ac      	cmp	r4, r5
    e120:	4684      	mov	ip, r0
    e122:	ea2e 0e04 	bic.w	lr, lr, r4
    e126:	f100 0004 	add.w	r0, r0, #4
    e12a:	d0e9      	beq.n	e100 <strncmp+0x18>
    e12c:	f89c 0000 	ldrb.w	r0, [ip]
    e130:	780c      	ldrb	r4, [r1, #0]
    e132:	42a0      	cmp	r0, r4
    e134:	d11b      	bne.n	e16e <strncmp+0x86>
    e136:	46e6      	mov	lr, ip
    e138:	b168      	cbz	r0, e156 <strncmp+0x6e>
    e13a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    e13e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e142:	eba2 030e 	sub.w	r3, r2, lr
    e146:	42a0      	cmp	r0, r4
    e148:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    e14c:	d10f      	bne.n	e16e <strncmp+0x86>
    e14e:	eb1c 0303 	adds.w	r3, ip, r3
    e152:	d1f1      	bne.n	e138 <strncmp+0x50>
    e154:	2000      	movs	r0, #0
    e156:	bd30      	pop	{r4, r5, pc}
    e158:	f89c 0000 	ldrb.w	r0, [ip]
    e15c:	780c      	ldrb	r4, [r1, #0]
    e15e:	4284      	cmp	r4, r0
    e160:	d105      	bne.n	e16e <strncmp+0x86>
    e162:	2a01      	cmp	r2, #1
    e164:	d0f6      	beq.n	e154 <strncmp+0x6c>
    e166:	46e6      	mov	lr, ip
    e168:	e7e6      	b.n	e138 <strncmp+0x50>
    e16a:	4610      	mov	r0, r2
    e16c:	4770      	bx	lr
    e16e:	1b00      	subs	r0, r0, r4
    e170:	bd30      	pop	{r4, r5, pc}
    e172:	bf00      	nop

0000e174 <strncpy>:
    e174:	ea40 0301 	orr.w	r3, r0, r1
    e178:	079b      	lsls	r3, r3, #30
    e17a:	b530      	push	{r4, r5, lr}
    e17c:	d101      	bne.n	e182 <strncpy+0xe>
    e17e:	2a03      	cmp	r2, #3
    e180:	d80f      	bhi.n	e1a2 <strncpy+0x2e>
    e182:	4684      	mov	ip, r0
    e184:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    e188:	e007      	b.n	e19a <strncpy+0x26>
    e18a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e18e:	f803 1b01 	strb.w	r1, [r3], #1
    e192:	1e54      	subs	r4, r2, #1
    e194:	b1c1      	cbz	r1, e1c8 <strncpy+0x54>
    e196:	469c      	mov	ip, r3
    e198:	4622      	mov	r2, r4
    e19a:	4663      	mov	r3, ip
    e19c:	2a00      	cmp	r2, #0
    e19e:	d1f4      	bne.n	e18a <strncpy+0x16>
    e1a0:	bd30      	pop	{r4, r5, pc}
    e1a2:	460b      	mov	r3, r1
    e1a4:	4684      	mov	ip, r0
    e1a6:	4619      	mov	r1, r3
    e1a8:	f853 5b04 	ldr.w	r5, [r3], #4
    e1ac:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e1b0:	ea24 0405 	bic.w	r4, r4, r5
    e1b4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e1b8:	d1e4      	bne.n	e184 <strncpy+0x10>
    e1ba:	3a04      	subs	r2, #4
    e1bc:	2a03      	cmp	r2, #3
    e1be:	f84c 5b04 	str.w	r5, [ip], #4
    e1c2:	4619      	mov	r1, r3
    e1c4:	d8ef      	bhi.n	e1a6 <strncpy+0x32>
    e1c6:	e7dd      	b.n	e184 <strncpy+0x10>
    e1c8:	4494      	add	ip, r2
    e1ca:	2c00      	cmp	r4, #0
    e1cc:	d0e8      	beq.n	e1a0 <strncpy+0x2c>
    e1ce:	f803 1b01 	strb.w	r1, [r3], #1
    e1d2:	4563      	cmp	r3, ip
    e1d4:	d1fb      	bne.n	e1ce <strncpy+0x5a>
    e1d6:	bd30      	pop	{r4, r5, pc}

0000e1d8 <__locale_mb_cur_max>:
    e1d8:	4b01      	ldr	r3, [pc, #4]	; (e1e0 <__locale_mb_cur_max+0x8>)
    e1da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e1de:	4770      	bx	lr
    e1e0:	20003014 	.word	0x20003014

0000e1e4 <__cxa_atexit>:
    e1e4:	4613      	mov	r3, r2
    e1e6:	460a      	mov	r2, r1
    e1e8:	4601      	mov	r1, r0
    e1ea:	2002      	movs	r0, #2
    e1ec:	f000 ba96 	b.w	e71c <__register_exitproc>

0000e1f0 <_sbrk_r>:
    e1f0:	b538      	push	{r3, r4, r5, lr}
    e1f2:	4d07      	ldr	r5, [pc, #28]	; (e210 <_sbrk_r+0x20>)
    e1f4:	2200      	movs	r2, #0
    e1f6:	4604      	mov	r4, r0
    e1f8:	4608      	mov	r0, r1
    e1fa:	602a      	str	r2, [r5, #0]
    e1fc:	f7f5 f844 	bl	3288 <_sbrk>
    e200:	1c43      	adds	r3, r0, #1
    e202:	d000      	beq.n	e206 <_sbrk_r+0x16>
    e204:	bd38      	pop	{r3, r4, r5, pc}
    e206:	682b      	ldr	r3, [r5, #0]
    e208:	2b00      	cmp	r3, #0
    e20a:	d0fb      	beq.n	e204 <_sbrk_r+0x14>
    e20c:	6023      	str	r3, [r4, #0]
    e20e:	bd38      	pop	{r3, r4, r5, pc}
    e210:	200040ec 	.word	0x200040ec

0000e214 <_write_r>:
    e214:	b538      	push	{r3, r4, r5, lr}
    e216:	460c      	mov	r4, r1
    e218:	4d08      	ldr	r5, [pc, #32]	; (e23c <_write_r+0x28>)
    e21a:	4684      	mov	ip, r0
    e21c:	4611      	mov	r1, r2
    e21e:	4620      	mov	r0, r4
    e220:	461a      	mov	r2, r3
    e222:	2300      	movs	r3, #0
    e224:	602b      	str	r3, [r5, #0]
    e226:	4664      	mov	r4, ip
    e228:	f7f4 fd76 	bl	2d18 <_write>
    e22c:	1c43      	adds	r3, r0, #1
    e22e:	d000      	beq.n	e232 <_write_r+0x1e>
    e230:	bd38      	pop	{r3, r4, r5, pc}
    e232:	682b      	ldr	r3, [r5, #0]
    e234:	2b00      	cmp	r3, #0
    e236:	d0fb      	beq.n	e230 <_write_r+0x1c>
    e238:	6023      	str	r3, [r4, #0]
    e23a:	bd38      	pop	{r3, r4, r5, pc}
    e23c:	200040ec 	.word	0x200040ec

0000e240 <__errno>:
    e240:	4b01      	ldr	r3, [pc, #4]	; (e248 <__errno+0x8>)
    e242:	6818      	ldr	r0, [r3, #0]
    e244:	4770      	bx	lr
    e246:	bf00      	nop
    e248:	2000359c 	.word	0x2000359c
	...
    e260:	eba2 0003 	sub.w	r0, r2, r3
    e264:	4770      	bx	lr
    e266:	bf00      	nop

0000e268 <strcmp>:
    e268:	7802      	ldrb	r2, [r0, #0]
    e26a:	780b      	ldrb	r3, [r1, #0]
    e26c:	2a01      	cmp	r2, #1
    e26e:	bf28      	it	cs
    e270:	429a      	cmpcs	r2, r3
    e272:	d1f5      	bne.n	e260 <__errno+0x20>
    e274:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    e278:	ea40 0401 	orr.w	r4, r0, r1
    e27c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e280:	f06f 0c00 	mvn.w	ip, #0
    e284:	ea4f 7244 	mov.w	r2, r4, lsl #29
    e288:	b312      	cbz	r2, e2d0 <strcmp+0x68>
    e28a:	ea80 0401 	eor.w	r4, r0, r1
    e28e:	f014 0f07 	tst.w	r4, #7
    e292:	d16a      	bne.n	e36a <strcmp+0x102>
    e294:	f000 0407 	and.w	r4, r0, #7
    e298:	f020 0007 	bic.w	r0, r0, #7
    e29c:	f004 0503 	and.w	r5, r4, #3
    e2a0:	f021 0107 	bic.w	r1, r1, #7
    e2a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e2a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    e2ac:	f014 0f04 	tst.w	r4, #4
    e2b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    e2b4:	fa0c f405 	lsl.w	r4, ip, r5
    e2b8:	ea62 0204 	orn	r2, r2, r4
    e2bc:	ea66 0604 	orn	r6, r6, r4
    e2c0:	d00a      	beq.n	e2d8 <strcmp+0x70>
    e2c2:	ea63 0304 	orn	r3, r3, r4
    e2c6:	4662      	mov	r2, ip
    e2c8:	ea67 0704 	orn	r7, r7, r4
    e2cc:	4666      	mov	r6, ip
    e2ce:	e003      	b.n	e2d8 <strcmp+0x70>
    e2d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    e2d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    e2d8:	fa82 f54c 	uadd8	r5, r2, ip
    e2dc:	ea82 0406 	eor.w	r4, r2, r6
    e2e0:	faa4 f48c 	sel	r4, r4, ip
    e2e4:	bb6c      	cbnz	r4, e342 <strcmp+0xda>
    e2e6:	fa83 f54c 	uadd8	r5, r3, ip
    e2ea:	ea83 0507 	eor.w	r5, r3, r7
    e2ee:	faa5 f58c 	sel	r5, r5, ip
    e2f2:	b995      	cbnz	r5, e31a <strcmp+0xb2>
    e2f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    e2f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    e2fc:	fa82 f54c 	uadd8	r5, r2, ip
    e300:	ea82 0406 	eor.w	r4, r2, r6
    e304:	faa4 f48c 	sel	r4, r4, ip
    e308:	fa83 f54c 	uadd8	r5, r3, ip
    e30c:	ea83 0507 	eor.w	r5, r3, r7
    e310:	faa5 f58c 	sel	r5, r5, ip
    e314:	4325      	orrs	r5, r4
    e316:	d0db      	beq.n	e2d0 <strcmp+0x68>
    e318:	b99c      	cbnz	r4, e342 <strcmp+0xda>
    e31a:	ba2d      	rev	r5, r5
    e31c:	fab5 f485 	clz	r4, r5
    e320:	f024 0407 	bic.w	r4, r4, #7
    e324:	fa27 f104 	lsr.w	r1, r7, r4
    e328:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e32c:	fa23 f304 	lsr.w	r3, r3, r4
    e330:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e334:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e338:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e33c:	eba0 0001 	sub.w	r0, r0, r1
    e340:	4770      	bx	lr
    e342:	ba24      	rev	r4, r4
    e344:	fab4 f484 	clz	r4, r4
    e348:	f024 0407 	bic.w	r4, r4, #7
    e34c:	fa26 f104 	lsr.w	r1, r6, r4
    e350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e354:	fa22 f204 	lsr.w	r2, r2, r4
    e358:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    e35c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e360:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e364:	eba0 0001 	sub.w	r0, r0, r1
    e368:	4770      	bx	lr
    e36a:	f014 0f03 	tst.w	r4, #3
    e36e:	d13c      	bne.n	e3ea <strcmp+0x182>
    e370:	f010 0403 	ands.w	r4, r0, #3
    e374:	d128      	bne.n	e3c8 <strcmp+0x160>
    e376:	f850 2b08 	ldr.w	r2, [r0], #8
    e37a:	f851 3b08 	ldr.w	r3, [r1], #8
    e37e:	fa82 f54c 	uadd8	r5, r2, ip
    e382:	ea82 0503 	eor.w	r5, r2, r3
    e386:	faa5 f58c 	sel	r5, r5, ip
    e38a:	b95d      	cbnz	r5, e3a4 <strcmp+0x13c>
    e38c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e390:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e394:	fa82 f54c 	uadd8	r5, r2, ip
    e398:	ea82 0503 	eor.w	r5, r2, r3
    e39c:	faa5 f58c 	sel	r5, r5, ip
    e3a0:	2d00      	cmp	r5, #0
    e3a2:	d0e8      	beq.n	e376 <strcmp+0x10e>
    e3a4:	ba2d      	rev	r5, r5
    e3a6:	fab5 f485 	clz	r4, r5
    e3aa:	f024 0407 	bic.w	r4, r4, #7
    e3ae:	fa23 f104 	lsr.w	r1, r3, r4
    e3b2:	fa22 f204 	lsr.w	r2, r2, r4
    e3b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    e3ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e3be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e3c2:	eba0 0001 	sub.w	r0, r0, r1
    e3c6:	4770      	bx	lr
    e3c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    e3cc:	f020 0003 	bic.w	r0, r0, #3
    e3d0:	f850 2b08 	ldr.w	r2, [r0], #8
    e3d4:	f021 0103 	bic.w	r1, r1, #3
    e3d8:	f851 3b08 	ldr.w	r3, [r1], #8
    e3dc:	fa0c f404 	lsl.w	r4, ip, r4
    e3e0:	ea62 0204 	orn	r2, r2, r4
    e3e4:	ea63 0304 	orn	r3, r3, r4
    e3e8:	e7c9      	b.n	e37e <strcmp+0x116>
    e3ea:	f010 0403 	ands.w	r4, r0, #3
    e3ee:	d01a      	beq.n	e426 <strcmp+0x1be>
    e3f0:	eba1 0104 	sub.w	r1, r1, r4
    e3f4:	f020 0003 	bic.w	r0, r0, #3
    e3f8:	07e4      	lsls	r4, r4, #31
    e3fa:	f850 2b04 	ldr.w	r2, [r0], #4
    e3fe:	d006      	beq.n	e40e <strcmp+0x1a6>
    e400:	d20f      	bcs.n	e422 <strcmp+0x1ba>
    e402:	788b      	ldrb	r3, [r1, #2]
    e404:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    e408:	1ae4      	subs	r4, r4, r3
    e40a:	d106      	bne.n	e41a <strcmp+0x1b2>
    e40c:	b12b      	cbz	r3, e41a <strcmp+0x1b2>
    e40e:	78cb      	ldrb	r3, [r1, #3]
    e410:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    e414:	1ae4      	subs	r4, r4, r3
    e416:	d100      	bne.n	e41a <strcmp+0x1b2>
    e418:	b91b      	cbnz	r3, e422 <strcmp+0x1ba>
    e41a:	4620      	mov	r0, r4
    e41c:	f85d 4b10 	ldr.w	r4, [sp], #16
    e420:	4770      	bx	lr
    e422:	f101 0104 	add.w	r1, r1, #4
    e426:	f850 2b04 	ldr.w	r2, [r0], #4
    e42a:	07cc      	lsls	r4, r1, #31
    e42c:	f021 0103 	bic.w	r1, r1, #3
    e430:	f851 3b04 	ldr.w	r3, [r1], #4
    e434:	d848      	bhi.n	e4c8 <strcmp+0x260>
    e436:	d224      	bcs.n	e482 <strcmp+0x21a>
    e438:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    e43c:	fa82 f54c 	uadd8	r5, r2, ip
    e440:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    e444:	faa5 f58c 	sel	r5, r5, ip
    e448:	d10a      	bne.n	e460 <strcmp+0x1f8>
    e44a:	b965      	cbnz	r5, e466 <strcmp+0x1fe>
    e44c:	f851 3b04 	ldr.w	r3, [r1], #4
    e450:	ea84 0402 	eor.w	r4, r4, r2
    e454:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    e458:	d10e      	bne.n	e478 <strcmp+0x210>
    e45a:	f850 2b04 	ldr.w	r2, [r0], #4
    e45e:	e7eb      	b.n	e438 <strcmp+0x1d0>
    e460:	ea4f 2313 	mov.w	r3, r3, lsr #8
    e464:	e055      	b.n	e512 <strcmp+0x2aa>
    e466:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    e46a:	d14d      	bne.n	e508 <strcmp+0x2a0>
    e46c:	7808      	ldrb	r0, [r1, #0]
    e46e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e472:	f1c0 0000 	rsb	r0, r0, #0
    e476:	4770      	bx	lr
    e478:	ea4f 6212 	mov.w	r2, r2, lsr #24
    e47c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    e480:	e047      	b.n	e512 <strcmp+0x2aa>
    e482:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    e486:	fa82 f54c 	uadd8	r5, r2, ip
    e48a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    e48e:	faa5 f58c 	sel	r5, r5, ip
    e492:	d10a      	bne.n	e4aa <strcmp+0x242>
    e494:	b965      	cbnz	r5, e4b0 <strcmp+0x248>
    e496:	f851 3b04 	ldr.w	r3, [r1], #4
    e49a:	ea84 0402 	eor.w	r4, r4, r2
    e49e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    e4a2:	d10c      	bne.n	e4be <strcmp+0x256>
    e4a4:	f850 2b04 	ldr.w	r2, [r0], #4
    e4a8:	e7eb      	b.n	e482 <strcmp+0x21a>
    e4aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    e4ae:	e030      	b.n	e512 <strcmp+0x2aa>
    e4b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    e4b4:	d128      	bne.n	e508 <strcmp+0x2a0>
    e4b6:	880b      	ldrh	r3, [r1, #0]
    e4b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    e4bc:	e029      	b.n	e512 <strcmp+0x2aa>
    e4be:	ea4f 4212 	mov.w	r2, r2, lsr #16
    e4c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    e4c6:	e024      	b.n	e512 <strcmp+0x2aa>
    e4c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    e4cc:	fa82 f54c 	uadd8	r5, r2, ip
    e4d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    e4d4:	faa5 f58c 	sel	r5, r5, ip
    e4d8:	d10a      	bne.n	e4f0 <strcmp+0x288>
    e4da:	b965      	cbnz	r5, e4f6 <strcmp+0x28e>
    e4dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e4e0:	ea84 0402 	eor.w	r4, r4, r2
    e4e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    e4e8:	d109      	bne.n	e4fe <strcmp+0x296>
    e4ea:	f850 2b04 	ldr.w	r2, [r0], #4
    e4ee:	e7eb      	b.n	e4c8 <strcmp+0x260>
    e4f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    e4f4:	e00d      	b.n	e512 <strcmp+0x2aa>
    e4f6:	f015 0fff 	tst.w	r5, #255	; 0xff
    e4fa:	d105      	bne.n	e508 <strcmp+0x2a0>
    e4fc:	680b      	ldr	r3, [r1, #0]
    e4fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    e502:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e506:	e004      	b.n	e512 <strcmp+0x2aa>
    e508:	f04f 0000 	mov.w	r0, #0
    e50c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e510:	4770      	bx	lr
    e512:	ba12      	rev	r2, r2
    e514:	ba1b      	rev	r3, r3
    e516:	fa82 f44c 	uadd8	r4, r2, ip
    e51a:	ea82 0403 	eor.w	r4, r2, r3
    e51e:	faa4 f58c 	sel	r5, r4, ip
    e522:	fab5 f485 	clz	r4, r5
    e526:	fa02 f204 	lsl.w	r2, r2, r4
    e52a:	fa03 f304 	lsl.w	r3, r3, r4
    e52e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    e532:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e536:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    e53a:	4770      	bx	lr

0000e53c <__libc_init_array>:
    e53c:	b570      	push	{r4, r5, r6, lr}
    e53e:	4e0d      	ldr	r6, [pc, #52]	; (e574 <__libc_init_array+0x38>)
    e540:	4d0d      	ldr	r5, [pc, #52]	; (e578 <__libc_init_array+0x3c>)
    e542:	1b76      	subs	r6, r6, r5
    e544:	10b6      	asrs	r6, r6, #2
    e546:	d006      	beq.n	e556 <__libc_init_array+0x1a>
    e548:	2400      	movs	r4, #0
    e54a:	f855 3b04 	ldr.w	r3, [r5], #4
    e54e:	3401      	adds	r4, #1
    e550:	4798      	blx	r3
    e552:	42a6      	cmp	r6, r4
    e554:	d1f9      	bne.n	e54a <__libc_init_array+0xe>
    e556:	4e09      	ldr	r6, [pc, #36]	; (e57c <__libc_init_array+0x40>)
    e558:	4d09      	ldr	r5, [pc, #36]	; (e580 <__libc_init_array+0x44>)
    e55a:	1b76      	subs	r6, r6, r5
    e55c:	f005 f8a0 	bl	136a0 <___init_veneer>
    e560:	10b6      	asrs	r6, r6, #2
    e562:	d006      	beq.n	e572 <__libc_init_array+0x36>
    e564:	2400      	movs	r4, #0
    e566:	f855 3b04 	ldr.w	r3, [r5], #4
    e56a:	3401      	adds	r4, #1
    e56c:	4798      	blx	r3
    e56e:	42a6      	cmp	r6, r4
    e570:	d1f9      	bne.n	e566 <__libc_init_array+0x2a>
    e572:	bd70      	pop	{r4, r5, r6, pc}
    e574:	60001e80 	.word	0x60001e80
    e578:	60001e80 	.word	0x60001e80
    e57c:	60001e8c 	.word	0x60001e8c
    e580:	60001e80 	.word	0x60001e80

0000e584 <__retarget_lock_init_recursive>:
    e584:	4770      	bx	lr
    e586:	bf00      	nop

0000e588 <__retarget_lock_close_recursive>:
    e588:	4770      	bx	lr
    e58a:	bf00      	nop

0000e58c <__retarget_lock_acquire_recursive>:
    e58c:	4770      	bx	lr
    e58e:	bf00      	nop

0000e590 <__retarget_lock_release_recursive>:
    e590:	4770      	bx	lr
    e592:	bf00      	nop
	...

0000e5a0 <memchr>:
    e5a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e5a4:	2a10      	cmp	r2, #16
    e5a6:	db2b      	blt.n	e600 <memchr+0x60>
    e5a8:	f010 0f07 	tst.w	r0, #7
    e5ac:	d008      	beq.n	e5c0 <memchr+0x20>
    e5ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    e5b2:	3a01      	subs	r2, #1
    e5b4:	428b      	cmp	r3, r1
    e5b6:	d02d      	beq.n	e614 <memchr+0x74>
    e5b8:	f010 0f07 	tst.w	r0, #7
    e5bc:	b342      	cbz	r2, e610 <memchr+0x70>
    e5be:	d1f6      	bne.n	e5ae <memchr+0xe>
    e5c0:	b4f0      	push	{r4, r5, r6, r7}
    e5c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e5c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e5ca:	f022 0407 	bic.w	r4, r2, #7
    e5ce:	f07f 0700 	mvns.w	r7, #0
    e5d2:	2300      	movs	r3, #0
    e5d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e5d8:	3c08      	subs	r4, #8
    e5da:	ea85 0501 	eor.w	r5, r5, r1
    e5de:	ea86 0601 	eor.w	r6, r6, r1
    e5e2:	fa85 f547 	uadd8	r5, r5, r7
    e5e6:	faa3 f587 	sel	r5, r3, r7
    e5ea:	fa86 f647 	uadd8	r6, r6, r7
    e5ee:	faa5 f687 	sel	r6, r5, r7
    e5f2:	b98e      	cbnz	r6, e618 <memchr+0x78>
    e5f4:	d1ee      	bne.n	e5d4 <memchr+0x34>
    e5f6:	bcf0      	pop	{r4, r5, r6, r7}
    e5f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e5fc:	f002 0207 	and.w	r2, r2, #7
    e600:	b132      	cbz	r2, e610 <memchr+0x70>
    e602:	f810 3b01 	ldrb.w	r3, [r0], #1
    e606:	3a01      	subs	r2, #1
    e608:	ea83 0301 	eor.w	r3, r3, r1
    e60c:	b113      	cbz	r3, e614 <memchr+0x74>
    e60e:	d1f8      	bne.n	e602 <memchr+0x62>
    e610:	2000      	movs	r0, #0
    e612:	4770      	bx	lr
    e614:	3801      	subs	r0, #1
    e616:	4770      	bx	lr
    e618:	2d00      	cmp	r5, #0
    e61a:	bf06      	itte	eq
    e61c:	4635      	moveq	r5, r6
    e61e:	3803      	subeq	r0, #3
    e620:	3807      	subne	r0, #7
    e622:	f015 0f01 	tst.w	r5, #1
    e626:	d107      	bne.n	e638 <memchr+0x98>
    e628:	3001      	adds	r0, #1
    e62a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e62e:	bf02      	ittt	eq
    e630:	3001      	addeq	r0, #1
    e632:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e636:	3001      	addeq	r0, #1
    e638:	bcf0      	pop	{r4, r5, r6, r7}
    e63a:	3801      	subs	r0, #1
    e63c:	4770      	bx	lr
    e63e:	bf00      	nop

0000e640 <strlen>:
    e640:	f890 f000 	pld	[r0]
    e644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e648:	f020 0107 	bic.w	r1, r0, #7
    e64c:	f06f 0c00 	mvn.w	ip, #0
    e650:	f010 0407 	ands.w	r4, r0, #7
    e654:	f891 f020 	pld	[r1, #32]
    e658:	f040 8049 	bne.w	e6ee <strlen+0xae>
    e65c:	f04f 0400 	mov.w	r4, #0
    e660:	f06f 0007 	mvn.w	r0, #7
    e664:	e9d1 2300 	ldrd	r2, r3, [r1]
    e668:	f891 f040 	pld	[r1, #64]	; 0x40
    e66c:	f100 0008 	add.w	r0, r0, #8
    e670:	fa82 f24c 	uadd8	r2, r2, ip
    e674:	faa4 f28c 	sel	r2, r4, ip
    e678:	fa83 f34c 	uadd8	r3, r3, ip
    e67c:	faa2 f38c 	sel	r3, r2, ip
    e680:	bb4b      	cbnz	r3, e6d6 <strlen+0x96>
    e682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e686:	fa82 f24c 	uadd8	r2, r2, ip
    e68a:	f100 0008 	add.w	r0, r0, #8
    e68e:	faa4 f28c 	sel	r2, r4, ip
    e692:	fa83 f34c 	uadd8	r3, r3, ip
    e696:	faa2 f38c 	sel	r3, r2, ip
    e69a:	b9e3      	cbnz	r3, e6d6 <strlen+0x96>
    e69c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e6a0:	fa82 f24c 	uadd8	r2, r2, ip
    e6a4:	f100 0008 	add.w	r0, r0, #8
    e6a8:	faa4 f28c 	sel	r2, r4, ip
    e6ac:	fa83 f34c 	uadd8	r3, r3, ip
    e6b0:	faa2 f38c 	sel	r3, r2, ip
    e6b4:	b97b      	cbnz	r3, e6d6 <strlen+0x96>
    e6b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e6ba:	f101 0120 	add.w	r1, r1, #32
    e6be:	fa82 f24c 	uadd8	r2, r2, ip
    e6c2:	f100 0008 	add.w	r0, r0, #8
    e6c6:	faa4 f28c 	sel	r2, r4, ip
    e6ca:	fa83 f34c 	uadd8	r3, r3, ip
    e6ce:	faa2 f38c 	sel	r3, r2, ip
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d0c6      	beq.n	e664 <strlen+0x24>
    e6d6:	2a00      	cmp	r2, #0
    e6d8:	bf04      	itt	eq
    e6da:	3004      	addeq	r0, #4
    e6dc:	461a      	moveq	r2, r3
    e6de:	ba12      	rev	r2, r2
    e6e0:	fab2 f282 	clz	r2, r2
    e6e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e6e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e6ec:	4770      	bx	lr
    e6ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    e6f2:	f004 0503 	and.w	r5, r4, #3
    e6f6:	f1c4 0000 	rsb	r0, r4, #0
    e6fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e6fe:	f014 0f04 	tst.w	r4, #4
    e702:	f891 f040 	pld	[r1, #64]	; 0x40
    e706:	fa0c f505 	lsl.w	r5, ip, r5
    e70a:	ea62 0205 	orn	r2, r2, r5
    e70e:	bf1c      	itt	ne
    e710:	ea63 0305 	ornne	r3, r3, r5
    e714:	4662      	movne	r2, ip
    e716:	f04f 0400 	mov.w	r4, #0
    e71a:	e7a9      	b.n	e670 <strlen+0x30>

0000e71c <__register_exitproc>:
    e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e720:	f8df a07c 	ldr.w	sl, [pc, #124]	; e7a0 <__register_exitproc+0x84>
    e724:	4606      	mov	r6, r0
    e726:	f8da 0000 	ldr.w	r0, [sl]
    e72a:	4698      	mov	r8, r3
    e72c:	460f      	mov	r7, r1
    e72e:	4691      	mov	r9, r2
    e730:	f7ff ff2c 	bl	e58c <__retarget_lock_acquire_recursive>
    e734:	4b18      	ldr	r3, [pc, #96]	; (e798 <__register_exitproc+0x7c>)
    e736:	681c      	ldr	r4, [r3, #0]
    e738:	b324      	cbz	r4, e784 <__register_exitproc+0x68>
    e73a:	6865      	ldr	r5, [r4, #4]
    e73c:	2d1f      	cmp	r5, #31
    e73e:	dc24      	bgt.n	e78a <__register_exitproc+0x6e>
    e740:	b95e      	cbnz	r6, e75a <__register_exitproc+0x3e>
    e742:	1c6b      	adds	r3, r5, #1
    e744:	3502      	adds	r5, #2
    e746:	f8da 0000 	ldr.w	r0, [sl]
    e74a:	6063      	str	r3, [r4, #4]
    e74c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    e750:	f7ff ff1e 	bl	e590 <__retarget_lock_release_recursive>
    e754:	2000      	movs	r0, #0
    e756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e75a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    e75e:	2301      	movs	r3, #1
    e760:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    e764:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    e768:	40ab      	lsls	r3, r5
    e76a:	431a      	orrs	r2, r3
    e76c:	2e02      	cmp	r6, #2
    e76e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    e772:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    e776:	d1e4      	bne.n	e742 <__register_exitproc+0x26>
    e778:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    e77c:	431a      	orrs	r2, r3
    e77e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    e782:	e7de      	b.n	e742 <__register_exitproc+0x26>
    e784:	4c05      	ldr	r4, [pc, #20]	; (e79c <__register_exitproc+0x80>)
    e786:	601c      	str	r4, [r3, #0]
    e788:	e7d7      	b.n	e73a <__register_exitproc+0x1e>
    e78a:	f8da 0000 	ldr.w	r0, [sl]
    e78e:	f7ff feff 	bl	e590 <__retarget_lock_release_recursive>
    e792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e796:	e7de      	b.n	e756 <__register_exitproc+0x3a>
    e798:	20003ce8 	.word	0x20003ce8
    e79c:	20003cec 	.word	0x20003cec
    e7a0:	20003008 	.word	0x20003008

0000e7a4 <_malloc_trim_r>:
    e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7a6:	4f24      	ldr	r7, [pc, #144]	; (e838 <_malloc_trim_r+0x94>)
    e7a8:	460c      	mov	r4, r1
    e7aa:	4606      	mov	r6, r0
    e7ac:	f7fe fdce 	bl	d34c <__malloc_lock>
    e7b0:	68bb      	ldr	r3, [r7, #8]
    e7b2:	685d      	ldr	r5, [r3, #4]
    e7b4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e7b8:	310f      	adds	r1, #15
    e7ba:	f025 0503 	bic.w	r5, r5, #3
    e7be:	194b      	adds	r3, r1, r5
    e7c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e7c4:	f023 030f 	bic.w	r3, r3, #15
    e7c8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e7cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e7d0:	db07      	blt.n	e7e2 <_malloc_trim_r+0x3e>
    e7d2:	2100      	movs	r1, #0
    e7d4:	4630      	mov	r0, r6
    e7d6:	f7ff fd0b 	bl	e1f0 <_sbrk_r>
    e7da:	68bb      	ldr	r3, [r7, #8]
    e7dc:	442b      	add	r3, r5
    e7de:	4298      	cmp	r0, r3
    e7e0:	d004      	beq.n	e7ec <_malloc_trim_r+0x48>
    e7e2:	4630      	mov	r0, r6
    e7e4:	f7fe fdb8 	bl	d358 <__malloc_unlock>
    e7e8:	2000      	movs	r0, #0
    e7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e7ec:	4261      	negs	r1, r4
    e7ee:	4630      	mov	r0, r6
    e7f0:	f7ff fcfe 	bl	e1f0 <_sbrk_r>
    e7f4:	3001      	adds	r0, #1
    e7f6:	d00d      	beq.n	e814 <_malloc_trim_r+0x70>
    e7f8:	4a10      	ldr	r2, [pc, #64]	; (e83c <_malloc_trim_r+0x98>)
    e7fa:	68bb      	ldr	r3, [r7, #8]
    e7fc:	1b2d      	subs	r5, r5, r4
    e7fe:	f045 0501 	orr.w	r5, r5, #1
    e802:	605d      	str	r5, [r3, #4]
    e804:	6813      	ldr	r3, [r2, #0]
    e806:	4630      	mov	r0, r6
    e808:	1b1b      	subs	r3, r3, r4
    e80a:	6013      	str	r3, [r2, #0]
    e80c:	f7fe fda4 	bl	d358 <__malloc_unlock>
    e810:	2001      	movs	r0, #1
    e812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e814:	2100      	movs	r1, #0
    e816:	4630      	mov	r0, r6
    e818:	f7ff fcea 	bl	e1f0 <_sbrk_r>
    e81c:	68ba      	ldr	r2, [r7, #8]
    e81e:	1a83      	subs	r3, r0, r2
    e820:	2b0f      	cmp	r3, #15
    e822:	ddde      	ble.n	e7e2 <_malloc_trim_r+0x3e>
    e824:	f043 0301 	orr.w	r3, r3, #1
    e828:	6053      	str	r3, [r2, #4]
    e82a:	4b05      	ldr	r3, [pc, #20]	; (e840 <_malloc_trim_r+0x9c>)
    e82c:	4903      	ldr	r1, [pc, #12]	; (e83c <_malloc_trim_r+0x98>)
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	1ac0      	subs	r0, r0, r3
    e832:	6008      	str	r0, [r1, #0]
    e834:	e7d5      	b.n	e7e2 <_malloc_trim_r+0x3e>
    e836:	bf00      	nop
    e838:	20003180 	.word	0x20003180
    e83c:	20003e88 	.word	0x20003e88
    e840:	20003588 	.word	0x20003588

0000e844 <_free_r>:
    e844:	2900      	cmp	r1, #0
    e846:	d061      	beq.n	e90c <_free_r+0xc8>
    e848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e84a:	460c      	mov	r4, r1
    e84c:	4606      	mov	r6, r0
    e84e:	f7fe fd7d 	bl	d34c <__malloc_lock>
    e852:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e856:	4f7b      	ldr	r7, [pc, #492]	; (ea44 <_free_r+0x200>)
    e858:	f1a4 0508 	sub.w	r5, r4, #8
    e85c:	f022 0101 	bic.w	r1, r2, #1
    e860:	eb05 0c01 	add.w	ip, r5, r1
    e864:	68b8      	ldr	r0, [r7, #8]
    e866:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e86a:	4560      	cmp	r0, ip
    e86c:	f023 0303 	bic.w	r3, r3, #3
    e870:	f000 808b 	beq.w	e98a <_free_r+0x146>
    e874:	07d2      	lsls	r2, r2, #31
    e876:	f8cc 3004 	str.w	r3, [ip, #4]
    e87a:	d432      	bmi.n	e8e2 <_free_r+0x9e>
    e87c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e880:	1aad      	subs	r5, r5, r2
    e882:	4411      	add	r1, r2
    e884:	68aa      	ldr	r2, [r5, #8]
    e886:	f107 0008 	add.w	r0, r7, #8
    e88a:	4282      	cmp	r2, r0
    e88c:	d06a      	beq.n	e964 <_free_r+0x120>
    e88e:	eb0c 0403 	add.w	r4, ip, r3
    e892:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e896:	68ec      	ldr	r4, [r5, #12]
    e898:	60d4      	str	r4, [r2, #12]
    e89a:	f01e 0f01 	tst.w	lr, #1
    e89e:	60a2      	str	r2, [r4, #8]
    e8a0:	f000 8097 	beq.w	e9d2 <_free_r+0x18e>
    e8a4:	f041 0301 	orr.w	r3, r1, #1
    e8a8:	606b      	str	r3, [r5, #4]
    e8aa:	f8cc 1000 	str.w	r1, [ip]
    e8ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e8b2:	d235      	bcs.n	e920 <_free_r+0xdc>
    e8b4:	6878      	ldr	r0, [r7, #4]
    e8b6:	08cb      	lsrs	r3, r1, #3
    e8b8:	2201      	movs	r2, #1
    e8ba:	0949      	lsrs	r1, r1, #5
    e8bc:	3301      	adds	r3, #1
    e8be:	408a      	lsls	r2, r1
    e8c0:	4302      	orrs	r2, r0
    e8c2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e8c6:	607a      	str	r2, [r7, #4]
    e8c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e8cc:	3a08      	subs	r2, #8
    e8ce:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e8d2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e8d6:	60cd      	str	r5, [r1, #12]
    e8d8:	4630      	mov	r0, r6
    e8da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e8de:	f7fe bd3b 	b.w	d358 <__malloc_unlock>
    e8e2:	eb0c 0203 	add.w	r2, ip, r3
    e8e6:	6852      	ldr	r2, [r2, #4]
    e8e8:	07d0      	lsls	r0, r2, #31
    e8ea:	d410      	bmi.n	e90e <_free_r+0xca>
    e8ec:	4419      	add	r1, r3
    e8ee:	f107 0008 	add.w	r0, r7, #8
    e8f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e8f6:	4283      	cmp	r3, r0
    e8f8:	d073      	beq.n	e9e2 <_free_r+0x19e>
    e8fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e8fe:	60da      	str	r2, [r3, #12]
    e900:	6093      	str	r3, [r2, #8]
    e902:	f041 0301 	orr.w	r3, r1, #1
    e906:	606b      	str	r3, [r5, #4]
    e908:	5069      	str	r1, [r5, r1]
    e90a:	e7d0      	b.n	e8ae <_free_r+0x6a>
    e90c:	4770      	bx	lr
    e90e:	f041 0301 	orr.w	r3, r1, #1
    e912:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e916:	f844 3c04 	str.w	r3, [r4, #-4]
    e91a:	f8cc 1000 	str.w	r1, [ip]
    e91e:	d3c9      	bcc.n	e8b4 <_free_r+0x70>
    e920:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e924:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e928:	d248      	bcs.n	e9bc <_free_r+0x178>
    e92a:	098b      	lsrs	r3, r1, #6
    e92c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e930:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e934:	00c3      	lsls	r3, r0, #3
    e936:	18f8      	adds	r0, r7, r3
    e938:	58fb      	ldr	r3, [r7, r3]
    e93a:	3808      	subs	r0, #8
    e93c:	4298      	cmp	r0, r3
    e93e:	d059      	beq.n	e9f4 <_free_r+0x1b0>
    e940:	685a      	ldr	r2, [r3, #4]
    e942:	f022 0203 	bic.w	r2, r2, #3
    e946:	428a      	cmp	r2, r1
    e948:	d902      	bls.n	e950 <_free_r+0x10c>
    e94a:	689b      	ldr	r3, [r3, #8]
    e94c:	4298      	cmp	r0, r3
    e94e:	d1f7      	bne.n	e940 <_free_r+0xfc>
    e950:	68d8      	ldr	r0, [r3, #12]
    e952:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e956:	6085      	str	r5, [r0, #8]
    e958:	60dd      	str	r5, [r3, #12]
    e95a:	4630      	mov	r0, r6
    e95c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e960:	f7fe bcfa 	b.w	d358 <__malloc_unlock>
    e964:	eb0c 0203 	add.w	r2, ip, r3
    e968:	6852      	ldr	r2, [r2, #4]
    e96a:	07d2      	lsls	r2, r2, #31
    e96c:	d463      	bmi.n	ea36 <_free_r+0x1f2>
    e96e:	440b      	add	r3, r1
    e970:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e974:	60ca      	str	r2, [r1, #12]
    e976:	6091      	str	r1, [r2, #8]
    e978:	f043 0201 	orr.w	r2, r3, #1
    e97c:	606a      	str	r2, [r5, #4]
    e97e:	4630      	mov	r0, r6
    e980:	50eb      	str	r3, [r5, r3]
    e982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e986:	f7fe bce7 	b.w	d358 <__malloc_unlock>
    e98a:	440b      	add	r3, r1
    e98c:	07d1      	lsls	r1, r2, #31
    e98e:	d407      	bmi.n	e9a0 <_free_r+0x15c>
    e990:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e994:	1aad      	subs	r5, r5, r2
    e996:	4413      	add	r3, r2
    e998:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e99c:	60ca      	str	r2, [r1, #12]
    e99e:	6091      	str	r1, [r2, #8]
    e9a0:	f043 0201 	orr.w	r2, r3, #1
    e9a4:	606a      	str	r2, [r5, #4]
    e9a6:	4a28      	ldr	r2, [pc, #160]	; (ea48 <_free_r+0x204>)
    e9a8:	60bd      	str	r5, [r7, #8]
    e9aa:	6812      	ldr	r2, [r2, #0]
    e9ac:	429a      	cmp	r2, r3
    e9ae:	d893      	bhi.n	e8d8 <_free_r+0x94>
    e9b0:	4b26      	ldr	r3, [pc, #152]	; (ea4c <_free_r+0x208>)
    e9b2:	4630      	mov	r0, r6
    e9b4:	6819      	ldr	r1, [r3, #0]
    e9b6:	f7ff fef5 	bl	e7a4 <_malloc_trim_r>
    e9ba:	e78d      	b.n	e8d8 <_free_r+0x94>
    e9bc:	2b14      	cmp	r3, #20
    e9be:	d90a      	bls.n	e9d6 <_free_r+0x192>
    e9c0:	2b54      	cmp	r3, #84	; 0x54
    e9c2:	d81f      	bhi.n	ea04 <_free_r+0x1c0>
    e9c4:	0b0b      	lsrs	r3, r1, #12
    e9c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e9ca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e9ce:	00c3      	lsls	r3, r0, #3
    e9d0:	e7b1      	b.n	e936 <_free_r+0xf2>
    e9d2:	4419      	add	r1, r3
    e9d4:	e78d      	b.n	e8f2 <_free_r+0xae>
    e9d6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e9da:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e9de:	00c3      	lsls	r3, r0, #3
    e9e0:	e7a9      	b.n	e936 <_free_r+0xf2>
    e9e2:	f041 0301 	orr.w	r3, r1, #1
    e9e6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e9ea:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e9ee:	606b      	str	r3, [r5, #4]
    e9f0:	5069      	str	r1, [r5, r1]
    e9f2:	e771      	b.n	e8d8 <_free_r+0x94>
    e9f4:	6879      	ldr	r1, [r7, #4]
    e9f6:	1092      	asrs	r2, r2, #2
    e9f8:	2401      	movs	r4, #1
    e9fa:	fa04 f202 	lsl.w	r2, r4, r2
    e9fe:	430a      	orrs	r2, r1
    ea00:	607a      	str	r2, [r7, #4]
    ea02:	e7a6      	b.n	e952 <_free_r+0x10e>
    ea04:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ea08:	d806      	bhi.n	ea18 <_free_r+0x1d4>
    ea0a:	0bcb      	lsrs	r3, r1, #15
    ea0c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ea10:	f103 0277 	add.w	r2, r3, #119	; 0x77
    ea14:	00c3      	lsls	r3, r0, #3
    ea16:	e78e      	b.n	e936 <_free_r+0xf2>
    ea18:	f240 5254 	movw	r2, #1364	; 0x554
    ea1c:	4293      	cmp	r3, r2
    ea1e:	d806      	bhi.n	ea2e <_free_r+0x1ea>
    ea20:	0c8b      	lsrs	r3, r1, #18
    ea22:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    ea26:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    ea2a:	00c3      	lsls	r3, r0, #3
    ea2c:	e783      	b.n	e936 <_free_r+0xf2>
    ea2e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    ea32:	227e      	movs	r2, #126	; 0x7e
    ea34:	e77f      	b.n	e936 <_free_r+0xf2>
    ea36:	f041 0301 	orr.w	r3, r1, #1
    ea3a:	606b      	str	r3, [r5, #4]
    ea3c:	f8cc 1000 	str.w	r1, [ip]
    ea40:	e74a      	b.n	e8d8 <_free_r+0x94>
    ea42:	bf00      	nop
    ea44:	20003180 	.word	0x20003180
    ea48:	2000358c 	.word	0x2000358c
    ea4c:	20003eb8 	.word	0x20003eb8

0000ea50 <__ascii_mbtowc>:
    ea50:	b082      	sub	sp, #8
    ea52:	b149      	cbz	r1, ea68 <__ascii_mbtowc+0x18>
    ea54:	b15a      	cbz	r2, ea6e <__ascii_mbtowc+0x1e>
    ea56:	b16b      	cbz	r3, ea74 <__ascii_mbtowc+0x24>
    ea58:	7813      	ldrb	r3, [r2, #0]
    ea5a:	600b      	str	r3, [r1, #0]
    ea5c:	7812      	ldrb	r2, [r2, #0]
    ea5e:	1e10      	subs	r0, r2, #0
    ea60:	bf18      	it	ne
    ea62:	2001      	movne	r0, #1
    ea64:	b002      	add	sp, #8
    ea66:	4770      	bx	lr
    ea68:	a901      	add	r1, sp, #4
    ea6a:	2a00      	cmp	r2, #0
    ea6c:	d1f3      	bne.n	ea56 <__ascii_mbtowc+0x6>
    ea6e:	4610      	mov	r0, r2
    ea70:	b002      	add	sp, #8
    ea72:	4770      	bx	lr
    ea74:	f06f 0001 	mvn.w	r0, #1
    ea78:	e7f4      	b.n	ea64 <__ascii_mbtowc+0x14>
    ea7a:	bf00      	nop
    ea7c:	0000      	movs	r0, r0
	...

0000ea80 <_svfprintf_r>:
    ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea84:	ed2d 8b08 	vpush	{d8-d11}
    ea88:	b0d1      	sub	sp, #324	; 0x144
    ea8a:	460c      	mov	r4, r1
    ea8c:	ee0b 1a10 	vmov	s22, r1
    ea90:	4690      	mov	r8, r2
    ea92:	9308      	str	r3, [sp, #32]
    ea94:	4683      	mov	fp, r0
    ea96:	f002 fbcb 	bl	11230 <_localeconv_r>
    ea9a:	6803      	ldr	r3, [r0, #0]
    ea9c:	9312      	str	r3, [sp, #72]	; 0x48
    ea9e:	4618      	mov	r0, r3
    eaa0:	f7ff fdce 	bl	e640 <strlen>
    eaa4:	af20      	add	r7, sp, #128	; 0x80
    eaa6:	9010      	str	r0, [sp, #64]	; 0x40
    eaa8:	2208      	movs	r2, #8
    eaaa:	2100      	movs	r1, #0
    eaac:	4638      	mov	r0, r7
    eaae:	f7ff fac9 	bl	e044 <memset>
    eab2:	89a3      	ldrh	r3, [r4, #12]
    eab4:	061b      	lsls	r3, r3, #24
    eab6:	d503      	bpl.n	eac0 <_svfprintf_r+0x40>
    eab8:	6923      	ldr	r3, [r4, #16]
    eaba:	2b00      	cmp	r3, #0
    eabc:	f000 8755 	beq.w	f96a <_svfprintf_r+0xeea>
    eac0:	2300      	movs	r3, #0
    eac2:	ed9f 8b83 	vldr	d8, [pc, #524]	; ecd0 <_svfprintf_r+0x250>
    eac6:	ed9f 9b84 	vldr	d9, [pc, #528]	; ecd8 <_svfprintf_r+0x258>
    eaca:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    eace:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    ead2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    ead6:	aa27      	add	r2, sp, #156	; 0x9c
    ead8:	930e      	str	r3, [sp, #56]	; 0x38
    eada:	9224      	str	r2, [sp, #144]	; 0x90
    eadc:	4692      	mov	sl, r2
    eade:	9311      	str	r3, [sp, #68]	; 0x44
    eae0:	9304      	str	r3, [sp, #16]
    eae2:	4644      	mov	r4, r8
    eae4:	46a1      	mov	r9, r4
    eae6:	4b7e      	ldr	r3, [pc, #504]	; (ece0 <_svfprintf_r+0x260>)
    eae8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    eaec:	f7ff fb74 	bl	e1d8 <__locale_mb_cur_max>
    eaf0:	464a      	mov	r2, r9
    eaf2:	4603      	mov	r3, r0
    eaf4:	a91c      	add	r1, sp, #112	; 0x70
    eaf6:	9700      	str	r7, [sp, #0]
    eaf8:	4658      	mov	r0, fp
    eafa:	47a8      	blx	r5
    eafc:	2800      	cmp	r0, #0
    eafe:	f000 80b0 	beq.w	ec62 <_svfprintf_r+0x1e2>
    eb02:	f2c0 80a6 	blt.w	ec52 <_svfprintf_r+0x1d2>
    eb06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    eb08:	2a25      	cmp	r2, #37	; 0x25
    eb0a:	4603      	mov	r3, r0
    eb0c:	d001      	beq.n	eb12 <_svfprintf_r+0x92>
    eb0e:	4499      	add	r9, r3
    eb10:	e7e9      	b.n	eae6 <_svfprintf_r+0x66>
    eb12:	ebb9 0504 	subs.w	r5, r9, r4
    eb16:	4606      	mov	r6, r0
    eb18:	f040 80a7 	bne.w	ec6a <_svfprintf_r+0x1ea>
    eb1c:	2300      	movs	r3, #0
    eb1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb22:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    eb26:	4698      	mov	r8, r3
    eb28:	9306      	str	r3, [sp, #24]
    eb2a:	f109 0901 	add.w	r9, r9, #1
    eb2e:	f899 3000 	ldrb.w	r3, [r9]
    eb32:	9203      	str	r2, [sp, #12]
    eb34:	252b      	movs	r5, #43	; 0x2b
    eb36:	2620      	movs	r6, #32
    eb38:	f109 0901 	add.w	r9, r9, #1
    eb3c:	f1a3 0220 	sub.w	r2, r3, #32
    eb40:	2a5a      	cmp	r2, #90	; 0x5a
    eb42:	f200 80cf 	bhi.w	ece4 <_svfprintf_r+0x264>
    eb46:	e8df f012 	tbh	[pc, r2, lsl #1]
    eb4a:	02e8      	.short	0x02e8
    eb4c:	00cd00cd 	.word	0x00cd00cd
    eb50:	00cd02e3 	.word	0x00cd02e3
    eb54:	00cd00cd 	.word	0x00cd00cd
    eb58:	00cd006a 	.word	0x00cd006a
    eb5c:	020500cd 	.word	0x020500cd
    eb60:	00cd0284 	.word	0x00cd0284
    eb64:	02c90210 	.word	0x02c90210
    eb68:	02bd00cd 	.word	0x02bd00cd
    eb6c:	005b005b 	.word	0x005b005b
    eb70:	005b005b 	.word	0x005b005b
    eb74:	005b005b 	.word	0x005b005b
    eb78:	005b005b 	.word	0x005b005b
    eb7c:	00cd005b 	.word	0x00cd005b
    eb80:	00cd00cd 	.word	0x00cd00cd
    eb84:	00cd00cd 	.word	0x00cd00cd
    eb88:	00cd00cd 	.word	0x00cd00cd
    eb8c:	00cd0153 	.word	0x00cd0153
    eb90:	021a0183 	.word	0x021a0183
    eb94:	01530153 	.word	0x01530153
    eb98:	00cd0153 	.word	0x00cd0153
    eb9c:	00cd00cd 	.word	0x00cd00cd
    eba0:	021500cd 	.word	0x021500cd
    eba4:	00cd00cd 	.word	0x00cd00cd
    eba8:	00cd0296 	.word	0x00cd0296
    ebac:	00cd00cd 	.word	0x00cd00cd
    ebb0:	00cd01ab 	.word	0x00cd01ab
    ebb4:	00cd02aa 	.word	0x00cd02aa
    ebb8:	06e300cd 	.word	0x06e300cd
    ebbc:	00cd00cd 	.word	0x00cd00cd
    ebc0:	00cd00cd 	.word	0x00cd00cd
    ebc4:	00cd00cd 	.word	0x00cd00cd
    ebc8:	00cd00cd 	.word	0x00cd00cd
    ebcc:	00cd0153 	.word	0x00cd0153
    ebd0:	01de0183 	.word	0x01de0183
    ebd4:	01530153 	.word	0x01530153
    ebd8:	02770153 	.word	0x02770153
    ebdc:	007f01de 	.word	0x007f01de
    ebe0:	028900cd 	.word	0x028900cd
    ebe4:	025f00cd 	.word	0x025f00cd
    ebe8:	022f06e0 	.word	0x022f06e0
    ebec:	00cd007f 	.word	0x00cd007f
    ebf0:	007c01ab 	.word	0x007c01ab
    ebf4:	00cd06b8 	.word	0x00cd06b8
    ebf8:	06bd00cd 	.word	0x06bd00cd
    ebfc:	007c00cd 	.word	0x007c00cd
    ec00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec04:	2100      	movs	r1, #0
    ec06:	f819 3b01 	ldrb.w	r3, [r9], #1
    ec0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ec0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ec12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec16:	2a09      	cmp	r2, #9
    ec18:	d9f5      	bls.n	ec06 <_svfprintf_r+0x186>
    ec1a:	9106      	str	r1, [sp, #24]
    ec1c:	e78e      	b.n	eb3c <_svfprintf_r+0xbc>
    ec1e:	4658      	mov	r0, fp
    ec20:	f002 fb06 	bl	11230 <_localeconv_r>
    ec24:	6843      	ldr	r3, [r0, #4]
    ec26:	9315      	str	r3, [sp, #84]	; 0x54
    ec28:	4618      	mov	r0, r3
    ec2a:	f7ff fd09 	bl	e640 <strlen>
    ec2e:	9016      	str	r0, [sp, #88]	; 0x58
    ec30:	4658      	mov	r0, fp
    ec32:	f002 fafd 	bl	11230 <_localeconv_r>
    ec36:	6883      	ldr	r3, [r0, #8]
    ec38:	9313      	str	r3, [sp, #76]	; 0x4c
    ec3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	f040 862d 	bne.w	f89c <_svfprintf_r+0xe1c>
    ec42:	f899 3000 	ldrb.w	r3, [r9]
    ec46:	e777      	b.n	eb38 <_svfprintf_r+0xb8>
    ec48:	f899 3000 	ldrb.w	r3, [r9]
    ec4c:	f048 0820 	orr.w	r8, r8, #32
    ec50:	e772      	b.n	eb38 <_svfprintf_r+0xb8>
    ec52:	2208      	movs	r2, #8
    ec54:	2100      	movs	r1, #0
    ec56:	4638      	mov	r0, r7
    ec58:	f7ff f9f4 	bl	e044 <memset>
    ec5c:	2301      	movs	r3, #1
    ec5e:	4499      	add	r9, r3
    ec60:	e741      	b.n	eae6 <_svfprintf_r+0x66>
    ec62:	ebb9 0504 	subs.w	r5, r9, r4
    ec66:	4606      	mov	r6, r0
    ec68:	d011      	beq.n	ec8e <_svfprintf_r+0x20e>
    ec6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ec6c:	442b      	add	r3, r5
    ec6e:	9326      	str	r3, [sp, #152]	; 0x98
    ec70:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec72:	3301      	adds	r3, #1
    ec74:	2b07      	cmp	r3, #7
    ec76:	e9ca 4500 	strd	r4, r5, [sl]
    ec7a:	9325      	str	r3, [sp, #148]	; 0x94
    ec7c:	dc1c      	bgt.n	ecb8 <_svfprintf_r+0x238>
    ec7e:	f10a 0a08 	add.w	sl, sl, #8
    ec82:	9b04      	ldr	r3, [sp, #16]
    ec84:	442b      	add	r3, r5
    ec86:	9304      	str	r3, [sp, #16]
    ec88:	2e00      	cmp	r6, #0
    ec8a:	f47f af47 	bne.w	eb1c <_svfprintf_r+0x9c>
    ec8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ec90:	2b00      	cmp	r3, #0
    ec92:	f041 820b 	bne.w	100ac <_svfprintf_r+0x162c>
    ec96:	ee1b 3a10 	vmov	r3, s22
    ec9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ec9e:	f013 0f40 	tst.w	r3, #64	; 0x40
    eca2:	9b04      	ldr	r3, [sp, #16]
    eca4:	bf18      	it	ne
    eca6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    ecaa:	9304      	str	r3, [sp, #16]
    ecac:	9804      	ldr	r0, [sp, #16]
    ecae:	b051      	add	sp, #324	; 0x144
    ecb0:	ecbd 8b08 	vpop	{d8-d11}
    ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecb8:	ee1b 1a10 	vmov	r1, s22
    ecbc:	aa24      	add	r2, sp, #144	; 0x90
    ecbe:	4658      	mov	r0, fp
    ecc0:	f003 fb08 	bl	122d4 <__ssprint_r>
    ecc4:	2800      	cmp	r0, #0
    ecc6:	d1e6      	bne.n	ec96 <_svfprintf_r+0x216>
    ecc8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eccc:	e7d9      	b.n	ec82 <_svfprintf_r+0x202>
    ecce:	bf00      	nop
	...
    ecd8:	ffffffff 	.word	0xffffffff
    ecdc:	7fefffff 	.word	0x7fefffff
    ece0:	20003014 	.word	0x20003014
    ece4:	930b      	str	r3, [sp, #44]	; 0x2c
    ece6:	2b00      	cmp	r3, #0
    ece8:	d0d1      	beq.n	ec8e <_svfprintf_r+0x20e>
    ecea:	2100      	movs	r1, #0
    ecec:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ecf0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    ecf4:	2301      	movs	r3, #1
    ecf6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ecfa:	9302      	str	r3, [sp, #8]
    ecfc:	9107      	str	r1, [sp, #28]
    ecfe:	9305      	str	r3, [sp, #20]
    ed00:	9103      	str	r1, [sp, #12]
    ed02:	910f      	str	r1, [sp, #60]	; 0x3c
    ed04:	ac37      	add	r4, sp, #220	; 0xdc
    ed06:	f018 0302 	ands.w	r3, r8, #2
    ed0a:	9309      	str	r3, [sp, #36]	; 0x24
    ed0c:	d002      	beq.n	ed14 <_svfprintf_r+0x294>
    ed0e:	9b02      	ldr	r3, [sp, #8]
    ed10:	3302      	adds	r3, #2
    ed12:	9302      	str	r3, [sp, #8]
    ed14:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    ed18:	930a      	str	r3, [sp, #40]	; 0x28
    ed1a:	d105      	bne.n	ed28 <_svfprintf_r+0x2a8>
    ed1c:	9b06      	ldr	r3, [sp, #24]
    ed1e:	9a02      	ldr	r2, [sp, #8]
    ed20:	1a9d      	subs	r5, r3, r2
    ed22:	2d00      	cmp	r5, #0
    ed24:	f300 8369 	bgt.w	f3fa <_svfprintf_r+0x97a>
    ed28:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed2a:	b189      	cbz	r1, ed50 <_svfprintf_r+0x2d0>
    ed2c:	9925      	ldr	r1, [sp, #148]	; 0x94
    ed2e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    ed32:	3101      	adds	r1, #1
    ed34:	3201      	adds	r2, #1
    ed36:	f8ca 0000 	str.w	r0, [sl]
    ed3a:	2907      	cmp	r1, #7
    ed3c:	f04f 0001 	mov.w	r0, #1
    ed40:	9226      	str	r2, [sp, #152]	; 0x98
    ed42:	9125      	str	r1, [sp, #148]	; 0x94
    ed44:	f8ca 0004 	str.w	r0, [sl, #4]
    ed48:	f300 83a2 	bgt.w	f490 <_svfprintf_r+0xa10>
    ed4c:	f10a 0a08 	add.w	sl, sl, #8
    ed50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed52:	b183      	cbz	r3, ed76 <_svfprintf_r+0x2f6>
    ed54:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed56:	a91a      	add	r1, sp, #104	; 0x68
    ed58:	3301      	adds	r3, #1
    ed5a:	3202      	adds	r2, #2
    ed5c:	f8ca 1000 	str.w	r1, [sl]
    ed60:	2b07      	cmp	r3, #7
    ed62:	f04f 0102 	mov.w	r1, #2
    ed66:	9226      	str	r2, [sp, #152]	; 0x98
    ed68:	9325      	str	r3, [sp, #148]	; 0x94
    ed6a:	f8ca 1004 	str.w	r1, [sl, #4]
    ed6e:	f300 83a3 	bgt.w	f4b8 <_svfprintf_r+0xa38>
    ed72:	f10a 0a08 	add.w	sl, sl, #8
    ed76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed78:	2b80      	cmp	r3, #128	; 0x80
    ed7a:	f000 826c 	beq.w	f256 <_svfprintf_r+0x7d6>
    ed7e:	9b03      	ldr	r3, [sp, #12]
    ed80:	9905      	ldr	r1, [sp, #20]
    ed82:	1a5d      	subs	r5, r3, r1
    ed84:	2d00      	cmp	r5, #0
    ed86:	f300 82a5 	bgt.w	f2d4 <_svfprintf_r+0x854>
    ed8a:	f418 7f80 	tst.w	r8, #256	; 0x100
    ed8e:	f040 820d 	bne.w	f1ac <_svfprintf_r+0x72c>
    ed92:	9b05      	ldr	r3, [sp, #20]
    ed94:	f8ca 3004 	str.w	r3, [sl, #4]
    ed98:	441a      	add	r2, r3
    ed9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed9c:	f8ca 4000 	str.w	r4, [sl]
    eda0:	3301      	adds	r3, #1
    eda2:	2b07      	cmp	r3, #7
    eda4:	9226      	str	r2, [sp, #152]	; 0x98
    eda6:	9325      	str	r3, [sp, #148]	; 0x94
    eda8:	f300 831b 	bgt.w	f3e2 <_svfprintf_r+0x962>
    edac:	f10a 0a08 	add.w	sl, sl, #8
    edb0:	f018 0f04 	tst.w	r8, #4
    edb4:	d005      	beq.n	edc2 <_svfprintf_r+0x342>
    edb6:	9b06      	ldr	r3, [sp, #24]
    edb8:	9902      	ldr	r1, [sp, #8]
    edba:	1a5c      	subs	r4, r3, r1
    edbc:	2c00      	cmp	r4, #0
    edbe:	f300 8388 	bgt.w	f4d2 <_svfprintf_r+0xa52>
    edc2:	9b04      	ldr	r3, [sp, #16]
    edc4:	9906      	ldr	r1, [sp, #24]
    edc6:	9802      	ldr	r0, [sp, #8]
    edc8:	4281      	cmp	r1, r0
    edca:	bfac      	ite	ge
    edcc:	185b      	addge	r3, r3, r1
    edce:	181b      	addlt	r3, r3, r0
    edd0:	9304      	str	r3, [sp, #16]
    edd2:	2a00      	cmp	r2, #0
    edd4:	f040 82b0 	bne.w	f338 <_svfprintf_r+0x8b8>
    edd8:	2300      	movs	r3, #0
    edda:	9325      	str	r3, [sp, #148]	; 0x94
    eddc:	9b07      	ldr	r3, [sp, #28]
    edde:	b11b      	cbz	r3, ede8 <_svfprintf_r+0x368>
    ede0:	9907      	ldr	r1, [sp, #28]
    ede2:	4658      	mov	r0, fp
    ede4:	f7ff fd2e 	bl	e844 <_free_r>
    ede8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    edec:	464c      	mov	r4, r9
    edee:	e679      	b.n	eae4 <_svfprintf_r+0x64>
    edf0:	930b      	str	r3, [sp, #44]	; 0x2c
    edf2:	9b08      	ldr	r3, [sp, #32]
    edf4:	3307      	adds	r3, #7
    edf6:	f023 0307 	bic.w	r3, r3, #7
    edfa:	ecb3 8b02 	vldmia	r3!, {d8}
    edfe:	eeb0 7bc8 	vabs.f64	d7, d8
    ee02:	eeb4 7b49 	vcmp.f64	d7, d9
    ee06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee0a:	9308      	str	r3, [sp, #32]
    ee0c:	f340 84e9 	ble.w	f7e2 <_svfprintf_r+0xd62>
    ee10:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    ee14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee18:	f101 8059 	bmi.w	fece <_svfprintf_r+0x144e>
    ee1c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ee20:	4cab      	ldr	r4, [pc, #684]	; (f0d0 <_svfprintf_r+0x650>)
    ee22:	4bac      	ldr	r3, [pc, #688]	; (f0d4 <_svfprintf_r+0x654>)
    ee24:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ee28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee2a:	2a47      	cmp	r2, #71	; 0x47
    ee2c:	bfc8      	it	gt
    ee2e:	461c      	movgt	r4, r3
    ee30:	2300      	movs	r3, #0
    ee32:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ee36:	2203      	movs	r2, #3
    ee38:	9307      	str	r3, [sp, #28]
    ee3a:	9202      	str	r2, [sp, #8]
    ee3c:	9205      	str	r2, [sp, #20]
    ee3e:	9303      	str	r3, [sp, #12]
    ee40:	930f      	str	r3, [sp, #60]	; 0x3c
    ee42:	2900      	cmp	r1, #0
    ee44:	f43f af5f 	beq.w	ed06 <_svfprintf_r+0x286>
    ee48:	9b02      	ldr	r3, [sp, #8]
    ee4a:	3301      	adds	r3, #1
    ee4c:	9302      	str	r3, [sp, #8]
    ee4e:	e75a      	b.n	ed06 <_svfprintf_r+0x286>
    ee50:	2b43      	cmp	r3, #67	; 0x43
    ee52:	930b      	str	r3, [sp, #44]	; 0x2c
    ee54:	d003      	beq.n	ee5e <_svfprintf_r+0x3de>
    ee56:	f018 0f10 	tst.w	r8, #16
    ee5a:	f000 855d 	beq.w	f918 <_svfprintf_r+0xe98>
    ee5e:	9d08      	ldr	r5, [sp, #32]
    ee60:	2208      	movs	r2, #8
    ee62:	2100      	movs	r1, #0
    ee64:	a822      	add	r0, sp, #136	; 0x88
    ee66:	ac37      	add	r4, sp, #220	; 0xdc
    ee68:	f7ff f8ec 	bl	e044 <memset>
    ee6c:	ab22      	add	r3, sp, #136	; 0x88
    ee6e:	f855 2b04 	ldr.w	r2, [r5], #4
    ee72:	4621      	mov	r1, r4
    ee74:	4658      	mov	r0, fp
    ee76:	f002 fa45 	bl	11304 <_wcrtomb_r>
    ee7a:	4603      	mov	r3, r0
    ee7c:	3301      	adds	r3, #1
    ee7e:	9005      	str	r0, [sp, #20]
    ee80:	f001 82ee 	beq.w	10460 <_svfprintf_r+0x19e0>
    ee84:	9b05      	ldr	r3, [sp, #20]
    ee86:	9508      	str	r5, [sp, #32]
    ee88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ee8c:	9302      	str	r3, [sp, #8]
    ee8e:	2100      	movs	r1, #0
    ee90:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ee94:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ee98:	9107      	str	r1, [sp, #28]
    ee9a:	9103      	str	r1, [sp, #12]
    ee9c:	910f      	str	r1, [sp, #60]	; 0x3c
    ee9e:	e732      	b.n	ed06 <_svfprintf_r+0x286>
    eea0:	930b      	str	r3, [sp, #44]	; 0x2c
    eea2:	9b08      	ldr	r3, [sp, #32]
    eea4:	461a      	mov	r2, r3
    eea6:	2300      	movs	r3, #0
    eea8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    eeac:	4613      	mov	r3, r2
    eeae:	f853 4b04 	ldr.w	r4, [r3], #4
    eeb2:	9308      	str	r3, [sp, #32]
    eeb4:	2c00      	cmp	r4, #0
    eeb6:	f000 8548 	beq.w	f94a <_svfprintf_r+0xeca>
    eeba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eebc:	2b53      	cmp	r3, #83	; 0x53
    eebe:	f000 86ec 	beq.w	fc9a <_svfprintf_r+0x121a>
    eec2:	f018 0310 	ands.w	r3, r8, #16
    eec6:	930c      	str	r3, [sp, #48]	; 0x30
    eec8:	f040 86e7 	bne.w	fc9a <_svfprintf_r+0x121a>
    eecc:	9b03      	ldr	r3, [sp, #12]
    eece:	1c5d      	adds	r5, r3, #1
    eed0:	f001 80e5 	beq.w	1009e <_svfprintf_r+0x161e>
    eed4:	990c      	ldr	r1, [sp, #48]	; 0x30
    eed6:	461a      	mov	r2, r3
    eed8:	4620      	mov	r0, r4
    eeda:	f7ff fb61 	bl	e5a0 <memchr>
    eede:	9007      	str	r0, [sp, #28]
    eee0:	2800      	cmp	r0, #0
    eee2:	f001 8328 	beq.w	10536 <_svfprintf_r+0x1ab6>
    eee6:	9b07      	ldr	r3, [sp, #28]
    eee8:	1b1a      	subs	r2, r3, r4
    eeea:	9205      	str	r2, [sp, #20]
    eeec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eeee:	9303      	str	r3, [sp, #12]
    eef0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    eef4:	930f      	str	r3, [sp, #60]	; 0x3c
    eef6:	930d      	str	r3, [sp, #52]	; 0x34
    eef8:	9307      	str	r3, [sp, #28]
    eefa:	2373      	movs	r3, #115	; 0x73
    eefc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ef00:	9202      	str	r2, [sp, #8]
    ef02:	930b      	str	r3, [sp, #44]	; 0x2c
    ef04:	e79d      	b.n	ee42 <_svfprintf_r+0x3c2>
    ef06:	f018 0f20 	tst.w	r8, #32
    ef0a:	930b      	str	r3, [sp, #44]	; 0x2c
    ef0c:	9b08      	ldr	r3, [sp, #32]
    ef0e:	d03d      	beq.n	ef8c <_svfprintf_r+0x50c>
    ef10:	3307      	adds	r3, #7
    ef12:	f023 0307 	bic.w	r3, r3, #7
    ef16:	461a      	mov	r2, r3
    ef18:	4611      	mov	r1, r2
    ef1a:	685b      	ldr	r3, [r3, #4]
    ef1c:	f851 2b08 	ldr.w	r2, [r1], #8
    ef20:	9108      	str	r1, [sp, #32]
    ef22:	4619      	mov	r1, r3
    ef24:	2b00      	cmp	r3, #0
    ef26:	f2c0 840c 	blt.w	f742 <_svfprintf_r+0xcc2>
    ef2a:	9b03      	ldr	r3, [sp, #12]
    ef2c:	3301      	adds	r3, #1
    ef2e:	f000 829e 	beq.w	f46e <_svfprintf_r+0x9ee>
    ef32:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    ef36:	ea52 0301 	orrs.w	r3, r2, r1
    ef3a:	9002      	str	r0, [sp, #8]
    ef3c:	f040 8299 	bne.w	f472 <_svfprintf_r+0x9f2>
    ef40:	9b03      	ldr	r3, [sp, #12]
    ef42:	2b00      	cmp	r3, #0
    ef44:	f040 829a 	bne.w	f47c <_svfprintf_r+0x9fc>
    ef48:	4680      	mov	r8, r0
    ef4a:	2300      	movs	r3, #0
    ef4c:	9303      	str	r3, [sp, #12]
    ef4e:	9305      	str	r3, [sp, #20]
    ef50:	ac50      	add	r4, sp, #320	; 0x140
    ef52:	e106      	b.n	f162 <_svfprintf_r+0x6e2>
    ef54:	9b08      	ldr	r3, [sp, #32]
    ef56:	f853 2b04 	ldr.w	r2, [r3], #4
    ef5a:	9206      	str	r2, [sp, #24]
    ef5c:	2a00      	cmp	r2, #0
    ef5e:	f280 8419 	bge.w	f794 <_svfprintf_r+0xd14>
    ef62:	9a06      	ldr	r2, [sp, #24]
    ef64:	9308      	str	r3, [sp, #32]
    ef66:	4252      	negs	r2, r2
    ef68:	9206      	str	r2, [sp, #24]
    ef6a:	f899 3000 	ldrb.w	r3, [r9]
    ef6e:	f048 0804 	orr.w	r8, r8, #4
    ef72:	e5e1      	b.n	eb38 <_svfprintf_r+0xb8>
    ef74:	f899 3000 	ldrb.w	r3, [r9]
    ef78:	f048 0808 	orr.w	r8, r8, #8
    ef7c:	e5dc      	b.n	eb38 <_svfprintf_r+0xb8>
    ef7e:	f048 0810 	orr.w	r8, r8, #16
    ef82:	f018 0f20 	tst.w	r8, #32
    ef86:	930b      	str	r3, [sp, #44]	; 0x2c
    ef88:	9b08      	ldr	r3, [sp, #32]
    ef8a:	d1c1      	bne.n	ef10 <_svfprintf_r+0x490>
    ef8c:	f018 0f10 	tst.w	r8, #16
    ef90:	f040 840b 	bne.w	f7aa <_svfprintf_r+0xd2a>
    ef94:	f018 0f40 	tst.w	r8, #64	; 0x40
    ef98:	f000 8403 	beq.w	f7a2 <_svfprintf_r+0xd22>
    ef9c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    efa0:	9308      	str	r3, [sp, #32]
    efa2:	17d1      	asrs	r1, r2, #31
    efa4:	460b      	mov	r3, r1
    efa6:	e7bd      	b.n	ef24 <_svfprintf_r+0x4a4>
    efa8:	9b08      	ldr	r3, [sp, #32]
    efaa:	f048 0202 	orr.w	r2, r8, #2
    efae:	9202      	str	r2, [sp, #8]
    efb0:	f853 2b04 	ldr.w	r2, [r3], #4
    efb4:	9308      	str	r3, [sp, #32]
    efb6:	f647 0330 	movw	r3, #30768	; 0x7830
    efba:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    efbe:	2078      	movs	r0, #120	; 0x78
    efc0:	4b45      	ldr	r3, [pc, #276]	; (f0d8 <_svfprintf_r+0x658>)
    efc2:	9311      	str	r3, [sp, #68]	; 0x44
    efc4:	2100      	movs	r1, #0
    efc6:	2302      	movs	r3, #2
    efc8:	900b      	str	r0, [sp, #44]	; 0x2c
    efca:	2000      	movs	r0, #0
    efcc:	9c03      	ldr	r4, [sp, #12]
    efce:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    efd2:	1c60      	adds	r0, r4, #1
    efd4:	f000 80ad 	beq.w	f132 <_svfprintf_r+0x6b2>
    efd8:	9802      	ldr	r0, [sp, #8]
    efda:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    efde:	ea52 0001 	orrs.w	r0, r2, r1
    efe2:	f040 80a4 	bne.w	f12e <_svfprintf_r+0x6ae>
    efe6:	2c00      	cmp	r4, #0
    efe8:	f040 86ae 	bne.w	fd48 <_svfprintf_r+0x12c8>
    efec:	2b00      	cmp	r3, #0
    efee:	d1ac      	bne.n	ef4a <_svfprintf_r+0x4ca>
    eff0:	9b02      	ldr	r3, [sp, #8]
    eff2:	f013 0301 	ands.w	r3, r3, #1
    eff6:	9305      	str	r3, [sp, #20]
    eff8:	f000 83d1 	beq.w	f79e <_svfprintf_r+0xd1e>
    effc:	2330      	movs	r3, #48	; 0x30
    effe:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    f002:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f006:	e0ac      	b.n	f162 <_svfprintf_r+0x6e2>
    f008:	f018 0f20 	tst.w	r8, #32
    f00c:	f040 83d4 	bne.w	f7b8 <_svfprintf_r+0xd38>
    f010:	f018 0f10 	tst.w	r8, #16
    f014:	f040 869f 	bne.w	fd56 <_svfprintf_r+0x12d6>
    f018:	f018 0f40 	tst.w	r8, #64	; 0x40
    f01c:	f040 8797 	bne.w	ff4e <_svfprintf_r+0x14ce>
    f020:	f418 7f00 	tst.w	r8, #512	; 0x200
    f024:	f000 8697 	beq.w	fd56 <_svfprintf_r+0x12d6>
    f028:	9b08      	ldr	r3, [sp, #32]
    f02a:	9904      	ldr	r1, [sp, #16]
    f02c:	f853 2b04 	ldr.w	r2, [r3], #4
    f030:	9308      	str	r3, [sp, #32]
    f032:	7011      	strb	r1, [r2, #0]
    f034:	464c      	mov	r4, r9
    f036:	e555      	b.n	eae4 <_svfprintf_r+0x64>
    f038:	f899 3000 	ldrb.w	r3, [r9]
    f03c:	2b68      	cmp	r3, #104	; 0x68
    f03e:	bf03      	ittte	eq
    f040:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f044:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    f048:	f109 0901 	addeq.w	r9, r9, #1
    f04c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    f050:	e572      	b.n	eb38 <_svfprintf_r+0xb8>
    f052:	f899 3000 	ldrb.w	r3, [r9]
    f056:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    f05a:	e56d      	b.n	eb38 <_svfprintf_r+0xb8>
    f05c:	f899 3000 	ldrb.w	r3, [r9]
    f060:	2b6c      	cmp	r3, #108	; 0x6c
    f062:	bf03      	ittte	eq
    f064:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f068:	f048 0820 	orreq.w	r8, r8, #32
    f06c:	f109 0901 	addeq.w	r9, r9, #1
    f070:	f048 0810 	orrne.w	r8, r8, #16
    f074:	e560      	b.n	eb38 <_svfprintf_r+0xb8>
    f076:	930b      	str	r3, [sp, #44]	; 0x2c
    f078:	f048 0810 	orr.w	r8, r8, #16
    f07c:	f018 0120 	ands.w	r1, r8, #32
    f080:	f000 8351 	beq.w	f726 <_svfprintf_r+0xca6>
    f084:	9b08      	ldr	r3, [sp, #32]
    f086:	3307      	adds	r3, #7
    f088:	f023 0307 	bic.w	r3, r3, #7
    f08c:	6859      	ldr	r1, [r3, #4]
    f08e:	f853 2b08 	ldr.w	r2, [r3], #8
    f092:	9308      	str	r3, [sp, #32]
    f094:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f098:	9302      	str	r3, [sp, #8]
    f09a:	2300      	movs	r3, #0
    f09c:	e795      	b.n	efca <_svfprintf_r+0x54a>
    f09e:	930b      	str	r3, [sp, #44]	; 0x2c
    f0a0:	f048 0310 	orr.w	r3, r8, #16
    f0a4:	9302      	str	r3, [sp, #8]
    f0a6:	9b02      	ldr	r3, [sp, #8]
    f0a8:	f013 0120 	ands.w	r1, r3, #32
    f0ac:	f000 8329 	beq.w	f702 <_svfprintf_r+0xc82>
    f0b0:	9b08      	ldr	r3, [sp, #32]
    f0b2:	3307      	adds	r3, #7
    f0b4:	f023 0307 	bic.w	r3, r3, #7
    f0b8:	6859      	ldr	r1, [r3, #4]
    f0ba:	f853 2b08 	ldr.w	r2, [r3], #8
    f0be:	9308      	str	r3, [sp, #32]
    f0c0:	2301      	movs	r3, #1
    f0c2:	e782      	b.n	efca <_svfprintf_r+0x54a>
    f0c4:	f899 3000 	ldrb.w	r3, [r9]
    f0c8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    f0cc:	e534      	b.n	eb38 <_svfprintf_r+0xb8>
    f0ce:	bf00      	nop
    f0d0:	200018bc 	.word	0x200018bc
    f0d4:	200018c0 	.word	0x200018c0
    f0d8:	200018cc 	.word	0x200018cc
    f0dc:	4649      	mov	r1, r9
    f0de:	f811 3b01 	ldrb.w	r3, [r1], #1
    f0e2:	2b2a      	cmp	r3, #42	; 0x2a
    f0e4:	f001 8249 	beq.w	1057a <_svfprintf_r+0x1afa>
    f0e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f0ec:	2a09      	cmp	r2, #9
    f0ee:	4689      	mov	r9, r1
    f0f0:	bf98      	it	ls
    f0f2:	2100      	movls	r1, #0
    f0f4:	f201 8144 	bhi.w	10380 <_svfprintf_r+0x1900>
    f0f8:	f819 3b01 	ldrb.w	r3, [r9], #1
    f0fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f100:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f104:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f108:	2a09      	cmp	r2, #9
    f10a:	d9f5      	bls.n	f0f8 <_svfprintf_r+0x678>
    f10c:	9103      	str	r1, [sp, #12]
    f10e:	e515      	b.n	eb3c <_svfprintf_r+0xbc>
    f110:	f899 3000 	ldrb.w	r3, [r9]
    f114:	f048 0801 	orr.w	r8, r8, #1
    f118:	e50e      	b.n	eb38 <_svfprintf_r+0xb8>
    f11a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    f11e:	2b00      	cmp	r3, #0
    f120:	f47f ad8f 	bne.w	ec42 <_svfprintf_r+0x1c2>
    f124:	f899 3000 	ldrb.w	r3, [r9]
    f128:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    f12c:	e504      	b.n	eb38 <_svfprintf_r+0xb8>
    f12e:	f8cd 8008 	str.w	r8, [sp, #8]
    f132:	2b01      	cmp	r3, #1
    f134:	f000 819d 	beq.w	f472 <_svfprintf_r+0x9f2>
    f138:	2b02      	cmp	r3, #2
    f13a:	ac50      	add	r4, sp, #320	; 0x140
    f13c:	d120      	bne.n	f180 <_svfprintf_r+0x700>
    f13e:	9811      	ldr	r0, [sp, #68]	; 0x44
    f140:	f002 030f 	and.w	r3, r2, #15
    f144:	0912      	lsrs	r2, r2, #4
    f146:	5cc3      	ldrb	r3, [r0, r3]
    f148:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f14c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f150:	0909      	lsrs	r1, r1, #4
    f152:	ea52 0301 	orrs.w	r3, r2, r1
    f156:	d1f3      	bne.n	f140 <_svfprintf_r+0x6c0>
    f158:	ab50      	add	r3, sp, #320	; 0x140
    f15a:	1b1b      	subs	r3, r3, r4
    f15c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f160:	9305      	str	r3, [sp, #20]
    f162:	9a05      	ldr	r2, [sp, #20]
    f164:	9803      	ldr	r0, [sp, #12]
    f166:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f16a:	4282      	cmp	r2, r0
    f16c:	f04f 0300 	mov.w	r3, #0
    f170:	bfb8      	it	lt
    f172:	4602      	movlt	r2, r0
    f174:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f178:	9307      	str	r3, [sp, #28]
    f17a:	9202      	str	r2, [sp, #8]
    f17c:	930f      	str	r3, [sp, #60]	; 0x3c
    f17e:	e660      	b.n	ee42 <_svfprintf_r+0x3c2>
    f180:	f002 0307 	and.w	r3, r2, #7
    f184:	08d2      	lsrs	r2, r2, #3
    f186:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f18a:	08c9      	lsrs	r1, r1, #3
    f18c:	3330      	adds	r3, #48	; 0x30
    f18e:	ea52 0501 	orrs.w	r5, r2, r1
    f192:	4620      	mov	r0, r4
    f194:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f198:	d1f2      	bne.n	f180 <_svfprintf_r+0x700>
    f19a:	9a02      	ldr	r2, [sp, #8]
    f19c:	07d1      	lsls	r1, r2, #31
    f19e:	f100 824d 	bmi.w	f63c <_svfprintf_r+0xbbc>
    f1a2:	ab50      	add	r3, sp, #320	; 0x140
    f1a4:	1b1b      	subs	r3, r3, r4
    f1a6:	4690      	mov	r8, r2
    f1a8:	9305      	str	r3, [sp, #20]
    f1aa:	e7da      	b.n	f162 <_svfprintf_r+0x6e2>
    f1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1ae:	2b65      	cmp	r3, #101	; 0x65
    f1b0:	f340 80d4 	ble.w	f35c <_svfprintf_r+0x8dc>
    f1b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1bc:	f040 81c1 	bne.w	f542 <_svfprintf_r+0xac2>
    f1c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1c2:	49ba      	ldr	r1, [pc, #744]	; (f4ac <_svfprintf_r+0xa2c>)
    f1c4:	f8ca 1000 	str.w	r1, [sl]
    f1c8:	3301      	adds	r3, #1
    f1ca:	3201      	adds	r2, #1
    f1cc:	2101      	movs	r1, #1
    f1ce:	2b07      	cmp	r3, #7
    f1d0:	9226      	str	r2, [sp, #152]	; 0x98
    f1d2:	9325      	str	r3, [sp, #148]	; 0x94
    f1d4:	f8ca 1004 	str.w	r1, [sl, #4]
    f1d8:	f300 8551 	bgt.w	fc7e <_svfprintf_r+0x11fe>
    f1dc:	f10a 0a08 	add.w	sl, sl, #8
    f1e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f1e2:	990e      	ldr	r1, [sp, #56]	; 0x38
    f1e4:	428b      	cmp	r3, r1
    f1e6:	f280 82d0 	bge.w	f78a <_svfprintf_r+0xd0a>
    f1ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f1ec:	9912      	ldr	r1, [sp, #72]	; 0x48
    f1ee:	441a      	add	r2, r3
    f1f0:	e9ca 1300 	strd	r1, r3, [sl]
    f1f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1f6:	9226      	str	r2, [sp, #152]	; 0x98
    f1f8:	3301      	adds	r3, #1
    f1fa:	2b07      	cmp	r3, #7
    f1fc:	9325      	str	r3, [sp, #148]	; 0x94
    f1fe:	f300 8397 	bgt.w	f930 <_svfprintf_r+0xeb0>
    f202:	f10a 0a08 	add.w	sl, sl, #8
    f206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f208:	1e5c      	subs	r4, r3, #1
    f20a:	2c00      	cmp	r4, #0
    f20c:	f77f add0 	ble.w	edb0 <_svfprintf_r+0x330>
    f210:	2c10      	cmp	r4, #16
    f212:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f214:	f340 856e 	ble.w	fcf4 <_svfprintf_r+0x1274>
    f218:	ee1b 6a10 	vmov	r6, s22
    f21c:	2510      	movs	r5, #16
    f21e:	e005      	b.n	f22c <_svfprintf_r+0x7ac>
    f220:	f10a 0a08 	add.w	sl, sl, #8
    f224:	3c10      	subs	r4, #16
    f226:	2c10      	cmp	r4, #16
    f228:	f340 8564 	ble.w	fcf4 <_svfprintf_r+0x1274>
    f22c:	3301      	adds	r3, #1
    f22e:	49a0      	ldr	r1, [pc, #640]	; (f4b0 <_svfprintf_r+0xa30>)
    f230:	3210      	adds	r2, #16
    f232:	2b07      	cmp	r3, #7
    f234:	e9ca 1500 	strd	r1, r5, [sl]
    f238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f23c:	ddf0      	ble.n	f220 <_svfprintf_r+0x7a0>
    f23e:	aa24      	add	r2, sp, #144	; 0x90
    f240:	4631      	mov	r1, r6
    f242:	4658      	mov	r0, fp
    f244:	f003 f846 	bl	122d4 <__ssprint_r>
    f248:	2800      	cmp	r0, #0
    f24a:	d17e      	bne.n	f34a <_svfprintf_r+0x8ca>
    f24c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f250:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f254:	e7e6      	b.n	f224 <_svfprintf_r+0x7a4>
    f256:	9b06      	ldr	r3, [sp, #24]
    f258:	9902      	ldr	r1, [sp, #8]
    f25a:	1a5d      	subs	r5, r3, r1
    f25c:	2d00      	cmp	r5, #0
    f25e:	f77f ad8e 	ble.w	ed7e <_svfprintf_r+0x2fe>
    f262:	2d10      	cmp	r5, #16
    f264:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f266:	dd21      	ble.n	f2ac <_svfprintf_r+0x82c>
    f268:	9409      	str	r4, [sp, #36]	; 0x24
    f26a:	2610      	movs	r6, #16
    f26c:	ee1b 4a10 	vmov	r4, s22
    f270:	e004      	b.n	f27c <_svfprintf_r+0x7fc>
    f272:	3d10      	subs	r5, #16
    f274:	2d10      	cmp	r5, #16
    f276:	f10a 0a08 	add.w	sl, sl, #8
    f27a:	dd16      	ble.n	f2aa <_svfprintf_r+0x82a>
    f27c:	3301      	adds	r3, #1
    f27e:	498c      	ldr	r1, [pc, #560]	; (f4b0 <_svfprintf_r+0xa30>)
    f280:	3210      	adds	r2, #16
    f282:	2b07      	cmp	r3, #7
    f284:	e9ca 1600 	strd	r1, r6, [sl]
    f288:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f28c:	ddf1      	ble.n	f272 <_svfprintf_r+0x7f2>
    f28e:	aa24      	add	r2, sp, #144	; 0x90
    f290:	4621      	mov	r1, r4
    f292:	4658      	mov	r0, fp
    f294:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f298:	f003 f81c 	bl	122d4 <__ssprint_r>
    f29c:	2800      	cmp	r0, #0
    f29e:	d154      	bne.n	f34a <_svfprintf_r+0x8ca>
    f2a0:	3d10      	subs	r5, #16
    f2a2:	2d10      	cmp	r5, #16
    f2a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f2a8:	dce8      	bgt.n	f27c <_svfprintf_r+0x7fc>
    f2aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f2ac:	4980      	ldr	r1, [pc, #512]	; (f4b0 <_svfprintf_r+0xa30>)
    f2ae:	f8ca 5004 	str.w	r5, [sl, #4]
    f2b2:	3301      	adds	r3, #1
    f2b4:	442a      	add	r2, r5
    f2b6:	2b07      	cmp	r3, #7
    f2b8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f2bc:	f8ca 1000 	str.w	r1, [sl]
    f2c0:	f300 8526 	bgt.w	fd10 <_svfprintf_r+0x1290>
    f2c4:	9b03      	ldr	r3, [sp, #12]
    f2c6:	9905      	ldr	r1, [sp, #20]
    f2c8:	1a5d      	subs	r5, r3, r1
    f2ca:	2d00      	cmp	r5, #0
    f2cc:	f10a 0a08 	add.w	sl, sl, #8
    f2d0:	f77f ad5b 	ble.w	ed8a <_svfprintf_r+0x30a>
    f2d4:	2d10      	cmp	r5, #16
    f2d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f2d8:	dd1f      	ble.n	f31a <_svfprintf_r+0x89a>
    f2da:	4651      	mov	r1, sl
    f2dc:	2610      	movs	r6, #16
    f2de:	ee1b aa10 	vmov	sl, s22
    f2e2:	e004      	b.n	f2ee <_svfprintf_r+0x86e>
    f2e4:	3d10      	subs	r5, #16
    f2e6:	2d10      	cmp	r5, #16
    f2e8:	f101 0108 	add.w	r1, r1, #8
    f2ec:	dd14      	ble.n	f318 <_svfprintf_r+0x898>
    f2ee:	3301      	adds	r3, #1
    f2f0:	486f      	ldr	r0, [pc, #444]	; (f4b0 <_svfprintf_r+0xa30>)
    f2f2:	3210      	adds	r2, #16
    f2f4:	2b07      	cmp	r3, #7
    f2f6:	e9c1 0600 	strd	r0, r6, [r1]
    f2fa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f2fe:	ddf1      	ble.n	f2e4 <_svfprintf_r+0x864>
    f300:	aa24      	add	r2, sp, #144	; 0x90
    f302:	4651      	mov	r1, sl
    f304:	4658      	mov	r0, fp
    f306:	f002 ffe5 	bl	122d4 <__ssprint_r>
    f30a:	b9f0      	cbnz	r0, f34a <_svfprintf_r+0x8ca>
    f30c:	3d10      	subs	r5, #16
    f30e:	2d10      	cmp	r5, #16
    f310:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f314:	a927      	add	r1, sp, #156	; 0x9c
    f316:	dcea      	bgt.n	f2ee <_svfprintf_r+0x86e>
    f318:	468a      	mov	sl, r1
    f31a:	3301      	adds	r3, #1
    f31c:	4964      	ldr	r1, [pc, #400]	; (f4b0 <_svfprintf_r+0xa30>)
    f31e:	f8ca 5004 	str.w	r5, [sl, #4]
    f322:	442a      	add	r2, r5
    f324:	2b07      	cmp	r3, #7
    f326:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f32a:	f8ca 1000 	str.w	r1, [sl]
    f32e:	f300 81da 	bgt.w	f6e6 <_svfprintf_r+0xc66>
    f332:	f10a 0a08 	add.w	sl, sl, #8
    f336:	e528      	b.n	ed8a <_svfprintf_r+0x30a>
    f338:	ee1b 1a10 	vmov	r1, s22
    f33c:	aa24      	add	r2, sp, #144	; 0x90
    f33e:	4658      	mov	r0, fp
    f340:	f002 ffc8 	bl	122d4 <__ssprint_r>
    f344:	2800      	cmp	r0, #0
    f346:	f43f ad47 	beq.w	edd8 <_svfprintf_r+0x358>
    f34a:	9b07      	ldr	r3, [sp, #28]
    f34c:	2b00      	cmp	r3, #0
    f34e:	f43f aca2 	beq.w	ec96 <_svfprintf_r+0x216>
    f352:	9907      	ldr	r1, [sp, #28]
    f354:	4658      	mov	r0, fp
    f356:	f7ff fa75 	bl	e844 <_free_r>
    f35a:	e49c      	b.n	ec96 <_svfprintf_r+0x216>
    f35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f35e:	2b01      	cmp	r3, #1
    f360:	f340 817a 	ble.w	f658 <_svfprintf_r+0xbd8>
    f364:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f366:	f8ca 4000 	str.w	r4, [sl]
    f36a:	3301      	adds	r3, #1
    f36c:	3201      	adds	r2, #1
    f36e:	2101      	movs	r1, #1
    f370:	2b07      	cmp	r3, #7
    f372:	9226      	str	r2, [sp, #152]	; 0x98
    f374:	9325      	str	r3, [sp, #148]	; 0x94
    f376:	f8ca 1004 	str.w	r1, [sl, #4]
    f37a:	f300 81f8 	bgt.w	f76e <_svfprintf_r+0xcee>
    f37e:	f10a 0a08 	add.w	sl, sl, #8
    f382:	9910      	ldr	r1, [sp, #64]	; 0x40
    f384:	9812      	ldr	r0, [sp, #72]	; 0x48
    f386:	3301      	adds	r3, #1
    f388:	440a      	add	r2, r1
    f38a:	2b07      	cmp	r3, #7
    f38c:	e9ca 0100 	strd	r0, r1, [sl]
    f390:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f394:	f300 81dd 	bgt.w	f752 <_svfprintf_r+0xcd2>
    f398:	f10a 0a08 	add.w	sl, sl, #8
    f39c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3a4:	f000 8177 	beq.w	f696 <_svfprintf_r+0xc16>
    f3a8:	990e      	ldr	r1, [sp, #56]	; 0x38
    f3aa:	3301      	adds	r3, #1
    f3ac:	3901      	subs	r1, #1
    f3ae:	3401      	adds	r4, #1
    f3b0:	440a      	add	r2, r1
    f3b2:	2b07      	cmp	r3, #7
    f3b4:	f8ca 4000 	str.w	r4, [sl]
    f3b8:	9325      	str	r3, [sp, #148]	; 0x94
    f3ba:	f8ca 1004 	str.w	r1, [sl, #4]
    f3be:	9226      	str	r2, [sp, #152]	; 0x98
    f3c0:	f300 815b 	bgt.w	f67a <_svfprintf_r+0xbfa>
    f3c4:	f10a 0a08 	add.w	sl, sl, #8
    f3c8:	9914      	ldr	r1, [sp, #80]	; 0x50
    f3ca:	f8ca 1004 	str.w	r1, [sl, #4]
    f3ce:	3301      	adds	r3, #1
    f3d0:	440a      	add	r2, r1
    f3d2:	2b07      	cmp	r3, #7
    f3d4:	a91e      	add	r1, sp, #120	; 0x78
    f3d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f3da:	f8ca 1000 	str.w	r1, [sl]
    f3de:	f77f ace5 	ble.w	edac <_svfprintf_r+0x32c>
    f3e2:	ee1b 1a10 	vmov	r1, s22
    f3e6:	aa24      	add	r2, sp, #144	; 0x90
    f3e8:	4658      	mov	r0, fp
    f3ea:	f002 ff73 	bl	122d4 <__ssprint_r>
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d1ab      	bne.n	f34a <_svfprintf_r+0x8ca>
    f3f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f3f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3f8:	e4da      	b.n	edb0 <_svfprintf_r+0x330>
    f3fa:	2d10      	cmp	r5, #16
    f3fc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    f400:	4e2c      	ldr	r6, [pc, #176]	; (f4b4 <_svfprintf_r+0xa34>)
    f402:	dd24      	ble.n	f44e <_svfprintf_r+0x9ce>
    f404:	9417      	str	r4, [sp, #92]	; 0x5c
    f406:	2310      	movs	r3, #16
    f408:	ee1b 4a10 	vmov	r4, s22
    f40c:	4608      	mov	r0, r1
    f40e:	e004      	b.n	f41a <_svfprintf_r+0x99a>
    f410:	3d10      	subs	r5, #16
    f412:	2d10      	cmp	r5, #16
    f414:	f10a 0a08 	add.w	sl, sl, #8
    f418:	dd17      	ble.n	f44a <_svfprintf_r+0x9ca>
    f41a:	3001      	adds	r0, #1
    f41c:	3210      	adds	r2, #16
    f41e:	2807      	cmp	r0, #7
    f420:	e9ca 6300 	strd	r6, r3, [sl]
    f424:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    f428:	ddf2      	ble.n	f410 <_svfprintf_r+0x990>
    f42a:	aa24      	add	r2, sp, #144	; 0x90
    f42c:	4621      	mov	r1, r4
    f42e:	4658      	mov	r0, fp
    f430:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f434:	f002 ff4e 	bl	122d4 <__ssprint_r>
    f438:	2800      	cmp	r0, #0
    f43a:	d186      	bne.n	f34a <_svfprintf_r+0x8ca>
    f43c:	3d10      	subs	r5, #16
    f43e:	2d10      	cmp	r5, #16
    f440:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    f444:	f04f 0310 	mov.w	r3, #16
    f448:	dce7      	bgt.n	f41a <_svfprintf_r+0x99a>
    f44a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    f44c:	4601      	mov	r1, r0
    f44e:	3101      	adds	r1, #1
    f450:	442a      	add	r2, r5
    f452:	2907      	cmp	r1, #7
    f454:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    f458:	f8ca 6000 	str.w	r6, [sl]
    f45c:	f8ca 5004 	str.w	r5, [sl, #4]
    f460:	f300 83bd 	bgt.w	fbde <_svfprintf_r+0x115e>
    f464:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f468:	f10a 0a08 	add.w	sl, sl, #8
    f46c:	e45d      	b.n	ed2a <_svfprintf_r+0x2aa>
    f46e:	f8cd 8008 	str.w	r8, [sp, #8]
    f472:	2a0a      	cmp	r2, #10
    f474:	f171 0300 	sbcs.w	r3, r1, #0
    f478:	f080 8345 	bcs.w	fb06 <_svfprintf_r+0x1086>
    f47c:	3230      	adds	r2, #48	; 0x30
    f47e:	2301      	movs	r3, #1
    f480:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f484:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    f488:	9305      	str	r3, [sp, #20]
    f48a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f48e:	e668      	b.n	f162 <_svfprintf_r+0x6e2>
    f490:	ee1b 1a10 	vmov	r1, s22
    f494:	aa24      	add	r2, sp, #144	; 0x90
    f496:	4658      	mov	r0, fp
    f498:	f002 ff1c 	bl	122d4 <__ssprint_r>
    f49c:	2800      	cmp	r0, #0
    f49e:	f47f af54 	bne.w	f34a <_svfprintf_r+0x8ca>
    f4a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f4a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f4a8:	e452      	b.n	ed50 <_svfprintf_r+0x2d0>
    f4aa:	bf00      	nop
    f4ac:	200027ac 	.word	0x200027ac
    f4b0:	20002e58 	.word	0x20002e58
    f4b4:	200018fc 	.word	0x200018fc
    f4b8:	ee1b 1a10 	vmov	r1, s22
    f4bc:	aa24      	add	r2, sp, #144	; 0x90
    f4be:	4658      	mov	r0, fp
    f4c0:	f002 ff08 	bl	122d4 <__ssprint_r>
    f4c4:	2800      	cmp	r0, #0
    f4c6:	f47f af40 	bne.w	f34a <_svfprintf_r+0x8ca>
    f4ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f4cc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f4d0:	e451      	b.n	ed76 <_svfprintf_r+0x2f6>
    f4d2:	2c10      	cmp	r4, #16
    f4d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4d6:	4ebe      	ldr	r6, [pc, #760]	; (f7d0 <_svfprintf_r+0xd50>)
    f4d8:	dd1f      	ble.n	f51a <_svfprintf_r+0xa9a>
    f4da:	ee1b 8a10 	vmov	r8, s22
    f4de:	2510      	movs	r5, #16
    f4e0:	e004      	b.n	f4ec <_svfprintf_r+0xa6c>
    f4e2:	3c10      	subs	r4, #16
    f4e4:	2c10      	cmp	r4, #16
    f4e6:	f10a 0a08 	add.w	sl, sl, #8
    f4ea:	dd16      	ble.n	f51a <_svfprintf_r+0xa9a>
    f4ec:	3301      	adds	r3, #1
    f4ee:	3210      	adds	r2, #16
    f4f0:	2b07      	cmp	r3, #7
    f4f2:	e9ca 6500 	strd	r6, r5, [sl]
    f4f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f4fa:	ddf2      	ble.n	f4e2 <_svfprintf_r+0xa62>
    f4fc:	aa24      	add	r2, sp, #144	; 0x90
    f4fe:	4641      	mov	r1, r8
    f500:	4658      	mov	r0, fp
    f502:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f506:	f002 fee5 	bl	122d4 <__ssprint_r>
    f50a:	2800      	cmp	r0, #0
    f50c:	f47f af1d 	bne.w	f34a <_svfprintf_r+0x8ca>
    f510:	3c10      	subs	r4, #16
    f512:	2c10      	cmp	r4, #16
    f514:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f518:	dce8      	bgt.n	f4ec <_svfprintf_r+0xa6c>
    f51a:	3301      	adds	r3, #1
    f51c:	4422      	add	r2, r4
    f51e:	2b07      	cmp	r3, #7
    f520:	e9ca 6400 	strd	r6, r4, [sl]
    f524:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f528:	f77f ac4b 	ble.w	edc2 <_svfprintf_r+0x342>
    f52c:	ee1b 1a10 	vmov	r1, s22
    f530:	aa24      	add	r2, sp, #144	; 0x90
    f532:	4658      	mov	r0, fp
    f534:	f002 fece 	bl	122d4 <__ssprint_r>
    f538:	2800      	cmp	r0, #0
    f53a:	f47f af06 	bne.w	f34a <_svfprintf_r+0x8ca>
    f53e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f540:	e43f      	b.n	edc2 <_svfprintf_r+0x342>
    f542:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f544:	2900      	cmp	r1, #0
    f546:	f340 835a 	ble.w	fbfe <_svfprintf_r+0x117e>
    f54a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f54e:	429e      	cmp	r6, r3
    f550:	bfa8      	it	ge
    f552:	461e      	movge	r6, r3
    f554:	2e00      	cmp	r6, #0
    f556:	dd0b      	ble.n	f570 <_svfprintf_r+0xaf0>
    f558:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f55a:	3301      	adds	r3, #1
    f55c:	4432      	add	r2, r6
    f55e:	2b07      	cmp	r3, #7
    f560:	e9ca 4600 	strd	r4, r6, [sl]
    f564:	9226      	str	r2, [sp, #152]	; 0x98
    f566:	9325      	str	r3, [sp, #148]	; 0x94
    f568:	f300 8689 	bgt.w	1027e <_svfprintf_r+0x17fe>
    f56c:	f10a 0a08 	add.w	sl, sl, #8
    f570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f572:	2e00      	cmp	r6, #0
    f574:	bfa8      	it	ge
    f576:	1bad      	subge	r5, r5, r6
    f578:	2d00      	cmp	r5, #0
    f57a:	f300 8203 	bgt.w	f984 <_svfprintf_r+0xf04>
    f57e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f580:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f584:	4423      	add	r3, r4
    f586:	9305      	str	r3, [sp, #20]
    f588:	f040 821f 	bne.w	f9ca <_svfprintf_r+0xf4a>
    f58c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f58e:	990e      	ldr	r1, [sp, #56]	; 0x38
    f590:	428b      	cmp	r3, r1
    f592:	db03      	blt.n	f59c <_svfprintf_r+0xb1c>
    f594:	f018 0f01 	tst.w	r8, #1
    f598:	f000 84cf 	beq.w	ff3a <_svfprintf_r+0x14ba>
    f59c:	9910      	ldr	r1, [sp, #64]	; 0x40
    f59e:	9812      	ldr	r0, [sp, #72]	; 0x48
    f5a0:	440a      	add	r2, r1
    f5a2:	e9ca 0100 	strd	r0, r1, [sl]
    f5a6:	9925      	ldr	r1, [sp, #148]	; 0x94
    f5a8:	9226      	str	r2, [sp, #152]	; 0x98
    f5aa:	3101      	adds	r1, #1
    f5ac:	2907      	cmp	r1, #7
    f5ae:	9125      	str	r1, [sp, #148]	; 0x94
    f5b0:	f300 86a5 	bgt.w	102fe <_svfprintf_r+0x187e>
    f5b4:	f10a 0a08 	add.w	sl, sl, #8
    f5b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    f5ba:	1865      	adds	r5, r4, r1
    f5bc:	1acc      	subs	r4, r1, r3
    f5be:	9b05      	ldr	r3, [sp, #20]
    f5c0:	1aed      	subs	r5, r5, r3
    f5c2:	42a5      	cmp	r5, r4
    f5c4:	bfa8      	it	ge
    f5c6:	4625      	movge	r5, r4
    f5c8:	2d00      	cmp	r5, #0
    f5ca:	dd0d      	ble.n	f5e8 <_svfprintf_r+0xb68>
    f5cc:	f8ca 3000 	str.w	r3, [sl]
    f5d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f5d2:	f8ca 5004 	str.w	r5, [sl, #4]
    f5d6:	3301      	adds	r3, #1
    f5d8:	442a      	add	r2, r5
    f5da:	2b07      	cmp	r3, #7
    f5dc:	9226      	str	r2, [sp, #152]	; 0x98
    f5de:	9325      	str	r3, [sp, #148]	; 0x94
    f5e0:	f300 86bb 	bgt.w	1035a <_svfprintf_r+0x18da>
    f5e4:	f10a 0a08 	add.w	sl, sl, #8
    f5e8:	2d00      	cmp	r5, #0
    f5ea:	bfa8      	it	ge
    f5ec:	1b64      	subge	r4, r4, r5
    f5ee:	2c00      	cmp	r4, #0
    f5f0:	f77f abde 	ble.w	edb0 <_svfprintf_r+0x330>
    f5f4:	2c10      	cmp	r4, #16
    f5f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f5f8:	f340 837c 	ble.w	fcf4 <_svfprintf_r+0x1274>
    f5fc:	ee1b 6a10 	vmov	r6, s22
    f600:	2510      	movs	r5, #16
    f602:	e005      	b.n	f610 <_svfprintf_r+0xb90>
    f604:	f10a 0a08 	add.w	sl, sl, #8
    f608:	3c10      	subs	r4, #16
    f60a:	2c10      	cmp	r4, #16
    f60c:	f340 8372 	ble.w	fcf4 <_svfprintf_r+0x1274>
    f610:	3301      	adds	r3, #1
    f612:	4970      	ldr	r1, [pc, #448]	; (f7d4 <_svfprintf_r+0xd54>)
    f614:	3210      	adds	r2, #16
    f616:	2b07      	cmp	r3, #7
    f618:	e9ca 1500 	strd	r1, r5, [sl]
    f61c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f620:	ddf0      	ble.n	f604 <_svfprintf_r+0xb84>
    f622:	aa24      	add	r2, sp, #144	; 0x90
    f624:	4631      	mov	r1, r6
    f626:	4658      	mov	r0, fp
    f628:	f002 fe54 	bl	122d4 <__ssprint_r>
    f62c:	2800      	cmp	r0, #0
    f62e:	f47f ae8c 	bne.w	f34a <_svfprintf_r+0x8ca>
    f632:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f636:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f63a:	e7e5      	b.n	f608 <_svfprintf_r+0xb88>
    f63c:	2b30      	cmp	r3, #48	; 0x30
    f63e:	f43f ad8b 	beq.w	f158 <_svfprintf_r+0x6d8>
    f642:	2330      	movs	r3, #48	; 0x30
    f644:	3802      	subs	r0, #2
    f646:	f804 3c01 	strb.w	r3, [r4, #-1]
    f64a:	ab50      	add	r3, sp, #320	; 0x140
    f64c:	1a1b      	subs	r3, r3, r0
    f64e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f652:	9305      	str	r3, [sp, #20]
    f654:	4604      	mov	r4, r0
    f656:	e584      	b.n	f162 <_svfprintf_r+0x6e2>
    f658:	f018 0f01 	tst.w	r8, #1
    f65c:	f47f ae82 	bne.w	f364 <_svfprintf_r+0x8e4>
    f660:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f662:	f8ca 4000 	str.w	r4, [sl]
    f666:	3301      	adds	r3, #1
    f668:	3201      	adds	r2, #1
    f66a:	2101      	movs	r1, #1
    f66c:	2b07      	cmp	r3, #7
    f66e:	9226      	str	r2, [sp, #152]	; 0x98
    f670:	9325      	str	r3, [sp, #148]	; 0x94
    f672:	f8ca 1004 	str.w	r1, [sl, #4]
    f676:	f77f aea5 	ble.w	f3c4 <_svfprintf_r+0x944>
    f67a:	ee1b 1a10 	vmov	r1, s22
    f67e:	aa24      	add	r2, sp, #144	; 0x90
    f680:	4658      	mov	r0, fp
    f682:	f002 fe27 	bl	122d4 <__ssprint_r>
    f686:	2800      	cmp	r0, #0
    f688:	f47f ae5f 	bne.w	f34a <_svfprintf_r+0x8ca>
    f68c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f690:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f694:	e698      	b.n	f3c8 <_svfprintf_r+0x948>
    f696:	990e      	ldr	r1, [sp, #56]	; 0x38
    f698:	1e4c      	subs	r4, r1, #1
    f69a:	2c00      	cmp	r4, #0
    f69c:	f77f ae94 	ble.w	f3c8 <_svfprintf_r+0x948>
    f6a0:	2c10      	cmp	r4, #16
    f6a2:	f340 8361 	ble.w	fd68 <_svfprintf_r+0x12e8>
    f6a6:	ee1b 6a10 	vmov	r6, s22
    f6aa:	2510      	movs	r5, #16
    f6ac:	e005      	b.n	f6ba <_svfprintf_r+0xc3a>
    f6ae:	f10a 0a08 	add.w	sl, sl, #8
    f6b2:	3c10      	subs	r4, #16
    f6b4:	2c10      	cmp	r4, #16
    f6b6:	f340 8357 	ble.w	fd68 <_svfprintf_r+0x12e8>
    f6ba:	3301      	adds	r3, #1
    f6bc:	4945      	ldr	r1, [pc, #276]	; (f7d4 <_svfprintf_r+0xd54>)
    f6be:	3210      	adds	r2, #16
    f6c0:	2b07      	cmp	r3, #7
    f6c2:	e9ca 1500 	strd	r1, r5, [sl]
    f6c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f6ca:	ddf0      	ble.n	f6ae <_svfprintf_r+0xc2e>
    f6cc:	aa24      	add	r2, sp, #144	; 0x90
    f6ce:	4631      	mov	r1, r6
    f6d0:	4658      	mov	r0, fp
    f6d2:	f002 fdff 	bl	122d4 <__ssprint_r>
    f6d6:	2800      	cmp	r0, #0
    f6d8:	f47f ae37 	bne.w	f34a <_svfprintf_r+0x8ca>
    f6dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f6e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f6e4:	e7e5      	b.n	f6b2 <_svfprintf_r+0xc32>
    f6e6:	ee1b 1a10 	vmov	r1, s22
    f6ea:	aa24      	add	r2, sp, #144	; 0x90
    f6ec:	4658      	mov	r0, fp
    f6ee:	f002 fdf1 	bl	122d4 <__ssprint_r>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	f47f ae29 	bne.w	f34a <_svfprintf_r+0x8ca>
    f6f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f6fa:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f6fe:	f7ff bb44 	b.w	ed8a <_svfprintf_r+0x30a>
    f702:	9b02      	ldr	r3, [sp, #8]
    f704:	f013 0310 	ands.w	r3, r3, #16
    f708:	f040 80c1 	bne.w	f88e <_svfprintf_r+0xe0e>
    f70c:	9a02      	ldr	r2, [sp, #8]
    f70e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    f712:	f000 837a 	beq.w	fe0a <_svfprintf_r+0x138a>
    f716:	9808      	ldr	r0, [sp, #32]
    f718:	f850 2b04 	ldr.w	r2, [r0], #4
    f71c:	9008      	str	r0, [sp, #32]
    f71e:	4619      	mov	r1, r3
    f720:	b292      	uxth	r2, r2
    f722:	2301      	movs	r3, #1
    f724:	e451      	b.n	efca <_svfprintf_r+0x54a>
    f726:	f018 0310 	ands.w	r3, r8, #16
    f72a:	d155      	bne.n	f7d8 <_svfprintf_r+0xd58>
    f72c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f730:	f000 835d 	beq.w	fdee <_svfprintf_r+0x136e>
    f734:	9808      	ldr	r0, [sp, #32]
    f736:	f850 2b04 	ldr.w	r2, [r0], #4
    f73a:	9008      	str	r0, [sp, #32]
    f73c:	4619      	mov	r1, r3
    f73e:	b292      	uxth	r2, r2
    f740:	e4a8      	b.n	f094 <_svfprintf_r+0x614>
    f742:	4252      	negs	r2, r2
    f744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f748:	f8cd 8008 	str.w	r8, [sp, #8]
    f74c:	202d      	movs	r0, #45	; 0x2d
    f74e:	2301      	movs	r3, #1
    f750:	e43c      	b.n	efcc <_svfprintf_r+0x54c>
    f752:	ee1b 1a10 	vmov	r1, s22
    f756:	aa24      	add	r2, sp, #144	; 0x90
    f758:	4658      	mov	r0, fp
    f75a:	f002 fdbb 	bl	122d4 <__ssprint_r>
    f75e:	2800      	cmp	r0, #0
    f760:	f47f adf3 	bne.w	f34a <_svfprintf_r+0x8ca>
    f764:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f768:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f76c:	e616      	b.n	f39c <_svfprintf_r+0x91c>
    f76e:	ee1b 1a10 	vmov	r1, s22
    f772:	aa24      	add	r2, sp, #144	; 0x90
    f774:	4658      	mov	r0, fp
    f776:	f002 fdad 	bl	122d4 <__ssprint_r>
    f77a:	2800      	cmp	r0, #0
    f77c:	f47f ade5 	bne.w	f34a <_svfprintf_r+0x8ca>
    f780:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f784:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f788:	e5fb      	b.n	f382 <_svfprintf_r+0x902>
    f78a:	f018 0f01 	tst.w	r8, #1
    f78e:	f43f ab0f 	beq.w	edb0 <_svfprintf_r+0x330>
    f792:	e52a      	b.n	f1ea <_svfprintf_r+0x76a>
    f794:	9308      	str	r3, [sp, #32]
    f796:	f899 3000 	ldrb.w	r3, [r9]
    f79a:	f7ff b9cd 	b.w	eb38 <_svfprintf_r+0xb8>
    f79e:	ac50      	add	r4, sp, #320	; 0x140
    f7a0:	e4df      	b.n	f162 <_svfprintf_r+0x6e2>
    f7a2:	f418 7f00 	tst.w	r8, #512	; 0x200
    f7a6:	f040 83db 	bne.w	ff60 <_svfprintf_r+0x14e0>
    f7aa:	f853 2b04 	ldr.w	r2, [r3], #4
    f7ae:	9308      	str	r3, [sp, #32]
    f7b0:	17d1      	asrs	r1, r2, #31
    f7b2:	460b      	mov	r3, r1
    f7b4:	f7ff bbb6 	b.w	ef24 <_svfprintf_r+0x4a4>
    f7b8:	9b08      	ldr	r3, [sp, #32]
    f7ba:	9804      	ldr	r0, [sp, #16]
    f7bc:	f853 1b04 	ldr.w	r1, [r3], #4
    f7c0:	9308      	str	r3, [sp, #32]
    f7c2:	17c2      	asrs	r2, r0, #31
    f7c4:	e9c1 0200 	strd	r0, r2, [r1]
    f7c8:	464c      	mov	r4, r9
    f7ca:	f7ff b98b 	b.w	eae4 <_svfprintf_r+0x64>
    f7ce:	bf00      	nop
    f7d0:	200018fc 	.word	0x200018fc
    f7d4:	20002e58 	.word	0x20002e58
    f7d8:	9b08      	ldr	r3, [sp, #32]
    f7da:	f853 2b04 	ldr.w	r2, [r3], #4
    f7de:	9308      	str	r3, [sp, #32]
    f7e0:	e458      	b.n	f094 <_svfprintf_r+0x614>
    f7e2:	eeb4 8b48 	vcmp.f64	d8, d8
    f7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7ea:	f180 8694 	bvs.w	10516 <_svfprintf_r+0x1a96>
    f7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7f0:	2b61      	cmp	r3, #97	; 0x61
    f7f2:	f000 8552 	beq.w	1029a <_svfprintf_r+0x181a>
    f7f6:	2b41      	cmp	r3, #65	; 0x41
    f7f8:	f000 85c0 	beq.w	1037c <_svfprintf_r+0x18fc>
    f7fc:	9b03      	ldr	r3, [sp, #12]
    f7fe:	3301      	adds	r3, #1
    f800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f802:	f023 0520 	bic.w	r5, r3, #32
    f806:	f000 8480 	beq.w	1010a <_svfprintf_r+0x168a>
    f80a:	2d47      	cmp	r5, #71	; 0x47
    f80c:	d104      	bne.n	f818 <_svfprintf_r+0xd98>
    f80e:	9b03      	ldr	r3, [sp, #12]
    f810:	2b00      	cmp	r3, #0
    f812:	bf08      	it	eq
    f814:	2301      	moveq	r3, #1
    f816:	9303      	str	r3, [sp, #12]
    f818:	ee18 3a90 	vmov	r3, s17
    f81c:	2b00      	cmp	r3, #0
    f81e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f822:	4646      	mov	r6, r8
    f824:	f2c0 8618 	blt.w	10458 <_svfprintf_r+0x19d8>
    f828:	eeb0 ab48 	vmov.f64	d10, d8
    f82c:	2300      	movs	r3, #0
    f82e:	4690      	mov	r8, r2
    f830:	9309      	str	r3, [sp, #36]	; 0x24
    f832:	9307      	str	r3, [sp, #28]
    f834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f836:	3b41      	subs	r3, #65	; 0x41
    f838:	2b25      	cmp	r3, #37	; 0x25
    f83a:	f200 8398 	bhi.w	ff6e <_svfprintf_r+0x14ee>
    f83e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f842:	046f      	.short	0x046f
    f844:	03960396 	.word	0x03960396
    f848:	04680396 	.word	0x04680396
    f84c:	0396046c 	.word	0x0396046c
    f850:	03960396 	.word	0x03960396
    f854:	03960396 	.word	0x03960396
    f858:	03960396 	.word	0x03960396
    f85c:	03960396 	.word	0x03960396
    f860:	03960396 	.word	0x03960396
    f864:	03960396 	.word	0x03960396
    f868:	03960396 	.word	0x03960396
    f86c:	03960396 	.word	0x03960396
    f870:	03960396 	.word	0x03960396
    f874:	03960396 	.word	0x03960396
    f878:	03960396 	.word	0x03960396
    f87c:	03960396 	.word	0x03960396
    f880:	03960396 	.word	0x03960396
    f884:	03960396 	.word	0x03960396
    f888:	04680396 	.word	0x04680396
    f88c:	046c      	.short	0x046c
    f88e:	9b08      	ldr	r3, [sp, #32]
    f890:	f853 2b04 	ldr.w	r2, [r3], #4
    f894:	9308      	str	r3, [sp, #32]
    f896:	2301      	movs	r3, #1
    f898:	f7ff bb97 	b.w	efca <_svfprintf_r+0x54a>
    f89c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f89e:	2b00      	cmp	r3, #0
    f8a0:	f43f a9cf 	beq.w	ec42 <_svfprintf_r+0x1c2>
    f8a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f8a6:	781b      	ldrb	r3, [r3, #0]
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	f43f a9ca 	beq.w	ec42 <_svfprintf_r+0x1c2>
    f8ae:	f899 3000 	ldrb.w	r3, [r9]
    f8b2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    f8b6:	f7ff b93f 	b.w	eb38 <_svfprintf_r+0xb8>
    f8ba:	930b      	str	r3, [sp, #44]	; 0x2c
    f8bc:	f8cd 8008 	str.w	r8, [sp, #8]
    f8c0:	f7ff bbf1 	b.w	f0a6 <_svfprintf_r+0x626>
    f8c4:	930b      	str	r3, [sp, #44]	; 0x2c
    f8c6:	4b9a      	ldr	r3, [pc, #616]	; (fb30 <_svfprintf_r+0x10b0>)
    f8c8:	9311      	str	r3, [sp, #68]	; 0x44
    f8ca:	f018 0120 	ands.w	r1, r8, #32
    f8ce:	f000 8105 	beq.w	fadc <_svfprintf_r+0x105c>
    f8d2:	9b08      	ldr	r3, [sp, #32]
    f8d4:	3307      	adds	r3, #7
    f8d6:	f023 0307 	bic.w	r3, r3, #7
    f8da:	6859      	ldr	r1, [r3, #4]
    f8dc:	f853 2b08 	ldr.w	r2, [r3], #8
    f8e0:	9308      	str	r3, [sp, #32]
    f8e2:	f018 0f01 	tst.w	r8, #1
    f8e6:	d00a      	beq.n	f8fe <_svfprintf_r+0xe7e>
    f8e8:	ea52 0301 	orrs.w	r3, r2, r1
    f8ec:	d007      	beq.n	f8fe <_svfprintf_r+0xe7e>
    f8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f8f4:	2330      	movs	r3, #48	; 0x30
    f8f6:	f048 0802 	orr.w	r8, r8, #2
    f8fa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f8fe:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f902:	9302      	str	r3, [sp, #8]
    f904:	2302      	movs	r3, #2
    f906:	f7ff bb60 	b.w	efca <_svfprintf_r+0x54a>
    f90a:	930b      	str	r3, [sp, #44]	; 0x2c
    f90c:	f7ff bbb6 	b.w	f07c <_svfprintf_r+0x5fc>
    f910:	930b      	str	r3, [sp, #44]	; 0x2c
    f912:	4b88      	ldr	r3, [pc, #544]	; (fb34 <_svfprintf_r+0x10b4>)
    f914:	9311      	str	r3, [sp, #68]	; 0x44
    f916:	e7d8      	b.n	f8ca <_svfprintf_r+0xe4a>
    f918:	9b08      	ldr	r3, [sp, #32]
    f91a:	2101      	movs	r1, #1
    f91c:	f853 2b04 	ldr.w	r2, [r3], #4
    f920:	9102      	str	r1, [sp, #8]
    f922:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    f926:	9308      	str	r3, [sp, #32]
    f928:	9105      	str	r1, [sp, #20]
    f92a:	ac37      	add	r4, sp, #220	; 0xdc
    f92c:	f7ff baaf 	b.w	ee8e <_svfprintf_r+0x40e>
    f930:	ee1b 1a10 	vmov	r1, s22
    f934:	aa24      	add	r2, sp, #144	; 0x90
    f936:	4658      	mov	r0, fp
    f938:	f002 fccc 	bl	122d4 <__ssprint_r>
    f93c:	2800      	cmp	r0, #0
    f93e:	f47f ad04 	bne.w	f34a <_svfprintf_r+0x8ca>
    f942:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f944:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f948:	e45d      	b.n	f206 <_svfprintf_r+0x786>
    f94a:	9b03      	ldr	r3, [sp, #12]
    f94c:	9407      	str	r4, [sp, #28]
    f94e:	2b06      	cmp	r3, #6
    f950:	4622      	mov	r2, r4
    f952:	bf28      	it	cs
    f954:	2306      	movcs	r3, #6
    f956:	9403      	str	r4, [sp, #12]
    f958:	4621      	mov	r1, r4
    f95a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    f95e:	4c76      	ldr	r4, [pc, #472]	; (fb38 <_svfprintf_r+0x10b8>)
    f960:	9302      	str	r3, [sp, #8]
    f962:	9305      	str	r3, [sp, #20]
    f964:	920f      	str	r2, [sp, #60]	; 0x3c
    f966:	f7ff ba6c 	b.w	ee42 <_svfprintf_r+0x3c2>
    f96a:	2140      	movs	r1, #64	; 0x40
    f96c:	4658      	mov	r0, fp
    f96e:	f7fd fa3d 	bl	cdec <_malloc_r>
    f972:	6020      	str	r0, [r4, #0]
    f974:	6120      	str	r0, [r4, #16]
    f976:	2800      	cmp	r0, #0
    f978:	f000 860f 	beq.w	1059a <_svfprintf_r+0x1b1a>
    f97c:	2340      	movs	r3, #64	; 0x40
    f97e:	6163      	str	r3, [r4, #20]
    f980:	f7ff b89e 	b.w	eac0 <_svfprintf_r+0x40>
    f984:	2d10      	cmp	r5, #16
    f986:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f988:	f340 825d 	ble.w	fe46 <_svfprintf_r+0x13c6>
    f98c:	4651      	mov	r1, sl
    f98e:	2610      	movs	r6, #16
    f990:	ee1b aa10 	vmov	sl, s22
    f994:	e004      	b.n	f9a0 <_svfprintf_r+0xf20>
    f996:	3108      	adds	r1, #8
    f998:	3d10      	subs	r5, #16
    f99a:	2d10      	cmp	r5, #16
    f99c:	f340 8252 	ble.w	fe44 <_svfprintf_r+0x13c4>
    f9a0:	3301      	adds	r3, #1
    f9a2:	4866      	ldr	r0, [pc, #408]	; (fb3c <_svfprintf_r+0x10bc>)
    f9a4:	3210      	adds	r2, #16
    f9a6:	2b07      	cmp	r3, #7
    f9a8:	e9c1 0600 	strd	r0, r6, [r1]
    f9ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f9b0:	ddf1      	ble.n	f996 <_svfprintf_r+0xf16>
    f9b2:	aa24      	add	r2, sp, #144	; 0x90
    f9b4:	4651      	mov	r1, sl
    f9b6:	4658      	mov	r0, fp
    f9b8:	f002 fc8c 	bl	122d4 <__ssprint_r>
    f9bc:	2800      	cmp	r0, #0
    f9be:	f47f acc4 	bne.w	f34a <_svfprintf_r+0x8ca>
    f9c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f9c6:	a927      	add	r1, sp, #156	; 0x9c
    f9c8:	e7e6      	b.n	f998 <_svfprintf_r+0xf18>
    f9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f9cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    f9d0:	18e3      	adds	r3, r4, r3
    f9d2:	9303      	str	r3, [sp, #12]
    f9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f9d6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f9da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f9dc:	9d05      	ldr	r5, [sp, #20]
    f9de:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f9e2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f9e6:	940b      	str	r4, [sp, #44]	; 0x2c
    f9e8:	ee1b 1a10 	vmov	r1, s22
    f9ec:	4650      	mov	r0, sl
    f9ee:	2b00      	cmp	r3, #0
    f9f0:	d034      	beq.n	fa5c <_svfprintf_r+0xfdc>
    f9f2:	f1b8 0f00 	cmp.w	r8, #0
    f9f6:	d135      	bne.n	fa64 <_svfprintf_r+0xfe4>
    f9f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f9fa:	3b01      	subs	r3, #1
    f9fc:	3e01      	subs	r6, #1
    f9fe:	930d      	str	r3, [sp, #52]	; 0x34
    fa00:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fa02:	e9c0 3900 	strd	r3, r9, [r0]
    fa06:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fa08:	3301      	adds	r3, #1
    fa0a:	444a      	add	r2, r9
    fa0c:	2b07      	cmp	r3, #7
    fa0e:	9226      	str	r2, [sp, #152]	; 0x98
    fa10:	9325      	str	r3, [sp, #148]	; 0x94
    fa12:	dc6c      	bgt.n	faee <_svfprintf_r+0x106e>
    fa14:	3008      	adds	r0, #8
    fa16:	9b03      	ldr	r3, [sp, #12]
    fa18:	f896 c000 	ldrb.w	ip, [r6]
    fa1c:	1b5b      	subs	r3, r3, r5
    fa1e:	4563      	cmp	r3, ip
    fa20:	bfa8      	it	ge
    fa22:	4663      	movge	r3, ip
    fa24:	2b00      	cmp	r3, #0
    fa26:	469a      	mov	sl, r3
    fa28:	dd0c      	ble.n	fa44 <_svfprintf_r+0xfc4>
    fa2a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fa2c:	3401      	adds	r4, #1
    fa2e:	441a      	add	r2, r3
    fa30:	2c07      	cmp	r4, #7
    fa32:	e9c0 5300 	strd	r5, r3, [r0]
    fa36:	9226      	str	r2, [sp, #152]	; 0x98
    fa38:	9425      	str	r4, [sp, #148]	; 0x94
    fa3a:	f300 8177 	bgt.w	fd2c <_svfprintf_r+0x12ac>
    fa3e:	f896 c000 	ldrb.w	ip, [r6]
    fa42:	3008      	adds	r0, #8
    fa44:	f1ba 0f00 	cmp.w	sl, #0
    fa48:	bfac      	ite	ge
    fa4a:	ebac 040a 	subge.w	r4, ip, sl
    fa4e:	4664      	movlt	r4, ip
    fa50:	2c00      	cmp	r4, #0
    fa52:	dc0a      	bgt.n	fa6a <_svfprintf_r+0xfea>
    fa54:	4465      	add	r5, ip
    fa56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fa58:	2b00      	cmp	r3, #0
    fa5a:	d1ca      	bne.n	f9f2 <_svfprintf_r+0xf72>
    fa5c:	f1b8 0f00 	cmp.w	r8, #0
    fa60:	f000 83ac 	beq.w	101bc <_svfprintf_r+0x173c>
    fa64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fa68:	e7ca      	b.n	fa00 <_svfprintf_r+0xf80>
    fa6a:	2c10      	cmp	r4, #16
    fa6c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    fa70:	dd24      	ble.n	fabc <_svfprintf_r+0x103c>
    fa72:	9505      	str	r5, [sp, #20]
    fa74:	f04f 0a10 	mov.w	sl, #16
    fa78:	4663      	mov	r3, ip
    fa7a:	460d      	mov	r5, r1
    fa7c:	e004      	b.n	fa88 <_svfprintf_r+0x1008>
    fa7e:	3c10      	subs	r4, #16
    fa80:	2c10      	cmp	r4, #16
    fa82:	f100 0008 	add.w	r0, r0, #8
    fa86:	dd16      	ble.n	fab6 <_svfprintf_r+0x1036>
    fa88:	3301      	adds	r3, #1
    fa8a:	492c      	ldr	r1, [pc, #176]	; (fb3c <_svfprintf_r+0x10bc>)
    fa8c:	3210      	adds	r2, #16
    fa8e:	2b07      	cmp	r3, #7
    fa90:	e9c0 1a00 	strd	r1, sl, [r0]
    fa94:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fa98:	ddf1      	ble.n	fa7e <_svfprintf_r+0xffe>
    fa9a:	aa24      	add	r2, sp, #144	; 0x90
    fa9c:	4629      	mov	r1, r5
    fa9e:	4658      	mov	r0, fp
    faa0:	f002 fc18 	bl	122d4 <__ssprint_r>
    faa4:	2800      	cmp	r0, #0
    faa6:	f47f ac50 	bne.w	f34a <_svfprintf_r+0x8ca>
    faaa:	3c10      	subs	r4, #16
    faac:	2c10      	cmp	r4, #16
    faae:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fab2:	a827      	add	r0, sp, #156	; 0x9c
    fab4:	dce8      	bgt.n	fa88 <_svfprintf_r+0x1008>
    fab6:	4629      	mov	r1, r5
    fab8:	9d05      	ldr	r5, [sp, #20]
    faba:	469c      	mov	ip, r3
    fabc:	f10c 0301 	add.w	r3, ip, #1
    fac0:	4422      	add	r2, r4
    fac2:	6044      	str	r4, [r0, #4]
    fac4:	2b07      	cmp	r3, #7
    fac6:	4c1d      	ldr	r4, [pc, #116]	; (fb3c <_svfprintf_r+0x10bc>)
    fac8:	6004      	str	r4, [r0, #0]
    faca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    face:	f300 83c6 	bgt.w	1025e <_svfprintf_r+0x17de>
    fad2:	f896 c000 	ldrb.w	ip, [r6]
    fad6:	3008      	adds	r0, #8
    fad8:	4465      	add	r5, ip
    fada:	e7bc      	b.n	fa56 <_svfprintf_r+0xfd6>
    fadc:	f018 0310 	ands.w	r3, r8, #16
    fae0:	f000 80c2 	beq.w	fc68 <_svfprintf_r+0x11e8>
    fae4:	9b08      	ldr	r3, [sp, #32]
    fae6:	f853 2b04 	ldr.w	r2, [r3], #4
    faea:	9308      	str	r3, [sp, #32]
    faec:	e6f9      	b.n	f8e2 <_svfprintf_r+0xe62>
    faee:	aa24      	add	r2, sp, #144	; 0x90
    faf0:	4658      	mov	r0, fp
    faf2:	9105      	str	r1, [sp, #20]
    faf4:	f002 fbee 	bl	122d4 <__ssprint_r>
    faf8:	2800      	cmp	r0, #0
    fafa:	f47f ac26 	bne.w	f34a <_svfprintf_r+0x8ca>
    fafe:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fb00:	9905      	ldr	r1, [sp, #20]
    fb02:	a827      	add	r0, sp, #156	; 0x9c
    fb04:	e787      	b.n	fa16 <_svfprintf_r+0xf96>
    fb06:	9802      	ldr	r0, [sp, #8]
    fb08:	f8cd a01c 	str.w	sl, [sp, #28]
    fb0c:	ac50      	add	r4, sp, #320	; 0x140
    fb0e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    fb12:	2500      	movs	r5, #0
    fb14:	ee0a ba10 	vmov	s20, fp
    fb18:	4b09      	ldr	r3, [pc, #36]	; (fb40 <_svfprintf_r+0x10c0>)
    fb1a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    fb1e:	f8cd 9014 	str.w	r9, [sp, #20]
    fb22:	46a3      	mov	fp, r4
    fb24:	f04f 0805 	mov.w	r8, #5
    fb28:	46ac      	mov	ip, r5
    fb2a:	4604      	mov	r4, r0
    fb2c:	e010      	b.n	fb50 <_svfprintf_r+0x10d0>
    fb2e:	bf00      	nop
    fb30:	200018cc 	.word	0x200018cc
    fb34:	200018e0 	.word	0x200018e0
    fb38:	200018f4 	.word	0x200018f4
    fb3c:	20002e58 	.word	0x20002e58
    fb40:	cccccccd 	.word	0xcccccccd
    fb44:	2a0a      	cmp	r2, #10
    fb46:	f171 0100 	sbcs.w	r1, r1, #0
    fb4a:	d336      	bcc.n	fbba <_svfprintf_r+0x113a>
    fb4c:	464a      	mov	r2, r9
    fb4e:	4631      	mov	r1, r6
    fb50:	1850      	adds	r0, r2, r1
    fb52:	f140 0000 	adc.w	r0, r0, #0
    fb56:	fba3 5600 	umull	r5, r6, r3, r0
    fb5a:	f026 0503 	bic.w	r5, r6, #3
    fb5e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    fb62:	1b40      	subs	r0, r0, r5
    fb64:	1a15      	subs	r5, r2, r0
    fb66:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    fb6a:	f161 0e00 	sbc.w	lr, r1, #0
    fb6e:	fb06 f605 	mul.w	r6, r6, r5
    fb72:	fba5 9503 	umull	r9, r5, r5, r3
    fb76:	fb03 660e 	mla	r6, r3, lr, r6
    fb7a:	f009 0e01 	and.w	lr, r9, #1
    fb7e:	442e      	add	r6, r5
    fb80:	fbae 5e08 	umull	r5, lr, lr, r8
    fb84:	182d      	adds	r5, r5, r0
    fb86:	ea4f 0959 	mov.w	r9, r9, lsr #1
    fb8a:	3530      	adds	r5, #48	; 0x30
    fb8c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    fb90:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    fb94:	f10c 0c01 	add.w	ip, ip, #1
    fb98:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    fb9c:	0876      	lsrs	r6, r6, #1
    fb9e:	2c00      	cmp	r4, #0
    fba0:	d0d0      	beq.n	fb44 <_svfprintf_r+0x10c4>
    fba2:	f89a 0000 	ldrb.w	r0, [sl]
    fba6:	4584      	cmp	ip, r0
    fba8:	d1cc      	bne.n	fb44 <_svfprintf_r+0x10c4>
    fbaa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fbae:	d0c9      	beq.n	fb44 <_svfprintf_r+0x10c4>
    fbb0:	2a0a      	cmp	r2, #10
    fbb2:	f171 0100 	sbcs.w	r1, r1, #0
    fbb6:	f080 818f 	bcs.w	fed8 <_svfprintf_r+0x1458>
    fbba:	465c      	mov	r4, fp
    fbbc:	ab50      	add	r3, sp, #320	; 0x140
    fbbe:	1b1b      	subs	r3, r3, r4
    fbc0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    fbc4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    fbc8:	ee1a ba10 	vmov	fp, s20
    fbcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    fbd0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    fbd4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    fbd8:	9305      	str	r3, [sp, #20]
    fbda:	f7ff bac2 	b.w	f162 <_svfprintf_r+0x6e2>
    fbde:	ee1b 1a10 	vmov	r1, s22
    fbe2:	aa24      	add	r2, sp, #144	; 0x90
    fbe4:	4658      	mov	r0, fp
    fbe6:	f002 fb75 	bl	122d4 <__ssprint_r>
    fbea:	2800      	cmp	r0, #0
    fbec:	f47f abad 	bne.w	f34a <_svfprintf_r+0x8ca>
    fbf0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fbf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fbf6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fbfa:	f7ff b896 	b.w	ed2a <_svfprintf_r+0x2aa>
    fbfe:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fc00:	48be      	ldr	r0, [pc, #760]	; (fefc <_svfprintf_r+0x147c>)
    fc02:	f8ca 0000 	str.w	r0, [sl]
    fc06:	3301      	adds	r3, #1
    fc08:	3201      	adds	r2, #1
    fc0a:	2001      	movs	r0, #1
    fc0c:	2b07      	cmp	r3, #7
    fc0e:	9226      	str	r2, [sp, #152]	; 0x98
    fc10:	9325      	str	r3, [sp, #148]	; 0x94
    fc12:	f8ca 0004 	str.w	r0, [sl, #4]
    fc16:	f300 8177 	bgt.w	ff08 <_svfprintf_r+0x1488>
    fc1a:	f10a 0a08 	add.w	sl, sl, #8
    fc1e:	2900      	cmp	r1, #0
    fc20:	f040 80af 	bne.w	fd82 <_svfprintf_r+0x1302>
    fc24:	990e      	ldr	r1, [sp, #56]	; 0x38
    fc26:	f008 0301 	and.w	r3, r8, #1
    fc2a:	430b      	orrs	r3, r1
    fc2c:	f43f a8c0 	beq.w	edb0 <_svfprintf_r+0x330>
    fc30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc32:	9912      	ldr	r1, [sp, #72]	; 0x48
    fc34:	441a      	add	r2, r3
    fc36:	e9ca 1300 	strd	r1, r3, [sl]
    fc3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fc3c:	9226      	str	r2, [sp, #152]	; 0x98
    fc3e:	3301      	adds	r3, #1
    fc40:	2b07      	cmp	r3, #7
    fc42:	9325      	str	r3, [sp, #148]	; 0x94
    fc44:	f300 8252 	bgt.w	100ec <_svfprintf_r+0x166c>
    fc48:	f10a 0a08 	add.w	sl, sl, #8
    fc4c:	990e      	ldr	r1, [sp, #56]	; 0x38
    fc4e:	f8ca 4000 	str.w	r4, [sl]
    fc52:	3301      	adds	r3, #1
    fc54:	440a      	add	r2, r1
    fc56:	2b07      	cmp	r3, #7
    fc58:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc5c:	f8ca 1004 	str.w	r1, [sl, #4]
    fc60:	f77f a8a4 	ble.w	edac <_svfprintf_r+0x32c>
    fc64:	f7ff bbbd 	b.w	f3e2 <_svfprintf_r+0x962>
    fc68:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    fc6c:	f000 80dd 	beq.w	fe2a <_svfprintf_r+0x13aa>
    fc70:	9808      	ldr	r0, [sp, #32]
    fc72:	f850 2b04 	ldr.w	r2, [r0], #4
    fc76:	9008      	str	r0, [sp, #32]
    fc78:	4619      	mov	r1, r3
    fc7a:	b292      	uxth	r2, r2
    fc7c:	e631      	b.n	f8e2 <_svfprintf_r+0xe62>
    fc7e:	ee1b 1a10 	vmov	r1, s22
    fc82:	aa24      	add	r2, sp, #144	; 0x90
    fc84:	4658      	mov	r0, fp
    fc86:	f002 fb25 	bl	122d4 <__ssprint_r>
    fc8a:	2800      	cmp	r0, #0
    fc8c:	f47f ab5d 	bne.w	f34a <_svfprintf_r+0x8ca>
    fc90:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc92:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc96:	f7ff baa3 	b.w	f1e0 <_svfprintf_r+0x760>
    fc9a:	ae22      	add	r6, sp, #136	; 0x88
    fc9c:	2208      	movs	r2, #8
    fc9e:	2100      	movs	r1, #0
    fca0:	4630      	mov	r0, r6
    fca2:	941d      	str	r4, [sp, #116]	; 0x74
    fca4:	f7fe f9ce 	bl	e044 <memset>
    fca8:	9b03      	ldr	r3, [sp, #12]
    fcaa:	1c5a      	adds	r2, r3, #1
    fcac:	f000 80db 	beq.w	fe66 <_svfprintf_r+0x13e6>
    fcb0:	2500      	movs	r5, #0
    fcb2:	f8cd 9008 	str.w	r9, [sp, #8]
    fcb6:	f8cd 801c 	str.w	r8, [sp, #28]
    fcba:	4699      	mov	r9, r3
    fcbc:	46a8      	mov	r8, r5
    fcbe:	e00c      	b.n	fcda <_svfprintf_r+0x125a>
    fcc0:	a937      	add	r1, sp, #220	; 0xdc
    fcc2:	4658      	mov	r0, fp
    fcc4:	f001 fb1e 	bl	11304 <_wcrtomb_r>
    fcc8:	1c43      	adds	r3, r0, #1
    fcca:	4440      	add	r0, r8
    fccc:	f000 83c8 	beq.w	10460 <_svfprintf_r+0x19e0>
    fcd0:	4548      	cmp	r0, r9
    fcd2:	dc08      	bgt.n	fce6 <_svfprintf_r+0x1266>
    fcd4:	f000 8418 	beq.w	10508 <_svfprintf_r+0x1a88>
    fcd8:	4680      	mov	r8, r0
    fcda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    fcdc:	5952      	ldr	r2, [r2, r5]
    fcde:	4633      	mov	r3, r6
    fce0:	3504      	adds	r5, #4
    fce2:	2a00      	cmp	r2, #0
    fce4:	d1ec      	bne.n	fcc0 <_svfprintf_r+0x1240>
    fce6:	f8cd 8014 	str.w	r8, [sp, #20]
    fcea:	f8dd 9008 	ldr.w	r9, [sp, #8]
    fcee:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fcf2:	e0c5      	b.n	fe80 <_svfprintf_r+0x1400>
    fcf4:	3301      	adds	r3, #1
    fcf6:	4982      	ldr	r1, [pc, #520]	; (ff00 <_svfprintf_r+0x1480>)
    fcf8:	f8ca 4004 	str.w	r4, [sl, #4]
    fcfc:	4422      	add	r2, r4
    fcfe:	2b07      	cmp	r3, #7
    fd00:	f8ca 1000 	str.w	r1, [sl]
    fd04:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fd08:	f77f a850 	ble.w	edac <_svfprintf_r+0x32c>
    fd0c:	f7ff bb69 	b.w	f3e2 <_svfprintf_r+0x962>
    fd10:	ee1b 1a10 	vmov	r1, s22
    fd14:	aa24      	add	r2, sp, #144	; 0x90
    fd16:	4658      	mov	r0, fp
    fd18:	f002 fadc 	bl	122d4 <__ssprint_r>
    fd1c:	2800      	cmp	r0, #0
    fd1e:	f47f ab14 	bne.w	f34a <_svfprintf_r+0x8ca>
    fd22:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd28:	f7ff b829 	b.w	ed7e <_svfprintf_r+0x2fe>
    fd2c:	aa24      	add	r2, sp, #144	; 0x90
    fd2e:	4658      	mov	r0, fp
    fd30:	9105      	str	r1, [sp, #20]
    fd32:	f002 facf 	bl	122d4 <__ssprint_r>
    fd36:	2800      	cmp	r0, #0
    fd38:	f47f ab07 	bne.w	f34a <_svfprintf_r+0x8ca>
    fd3c:	f896 c000 	ldrb.w	ip, [r6]
    fd40:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd42:	9905      	ldr	r1, [sp, #20]
    fd44:	a827      	add	r0, sp, #156	; 0x9c
    fd46:	e67d      	b.n	fa44 <_svfprintf_r+0xfc4>
    fd48:	2b01      	cmp	r3, #1
    fd4a:	f8cd 8008 	str.w	r8, [sp, #8]
    fd4e:	f47f a9f3 	bne.w	f138 <_svfprintf_r+0x6b8>
    fd52:	f7ff bb93 	b.w	f47c <_svfprintf_r+0x9fc>
    fd56:	9b08      	ldr	r3, [sp, #32]
    fd58:	9904      	ldr	r1, [sp, #16]
    fd5a:	f853 2b04 	ldr.w	r2, [r3], #4
    fd5e:	464c      	mov	r4, r9
    fd60:	6011      	str	r1, [r2, #0]
    fd62:	9308      	str	r3, [sp, #32]
    fd64:	f7fe bebe 	b.w	eae4 <_svfprintf_r+0x64>
    fd68:	3301      	adds	r3, #1
    fd6a:	4965      	ldr	r1, [pc, #404]	; (ff00 <_svfprintf_r+0x1480>)
    fd6c:	f8ca 4004 	str.w	r4, [sl, #4]
    fd70:	4422      	add	r2, r4
    fd72:	2b07      	cmp	r3, #7
    fd74:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fd78:	f8ca 1000 	str.w	r1, [sl]
    fd7c:	f77f ab22 	ble.w	f3c4 <_svfprintf_r+0x944>
    fd80:	e47b      	b.n	f67a <_svfprintf_r+0xbfa>
    fd82:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fd84:	9812      	ldr	r0, [sp, #72]	; 0x48
    fd86:	441a      	add	r2, r3
    fd88:	e9ca 0300 	strd	r0, r3, [sl]
    fd8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fd8e:	9226      	str	r2, [sp, #152]	; 0x98
    fd90:	3301      	adds	r3, #1
    fd92:	2b07      	cmp	r3, #7
    fd94:	9325      	str	r3, [sp, #148]	; 0x94
    fd96:	f300 81a9 	bgt.w	100ec <_svfprintf_r+0x166c>
    fd9a:	f10a 0a08 	add.w	sl, sl, #8
    fd9e:	2900      	cmp	r1, #0
    fda0:	f6bf af54 	bge.w	fc4c <_svfprintf_r+0x11cc>
    fda4:	424d      	negs	r5, r1
    fda6:	3110      	adds	r1, #16
    fda8:	f280 830f 	bge.w	103ca <_svfprintf_r+0x194a>
    fdac:	ee1b 1a10 	vmov	r1, s22
    fdb0:	2610      	movs	r6, #16
    fdb2:	e005      	b.n	fdc0 <_svfprintf_r+0x1340>
    fdb4:	f10a 0a08 	add.w	sl, sl, #8
    fdb8:	3d10      	subs	r5, #16
    fdba:	2d10      	cmp	r5, #16
    fdbc:	f340 8305 	ble.w	103ca <_svfprintf_r+0x194a>
    fdc0:	3301      	adds	r3, #1
    fdc2:	484f      	ldr	r0, [pc, #316]	; (ff00 <_svfprintf_r+0x1480>)
    fdc4:	3210      	adds	r2, #16
    fdc6:	2b07      	cmp	r3, #7
    fdc8:	e9ca 0600 	strd	r0, r6, [sl]
    fdcc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fdd0:	ddf0      	ble.n	fdb4 <_svfprintf_r+0x1334>
    fdd2:	aa24      	add	r2, sp, #144	; 0x90
    fdd4:	4658      	mov	r0, fp
    fdd6:	9103      	str	r1, [sp, #12]
    fdd8:	f002 fa7c 	bl	122d4 <__ssprint_r>
    fddc:	2800      	cmp	r0, #0
    fdde:	f47f aab4 	bne.w	f34a <_svfprintf_r+0x8ca>
    fde2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fde6:	9903      	ldr	r1, [sp, #12]
    fde8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fdec:	e7e4      	b.n	fdb8 <_svfprintf_r+0x1338>
    fdee:	9b08      	ldr	r3, [sp, #32]
    fdf0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fdf4:	bf1a      	itte	ne
    fdf6:	4611      	movne	r1, r2
    fdf8:	f853 2b04 	ldrne.w	r2, [r3], #4
    fdfc:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe00:	9308      	str	r3, [sp, #32]
    fe02:	bf18      	it	ne
    fe04:	b2d2      	uxtbne	r2, r2
    fe06:	f7ff b945 	b.w	f094 <_svfprintf_r+0x614>
    fe0a:	9b02      	ldr	r3, [sp, #8]
    fe0c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    fe10:	9b08      	ldr	r3, [sp, #32]
    fe12:	bf1a      	itte	ne
    fe14:	4611      	movne	r1, r2
    fe16:	f853 2b04 	ldrne.w	r2, [r3], #4
    fe1a:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe1e:	9308      	str	r3, [sp, #32]
    fe20:	bf18      	it	ne
    fe22:	b2d2      	uxtbne	r2, r2
    fe24:	2301      	movs	r3, #1
    fe26:	f7ff b8d0 	b.w	efca <_svfprintf_r+0x54a>
    fe2a:	9b08      	ldr	r3, [sp, #32]
    fe2c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fe30:	bf1a      	itte	ne
    fe32:	4611      	movne	r1, r2
    fe34:	f853 2b04 	ldrne.w	r2, [r3], #4
    fe38:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe3c:	9308      	str	r3, [sp, #32]
    fe3e:	bf18      	it	ne
    fe40:	b2d2      	uxtbne	r2, r2
    fe42:	e54e      	b.n	f8e2 <_svfprintf_r+0xe62>
    fe44:	468a      	mov	sl, r1
    fe46:	3301      	adds	r3, #1
    fe48:	492d      	ldr	r1, [pc, #180]	; (ff00 <_svfprintf_r+0x1480>)
    fe4a:	f8ca 5004 	str.w	r5, [sl, #4]
    fe4e:	442a      	add	r2, r5
    fe50:	2b07      	cmp	r3, #7
    fe52:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fe56:	f8ca 1000 	str.w	r1, [sl]
    fe5a:	f300 8139 	bgt.w	100d0 <_svfprintf_r+0x1650>
    fe5e:	f10a 0a08 	add.w	sl, sl, #8
    fe62:	f7ff bb8c 	b.w	f57e <_svfprintf_r+0xafe>
    fe66:	2300      	movs	r3, #0
    fe68:	4619      	mov	r1, r3
    fe6a:	9600      	str	r6, [sp, #0]
    fe6c:	aa1d      	add	r2, sp, #116	; 0x74
    fe6e:	4658      	mov	r0, fp
    fe70:	f001 fa6e 	bl	11350 <_wcsrtombs_r>
    fe74:	4603      	mov	r3, r0
    fe76:	3301      	adds	r3, #1
    fe78:	9005      	str	r0, [sp, #20]
    fe7a:	f000 82f1 	beq.w	10460 <_svfprintf_r+0x19e0>
    fe7e:	941d      	str	r4, [sp, #116]	; 0x74
    fe80:	9b05      	ldr	r3, [sp, #20]
    fe82:	2b00      	cmp	r3, #0
    fe84:	d04e      	beq.n	ff24 <_svfprintf_r+0x14a4>
    fe86:	2b63      	cmp	r3, #99	; 0x63
    fe88:	f300 8118 	bgt.w	100bc <_svfprintf_r+0x163c>
    fe8c:	2300      	movs	r3, #0
    fe8e:	9307      	str	r3, [sp, #28]
    fe90:	ac37      	add	r4, sp, #220	; 0xdc
    fe92:	2208      	movs	r2, #8
    fe94:	2100      	movs	r1, #0
    fe96:	4630      	mov	r0, r6
    fe98:	f7fe f8d4 	bl	e044 <memset>
    fe9c:	9d05      	ldr	r5, [sp, #20]
    fe9e:	9600      	str	r6, [sp, #0]
    fea0:	462b      	mov	r3, r5
    fea2:	aa1d      	add	r2, sp, #116	; 0x74
    fea4:	4621      	mov	r1, r4
    fea6:	4658      	mov	r0, fp
    fea8:	f001 fa52 	bl	11350 <_wcsrtombs_r>
    feac:	4285      	cmp	r5, r0
    feae:	f040 837c 	bne.w	105aa <_svfprintf_r+0x1b2a>
    feb2:	9a05      	ldr	r2, [sp, #20]
    feb4:	2300      	movs	r3, #0
    feb6:	54a3      	strb	r3, [r4, r2]
    feb8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    febc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fec0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fec4:	9303      	str	r3, [sp, #12]
    fec6:	9202      	str	r2, [sp, #8]
    fec8:	930f      	str	r3, [sp, #60]	; 0x3c
    feca:	f7fe bfba 	b.w	ee42 <_svfprintf_r+0x3c2>
    fece:	212d      	movs	r1, #45	; 0x2d
    fed0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fed4:	f7fe bfa4 	b.w	ee20 <_svfprintf_r+0x3a0>
    fed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    feda:	9915      	ldr	r1, [sp, #84]	; 0x54
    fedc:	ebab 0b03 	sub.w	fp, fp, r3
    fee0:	461a      	mov	r2, r3
    fee2:	4658      	mov	r0, fp
    fee4:	f7fe f946 	bl	e174 <strncpy>
    fee8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    feec:	4b05      	ldr	r3, [pc, #20]	; (ff04 <_svfprintf_r+0x1484>)
    feee:	b10a      	cbz	r2, fef4 <_svfprintf_r+0x1474>
    fef0:	f10a 0a01 	add.w	sl, sl, #1
    fef4:	f04f 0c00 	mov.w	ip, #0
    fef8:	e628      	b.n	fb4c <_svfprintf_r+0x10cc>
    fefa:	bf00      	nop
    fefc:	200027ac 	.word	0x200027ac
    ff00:	20002e58 	.word	0x20002e58
    ff04:	cccccccd 	.word	0xcccccccd
    ff08:	ee1b 1a10 	vmov	r1, s22
    ff0c:	aa24      	add	r2, sp, #144	; 0x90
    ff0e:	4658      	mov	r0, fp
    ff10:	f002 f9e0 	bl	122d4 <__ssprint_r>
    ff14:	2800      	cmp	r0, #0
    ff16:	f47f aa18 	bne.w	f34a <_svfprintf_r+0x8ca>
    ff1a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ff1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ff1e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff22:	e67c      	b.n	fc1e <_svfprintf_r+0x119e>
    ff24:	9b05      	ldr	r3, [sp, #20]
    ff26:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ff2a:	930f      	str	r3, [sp, #60]	; 0x3c
    ff2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ff30:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ff34:	9307      	str	r3, [sp, #28]
    ff36:	f7fe bf84 	b.w	ee42 <_svfprintf_r+0x3c2>
    ff3a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ff3c:	9805      	ldr	r0, [sp, #20]
    ff3e:	1865      	adds	r5, r4, r1
    ff40:	1a2d      	subs	r5, r5, r0
    ff42:	1acc      	subs	r4, r1, r3
    ff44:	42a5      	cmp	r5, r4
    ff46:	bfa8      	it	ge
    ff48:	4625      	movge	r5, r4
    ff4a:	f7ff bb4d 	b.w	f5e8 <_svfprintf_r+0xb68>
    ff4e:	9b08      	ldr	r3, [sp, #32]
    ff50:	9904      	ldr	r1, [sp, #16]
    ff52:	f853 2b04 	ldr.w	r2, [r3], #4
    ff56:	9308      	str	r3, [sp, #32]
    ff58:	8011      	strh	r1, [r2, #0]
    ff5a:	464c      	mov	r4, r9
    ff5c:	f7fe bdc2 	b.w	eae4 <_svfprintf_r+0x64>
    ff60:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ff64:	9308      	str	r3, [sp, #32]
    ff66:	17d1      	asrs	r1, r2, #31
    ff68:	460b      	mov	r3, r1
    ff6a:	f7fe bfdb 	b.w	ef24 <_svfprintf_r+0x4a4>
    ff6e:	9a03      	ldr	r2, [sp, #12]
    ff70:	2102      	movs	r1, #2
    ff72:	ab22      	add	r3, sp, #136	; 0x88
    ff74:	9301      	str	r3, [sp, #4]
    ff76:	ab1d      	add	r3, sp, #116	; 0x74
    ff78:	9300      	str	r3, [sp, #0]
    ff7a:	4658      	mov	r0, fp
    ff7c:	ab1b      	add	r3, sp, #108	; 0x6c
    ff7e:	eeb0 0b4a 	vmov.f64	d0, d10
    ff82:	9202      	str	r2, [sp, #8]
    ff84:	f001 fb1c 	bl	115c0 <_dtoa_r>
    ff88:	2d47      	cmp	r5, #71	; 0x47
    ff8a:	9a02      	ldr	r2, [sp, #8]
    ff8c:	4604      	mov	r4, r0
    ff8e:	f000 8161 	beq.w	10254 <_svfprintf_r+0x17d4>
    ff92:	2d46      	cmp	r5, #70	; 0x46
    ff94:	4410      	add	r0, r2
    ff96:	d105      	bne.n	ffa4 <_svfprintf_r+0x1524>
    ff98:	7823      	ldrb	r3, [r4, #0]
    ff9a:	2b30      	cmp	r3, #48	; 0x30
    ff9c:	f000 826f 	beq.w	1047e <_svfprintf_r+0x19fe>
    ffa0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ffa2:	4410      	add	r0, r2
    ffa4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffac:	f040 8146 	bne.w	1023c <_svfprintf_r+0x17bc>
    ffb0:	4603      	mov	r3, r0
    ffb2:	1b1b      	subs	r3, r3, r4
    ffb4:	930e      	str	r3, [sp, #56]	; 0x38
    ffb6:	2d47      	cmp	r5, #71	; 0x47
    ffb8:	f000 8110 	beq.w	101dc <_svfprintf_r+0x175c>
    ffbc:	2d46      	cmp	r5, #70	; 0x46
    ffbe:	f000 81b5 	beq.w	1032c <_svfprintf_r+0x18ac>
    ffc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ffc4:	930c      	str	r3, [sp, #48]	; 0x30
    ffc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ffc8:	2d41      	cmp	r5, #65	; 0x41
    ffca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    ffce:	931b      	str	r3, [sp, #108]	; 0x6c
    ffd0:	f000 81e5 	beq.w	1039e <_svfprintf_r+0x191e>
    ffd4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ffd8:	2100      	movs	r1, #0
    ffda:	2b00      	cmp	r3, #0
    ffdc:	bfb8      	it	lt
    ffde:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    ffe0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    ffe4:	bfba      	itte	lt
    ffe6:	f1c3 0301 	rsblt	r3, r3, #1
    ffea:	222d      	movlt	r2, #45	; 0x2d
    ffec:	222b      	movge	r2, #43	; 0x2b
    ffee:	2b09      	cmp	r3, #9
    fff0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    fff4:	f340 81da 	ble.w	103ac <_svfprintf_r+0x192c>
    fff8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    fffc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 1041c <_svfprintf_r+0x199c>
   10000:	462a      	mov	r2, r5
   10002:	4610      	mov	r0, r2
   10004:	fb8c 2103 	smull	r2, r1, ip, r3
   10008:	17da      	asrs	r2, r3, #31
   1000a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   1000e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10012:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   10016:	3130      	adds	r1, #48	; 0x30
   10018:	f800 1c01 	strb.w	r1, [r0, #-1]
   1001c:	4619      	mov	r1, r3
   1001e:	2963      	cmp	r1, #99	; 0x63
   10020:	4613      	mov	r3, r2
   10022:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   10026:	dcec      	bgt.n	10002 <_svfprintf_r+0x1582>
   10028:	3330      	adds	r3, #48	; 0x30
   1002a:	b2d9      	uxtb	r1, r3
   1002c:	1e83      	subs	r3, r0, #2
   1002e:	429d      	cmp	r5, r3
   10030:	f802 1c01 	strb.w	r1, [r2, #-1]
   10034:	f240 828b 	bls.w	1054e <_svfprintf_r+0x1ace>
   10038:	4613      	mov	r3, r2
   1003a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   1003e:	e001      	b.n	10044 <_svfprintf_r+0x15c4>
   10040:	f813 1b01 	ldrb.w	r1, [r3], #1
   10044:	f802 1b01 	strb.w	r1, [r2], #1
   10048:	429d      	cmp	r5, r3
   1004a:	d1f9      	bne.n	10040 <_svfprintf_r+0x15c0>
   1004c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   10050:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10054:	1a1b      	subs	r3, r3, r0
   10056:	4413      	add	r3, r2
   10058:	aa1e      	add	r2, sp, #120	; 0x78
   1005a:	1a9b      	subs	r3, r3, r2
   1005c:	9314      	str	r3, [sp, #80]	; 0x50
   1005e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10060:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10062:	2b01      	cmp	r3, #1
   10064:	441a      	add	r2, r3
   10066:	9205      	str	r2, [sp, #20]
   10068:	f340 8203 	ble.w	10472 <_svfprintf_r+0x19f2>
   1006c:	9b05      	ldr	r3, [sp, #20]
   1006e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10070:	4413      	add	r3, r2
   10072:	9305      	str	r3, [sp, #20]
   10074:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   10078:	9a05      	ldr	r2, [sp, #20]
   1007a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1007e:	2300      	movs	r3, #0
   10080:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   10084:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   10088:	930f      	str	r3, [sp, #60]	; 0x3c
   1008a:	9202      	str	r2, [sp, #8]
   1008c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1008e:	2b00      	cmp	r3, #0
   10090:	f040 80b1 	bne.w	101f6 <_svfprintf_r+0x1776>
   10094:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10098:	9303      	str	r3, [sp, #12]
   1009a:	f7fe bed2 	b.w	ee42 <_svfprintf_r+0x3c2>
   1009e:	4620      	mov	r0, r4
   100a0:	f7fe face 	bl	e640 <strlen>
   100a4:	4602      	mov	r2, r0
   100a6:	9005      	str	r0, [sp, #20]
   100a8:	f7fe bf20 	b.w	eeec <_svfprintf_r+0x46c>
   100ac:	ee1b 1a10 	vmov	r1, s22
   100b0:	aa24      	add	r2, sp, #144	; 0x90
   100b2:	4658      	mov	r0, fp
   100b4:	f002 f90e 	bl	122d4 <__ssprint_r>
   100b8:	f7fe bded 	b.w	ec96 <_svfprintf_r+0x216>
   100bc:	1c59      	adds	r1, r3, #1
   100be:	4658      	mov	r0, fp
   100c0:	f7fc fe94 	bl	cdec <_malloc_r>
   100c4:	4604      	mov	r4, r0
   100c6:	2800      	cmp	r0, #0
   100c8:	f000 81ca 	beq.w	10460 <_svfprintf_r+0x19e0>
   100cc:	9007      	str	r0, [sp, #28]
   100ce:	e6e0      	b.n	fe92 <_svfprintf_r+0x1412>
   100d0:	ee1b 1a10 	vmov	r1, s22
   100d4:	aa24      	add	r2, sp, #144	; 0x90
   100d6:	4658      	mov	r0, fp
   100d8:	f002 f8fc 	bl	122d4 <__ssprint_r>
   100dc:	2800      	cmp	r0, #0
   100de:	f47f a934 	bne.w	f34a <_svfprintf_r+0x8ca>
   100e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   100e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   100e8:	f7ff ba49 	b.w	f57e <_svfprintf_r+0xafe>
   100ec:	ee1b 1a10 	vmov	r1, s22
   100f0:	aa24      	add	r2, sp, #144	; 0x90
   100f2:	4658      	mov	r0, fp
   100f4:	f002 f8ee 	bl	122d4 <__ssprint_r>
   100f8:	2800      	cmp	r0, #0
   100fa:	f47f a926 	bne.w	f34a <_svfprintf_r+0x8ca>
   100fe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   10102:	991b      	ldr	r1, [sp, #108]	; 0x6c
   10104:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10108:	e649      	b.n	fd9e <_svfprintf_r+0x131e>
   1010a:	2306      	movs	r3, #6
   1010c:	9303      	str	r3, [sp, #12]
   1010e:	f7ff bb83 	b.w	f818 <_svfprintf_r+0xd98>
   10112:	9b03      	ldr	r3, [sp, #12]
   10114:	2102      	movs	r1, #2
   10116:	1c5a      	adds	r2, r3, #1
   10118:	e72b      	b.n	ff72 <_svfprintf_r+0x14f2>
   1011a:	9a03      	ldr	r2, [sp, #12]
   1011c:	2103      	movs	r1, #3
   1011e:	e728      	b.n	ff72 <_svfprintf_r+0x14f2>
   10120:	a81b      	add	r0, sp, #108	; 0x6c
   10122:	eeb0 0b4a 	vmov.f64	d0, d10
   10126:	f001 f91f 	bl	11368 <frexp>
   1012a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   1012e:	ee20 0b07 	vmul.f64	d0, d0, d7
   10132:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1013a:	d101      	bne.n	10140 <_svfprintf_r+0x16c0>
   1013c:	2301      	movs	r3, #1
   1013e:	931b      	str	r3, [sp, #108]	; 0x6c
   10140:	48b3      	ldr	r0, [pc, #716]	; (10410 <_svfprintf_r+0x1990>)
   10142:	9b03      	ldr	r3, [sp, #12]
   10144:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   10148:	3b01      	subs	r3, #1
   1014a:	4622      	mov	r2, r4
   1014c:	e004      	b.n	10158 <_svfprintf_r+0x16d8>
   1014e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10156:	d013      	beq.n	10180 <_svfprintf_r+0x1700>
   10158:	ee20 0b05 	vmul.f64	d0, d0, d5
   1015c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   10160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10164:	ee17 1a90 	vmov	r1, s15
   10168:	5c41      	ldrb	r1, [r0, r1]
   1016a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1016e:	4694      	mov	ip, r2
   10170:	ee30 0b46 	vsub.f64	d0, d0, d6
   10174:	f802 1b01 	strb.w	r1, [r2], #1
   10178:	4619      	mov	r1, r3
   1017a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1017e:	d1e6      	bne.n	1014e <_svfprintf_r+0x16ce>
   10180:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   10184:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1018c:	f300 8148 	bgt.w	10420 <_svfprintf_r+0x19a0>
   10190:	eeb4 0b46 	vcmp.f64	d0, d6
   10194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10198:	d104      	bne.n	101a4 <_svfprintf_r+0x1724>
   1019a:	ee17 3a90 	vmov	r3, s15
   1019e:	07db      	lsls	r3, r3, #31
   101a0:	f100 813e 	bmi.w	10420 <_svfprintf_r+0x19a0>
   101a4:	2900      	cmp	r1, #0
   101a6:	db06      	blt.n	101b6 <_svfprintf_r+0x1736>
   101a8:	1c4b      	adds	r3, r1, #1
   101aa:	4413      	add	r3, r2
   101ac:	2130      	movs	r1, #48	; 0x30
   101ae:	f802 1b01 	strb.w	r1, [r2], #1
   101b2:	4293      	cmp	r3, r2
   101b4:	d1fb      	bne.n	101ae <_svfprintf_r+0x172e>
   101b6:	1b13      	subs	r3, r2, r4
   101b8:	930e      	str	r3, [sp, #56]	; 0x38
   101ba:	e6fc      	b.n	ffb6 <_svfprintf_r+0x1536>
   101bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   101be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   101c4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   101c8:	9613      	str	r6, [sp, #76]	; 0x4c
   101ca:	18e3      	adds	r3, r4, r3
   101cc:	429d      	cmp	r5, r3
   101ce:	4629      	mov	r1, r5
   101d0:	bf28      	it	cs
   101d2:	4619      	movcs	r1, r3
   101d4:	4682      	mov	sl, r0
   101d6:	9105      	str	r1, [sp, #20]
   101d8:	f7ff b9d8 	b.w	f58c <_svfprintf_r+0xb0c>
   101dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   101de:	930c      	str	r3, [sp, #48]	; 0x30
   101e0:	1cda      	adds	r2, r3, #3
   101e2:	db02      	blt.n	101ea <_svfprintf_r+0x176a>
   101e4:	9a03      	ldr	r2, [sp, #12]
   101e6:	4293      	cmp	r3, r2
   101e8:	dd0c      	ble.n	10204 <_svfprintf_r+0x1784>
   101ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101ec:	3b02      	subs	r3, #2
   101ee:	930b      	str	r3, [sp, #44]	; 0x2c
   101f0:	f023 0520 	bic.w	r5, r3, #32
   101f4:	e6e7      	b.n	ffc6 <_svfprintf_r+0x1546>
   101f6:	212d      	movs	r1, #45	; 0x2d
   101f8:	2300      	movs	r3, #0
   101fa:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   101fe:	9303      	str	r3, [sp, #12]
   10200:	f7fe be22 	b.w	ee48 <_svfprintf_r+0x3c8>
   10204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10208:	4293      	cmp	r3, r2
   1020a:	f2c0 80bd 	blt.w	10388 <_svfprintf_r+0x1908>
   1020e:	07f0      	lsls	r0, r6, #31
   10210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10212:	f140 8132 	bpl.w	1047a <_svfprintf_r+0x19fa>
   10216:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10218:	4413      	add	r3, r2
   1021a:	9305      	str	r3, [sp, #20]
   1021c:	0571      	lsls	r1, r6, #21
   1021e:	d503      	bpl.n	10228 <_svfprintf_r+0x17a8>
   10220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10222:	2b00      	cmp	r3, #0
   10224:	f300 8135 	bgt.w	10492 <_svfprintf_r+0x1a12>
   10228:	9b05      	ldr	r3, [sp, #20]
   1022a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1022e:	9302      	str	r3, [sp, #8]
   10230:	2367      	movs	r3, #103	; 0x67
   10232:	930b      	str	r3, [sp, #44]	; 0x2c
   10234:	2300      	movs	r3, #0
   10236:	930f      	str	r3, [sp, #60]	; 0x3c
   10238:	930d      	str	r3, [sp, #52]	; 0x34
   1023a:	e727      	b.n	1008c <_svfprintf_r+0x160c>
   1023c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1023e:	4283      	cmp	r3, r0
   10240:	f4bf aeb7 	bcs.w	ffb2 <_svfprintf_r+0x1532>
   10244:	2130      	movs	r1, #48	; 0x30
   10246:	1c5a      	adds	r2, r3, #1
   10248:	9222      	str	r2, [sp, #136]	; 0x88
   1024a:	7019      	strb	r1, [r3, #0]
   1024c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1024e:	4298      	cmp	r0, r3
   10250:	d8f9      	bhi.n	10246 <_svfprintf_r+0x17c6>
   10252:	e6ae      	b.n	ffb2 <_svfprintf_r+0x1532>
   10254:	07f3      	lsls	r3, r6, #31
   10256:	f100 80a7 	bmi.w	103a8 <_svfprintf_r+0x1928>
   1025a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1025c:	e6a9      	b.n	ffb2 <_svfprintf_r+0x1532>
   1025e:	aa24      	add	r2, sp, #144	; 0x90
   10260:	4658      	mov	r0, fp
   10262:	9105      	str	r1, [sp, #20]
   10264:	f002 f836 	bl	122d4 <__ssprint_r>
   10268:	2800      	cmp	r0, #0
   1026a:	f47f a86e 	bne.w	f34a <_svfprintf_r+0x8ca>
   1026e:	f896 c000 	ldrb.w	ip, [r6]
   10272:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10274:	9905      	ldr	r1, [sp, #20]
   10276:	a827      	add	r0, sp, #156	; 0x9c
   10278:	4465      	add	r5, ip
   1027a:	f7ff bbec 	b.w	fa56 <_svfprintf_r+0xfd6>
   1027e:	ee1b 1a10 	vmov	r1, s22
   10282:	aa24      	add	r2, sp, #144	; 0x90
   10284:	4658      	mov	r0, fp
   10286:	f002 f825 	bl	122d4 <__ssprint_r>
   1028a:	2800      	cmp	r0, #0
   1028c:	f47f a85d 	bne.w	f34a <_svfprintf_r+0x8ca>
   10290:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10292:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10296:	f7ff b96b 	b.w	f570 <_svfprintf_r+0xaf0>
   1029a:	2378      	movs	r3, #120	; 0x78
   1029c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   102a0:	2330      	movs	r3, #48	; 0x30
   102a2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   102a6:	9b03      	ldr	r3, [sp, #12]
   102a8:	2b63      	cmp	r3, #99	; 0x63
   102aa:	f048 0602 	orr.w	r6, r8, #2
   102ae:	f300 80a6 	bgt.w	103fe <_svfprintf_r+0x197e>
   102b2:	2300      	movs	r3, #0
   102b4:	9307      	str	r3, [sp, #28]
   102b6:	ac37      	add	r4, sp, #220	; 0xdc
   102b8:	ee18 3a90 	vmov	r3, s17
   102bc:	2b00      	cmp	r3, #0
   102be:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   102c2:	db2b      	blt.n	1031c <_svfprintf_r+0x189c>
   102c4:	eeb0 ab48 	vmov.f64	d10, d8
   102c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102ca:	f023 0520 	bic.w	r5, r3, #32
   102ce:	2300      	movs	r3, #0
   102d0:	9309      	str	r3, [sp, #36]	; 0x24
   102d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102d4:	2b61      	cmp	r3, #97	; 0x61
   102d6:	f47f aaad 	bne.w	f834 <_svfprintf_r+0xdb4>
   102da:	eeb0 0b4a 	vmov.f64	d0, d10
   102de:	a81b      	add	r0, sp, #108	; 0x6c
   102e0:	f001 f842 	bl	11368 <frexp>
   102e4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   102e8:	ee20 0b07 	vmul.f64	d0, d0, d7
   102ec:	eeb5 0b40 	vcmp.f64	d0, #0.0
   102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102f4:	d101      	bne.n	102fa <_svfprintf_r+0x187a>
   102f6:	2301      	movs	r3, #1
   102f8:	931b      	str	r3, [sp, #108]	; 0x6c
   102fa:	4846      	ldr	r0, [pc, #280]	; (10414 <_svfprintf_r+0x1994>)
   102fc:	e721      	b.n	10142 <_svfprintf_r+0x16c2>
   102fe:	ee1b 1a10 	vmov	r1, s22
   10302:	aa24      	add	r2, sp, #144	; 0x90
   10304:	4658      	mov	r0, fp
   10306:	f001 ffe5 	bl	122d4 <__ssprint_r>
   1030a:	2800      	cmp	r0, #0
   1030c:	f47f a81d 	bne.w	f34a <_svfprintf_r+0x8ca>
   10310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10312:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10314:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10318:	f7ff b94e 	b.w	f5b8 <_svfprintf_r+0xb38>
   1031c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1031e:	f023 0520 	bic.w	r5, r3, #32
   10322:	232d      	movs	r3, #45	; 0x2d
   10324:	9309      	str	r3, [sp, #36]	; 0x24
   10326:	eeb1 ab48 	vneg.f64	d10, d8
   1032a:	e7d2      	b.n	102d2 <_svfprintf_r+0x1852>
   1032c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1032e:	920c      	str	r2, [sp, #48]	; 0x30
   10330:	2a00      	cmp	r2, #0
   10332:	f006 0301 	and.w	r3, r6, #1
   10336:	f340 810d 	ble.w	10554 <_svfprintf_r+0x1ad4>
   1033a:	9903      	ldr	r1, [sp, #12]
   1033c:	430b      	orrs	r3, r1
   1033e:	f040 80cf 	bne.w	104e0 <_svfprintf_r+0x1a60>
   10342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10344:	9305      	str	r3, [sp, #20]
   10346:	2366      	movs	r3, #102	; 0x66
   10348:	930b      	str	r3, [sp, #44]	; 0x2c
   1034a:	0572      	lsls	r2, r6, #21
   1034c:	f100 80a3 	bmi.w	10496 <_svfprintf_r+0x1a16>
   10350:	9b05      	ldr	r3, [sp, #20]
   10352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10356:	9302      	str	r3, [sp, #8]
   10358:	e76c      	b.n	10234 <_svfprintf_r+0x17b4>
   1035a:	ee1b 1a10 	vmov	r1, s22
   1035e:	aa24      	add	r2, sp, #144	; 0x90
   10360:	4658      	mov	r0, fp
   10362:	f001 ffb7 	bl	122d4 <__ssprint_r>
   10366:	2800      	cmp	r0, #0
   10368:	f47e afef 	bne.w	f34a <_svfprintf_r+0x8ca>
   1036c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1036e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10370:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10372:	1b1c      	subs	r4, r3, r4
   10374:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10378:	f7ff b936 	b.w	f5e8 <_svfprintf_r+0xb68>
   1037c:	2358      	movs	r3, #88	; 0x58
   1037e:	e78d      	b.n	1029c <_svfprintf_r+0x181c>
   10380:	2200      	movs	r2, #0
   10382:	9203      	str	r2, [sp, #12]
   10384:	f7fe bbda 	b.w	eb3c <_svfprintf_r+0xbc>
   10388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1038a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1038c:	189a      	adds	r2, r3, r2
   1038e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10390:	9205      	str	r2, [sp, #20]
   10392:	2b00      	cmp	r3, #0
   10394:	f340 80ab 	ble.w	104ee <_svfprintf_r+0x1a6e>
   10398:	2367      	movs	r3, #103	; 0x67
   1039a:	930b      	str	r3, [sp, #44]	; 0x2c
   1039c:	e7d5      	b.n	1034a <_svfprintf_r+0x18ca>
   1039e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   103a0:	320f      	adds	r2, #15
   103a2:	b2d2      	uxtb	r2, r2
   103a4:	2101      	movs	r1, #1
   103a6:	e618      	b.n	ffda <_svfprintf_r+0x155a>
   103a8:	18a0      	adds	r0, r4, r2
   103aa:	e5fb      	b.n	ffa4 <_svfprintf_r+0x1524>
   103ac:	2900      	cmp	r1, #0
   103ae:	f040 80a8 	bne.w	10502 <_svfprintf_r+0x1a82>
   103b2:	2230      	movs	r2, #48	; 0x30
   103b4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   103b8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   103bc:	3330      	adds	r3, #48	; 0x30
   103be:	f802 3b01 	strb.w	r3, [r2], #1
   103c2:	ab1e      	add	r3, sp, #120	; 0x78
   103c4:	1ad3      	subs	r3, r2, r3
   103c6:	9314      	str	r3, [sp, #80]	; 0x50
   103c8:	e649      	b.n	1005e <_svfprintf_r+0x15de>
   103ca:	3301      	adds	r3, #1
   103cc:	4912      	ldr	r1, [pc, #72]	; (10418 <_svfprintf_r+0x1998>)
   103ce:	f8ca 5004 	str.w	r5, [sl, #4]
   103d2:	442a      	add	r2, r5
   103d4:	2b07      	cmp	r3, #7
   103d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   103da:	f8ca 1000 	str.w	r1, [sl]
   103de:	f77f ac33 	ble.w	fc48 <_svfprintf_r+0x11c8>
   103e2:	ee1b 1a10 	vmov	r1, s22
   103e6:	aa24      	add	r2, sp, #144	; 0x90
   103e8:	4658      	mov	r0, fp
   103ea:	f001 ff73 	bl	122d4 <__ssprint_r>
   103ee:	2800      	cmp	r0, #0
   103f0:	f47e afab 	bne.w	f34a <_svfprintf_r+0x8ca>
   103f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   103f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   103fc:	e426      	b.n	fc4c <_svfprintf_r+0x11cc>
   103fe:	1c59      	adds	r1, r3, #1
   10400:	4658      	mov	r0, fp
   10402:	f7fc fcf3 	bl	cdec <_malloc_r>
   10406:	4604      	mov	r4, r0
   10408:	b350      	cbz	r0, 10460 <_svfprintf_r+0x19e0>
   1040a:	9007      	str	r0, [sp, #28]
   1040c:	e754      	b.n	102b8 <_svfprintf_r+0x1838>
   1040e:	bf00      	nop
   10410:	200018e0 	.word	0x200018e0
   10414:	200018cc 	.word	0x200018cc
   10418:	20002e58 	.word	0x20002e58
   1041c:	66666667 	.word	0x66666667
   10420:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   10424:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   10428:	f890 c00f 	ldrb.w	ip, [r0, #15]
   1042c:	4561      	cmp	r1, ip
   1042e:	4613      	mov	r3, r2
   10430:	d10a      	bne.n	10448 <_svfprintf_r+0x19c8>
   10432:	f04f 0e30 	mov.w	lr, #48	; 0x30
   10436:	f803 ec01 	strb.w	lr, [r3, #-1]
   1043a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1043c:	1e59      	subs	r1, r3, #1
   1043e:	9122      	str	r1, [sp, #136]	; 0x88
   10440:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   10444:	458c      	cmp	ip, r1
   10446:	d0f6      	beq.n	10436 <_svfprintf_r+0x19b6>
   10448:	2939      	cmp	r1, #57	; 0x39
   1044a:	bf16      	itet	ne
   1044c:	3101      	addne	r1, #1
   1044e:	7a81      	ldrbeq	r1, [r0, #10]
   10450:	b2c9      	uxtbne	r1, r1
   10452:	f803 1c01 	strb.w	r1, [r3, #-1]
   10456:	e6ae      	b.n	101b6 <_svfprintf_r+0x1736>
   10458:	2300      	movs	r3, #0
   1045a:	4690      	mov	r8, r2
   1045c:	9307      	str	r3, [sp, #28]
   1045e:	e760      	b.n	10322 <_svfprintf_r+0x18a2>
   10460:	ee1b 2a10 	vmov	r2, s22
   10464:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1046c:	8193      	strh	r3, [r2, #12]
   1046e:	f7fe bc16 	b.w	ec9e <_svfprintf_r+0x21e>
   10472:	07f5      	lsls	r5, r6, #31
   10474:	f57f adfe 	bpl.w	10074 <_svfprintf_r+0x15f4>
   10478:	e5f8      	b.n	1006c <_svfprintf_r+0x15ec>
   1047a:	9305      	str	r3, [sp, #20]
   1047c:	e6ce      	b.n	1021c <_svfprintf_r+0x179c>
   1047e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10486:	f43f ad8b 	beq.w	ffa0 <_svfprintf_r+0x1520>
   1048a:	f1c2 0201 	rsb	r2, r2, #1
   1048e:	921b      	str	r2, [sp, #108]	; 0x6c
   10490:	e587      	b.n	ffa2 <_svfprintf_r+0x1522>
   10492:	2367      	movs	r3, #103	; 0x67
   10494:	930b      	str	r3, [sp, #44]	; 0x2c
   10496:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10498:	780b      	ldrb	r3, [r1, #0]
   1049a:	2bff      	cmp	r3, #255	; 0xff
   1049c:	d079      	beq.n	10592 <_svfprintf_r+0x1b12>
   1049e:	2500      	movs	r5, #0
   104a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   104a2:	4628      	mov	r0, r5
   104a4:	e003      	b.n	104ae <_svfprintf_r+0x1a2e>
   104a6:	3001      	adds	r0, #1
   104a8:	3101      	adds	r1, #1
   104aa:	2bff      	cmp	r3, #255	; 0xff
   104ac:	d008      	beq.n	104c0 <_svfprintf_r+0x1a40>
   104ae:	4293      	cmp	r3, r2
   104b0:	da06      	bge.n	104c0 <_svfprintf_r+0x1a40>
   104b2:	1ad2      	subs	r2, r2, r3
   104b4:	784b      	ldrb	r3, [r1, #1]
   104b6:	2b00      	cmp	r3, #0
   104b8:	d1f5      	bne.n	104a6 <_svfprintf_r+0x1a26>
   104ba:	780b      	ldrb	r3, [r1, #0]
   104bc:	3501      	adds	r5, #1
   104be:	e7f4      	b.n	104aa <_svfprintf_r+0x1a2a>
   104c0:	920c      	str	r2, [sp, #48]	; 0x30
   104c2:	9113      	str	r1, [sp, #76]	; 0x4c
   104c4:	900d      	str	r0, [sp, #52]	; 0x34
   104c6:	950f      	str	r5, [sp, #60]	; 0x3c
   104c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   104ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   104cc:	9916      	ldr	r1, [sp, #88]	; 0x58
   104ce:	4413      	add	r3, r2
   104d0:	9a05      	ldr	r2, [sp, #20]
   104d2:	fb01 2303 	mla	r3, r1, r3, r2
   104d6:	9305      	str	r3, [sp, #20]
   104d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   104dc:	9302      	str	r3, [sp, #8]
   104de:	e5d5      	b.n	1008c <_svfprintf_r+0x160c>
   104e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   104e2:	18d3      	adds	r3, r2, r3
   104e4:	4419      	add	r1, r3
   104e6:	2366      	movs	r3, #102	; 0x66
   104e8:	9105      	str	r1, [sp, #20]
   104ea:	930b      	str	r3, [sp, #44]	; 0x2c
   104ec:	e72d      	b.n	1034a <_svfprintf_r+0x18ca>
   104ee:	f1c3 0301 	rsb	r3, r3, #1
   104f2:	441a      	add	r2, r3
   104f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   104f8:	9302      	str	r3, [sp, #8]
   104fa:	2367      	movs	r3, #103	; 0x67
   104fc:	9205      	str	r2, [sp, #20]
   104fe:	930b      	str	r3, [sp, #44]	; 0x2c
   10500:	e698      	b.n	10234 <_svfprintf_r+0x17b4>
   10502:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10506:	e759      	b.n	103bc <_svfprintf_r+0x193c>
   10508:	9b03      	ldr	r3, [sp, #12]
   1050a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1050e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10512:	9305      	str	r3, [sp, #20]
   10514:	e4b4      	b.n	fe80 <_svfprintf_r+0x1400>
   10516:	ee18 3a90 	vmov	r3, s17
   1051a:	2b00      	cmp	r3, #0
   1051c:	bfb4      	ite	lt
   1051e:	212d      	movlt	r1, #45	; 0x2d
   10520:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   10524:	4c25      	ldr	r4, [pc, #148]	; (105bc <_svfprintf_r+0x1b3c>)
   10526:	4b26      	ldr	r3, [pc, #152]	; (105c0 <_svfprintf_r+0x1b40>)
   10528:	bfb8      	it	lt
   1052a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1052e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10532:	f7fe bc79 	b.w	ee28 <_svfprintf_r+0x3a8>
   10536:	9b03      	ldr	r3, [sp, #12]
   10538:	9302      	str	r3, [sp, #8]
   1053a:	9305      	str	r3, [sp, #20]
   1053c:	2373      	movs	r3, #115	; 0x73
   1053e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10542:	9003      	str	r0, [sp, #12]
   10544:	900f      	str	r0, [sp, #60]	; 0x3c
   10546:	900d      	str	r0, [sp, #52]	; 0x34
   10548:	930b      	str	r3, [sp, #44]	; 0x2c
   1054a:	f7fe bc7a 	b.w	ee42 <_svfprintf_r+0x3c2>
   1054e:	2302      	movs	r3, #2
   10550:	9314      	str	r3, [sp, #80]	; 0x50
   10552:	e584      	b.n	1005e <_svfprintf_r+0x15de>
   10554:	9a03      	ldr	r2, [sp, #12]
   10556:	4313      	orrs	r3, r2
   10558:	d105      	bne.n	10566 <_svfprintf_r+0x1ae6>
   1055a:	2301      	movs	r3, #1
   1055c:	2266      	movs	r2, #102	; 0x66
   1055e:	9302      	str	r3, [sp, #8]
   10560:	920b      	str	r2, [sp, #44]	; 0x2c
   10562:	9305      	str	r3, [sp, #20]
   10564:	e666      	b.n	10234 <_svfprintf_r+0x17b4>
   10566:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10568:	3301      	adds	r3, #1
   1056a:	441a      	add	r2, r3
   1056c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10570:	9302      	str	r3, [sp, #8]
   10572:	2366      	movs	r3, #102	; 0x66
   10574:	9205      	str	r2, [sp, #20]
   10576:	930b      	str	r3, [sp, #44]	; 0x2c
   10578:	e65c      	b.n	10234 <_svfprintf_r+0x17b4>
   1057a:	9a08      	ldr	r2, [sp, #32]
   1057c:	f899 3001 	ldrb.w	r3, [r9, #1]
   10580:	4689      	mov	r9, r1
   10582:	f852 1b04 	ldr.w	r1, [r2], #4
   10586:	9208      	str	r2, [sp, #32]
   10588:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1058c:	9103      	str	r1, [sp, #12]
   1058e:	f7fe bad3 	b.w	eb38 <_svfprintf_r+0xb8>
   10592:	2300      	movs	r3, #0
   10594:	930f      	str	r3, [sp, #60]	; 0x3c
   10596:	930d      	str	r3, [sp, #52]	; 0x34
   10598:	e796      	b.n	104c8 <_svfprintf_r+0x1a48>
   1059a:	230c      	movs	r3, #12
   1059c:	f8cb 3000 	str.w	r3, [fp]
   105a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   105a4:	9304      	str	r3, [sp, #16]
   105a6:	f7fe bb81 	b.w	ecac <_svfprintf_r+0x22c>
   105aa:	ee1b 2a10 	vmov	r2, s22
   105ae:	8993      	ldrh	r3, [r2, #12]
   105b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   105b4:	8193      	strh	r3, [r2, #12]
   105b6:	f7fe bec8 	b.w	f34a <_svfprintf_r+0x8ca>
   105ba:	bf00      	nop
   105bc:	200018c4 	.word	0x200018c4
   105c0:	200018c8 	.word	0x200018c8

000105c4 <__smakebuf_r>:
   105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c8:	898b      	ldrh	r3, [r1, #12]
   105ca:	460c      	mov	r4, r1
   105cc:	0799      	lsls	r1, r3, #30
   105ce:	b096      	sub	sp, #88	; 0x58
   105d0:	d508      	bpl.n	105e4 <__smakebuf_r+0x20>
   105d2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   105d6:	2201      	movs	r2, #1
   105d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   105dc:	6023      	str	r3, [r4, #0]
   105de:	b016      	add	sp, #88	; 0x58
   105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   105e8:	2900      	cmp	r1, #0
   105ea:	4606      	mov	r6, r0
   105ec:	db25      	blt.n	1063a <__smakebuf_r+0x76>
   105ee:	466a      	mov	r2, sp
   105f0:	f000 fe34 	bl	1125c <_fstat_r>
   105f4:	2800      	cmp	r0, #0
   105f6:	db1f      	blt.n	10638 <__smakebuf_r+0x74>
   105f8:	9d01      	ldr	r5, [sp, #4]
   105fa:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   105fe:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   10602:	fab5 f585 	clz	r5, r5
   10606:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1060a:	096d      	lsrs	r5, r5, #5
   1060c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   10610:	4641      	mov	r1, r8
   10612:	4630      	mov	r0, r6
   10614:	f7fc fbea 	bl	cdec <_malloc_r>
   10618:	b1e0      	cbz	r0, 10654 <__smakebuf_r+0x90>
   1061a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1061e:	f8c4 8014 	str.w	r8, [r4, #20]
   10622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10626:	6020      	str	r0, [r4, #0]
   10628:	6120      	str	r0, [r4, #16]
   1062a:	81a3      	strh	r3, [r4, #12]
   1062c:	bb35      	cbnz	r5, 1067c <__smakebuf_r+0xb8>
   1062e:	433b      	orrs	r3, r7
   10630:	81a3      	strh	r3, [r4, #12]
   10632:	b016      	add	sp, #88	; 0x58
   10634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10638:	89a3      	ldrh	r3, [r4, #12]
   1063a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1063e:	d019      	beq.n	10674 <__smakebuf_r+0xb0>
   10640:	f04f 0840 	mov.w	r8, #64	; 0x40
   10644:	2500      	movs	r5, #0
   10646:	4641      	mov	r1, r8
   10648:	4630      	mov	r0, r6
   1064a:	462f      	mov	r7, r5
   1064c:	f7fc fbce 	bl	cdec <_malloc_r>
   10650:	2800      	cmp	r0, #0
   10652:	d1e2      	bne.n	1061a <__smakebuf_r+0x56>
   10654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10658:	059a      	lsls	r2, r3, #22
   1065a:	d4c0      	bmi.n	105de <__smakebuf_r+0x1a>
   1065c:	f023 0303 	bic.w	r3, r3, #3
   10660:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10664:	f043 0302 	orr.w	r3, r3, #2
   10668:	2101      	movs	r1, #1
   1066a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1066e:	81a3      	strh	r3, [r4, #12]
   10670:	6022      	str	r2, [r4, #0]
   10672:	e7b4      	b.n	105de <__smakebuf_r+0x1a>
   10674:	f44f 6880 	mov.w	r8, #1024	; 0x400
   10678:	462f      	mov	r7, r5
   1067a:	e7c9      	b.n	10610 <__smakebuf_r+0x4c>
   1067c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10680:	4630      	mov	r0, r6
   10682:	f000 fe01 	bl	11288 <_isatty_r>
   10686:	b910      	cbnz	r0, 1068e <__smakebuf_r+0xca>
   10688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1068c:	e7cf      	b.n	1062e <__smakebuf_r+0x6a>
   1068e:	89a3      	ldrh	r3, [r4, #12]
   10690:	f023 0303 	bic.w	r3, r3, #3
   10694:	f043 0301 	orr.w	r3, r3, #1
   10698:	b21b      	sxth	r3, r3
   1069a:	e7c8      	b.n	1062e <__smakebuf_r+0x6a>

0001069c <_putc_r>:
   1069c:	b570      	push	{r4, r5, r6, lr}
   1069e:	460e      	mov	r6, r1
   106a0:	4614      	mov	r4, r2
   106a2:	4605      	mov	r5, r0
   106a4:	b110      	cbz	r0, 106ac <_putc_r+0x10>
   106a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   106a8:	2b00      	cmp	r3, #0
   106aa:	d02f      	beq.n	1070c <_putc_r+0x70>
   106ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   106ae:	07d8      	lsls	r0, r3, #31
   106b0:	d402      	bmi.n	106b8 <_putc_r+0x1c>
   106b2:	89a3      	ldrh	r3, [r4, #12]
   106b4:	0599      	lsls	r1, r3, #22
   106b6:	d520      	bpl.n	106fa <_putc_r+0x5e>
   106b8:	68a3      	ldr	r3, [r4, #8]
   106ba:	3b01      	subs	r3, #1
   106bc:	2b00      	cmp	r3, #0
   106be:	60a3      	str	r3, [r4, #8]
   106c0:	da19      	bge.n	106f6 <_putc_r+0x5a>
   106c2:	69a2      	ldr	r2, [r4, #24]
   106c4:	4293      	cmp	r3, r2
   106c6:	db0f      	blt.n	106e8 <_putc_r+0x4c>
   106c8:	b2f0      	uxtb	r0, r6
   106ca:	280a      	cmp	r0, #10
   106cc:	d00c      	beq.n	106e8 <_putc_r+0x4c>
   106ce:	6823      	ldr	r3, [r4, #0]
   106d0:	1c5a      	adds	r2, r3, #1
   106d2:	6022      	str	r2, [r4, #0]
   106d4:	4605      	mov	r5, r0
   106d6:	701e      	strb	r6, [r3, #0]
   106d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   106da:	07da      	lsls	r2, r3, #31
   106dc:	d402      	bmi.n	106e4 <_putc_r+0x48>
   106de:	89a3      	ldrh	r3, [r4, #12]
   106e0:	059b      	lsls	r3, r3, #22
   106e2:	d50e      	bpl.n	10702 <_putc_r+0x66>
   106e4:	4628      	mov	r0, r5
   106e6:	bd70      	pop	{r4, r5, r6, pc}
   106e8:	4628      	mov	r0, r5
   106ea:	4622      	mov	r2, r4
   106ec:	4631      	mov	r1, r6
   106ee:	f000 fd47 	bl	11180 <__swbuf_r>
   106f2:	4605      	mov	r5, r0
   106f4:	e7f0      	b.n	106d8 <_putc_r+0x3c>
   106f6:	b2f0      	uxtb	r0, r6
   106f8:	e7e9      	b.n	106ce <_putc_r+0x32>
   106fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   106fc:	f7fd ff46 	bl	e58c <__retarget_lock_acquire_recursive>
   10700:	e7da      	b.n	106b8 <_putc_r+0x1c>
   10702:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10704:	f7fd ff44 	bl	e590 <__retarget_lock_release_recursive>
   10708:	4628      	mov	r0, r5
   1070a:	bd70      	pop	{r4, r5, r6, pc}
   1070c:	f7fd f8d8 	bl	d8c0 <__sinit>
   10710:	e7cc      	b.n	106ac <_putc_r+0x10>
   10712:	bf00      	nop

00010714 <_Balloc>:
   10714:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10716:	b570      	push	{r4, r5, r6, lr}
   10718:	4605      	mov	r5, r0
   1071a:	460c      	mov	r4, r1
   1071c:	b14b      	cbz	r3, 10732 <_Balloc+0x1e>
   1071e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   10722:	b180      	cbz	r0, 10746 <_Balloc+0x32>
   10724:	6802      	ldr	r2, [r0, #0]
   10726:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1072a:	2300      	movs	r3, #0
   1072c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10730:	bd70      	pop	{r4, r5, r6, pc}
   10732:	2221      	movs	r2, #33	; 0x21
   10734:	2104      	movs	r1, #4
   10736:	f000 fe73 	bl	11420 <_calloc_r>
   1073a:	4603      	mov	r3, r0
   1073c:	6468      	str	r0, [r5, #68]	; 0x44
   1073e:	2800      	cmp	r0, #0
   10740:	d1ed      	bne.n	1071e <_Balloc+0xa>
   10742:	2000      	movs	r0, #0
   10744:	bd70      	pop	{r4, r5, r6, pc}
   10746:	2101      	movs	r1, #1
   10748:	fa01 f604 	lsl.w	r6, r1, r4
   1074c:	1d72      	adds	r2, r6, #5
   1074e:	0092      	lsls	r2, r2, #2
   10750:	4628      	mov	r0, r5
   10752:	f000 fe65 	bl	11420 <_calloc_r>
   10756:	2800      	cmp	r0, #0
   10758:	d0f3      	beq.n	10742 <_Balloc+0x2e>
   1075a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   1075e:	e7e4      	b.n	1072a <_Balloc+0x16>

00010760 <_Bfree>:
   10760:	b131      	cbz	r1, 10770 <_Bfree+0x10>
   10762:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10764:	684a      	ldr	r2, [r1, #4]
   10766:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1076a:	6008      	str	r0, [r1, #0]
   1076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   10770:	4770      	bx	lr
   10772:	bf00      	nop

00010774 <__multadd>:
   10774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10778:	690e      	ldr	r6, [r1, #16]
   1077a:	4680      	mov	r8, r0
   1077c:	460f      	mov	r7, r1
   1077e:	461d      	mov	r5, r3
   10780:	f101 0e14 	add.w	lr, r1, #20
   10784:	2000      	movs	r0, #0
   10786:	f8de 1000 	ldr.w	r1, [lr]
   1078a:	b28c      	uxth	r4, r1
   1078c:	fb02 5304 	mla	r3, r2, r4, r5
   10790:	0c09      	lsrs	r1, r1, #16
   10792:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10796:	fb02 cc01 	mla	ip, r2, r1, ip
   1079a:	3001      	adds	r0, #1
   1079c:	b29c      	uxth	r4, r3
   1079e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   107a2:	4286      	cmp	r6, r0
   107a4:	f84e 4b04 	str.w	r4, [lr], #4
   107a8:	ea4f 451c 	mov.w	r5, ip, lsr #16
   107ac:	dceb      	bgt.n	10786 <__multadd+0x12>
   107ae:	b13d      	cbz	r5, 107c0 <__multadd+0x4c>
   107b0:	68bb      	ldr	r3, [r7, #8]
   107b2:	42b3      	cmp	r3, r6
   107b4:	dd07      	ble.n	107c6 <__multadd+0x52>
   107b6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   107ba:	3601      	adds	r6, #1
   107bc:	615d      	str	r5, [r3, #20]
   107be:	613e      	str	r6, [r7, #16]
   107c0:	4638      	mov	r0, r7
   107c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107c6:	6879      	ldr	r1, [r7, #4]
   107c8:	4640      	mov	r0, r8
   107ca:	3101      	adds	r1, #1
   107cc:	f7ff ffa2 	bl	10714 <_Balloc>
   107d0:	4604      	mov	r4, r0
   107d2:	b1b0      	cbz	r0, 10802 <__multadd+0x8e>
   107d4:	693a      	ldr	r2, [r7, #16]
   107d6:	3202      	adds	r2, #2
   107d8:	f107 010c 	add.w	r1, r7, #12
   107dc:	0092      	lsls	r2, r2, #2
   107de:	300c      	adds	r0, #12
   107e0:	f7f2 fbb6 	bl	2f50 <memcpy>
   107e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   107e8:	687a      	ldr	r2, [r7, #4]
   107ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   107ee:	6039      	str	r1, [r7, #0]
   107f0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   107f4:	4627      	mov	r7, r4
   107f6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   107fa:	3601      	adds	r6, #1
   107fc:	615d      	str	r5, [r3, #20]
   107fe:	613e      	str	r6, [r7, #16]
   10800:	e7de      	b.n	107c0 <__multadd+0x4c>
   10802:	4b03      	ldr	r3, [pc, #12]	; (10810 <__multadd+0x9c>)
   10804:	4803      	ldr	r0, [pc, #12]	; (10814 <__multadd+0xa0>)
   10806:	4622      	mov	r2, r4
   10808:	21ba      	movs	r1, #186	; 0xba
   1080a:	f000 fde9 	bl	113e0 <__assert_func>
   1080e:	bf00      	nop
   10810:	200016cc 	.word	0x200016cc
   10814:	200016e0 	.word	0x200016e0

00010818 <__hi0bits>:
   10818:	0c03      	lsrs	r3, r0, #16
   1081a:	041b      	lsls	r3, r3, #16
   1081c:	b9d3      	cbnz	r3, 10854 <__hi0bits+0x3c>
   1081e:	0400      	lsls	r0, r0, #16
   10820:	2310      	movs	r3, #16
   10822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   10826:	bf04      	itt	eq
   10828:	0200      	lsleq	r0, r0, #8
   1082a:	3308      	addeq	r3, #8
   1082c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   10830:	bf04      	itt	eq
   10832:	0100      	lsleq	r0, r0, #4
   10834:	3304      	addeq	r3, #4
   10836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1083a:	bf04      	itt	eq
   1083c:	0080      	lsleq	r0, r0, #2
   1083e:	3302      	addeq	r3, #2
   10840:	2800      	cmp	r0, #0
   10842:	db05      	blt.n	10850 <__hi0bits+0x38>
   10844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   10848:	f103 0301 	add.w	r3, r3, #1
   1084c:	bf08      	it	eq
   1084e:	2320      	moveq	r3, #32
   10850:	4618      	mov	r0, r3
   10852:	4770      	bx	lr
   10854:	2300      	movs	r3, #0
   10856:	e7e4      	b.n	10822 <__hi0bits+0xa>

00010858 <__lo0bits>:
   10858:	6803      	ldr	r3, [r0, #0]
   1085a:	f013 0207 	ands.w	r2, r3, #7
   1085e:	d008      	beq.n	10872 <__lo0bits+0x1a>
   10860:	07d9      	lsls	r1, r3, #31
   10862:	d41f      	bmi.n	108a4 <__lo0bits+0x4c>
   10864:	079a      	lsls	r2, r3, #30
   10866:	d522      	bpl.n	108ae <__lo0bits+0x56>
   10868:	085b      	lsrs	r3, r3, #1
   1086a:	6003      	str	r3, [r0, #0]
   1086c:	2201      	movs	r2, #1
   1086e:	4610      	mov	r0, r2
   10870:	4770      	bx	lr
   10872:	b299      	uxth	r1, r3
   10874:	b909      	cbnz	r1, 1087a <__lo0bits+0x22>
   10876:	0c1b      	lsrs	r3, r3, #16
   10878:	2210      	movs	r2, #16
   1087a:	b2d9      	uxtb	r1, r3
   1087c:	b909      	cbnz	r1, 10882 <__lo0bits+0x2a>
   1087e:	3208      	adds	r2, #8
   10880:	0a1b      	lsrs	r3, r3, #8
   10882:	0719      	lsls	r1, r3, #28
   10884:	bf04      	itt	eq
   10886:	091b      	lsreq	r3, r3, #4
   10888:	3204      	addeq	r2, #4
   1088a:	0799      	lsls	r1, r3, #30
   1088c:	bf04      	itt	eq
   1088e:	089b      	lsreq	r3, r3, #2
   10890:	3202      	addeq	r2, #2
   10892:	07d9      	lsls	r1, r3, #31
   10894:	d403      	bmi.n	1089e <__lo0bits+0x46>
   10896:	085b      	lsrs	r3, r3, #1
   10898:	f102 0201 	add.w	r2, r2, #1
   1089c:	d005      	beq.n	108aa <__lo0bits+0x52>
   1089e:	6003      	str	r3, [r0, #0]
   108a0:	4610      	mov	r0, r2
   108a2:	4770      	bx	lr
   108a4:	2200      	movs	r2, #0
   108a6:	4610      	mov	r0, r2
   108a8:	4770      	bx	lr
   108aa:	2220      	movs	r2, #32
   108ac:	e7df      	b.n	1086e <__lo0bits+0x16>
   108ae:	089b      	lsrs	r3, r3, #2
   108b0:	2202      	movs	r2, #2
   108b2:	6003      	str	r3, [r0, #0]
   108b4:	4610      	mov	r0, r2
   108b6:	4770      	bx	lr

000108b8 <__i2b>:
   108b8:	b538      	push	{r3, r4, r5, lr}
   108ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
   108bc:	4604      	mov	r4, r0
   108be:	460d      	mov	r5, r1
   108c0:	b14b      	cbz	r3, 108d6 <__i2b+0x1e>
   108c2:	6858      	ldr	r0, [r3, #4]
   108c4:	b1b0      	cbz	r0, 108f4 <__i2b+0x3c>
   108c6:	6802      	ldr	r2, [r0, #0]
   108c8:	605a      	str	r2, [r3, #4]
   108ca:	2200      	movs	r2, #0
   108cc:	2301      	movs	r3, #1
   108ce:	e9c0 3504 	strd	r3, r5, [r0, #16]
   108d2:	60c2      	str	r2, [r0, #12]
   108d4:	bd38      	pop	{r3, r4, r5, pc}
   108d6:	2221      	movs	r2, #33	; 0x21
   108d8:	2104      	movs	r1, #4
   108da:	f000 fda1 	bl	11420 <_calloc_r>
   108de:	4603      	mov	r3, r0
   108e0:	6460      	str	r0, [r4, #68]	; 0x44
   108e2:	2800      	cmp	r0, #0
   108e4:	d1ed      	bne.n	108c2 <__i2b+0xa>
   108e6:	4b09      	ldr	r3, [pc, #36]	; (1090c <__i2b+0x54>)
   108e8:	4809      	ldr	r0, [pc, #36]	; (10910 <__i2b+0x58>)
   108ea:	2200      	movs	r2, #0
   108ec:	f240 1145 	movw	r1, #325	; 0x145
   108f0:	f000 fd76 	bl	113e0 <__assert_func>
   108f4:	221c      	movs	r2, #28
   108f6:	2101      	movs	r1, #1
   108f8:	4620      	mov	r0, r4
   108fa:	f000 fd91 	bl	11420 <_calloc_r>
   108fe:	2800      	cmp	r0, #0
   10900:	d0f1      	beq.n	108e6 <__i2b+0x2e>
   10902:	2201      	movs	r2, #1
   10904:	2302      	movs	r3, #2
   10906:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1090a:	e7de      	b.n	108ca <__i2b+0x12>
   1090c:	200016cc 	.word	0x200016cc
   10910:	200016e0 	.word	0x200016e0

00010914 <__multiply>:
   10914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10918:	690e      	ldr	r6, [r1, #16]
   1091a:	6915      	ldr	r5, [r2, #16]
   1091c:	42ae      	cmp	r6, r5
   1091e:	b085      	sub	sp, #20
   10920:	4688      	mov	r8, r1
   10922:	4614      	mov	r4, r2
   10924:	db05      	blt.n	10932 <__multiply+0x1e>
   10926:	462a      	mov	r2, r5
   10928:	4623      	mov	r3, r4
   1092a:	4635      	mov	r5, r6
   1092c:	460c      	mov	r4, r1
   1092e:	4616      	mov	r6, r2
   10930:	4698      	mov	r8, r3
   10932:	68a3      	ldr	r3, [r4, #8]
   10934:	6861      	ldr	r1, [r4, #4]
   10936:	19af      	adds	r7, r5, r6
   10938:	42bb      	cmp	r3, r7
   1093a:	bfb8      	it	lt
   1093c:	3101      	addlt	r1, #1
   1093e:	f7ff fee9 	bl	10714 <_Balloc>
   10942:	9001      	str	r0, [sp, #4]
   10944:	2800      	cmp	r0, #0
   10946:	f000 8087 	beq.w	10a58 <__multiply+0x144>
   1094a:	9b01      	ldr	r3, [sp, #4]
   1094c:	f103 0914 	add.w	r9, r3, #20
   10950:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   10954:	45d1      	cmp	r9, sl
   10956:	d205      	bcs.n	10964 <__multiply+0x50>
   10958:	464b      	mov	r3, r9
   1095a:	2200      	movs	r2, #0
   1095c:	f843 2b04 	str.w	r2, [r3], #4
   10960:	459a      	cmp	sl, r3
   10962:	d8fb      	bhi.n	1095c <__multiply+0x48>
   10964:	f108 0814 	add.w	r8, r8, #20
   10968:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   1096c:	f104 0314 	add.w	r3, r4, #20
   10970:	45d8      	cmp	r8, fp
   10972:	461a      	mov	r2, r3
   10974:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   10978:	d25f      	bcs.n	10a3a <__multiply+0x126>
   1097a:	1b2b      	subs	r3, r5, r4
   1097c:	3b15      	subs	r3, #21
   1097e:	f023 0303 	bic.w	r3, r3, #3
   10982:	3304      	adds	r3, #4
   10984:	3415      	adds	r4, #21
   10986:	42a5      	cmp	r5, r4
   10988:	bf38      	it	cc
   1098a:	2304      	movcc	r3, #4
   1098c:	e9cd a702 	strd	sl, r7, [sp, #8]
   10990:	46ac      	mov	ip, r5
   10992:	461f      	mov	r7, r3
   10994:	4692      	mov	sl, r2
   10996:	e005      	b.n	109a4 <__multiply+0x90>
   10998:	0c09      	lsrs	r1, r1, #16
   1099a:	d129      	bne.n	109f0 <__multiply+0xdc>
   1099c:	45c3      	cmp	fp, r8
   1099e:	f109 0904 	add.w	r9, r9, #4
   109a2:	d948      	bls.n	10a36 <__multiply+0x122>
   109a4:	f858 1b04 	ldr.w	r1, [r8], #4
   109a8:	b28d      	uxth	r5, r1
   109aa:	2d00      	cmp	r5, #0
   109ac:	d0f4      	beq.n	10998 <__multiply+0x84>
   109ae:	4656      	mov	r6, sl
   109b0:	464c      	mov	r4, r9
   109b2:	2300      	movs	r3, #0
   109b4:	f856 1b04 	ldr.w	r1, [r6], #4
   109b8:	6822      	ldr	r2, [r4, #0]
   109ba:	fa1f fe81 	uxth.w	lr, r1
   109be:	b290      	uxth	r0, r2
   109c0:	0c09      	lsrs	r1, r1, #16
   109c2:	fb05 000e 	mla	r0, r5, lr, r0
   109c6:	0c12      	lsrs	r2, r2, #16
   109c8:	4403      	add	r3, r0
   109ca:	fb05 2201 	mla	r2, r5, r1, r2
   109ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   109d2:	b29b      	uxth	r3, r3
   109d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   109d8:	45b4      	cmp	ip, r6
   109da:	f844 3b04 	str.w	r3, [r4], #4
   109de:	ea4f 4312 	mov.w	r3, r2, lsr #16
   109e2:	d8e7      	bhi.n	109b4 <__multiply+0xa0>
   109e4:	f849 3007 	str.w	r3, [r9, r7]
   109e8:	f858 1c04 	ldr.w	r1, [r8, #-4]
   109ec:	0c09      	lsrs	r1, r1, #16
   109ee:	d0d5      	beq.n	1099c <__multiply+0x88>
   109f0:	f8d9 3000 	ldr.w	r3, [r9]
   109f4:	4650      	mov	r0, sl
   109f6:	461a      	mov	r2, r3
   109f8:	464c      	mov	r4, r9
   109fa:	2600      	movs	r6, #0
   109fc:	8805      	ldrh	r5, [r0, #0]
   109fe:	0c12      	lsrs	r2, r2, #16
   10a00:	fb01 2205 	mla	r2, r1, r5, r2
   10a04:	4416      	add	r6, r2
   10a06:	b29b      	uxth	r3, r3
   10a08:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   10a0c:	f844 3b04 	str.w	r3, [r4], #4
   10a10:	f850 5b04 	ldr.w	r5, [r0], #4
   10a14:	6822      	ldr	r2, [r4, #0]
   10a16:	0c2d      	lsrs	r5, r5, #16
   10a18:	b293      	uxth	r3, r2
   10a1a:	fb01 3305 	mla	r3, r1, r5, r3
   10a1e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   10a22:	4584      	cmp	ip, r0
   10a24:	ea4f 4613 	mov.w	r6, r3, lsr #16
   10a28:	d8e8      	bhi.n	109fc <__multiply+0xe8>
   10a2a:	45c3      	cmp	fp, r8
   10a2c:	f849 3007 	str.w	r3, [r9, r7]
   10a30:	f109 0904 	add.w	r9, r9, #4
   10a34:	d8b6      	bhi.n	109a4 <__multiply+0x90>
   10a36:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   10a3a:	2f00      	cmp	r7, #0
   10a3c:	dc02      	bgt.n	10a44 <__multiply+0x130>
   10a3e:	e005      	b.n	10a4c <__multiply+0x138>
   10a40:	3f01      	subs	r7, #1
   10a42:	d003      	beq.n	10a4c <__multiply+0x138>
   10a44:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   10a48:	2b00      	cmp	r3, #0
   10a4a:	d0f9      	beq.n	10a40 <__multiply+0x12c>
   10a4c:	9b01      	ldr	r3, [sp, #4]
   10a4e:	4618      	mov	r0, r3
   10a50:	611f      	str	r7, [r3, #16]
   10a52:	b005      	add	sp, #20
   10a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a58:	4b03      	ldr	r3, [pc, #12]	; (10a68 <__multiply+0x154>)
   10a5a:	4804      	ldr	r0, [pc, #16]	; (10a6c <__multiply+0x158>)
   10a5c:	9a01      	ldr	r2, [sp, #4]
   10a5e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   10a62:	f000 fcbd 	bl	113e0 <__assert_func>
   10a66:	bf00      	nop
   10a68:	200016cc 	.word	0x200016cc
   10a6c:	200016e0 	.word	0x200016e0

00010a70 <__pow5mult>:
   10a70:	f012 0303 	ands.w	r3, r2, #3
   10a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a78:	4614      	mov	r4, r2
   10a7a:	4606      	mov	r6, r0
   10a7c:	d132      	bne.n	10ae4 <__pow5mult+0x74>
   10a7e:	460d      	mov	r5, r1
   10a80:	10a4      	asrs	r4, r4, #2
   10a82:	d020      	beq.n	10ac6 <__pow5mult+0x56>
   10a84:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   10a88:	f1b8 0f00 	cmp.w	r8, #0
   10a8c:	d033      	beq.n	10af6 <__pow5mult+0x86>
   10a8e:	07e3      	lsls	r3, r4, #31
   10a90:	f04f 0700 	mov.w	r7, #0
   10a94:	d407      	bmi.n	10aa6 <__pow5mult+0x36>
   10a96:	1064      	asrs	r4, r4, #1
   10a98:	d015      	beq.n	10ac6 <__pow5mult+0x56>
   10a9a:	f8d8 0000 	ldr.w	r0, [r8]
   10a9e:	b1a8      	cbz	r0, 10acc <__pow5mult+0x5c>
   10aa0:	4680      	mov	r8, r0
   10aa2:	07e3      	lsls	r3, r4, #31
   10aa4:	d5f7      	bpl.n	10a96 <__pow5mult+0x26>
   10aa6:	4642      	mov	r2, r8
   10aa8:	4629      	mov	r1, r5
   10aaa:	4630      	mov	r0, r6
   10aac:	f7ff ff32 	bl	10914 <__multiply>
   10ab0:	b1b5      	cbz	r5, 10ae0 <__pow5mult+0x70>
   10ab2:	6869      	ldr	r1, [r5, #4]
   10ab4:	6c73      	ldr	r3, [r6, #68]	; 0x44
   10ab6:	1064      	asrs	r4, r4, #1
   10ab8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   10abc:	602a      	str	r2, [r5, #0]
   10abe:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   10ac2:	4605      	mov	r5, r0
   10ac4:	d1e9      	bne.n	10a9a <__pow5mult+0x2a>
   10ac6:	4628      	mov	r0, r5
   10ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10acc:	4642      	mov	r2, r8
   10ace:	4641      	mov	r1, r8
   10ad0:	4630      	mov	r0, r6
   10ad2:	f7ff ff1f 	bl	10914 <__multiply>
   10ad6:	f8c8 0000 	str.w	r0, [r8]
   10ada:	6007      	str	r7, [r0, #0]
   10adc:	4680      	mov	r8, r0
   10ade:	e7e0      	b.n	10aa2 <__pow5mult+0x32>
   10ae0:	4605      	mov	r5, r0
   10ae2:	e7d8      	b.n	10a96 <__pow5mult+0x26>
   10ae4:	3b01      	subs	r3, #1
   10ae6:	4a0f      	ldr	r2, [pc, #60]	; (10b24 <__pow5mult+0xb4>)
   10ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   10aec:	2300      	movs	r3, #0
   10aee:	f7ff fe41 	bl	10774 <__multadd>
   10af2:	4605      	mov	r5, r0
   10af4:	e7c4      	b.n	10a80 <__pow5mult+0x10>
   10af6:	2101      	movs	r1, #1
   10af8:	4630      	mov	r0, r6
   10afa:	f7ff fe0b 	bl	10714 <_Balloc>
   10afe:	4680      	mov	r8, r0
   10b00:	b140      	cbz	r0, 10b14 <__pow5mult+0xa4>
   10b02:	2301      	movs	r3, #1
   10b04:	f240 2271 	movw	r2, #625	; 0x271
   10b08:	e9c0 3204 	strd	r3, r2, [r0, #16]
   10b0c:	2300      	movs	r3, #0
   10b0e:	6430      	str	r0, [r6, #64]	; 0x40
   10b10:	6003      	str	r3, [r0, #0]
   10b12:	e7bc      	b.n	10a8e <__pow5mult+0x1e>
   10b14:	4b04      	ldr	r3, [pc, #16]	; (10b28 <__pow5mult+0xb8>)
   10b16:	4805      	ldr	r0, [pc, #20]	; (10b2c <__pow5mult+0xbc>)
   10b18:	4642      	mov	r2, r8
   10b1a:	f240 1145 	movw	r1, #325	; 0x145
   10b1e:	f000 fc5f 	bl	113e0 <__assert_func>
   10b22:	bf00      	nop
   10b24:	20002740 	.word	0x20002740
   10b28:	200016cc 	.word	0x200016cc
   10b2c:	200016e0 	.word	0x200016e0

00010b30 <__lshift>:
   10b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b34:	460d      	mov	r5, r1
   10b36:	4614      	mov	r4, r2
   10b38:	692f      	ldr	r7, [r5, #16]
   10b3a:	68ab      	ldr	r3, [r5, #8]
   10b3c:	6849      	ldr	r1, [r1, #4]
   10b3e:	eb07 1762 	add.w	r7, r7, r2, asr #5
   10b42:	1c7e      	adds	r6, r7, #1
   10b44:	429e      	cmp	r6, r3
   10b46:	4680      	mov	r8, r0
   10b48:	ea4f 1962 	mov.w	r9, r2, asr #5
   10b4c:	dd04      	ble.n	10b58 <__lshift+0x28>
   10b4e:	005b      	lsls	r3, r3, #1
   10b50:	429e      	cmp	r6, r3
   10b52:	f101 0101 	add.w	r1, r1, #1
   10b56:	dcfa      	bgt.n	10b4e <__lshift+0x1e>
   10b58:	4640      	mov	r0, r8
   10b5a:	f7ff fddb 	bl	10714 <_Balloc>
   10b5e:	4684      	mov	ip, r0
   10b60:	2800      	cmp	r0, #0
   10b62:	d052      	beq.n	10c0a <__lshift+0xda>
   10b64:	f1b9 0f00 	cmp.w	r9, #0
   10b68:	f100 0214 	add.w	r2, r0, #20
   10b6c:	dd0e      	ble.n	10b8c <__lshift+0x5c>
   10b6e:	f109 0105 	add.w	r1, r9, #5
   10b72:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   10b76:	4613      	mov	r3, r2
   10b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10b7c:	2000      	movs	r0, #0
   10b7e:	f843 0b04 	str.w	r0, [r3], #4
   10b82:	428b      	cmp	r3, r1
   10b84:	d1fb      	bne.n	10b7e <__lshift+0x4e>
   10b86:	f1ae 0314 	sub.w	r3, lr, #20
   10b8a:	441a      	add	r2, r3
   10b8c:	6929      	ldr	r1, [r5, #16]
   10b8e:	f105 0314 	add.w	r3, r5, #20
   10b92:	f014 0e1f 	ands.w	lr, r4, #31
   10b96:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10b9a:	d02e      	beq.n	10bfa <__lshift+0xca>
   10b9c:	f1ce 0920 	rsb	r9, lr, #32
   10ba0:	4610      	mov	r0, r2
   10ba2:	f04f 0a00 	mov.w	sl, #0
   10ba6:	681c      	ldr	r4, [r3, #0]
   10ba8:	fa04 f40e 	lsl.w	r4, r4, lr
   10bac:	ea44 040a 	orr.w	r4, r4, sl
   10bb0:	f840 4b04 	str.w	r4, [r0], #4
   10bb4:	f853 4b04 	ldr.w	r4, [r3], #4
   10bb8:	4299      	cmp	r1, r3
   10bba:	fa24 fa09 	lsr.w	sl, r4, r9
   10bbe:	d8f2      	bhi.n	10ba6 <__lshift+0x76>
   10bc0:	1b4b      	subs	r3, r1, r5
   10bc2:	3b15      	subs	r3, #21
   10bc4:	f023 0303 	bic.w	r3, r3, #3
   10bc8:	3304      	adds	r3, #4
   10bca:	f105 0015 	add.w	r0, r5, #21
   10bce:	4281      	cmp	r1, r0
   10bd0:	bf38      	it	cc
   10bd2:	2304      	movcc	r3, #4
   10bd4:	f1ba 0f00 	cmp.w	sl, #0
   10bd8:	bf18      	it	ne
   10bda:	4637      	movne	r7, r6
   10bdc:	f842 a003 	str.w	sl, [r2, r3]
   10be0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   10be4:	686a      	ldr	r2, [r5, #4]
   10be6:	f8cc 7010 	str.w	r7, [ip, #16]
   10bea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10bee:	6029      	str	r1, [r5, #0]
   10bf0:	4660      	mov	r0, ip
   10bf2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   10bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bfa:	3a04      	subs	r2, #4
   10bfc:	f853 0b04 	ldr.w	r0, [r3], #4
   10c00:	f842 0f04 	str.w	r0, [r2, #4]!
   10c04:	4299      	cmp	r1, r3
   10c06:	d8f9      	bhi.n	10bfc <__lshift+0xcc>
   10c08:	e7ea      	b.n	10be0 <__lshift+0xb0>
   10c0a:	4b03      	ldr	r3, [pc, #12]	; (10c18 <__lshift+0xe8>)
   10c0c:	4803      	ldr	r0, [pc, #12]	; (10c1c <__lshift+0xec>)
   10c0e:	4662      	mov	r2, ip
   10c10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   10c14:	f000 fbe4 	bl	113e0 <__assert_func>
   10c18:	200016cc 	.word	0x200016cc
   10c1c:	200016e0 	.word	0x200016e0

00010c20 <__mcmp>:
   10c20:	690b      	ldr	r3, [r1, #16]
   10c22:	4684      	mov	ip, r0
   10c24:	6900      	ldr	r0, [r0, #16]
   10c26:	1ac0      	subs	r0, r0, r3
   10c28:	d116      	bne.n	10c58 <__mcmp+0x38>
   10c2a:	f10c 0c14 	add.w	ip, ip, #20
   10c2e:	3114      	adds	r1, #20
   10c30:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   10c34:	b410      	push	{r4}
   10c36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   10c3a:	e001      	b.n	10c40 <__mcmp+0x20>
   10c3c:	4594      	cmp	ip, r2
   10c3e:	d208      	bcs.n	10c52 <__mcmp+0x32>
   10c40:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   10c44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   10c48:	428c      	cmp	r4, r1
   10c4a:	d0f7      	beq.n	10c3c <__mcmp+0x1c>
   10c4c:	d205      	bcs.n	10c5a <__mcmp+0x3a>
   10c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10c52:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c56:	4770      	bx	lr
   10c58:	4770      	bx	lr
   10c5a:	2001      	movs	r0, #1
   10c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c60:	4770      	bx	lr
   10c62:	bf00      	nop

00010c64 <__mdiff>:
   10c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c68:	690f      	ldr	r7, [r1, #16]
   10c6a:	6913      	ldr	r3, [r2, #16]
   10c6c:	1aff      	subs	r7, r7, r3
   10c6e:	2f00      	cmp	r7, #0
   10c70:	460e      	mov	r6, r1
   10c72:	4690      	mov	r8, r2
   10c74:	d17f      	bne.n	10d76 <__mdiff+0x112>
   10c76:	f101 0514 	add.w	r5, r1, #20
   10c7a:	3214      	adds	r2, #20
   10c7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   10c80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   10c84:	e001      	b.n	10c8a <__mdiff+0x26>
   10c86:	429d      	cmp	r5, r3
   10c88:	d278      	bcs.n	10d7c <__mdiff+0x118>
   10c8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   10c8e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   10c92:	42a1      	cmp	r1, r4
   10c94:	d0f7      	beq.n	10c86 <__mdiff+0x22>
   10c96:	d369      	bcc.n	10d6c <__mdiff+0x108>
   10c98:	6871      	ldr	r1, [r6, #4]
   10c9a:	f7ff fd3b 	bl	10714 <_Balloc>
   10c9e:	4681      	mov	r9, r0
   10ca0:	2800      	cmp	r0, #0
   10ca2:	d077      	beq.n	10d94 <__mdiff+0x130>
   10ca4:	6935      	ldr	r5, [r6, #16]
   10ca6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   10caa:	60c7      	str	r7, [r0, #12]
   10cac:	f108 0e14 	add.w	lr, r8, #20
   10cb0:	f106 0014 	add.w	r0, r6, #20
   10cb4:	f109 0a14 	add.w	sl, r9, #20
   10cb8:	f106 0110 	add.w	r1, r6, #16
   10cbc:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   10cc0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   10cc4:	4656      	mov	r6, sl
   10cc6:	f04f 0c00 	mov.w	ip, #0
   10cca:	f85e 4b04 	ldr.w	r4, [lr], #4
   10cce:	f851 bf04 	ldr.w	fp, [r1, #4]!
   10cd2:	b2a3      	uxth	r3, r4
   10cd4:	fa1c fc8b 	uxtah	ip, ip, fp
   10cd8:	ebac 0303 	sub.w	r3, ip, r3
   10cdc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   10ce0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   10ce4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   10ce8:	b29b      	uxth	r3, r3
   10cea:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   10cee:	4572      	cmp	r2, lr
   10cf0:	f846 3b04 	str.w	r3, [r6], #4
   10cf4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   10cf8:	d8e7      	bhi.n	10cca <__mdiff+0x66>
   10cfa:	eba2 0108 	sub.w	r1, r2, r8
   10cfe:	3915      	subs	r1, #21
   10d00:	f108 0815 	add.w	r8, r8, #21
   10d04:	4542      	cmp	r2, r8
   10d06:	f021 0403 	bic.w	r4, r1, #3
   10d0a:	f104 0404 	add.w	r4, r4, #4
   10d0e:	bf38      	it	cc
   10d10:	2404      	movcc	r4, #4
   10d12:	4420      	add	r0, r4
   10d14:	f021 0203 	bic.w	r2, r1, #3
   10d18:	bf38      	it	cc
   10d1a:	2200      	movcc	r2, #0
   10d1c:	4287      	cmp	r7, r0
   10d1e:	4452      	add	r2, sl
   10d20:	4454      	add	r4, sl
   10d22:	d918      	bls.n	10d56 <__mdiff+0xf2>
   10d24:	4626      	mov	r6, r4
   10d26:	4601      	mov	r1, r0
   10d28:	f851 3b04 	ldr.w	r3, [r1], #4
   10d2c:	fa1c fc83 	uxtah	ip, ip, r3
   10d30:	ea4f 422c 	mov.w	r2, ip, asr #16
   10d34:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   10d38:	fa1f fc8c 	uxth.w	ip, ip
   10d3c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   10d40:	428f      	cmp	r7, r1
   10d42:	f846 3b04 	str.w	r3, [r6], #4
   10d46:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10d4a:	d8ed      	bhi.n	10d28 <__mdiff+0xc4>
   10d4c:	3f01      	subs	r7, #1
   10d4e:	1a3f      	subs	r7, r7, r0
   10d50:	f027 0703 	bic.w	r7, r7, #3
   10d54:	19e2      	adds	r2, r4, r7
   10d56:	b923      	cbnz	r3, 10d62 <__mdiff+0xfe>
   10d58:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10d5c:	3d01      	subs	r5, #1
   10d5e:	2b00      	cmp	r3, #0
   10d60:	d0fa      	beq.n	10d58 <__mdiff+0xf4>
   10d62:	f8c9 5010 	str.w	r5, [r9, #16]
   10d66:	4648      	mov	r0, r9
   10d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d6c:	4633      	mov	r3, r6
   10d6e:	2701      	movs	r7, #1
   10d70:	4646      	mov	r6, r8
   10d72:	4698      	mov	r8, r3
   10d74:	e790      	b.n	10c98 <__mdiff+0x34>
   10d76:	dbf9      	blt.n	10d6c <__mdiff+0x108>
   10d78:	2700      	movs	r7, #0
   10d7a:	e78d      	b.n	10c98 <__mdiff+0x34>
   10d7c:	2100      	movs	r1, #0
   10d7e:	f7ff fcc9 	bl	10714 <_Balloc>
   10d82:	4681      	mov	r9, r0
   10d84:	b168      	cbz	r0, 10da2 <__mdiff+0x13e>
   10d86:	2201      	movs	r2, #1
   10d88:	2300      	movs	r3, #0
   10d8a:	e9c9 2304 	strd	r2, r3, [r9, #16]
   10d8e:	4648      	mov	r0, r9
   10d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d94:	4b06      	ldr	r3, [pc, #24]	; (10db0 <__mdiff+0x14c>)
   10d96:	4807      	ldr	r0, [pc, #28]	; (10db4 <__mdiff+0x150>)
   10d98:	464a      	mov	r2, r9
   10d9a:	f240 2145 	movw	r1, #581	; 0x245
   10d9e:	f000 fb1f 	bl	113e0 <__assert_func>
   10da2:	4b03      	ldr	r3, [pc, #12]	; (10db0 <__mdiff+0x14c>)
   10da4:	4803      	ldr	r0, [pc, #12]	; (10db4 <__mdiff+0x150>)
   10da6:	464a      	mov	r2, r9
   10da8:	f240 2137 	movw	r1, #567	; 0x237
   10dac:	f000 fb18 	bl	113e0 <__assert_func>
   10db0:	200016cc 	.word	0x200016cc
   10db4:	200016e0 	.word	0x200016e0

00010db8 <__d2b>:
   10db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10dbc:	4688      	mov	r8, r1
   10dbe:	b083      	sub	sp, #12
   10dc0:	2101      	movs	r1, #1
   10dc2:	ec57 6b10 	vmov	r6, r7, d0
   10dc6:	4615      	mov	r5, r2
   10dc8:	f7ff fca4 	bl	10714 <_Balloc>
   10dcc:	4604      	mov	r4, r0
   10dce:	2800      	cmp	r0, #0
   10dd0:	d051      	beq.n	10e76 <__d2b+0xbe>
   10dd2:	f3c7 590a 	ubfx	r9, r7, #20, #11
   10dd6:	f3c7 0313 	ubfx	r3, r7, #0, #20
   10dda:	f1b9 0f00 	cmp.w	r9, #0
   10dde:	d001      	beq.n	10de4 <__d2b+0x2c>
   10de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10de4:	2e00      	cmp	r6, #0
   10de6:	9301      	str	r3, [sp, #4]
   10de8:	d118      	bne.n	10e1c <__d2b+0x64>
   10dea:	a801      	add	r0, sp, #4
   10dec:	f7ff fd34 	bl	10858 <__lo0bits>
   10df0:	9a01      	ldr	r2, [sp, #4]
   10df2:	6162      	str	r2, [r4, #20]
   10df4:	2201      	movs	r2, #1
   10df6:	f100 0320 	add.w	r3, r0, #32
   10dfa:	6122      	str	r2, [r4, #16]
   10dfc:	f1b9 0f00 	cmp.w	r9, #0
   10e00:	d025      	beq.n	10e4e <__d2b+0x96>
   10e02:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   10e06:	eb09 0203 	add.w	r2, r9, r3
   10e0a:	4620      	mov	r0, r4
   10e0c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   10e10:	f8c8 2000 	str.w	r2, [r8]
   10e14:	602b      	str	r3, [r5, #0]
   10e16:	b003      	add	sp, #12
   10e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10e1c:	4668      	mov	r0, sp
   10e1e:	9600      	str	r6, [sp, #0]
   10e20:	f7ff fd1a 	bl	10858 <__lo0bits>
   10e24:	4603      	mov	r3, r0
   10e26:	b310      	cbz	r0, 10e6e <__d2b+0xb6>
   10e28:	e9dd 0200 	ldrd	r0, r2, [sp]
   10e2c:	f1c3 0120 	rsb	r1, r3, #32
   10e30:	fa02 f101 	lsl.w	r1, r2, r1
   10e34:	4301      	orrs	r1, r0
   10e36:	40da      	lsrs	r2, r3
   10e38:	6161      	str	r1, [r4, #20]
   10e3a:	9201      	str	r2, [sp, #4]
   10e3c:	2a00      	cmp	r2, #0
   10e3e:	61a2      	str	r2, [r4, #24]
   10e40:	bf14      	ite	ne
   10e42:	2202      	movne	r2, #2
   10e44:	2201      	moveq	r2, #1
   10e46:	6122      	str	r2, [r4, #16]
   10e48:	f1b9 0f00 	cmp.w	r9, #0
   10e4c:	d1d9      	bne.n	10e02 <__d2b+0x4a>
   10e4e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   10e52:	f8c8 3000 	str.w	r3, [r8]
   10e56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   10e5a:	6918      	ldr	r0, [r3, #16]
   10e5c:	f7ff fcdc 	bl	10818 <__hi0bits>
   10e60:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   10e64:	4620      	mov	r0, r4
   10e66:	602b      	str	r3, [r5, #0]
   10e68:	b003      	add	sp, #12
   10e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10e6e:	9a00      	ldr	r2, [sp, #0]
   10e70:	6162      	str	r2, [r4, #20]
   10e72:	9a01      	ldr	r2, [sp, #4]
   10e74:	e7e2      	b.n	10e3c <__d2b+0x84>
   10e76:	4b03      	ldr	r3, [pc, #12]	; (10e84 <__d2b+0xcc>)
   10e78:	4803      	ldr	r0, [pc, #12]	; (10e88 <__d2b+0xd0>)
   10e7a:	4622      	mov	r2, r4
   10e7c:	f240 310f 	movw	r1, #783	; 0x30f
   10e80:	f000 faae 	bl	113e0 <__assert_func>
   10e84:	200016cc 	.word	0x200016cc
   10e88:	200016e0 	.word	0x200016e0

00010e8c <_fclose_r>:
   10e8c:	b570      	push	{r4, r5, r6, lr}
   10e8e:	2900      	cmp	r1, #0
   10e90:	d04b      	beq.n	10f2a <_fclose_r+0x9e>
   10e92:	4606      	mov	r6, r0
   10e94:	460c      	mov	r4, r1
   10e96:	b110      	cbz	r0, 10e9e <_fclose_r+0x12>
   10e98:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10e9a:	2b00      	cmp	r3, #0
   10e9c:	d048      	beq.n	10f30 <_fclose_r+0xa4>
   10e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10ea0:	07d8      	lsls	r0, r3, #31
   10ea2:	d534      	bpl.n	10f0e <_fclose_r+0x82>
   10ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ea8:	2b00      	cmp	r3, #0
   10eaa:	d03e      	beq.n	10f2a <_fclose_r+0x9e>
   10eac:	4621      	mov	r1, r4
   10eae:	4630      	mov	r0, r6
   10eb0:	f000 f850 	bl	10f54 <__sflush_r>
   10eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10eb6:	4605      	mov	r5, r0
   10eb8:	b133      	cbz	r3, 10ec8 <_fclose_r+0x3c>
   10eba:	69e1      	ldr	r1, [r4, #28]
   10ebc:	4630      	mov	r0, r6
   10ebe:	4798      	blx	r3
   10ec0:	2800      	cmp	r0, #0
   10ec2:	bfb8      	it	lt
   10ec4:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   10ec8:	89a3      	ldrh	r3, [r4, #12]
   10eca:	061a      	lsls	r2, r3, #24
   10ecc:	d43c      	bmi.n	10f48 <_fclose_r+0xbc>
   10ece:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ed0:	b141      	cbz	r1, 10ee4 <_fclose_r+0x58>
   10ed2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10ed6:	4299      	cmp	r1, r3
   10ed8:	d002      	beq.n	10ee0 <_fclose_r+0x54>
   10eda:	4630      	mov	r0, r6
   10edc:	f7fd fcb2 	bl	e844 <_free_r>
   10ee0:	2300      	movs	r3, #0
   10ee2:	6323      	str	r3, [r4, #48]	; 0x30
   10ee4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10ee6:	b121      	cbz	r1, 10ef2 <_fclose_r+0x66>
   10ee8:	4630      	mov	r0, r6
   10eea:	f7fd fcab 	bl	e844 <_free_r>
   10eee:	2300      	movs	r3, #0
   10ef0:	6463      	str	r3, [r4, #68]	; 0x44
   10ef2:	f7fc fd03 	bl	d8fc <__sfp_lock_acquire>
   10ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10ef8:	2200      	movs	r2, #0
   10efa:	07db      	lsls	r3, r3, #31
   10efc:	81a2      	strh	r2, [r4, #12]
   10efe:	d51f      	bpl.n	10f40 <_fclose_r+0xb4>
   10f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10f02:	f7fd fb41 	bl	e588 <__retarget_lock_close_recursive>
   10f06:	f7fc fcff 	bl	d908 <__sfp_lock_release>
   10f0a:	4628      	mov	r0, r5
   10f0c:	bd70      	pop	{r4, r5, r6, pc}
   10f0e:	89a3      	ldrh	r3, [r4, #12]
   10f10:	0599      	lsls	r1, r3, #22
   10f12:	d4cb      	bmi.n	10eac <_fclose_r+0x20>
   10f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10f16:	f7fd fb39 	bl	e58c <__retarget_lock_acquire_recursive>
   10f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10f1e:	2b00      	cmp	r3, #0
   10f20:	d1c4      	bne.n	10eac <_fclose_r+0x20>
   10f22:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10f24:	f015 0501 	ands.w	r5, r5, #1
   10f28:	d005      	beq.n	10f36 <_fclose_r+0xaa>
   10f2a:	2500      	movs	r5, #0
   10f2c:	4628      	mov	r0, r5
   10f2e:	bd70      	pop	{r4, r5, r6, pc}
   10f30:	f7fc fcc6 	bl	d8c0 <__sinit>
   10f34:	e7b3      	b.n	10e9e <_fclose_r+0x12>
   10f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10f38:	f7fd fb2a 	bl	e590 <__retarget_lock_release_recursive>
   10f3c:	4628      	mov	r0, r5
   10f3e:	bd70      	pop	{r4, r5, r6, pc}
   10f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10f42:	f7fd fb25 	bl	e590 <__retarget_lock_release_recursive>
   10f46:	e7db      	b.n	10f00 <_fclose_r+0x74>
   10f48:	6921      	ldr	r1, [r4, #16]
   10f4a:	4630      	mov	r0, r6
   10f4c:	f7fd fc7a 	bl	e844 <_free_r>
   10f50:	e7bd      	b.n	10ece <_fclose_r+0x42>
   10f52:	bf00      	nop

00010f54 <__sflush_r>:
   10f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f5c:	460c      	mov	r4, r1
   10f5e:	0711      	lsls	r1, r2, #28
   10f60:	4680      	mov	r8, r0
   10f62:	d447      	bmi.n	10ff4 <__sflush_r+0xa0>
   10f64:	6863      	ldr	r3, [r4, #4]
   10f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	81a2      	strh	r2, [r4, #12]
   10f6e:	dd5e      	ble.n	1102e <__sflush_r+0xda>
   10f70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10f72:	2d00      	cmp	r5, #0
   10f74:	d058      	beq.n	11028 <__sflush_r+0xd4>
   10f76:	2300      	movs	r3, #0
   10f78:	f8d8 6000 	ldr.w	r6, [r8]
   10f7c:	f8c8 3000 	str.w	r3, [r8]
   10f80:	b293      	uxth	r3, r2
   10f82:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10f86:	d156      	bne.n	11036 <__sflush_r+0xe2>
   10f88:	2301      	movs	r3, #1
   10f8a:	69e1      	ldr	r1, [r4, #28]
   10f8c:	4640      	mov	r0, r8
   10f8e:	47a8      	blx	r5
   10f90:	1c43      	adds	r3, r0, #1
   10f92:	d067      	beq.n	11064 <__sflush_r+0x110>
   10f94:	89a3      	ldrh	r3, [r4, #12]
   10f96:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10f98:	075f      	lsls	r7, r3, #29
   10f9a:	d505      	bpl.n	10fa8 <__sflush_r+0x54>
   10f9c:	6863      	ldr	r3, [r4, #4]
   10f9e:	1ac0      	subs	r0, r0, r3
   10fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10fa2:	b10b      	cbz	r3, 10fa8 <__sflush_r+0x54>
   10fa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10fa6:	1ac0      	subs	r0, r0, r3
   10fa8:	69e1      	ldr	r1, [r4, #28]
   10faa:	4602      	mov	r2, r0
   10fac:	2300      	movs	r3, #0
   10fae:	4640      	mov	r0, r8
   10fb0:	47a8      	blx	r5
   10fb2:	1c41      	adds	r1, r0, #1
   10fb4:	d141      	bne.n	1103a <__sflush_r+0xe6>
   10fb6:	f8d8 3000 	ldr.w	r3, [r8]
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d03d      	beq.n	1103a <__sflush_r+0xe6>
   10fbe:	2b1d      	cmp	r3, #29
   10fc0:	d001      	beq.n	10fc6 <__sflush_r+0x72>
   10fc2:	2b16      	cmp	r3, #22
   10fc4:	d156      	bne.n	11074 <__sflush_r+0x120>
   10fc6:	89a3      	ldrh	r3, [r4, #12]
   10fc8:	6922      	ldr	r2, [r4, #16]
   10fca:	6022      	str	r2, [r4, #0]
   10fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10fd0:	2100      	movs	r1, #0
   10fd2:	6061      	str	r1, [r4, #4]
   10fd4:	81a3      	strh	r3, [r4, #12]
   10fd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10fd8:	f8c8 6000 	str.w	r6, [r8]
   10fdc:	b321      	cbz	r1, 11028 <__sflush_r+0xd4>
   10fde:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10fe2:	4299      	cmp	r1, r3
   10fe4:	d002      	beq.n	10fec <__sflush_r+0x98>
   10fe6:	4640      	mov	r0, r8
   10fe8:	f7fd fc2c 	bl	e844 <_free_r>
   10fec:	2000      	movs	r0, #0
   10fee:	6320      	str	r0, [r4, #48]	; 0x30
   10ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ff4:	6926      	ldr	r6, [r4, #16]
   10ff6:	b1be      	cbz	r6, 11028 <__sflush_r+0xd4>
   10ff8:	b293      	uxth	r3, r2
   10ffa:	6825      	ldr	r5, [r4, #0]
   10ffc:	6026      	str	r6, [r4, #0]
   10ffe:	079a      	lsls	r2, r3, #30
   11000:	bf0c      	ite	eq
   11002:	6963      	ldreq	r3, [r4, #20]
   11004:	2300      	movne	r3, #0
   11006:	1bad      	subs	r5, r5, r6
   11008:	60a3      	str	r3, [r4, #8]
   1100a:	e00b      	b.n	11024 <__sflush_r+0xd0>
   1100c:	462b      	mov	r3, r5
   1100e:	4632      	mov	r2, r6
   11010:	69e1      	ldr	r1, [r4, #28]
   11012:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11014:	4640      	mov	r0, r8
   11016:	47b8      	blx	r7
   11018:	f1b0 0c00 	subs.w	ip, r0, #0
   1101c:	eba5 050c 	sub.w	r5, r5, ip
   11020:	4466      	add	r6, ip
   11022:	dd17      	ble.n	11054 <__sflush_r+0x100>
   11024:	2d00      	cmp	r5, #0
   11026:	dcf1      	bgt.n	1100c <__sflush_r+0xb8>
   11028:	2000      	movs	r0, #0
   1102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1102e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11030:	2b00      	cmp	r3, #0
   11032:	dc9d      	bgt.n	10f70 <__sflush_r+0x1c>
   11034:	e7f8      	b.n	11028 <__sflush_r+0xd4>
   11036:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11038:	e7ae      	b.n	10f98 <__sflush_r+0x44>
   1103a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1103e:	6922      	ldr	r2, [r4, #16]
   11040:	6022      	str	r2, [r4, #0]
   11042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11046:	81a3      	strh	r3, [r4, #12]
   11048:	2200      	movs	r2, #0
   1104a:	04db      	lsls	r3, r3, #19
   1104c:	6062      	str	r2, [r4, #4]
   1104e:	d5c2      	bpl.n	10fd6 <__sflush_r+0x82>
   11050:	6520      	str	r0, [r4, #80]	; 0x50
   11052:	e7c0      	b.n	10fd6 <__sflush_r+0x82>
   11054:	89a3      	ldrh	r3, [r4, #12]
   11056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1105a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1105e:	81a3      	strh	r3, [r4, #12]
   11060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11064:	f8d8 3000 	ldr.w	r3, [r8]
   11068:	2b00      	cmp	r3, #0
   1106a:	d093      	beq.n	10f94 <__sflush_r+0x40>
   1106c:	2b1d      	cmp	r3, #29
   1106e:	d006      	beq.n	1107e <__sflush_r+0x12a>
   11070:	2b16      	cmp	r3, #22
   11072:	d004      	beq.n	1107e <__sflush_r+0x12a>
   11074:	89a3      	ldrh	r3, [r4, #12]
   11076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1107a:	81a3      	strh	r3, [r4, #12]
   1107c:	e7d5      	b.n	1102a <__sflush_r+0xd6>
   1107e:	f8c8 6000 	str.w	r6, [r8]
   11082:	e7d1      	b.n	11028 <__sflush_r+0xd4>

00011084 <_fflush_r>:
   11084:	b538      	push	{r3, r4, r5, lr}
   11086:	460c      	mov	r4, r1
   11088:	4605      	mov	r5, r0
   1108a:	b108      	cbz	r0, 11090 <_fflush_r+0xc>
   1108c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1108e:	b303      	cbz	r3, 110d2 <_fflush_r+0x4e>
   11090:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11094:	b188      	cbz	r0, 110ba <_fflush_r+0x36>
   11096:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11098:	07db      	lsls	r3, r3, #31
   1109a:	d401      	bmi.n	110a0 <_fflush_r+0x1c>
   1109c:	0581      	lsls	r1, r0, #22
   1109e:	d50f      	bpl.n	110c0 <_fflush_r+0x3c>
   110a0:	4628      	mov	r0, r5
   110a2:	4621      	mov	r1, r4
   110a4:	f7ff ff56 	bl	10f54 <__sflush_r>
   110a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   110aa:	07da      	lsls	r2, r3, #31
   110ac:	4605      	mov	r5, r0
   110ae:	d402      	bmi.n	110b6 <_fflush_r+0x32>
   110b0:	89a3      	ldrh	r3, [r4, #12]
   110b2:	059b      	lsls	r3, r3, #22
   110b4:	d508      	bpl.n	110c8 <_fflush_r+0x44>
   110b6:	4628      	mov	r0, r5
   110b8:	bd38      	pop	{r3, r4, r5, pc}
   110ba:	4605      	mov	r5, r0
   110bc:	4628      	mov	r0, r5
   110be:	bd38      	pop	{r3, r4, r5, pc}
   110c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   110c2:	f7fd fa63 	bl	e58c <__retarget_lock_acquire_recursive>
   110c6:	e7eb      	b.n	110a0 <_fflush_r+0x1c>
   110c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   110ca:	f7fd fa61 	bl	e590 <__retarget_lock_release_recursive>
   110ce:	4628      	mov	r0, r5
   110d0:	bd38      	pop	{r3, r4, r5, pc}
   110d2:	f7fc fbf5 	bl	d8c0 <__sinit>
   110d6:	e7db      	b.n	11090 <_fflush_r+0xc>

000110d8 <__sread>:
   110d8:	b510      	push	{r4, lr}
   110da:	460c      	mov	r4, r1
   110dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   110e0:	f000 f8fa 	bl	112d8 <_read_r>
   110e4:	2800      	cmp	r0, #0
   110e6:	db03      	blt.n	110f0 <__sread+0x18>
   110e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   110ea:	4403      	add	r3, r0
   110ec:	6523      	str	r3, [r4, #80]	; 0x50
   110ee:	bd10      	pop	{r4, pc}
   110f0:	89a3      	ldrh	r3, [r4, #12]
   110f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   110f6:	81a3      	strh	r3, [r4, #12]
   110f8:	bd10      	pop	{r4, pc}
   110fa:	bf00      	nop

000110fc <__swrite>:
   110fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11100:	460c      	mov	r4, r1
   11102:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   11106:	461f      	mov	r7, r3
   11108:	05cb      	lsls	r3, r1, #23
   1110a:	4605      	mov	r5, r0
   1110c:	4616      	mov	r6, r2
   1110e:	d40b      	bmi.n	11128 <__swrite+0x2c>
   11110:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   11114:	81a1      	strh	r1, [r4, #12]
   11116:	463b      	mov	r3, r7
   11118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1111c:	4632      	mov	r2, r6
   1111e:	4628      	mov	r0, r5
   11120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11124:	f7fd b876 	b.w	e214 <_write_r>
   11128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1112c:	2302      	movs	r3, #2
   1112e:	2200      	movs	r2, #0
   11130:	f000 f8bc 	bl	112ac <_lseek_r>
   11134:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   11138:	e7ea      	b.n	11110 <__swrite+0x14>
   1113a:	bf00      	nop

0001113c <__sseek>:
   1113c:	b510      	push	{r4, lr}
   1113e:	460c      	mov	r4, r1
   11140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11144:	f000 f8b2 	bl	112ac <_lseek_r>
   11148:	89a3      	ldrh	r3, [r4, #12]
   1114a:	1c42      	adds	r2, r0, #1
   1114c:	bf0e      	itee	eq
   1114e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   11152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   11156:	6520      	strne	r0, [r4, #80]	; 0x50
   11158:	81a3      	strh	r3, [r4, #12]
   1115a:	bd10      	pop	{r4, pc}

0001115c <__sclose>:
   1115c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11160:	f000 b86a 	b.w	11238 <_close_r>

00011164 <__ascii_wctomb>:
   11164:	b149      	cbz	r1, 1117a <__ascii_wctomb+0x16>
   11166:	2aff      	cmp	r2, #255	; 0xff
   11168:	d802      	bhi.n	11170 <__ascii_wctomb+0xc>
   1116a:	700a      	strb	r2, [r1, #0]
   1116c:	2001      	movs	r0, #1
   1116e:	4770      	bx	lr
   11170:	238a      	movs	r3, #138	; 0x8a
   11172:	6003      	str	r3, [r0, #0]
   11174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11178:	4770      	bx	lr
   1117a:	4608      	mov	r0, r1
   1117c:	4770      	bx	lr
   1117e:	bf00      	nop

00011180 <__swbuf_r>:
   11180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11182:	460d      	mov	r5, r1
   11184:	4614      	mov	r4, r2
   11186:	4606      	mov	r6, r0
   11188:	b110      	cbz	r0, 11190 <__swbuf_r+0x10>
   1118a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1118c:	2b00      	cmp	r3, #0
   1118e:	d04c      	beq.n	1122a <__swbuf_r+0xaa>
   11190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11194:	69a3      	ldr	r3, [r4, #24]
   11196:	60a3      	str	r3, [r4, #8]
   11198:	0717      	lsls	r7, r2, #28
   1119a:	b290      	uxth	r0, r2
   1119c:	d51b      	bpl.n	111d6 <__swbuf_r+0x56>
   1119e:	6923      	ldr	r3, [r4, #16]
   111a0:	b1cb      	cbz	r3, 111d6 <__swbuf_r+0x56>
   111a2:	b2ed      	uxtb	r5, r5
   111a4:	0481      	lsls	r1, r0, #18
   111a6:	462f      	mov	r7, r5
   111a8:	d522      	bpl.n	111f0 <__swbuf_r+0x70>
   111aa:	6822      	ldr	r2, [r4, #0]
   111ac:	6961      	ldr	r1, [r4, #20]
   111ae:	1ad3      	subs	r3, r2, r3
   111b0:	4299      	cmp	r1, r3
   111b2:	dd29      	ble.n	11208 <__swbuf_r+0x88>
   111b4:	3301      	adds	r3, #1
   111b6:	68a1      	ldr	r1, [r4, #8]
   111b8:	3901      	subs	r1, #1
   111ba:	60a1      	str	r1, [r4, #8]
   111bc:	1c51      	adds	r1, r2, #1
   111be:	6021      	str	r1, [r4, #0]
   111c0:	7015      	strb	r5, [r2, #0]
   111c2:	6962      	ldr	r2, [r4, #20]
   111c4:	429a      	cmp	r2, r3
   111c6:	d027      	beq.n	11218 <__swbuf_r+0x98>
   111c8:	89a3      	ldrh	r3, [r4, #12]
   111ca:	07db      	lsls	r3, r3, #31
   111cc:	d501      	bpl.n	111d2 <__swbuf_r+0x52>
   111ce:	2d0a      	cmp	r5, #10
   111d0:	d022      	beq.n	11218 <__swbuf_r+0x98>
   111d2:	4638      	mov	r0, r7
   111d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111d6:	4621      	mov	r1, r4
   111d8:	4630      	mov	r0, r6
   111da:	f7fc fe21 	bl	de20 <__swsetup_r>
   111de:	bb08      	cbnz	r0, 11224 <__swbuf_r+0xa4>
   111e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   111e4:	6923      	ldr	r3, [r4, #16]
   111e6:	b290      	uxth	r0, r2
   111e8:	b2ed      	uxtb	r5, r5
   111ea:	0481      	lsls	r1, r0, #18
   111ec:	462f      	mov	r7, r5
   111ee:	d4dc      	bmi.n	111aa <__swbuf_r+0x2a>
   111f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   111f4:	81a2      	strh	r2, [r4, #12]
   111f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   111f8:	6961      	ldr	r1, [r4, #20]
   111fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   111fe:	6662      	str	r2, [r4, #100]	; 0x64
   11200:	6822      	ldr	r2, [r4, #0]
   11202:	1ad3      	subs	r3, r2, r3
   11204:	4299      	cmp	r1, r3
   11206:	dcd5      	bgt.n	111b4 <__swbuf_r+0x34>
   11208:	4621      	mov	r1, r4
   1120a:	4630      	mov	r0, r6
   1120c:	f7ff ff3a 	bl	11084 <_fflush_r>
   11210:	b940      	cbnz	r0, 11224 <__swbuf_r+0xa4>
   11212:	6822      	ldr	r2, [r4, #0]
   11214:	2301      	movs	r3, #1
   11216:	e7ce      	b.n	111b6 <__swbuf_r+0x36>
   11218:	4621      	mov	r1, r4
   1121a:	4630      	mov	r0, r6
   1121c:	f7ff ff32 	bl	11084 <_fflush_r>
   11220:	2800      	cmp	r0, #0
   11222:	d0d6      	beq.n	111d2 <__swbuf_r+0x52>
   11224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   11228:	e7d3      	b.n	111d2 <__swbuf_r+0x52>
   1122a:	f7fc fb49 	bl	d8c0 <__sinit>
   1122e:	e7af      	b.n	11190 <__swbuf_r+0x10>

00011230 <_localeconv_r>:
   11230:	4800      	ldr	r0, [pc, #0]	; (11234 <_localeconv_r+0x4>)
   11232:	4770      	bx	lr
   11234:	20003104 	.word	0x20003104

00011238 <_close_r>:
   11238:	b538      	push	{r3, r4, r5, lr}
   1123a:	4d07      	ldr	r5, [pc, #28]	; (11258 <_close_r+0x20>)
   1123c:	2200      	movs	r2, #0
   1123e:	4604      	mov	r4, r0
   11240:	4608      	mov	r0, r1
   11242:	602a      	str	r2, [r5, #0]
   11244:	f7f2 f83c 	bl	32c0 <_close>
   11248:	1c43      	adds	r3, r0, #1
   1124a:	d000      	beq.n	1124e <_close_r+0x16>
   1124c:	bd38      	pop	{r3, r4, r5, pc}
   1124e:	682b      	ldr	r3, [r5, #0]
   11250:	2b00      	cmp	r3, #0
   11252:	d0fb      	beq.n	1124c <_close_r+0x14>
   11254:	6023      	str	r3, [r4, #0]
   11256:	bd38      	pop	{r3, r4, r5, pc}
   11258:	200040ec 	.word	0x200040ec

0001125c <_fstat_r>:
   1125c:	b570      	push	{r4, r5, r6, lr}
   1125e:	460c      	mov	r4, r1
   11260:	4d08      	ldr	r5, [pc, #32]	; (11284 <_fstat_r+0x28>)
   11262:	4603      	mov	r3, r0
   11264:	2600      	movs	r6, #0
   11266:	4620      	mov	r0, r4
   11268:	4611      	mov	r1, r2
   1126a:	461c      	mov	r4, r3
   1126c:	602e      	str	r6, [r5, #0]
   1126e:	f7f2 f82b 	bl	32c8 <_fstat>
   11272:	1c43      	adds	r3, r0, #1
   11274:	d000      	beq.n	11278 <_fstat_r+0x1c>
   11276:	bd70      	pop	{r4, r5, r6, pc}
   11278:	682b      	ldr	r3, [r5, #0]
   1127a:	2b00      	cmp	r3, #0
   1127c:	d0fb      	beq.n	11276 <_fstat_r+0x1a>
   1127e:	6023      	str	r3, [r4, #0]
   11280:	bd70      	pop	{r4, r5, r6, pc}
   11282:	bf00      	nop
   11284:	200040ec 	.word	0x200040ec

00011288 <_isatty_r>:
   11288:	b538      	push	{r3, r4, r5, lr}
   1128a:	4d07      	ldr	r5, [pc, #28]	; (112a8 <_isatty_r+0x20>)
   1128c:	2200      	movs	r2, #0
   1128e:	4604      	mov	r4, r0
   11290:	4608      	mov	r0, r1
   11292:	602a      	str	r2, [r5, #0]
   11294:	f7f2 f81e 	bl	32d4 <_isatty>
   11298:	1c43      	adds	r3, r0, #1
   1129a:	d000      	beq.n	1129e <_isatty_r+0x16>
   1129c:	bd38      	pop	{r3, r4, r5, pc}
   1129e:	682b      	ldr	r3, [r5, #0]
   112a0:	2b00      	cmp	r3, #0
   112a2:	d0fb      	beq.n	1129c <_isatty_r+0x14>
   112a4:	6023      	str	r3, [r4, #0]
   112a6:	bd38      	pop	{r3, r4, r5, pc}
   112a8:	200040ec 	.word	0x200040ec

000112ac <_lseek_r>:
   112ac:	b538      	push	{r3, r4, r5, lr}
   112ae:	460c      	mov	r4, r1
   112b0:	4d08      	ldr	r5, [pc, #32]	; (112d4 <_lseek_r+0x28>)
   112b2:	4684      	mov	ip, r0
   112b4:	4611      	mov	r1, r2
   112b6:	4620      	mov	r0, r4
   112b8:	461a      	mov	r2, r3
   112ba:	2300      	movs	r3, #0
   112bc:	602b      	str	r3, [r5, #0]
   112be:	4664      	mov	r4, ip
   112c0:	f7f2 f80a 	bl	32d8 <_lseek>
   112c4:	1c43      	adds	r3, r0, #1
   112c6:	d000      	beq.n	112ca <_lseek_r+0x1e>
   112c8:	bd38      	pop	{r3, r4, r5, pc}
   112ca:	682b      	ldr	r3, [r5, #0]
   112cc:	2b00      	cmp	r3, #0
   112ce:	d0fb      	beq.n	112c8 <_lseek_r+0x1c>
   112d0:	6023      	str	r3, [r4, #0]
   112d2:	bd38      	pop	{r3, r4, r5, pc}
   112d4:	200040ec 	.word	0x200040ec

000112d8 <_read_r>:
   112d8:	b538      	push	{r3, r4, r5, lr}
   112da:	460c      	mov	r4, r1
   112dc:	4d08      	ldr	r5, [pc, #32]	; (11300 <_read_r+0x28>)
   112de:	4684      	mov	ip, r0
   112e0:	4611      	mov	r1, r2
   112e2:	4620      	mov	r0, r4
   112e4:	461a      	mov	r2, r3
   112e6:	2300      	movs	r3, #0
   112e8:	602b      	str	r3, [r5, #0]
   112ea:	4664      	mov	r4, ip
   112ec:	f7f1 ffe6 	bl	32bc <_read>
   112f0:	1c43      	adds	r3, r0, #1
   112f2:	d000      	beq.n	112f6 <_read_r+0x1e>
   112f4:	bd38      	pop	{r3, r4, r5, pc}
   112f6:	682b      	ldr	r3, [r5, #0]
   112f8:	2b00      	cmp	r3, #0
   112fa:	d0fb      	beq.n	112f4 <_read_r+0x1c>
   112fc:	6023      	str	r3, [r4, #0]
   112fe:	bd38      	pop	{r3, r4, r5, pc}
   11300:	200040ec 	.word	0x200040ec

00011304 <_wcrtomb_r>:
   11304:	b570      	push	{r4, r5, r6, lr}
   11306:	4605      	mov	r5, r0
   11308:	b084      	sub	sp, #16
   1130a:	b15b      	cbz	r3, 11324 <_wcrtomb_r+0x20>
   1130c:	461c      	mov	r4, r3
   1130e:	b169      	cbz	r1, 1132c <_wcrtomb_r+0x28>
   11310:	4b0e      	ldr	r3, [pc, #56]	; (1134c <_wcrtomb_r+0x48>)
   11312:	4628      	mov	r0, r5
   11314:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11318:	4623      	mov	r3, r4
   1131a:	47b0      	blx	r6
   1131c:	1c43      	adds	r3, r0, #1
   1131e:	d00f      	beq.n	11340 <_wcrtomb_r+0x3c>
   11320:	b004      	add	sp, #16
   11322:	bd70      	pop	{r4, r5, r6, pc}
   11324:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11328:	2900      	cmp	r1, #0
   1132a:	d1f1      	bne.n	11310 <_wcrtomb_r+0xc>
   1132c:	4a07      	ldr	r2, [pc, #28]	; (1134c <_wcrtomb_r+0x48>)
   1132e:	4623      	mov	r3, r4
   11330:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11334:	4628      	mov	r0, r5
   11336:	460a      	mov	r2, r1
   11338:	a901      	add	r1, sp, #4
   1133a:	47b0      	blx	r6
   1133c:	1c43      	adds	r3, r0, #1
   1133e:	d1ef      	bne.n	11320 <_wcrtomb_r+0x1c>
   11340:	2200      	movs	r2, #0
   11342:	238a      	movs	r3, #138	; 0x8a
   11344:	6022      	str	r2, [r4, #0]
   11346:	602b      	str	r3, [r5, #0]
   11348:	b004      	add	sp, #16
   1134a:	bd70      	pop	{r4, r5, r6, pc}
   1134c:	20003014 	.word	0x20003014

00011350 <_wcsrtombs_r>:
   11350:	b510      	push	{r4, lr}
   11352:	b082      	sub	sp, #8
   11354:	9c04      	ldr	r4, [sp, #16]
   11356:	e9cd 3400 	strd	r3, r4, [sp]
   1135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1135e:	f002 f989 	bl	13674 <_wcsnrtombs_r>
   11362:	b002      	add	sp, #8
   11364:	bd10      	pop	{r4, pc}
   11366:	bf00      	nop

00011368 <frexp>:
   11368:	b430      	push	{r4, r5}
   1136a:	b082      	sub	sp, #8
   1136c:	ed8d 0b00 	vstr	d0, [sp]
   11370:	9a01      	ldr	r2, [sp, #4]
   11372:	4c19      	ldr	r4, [pc, #100]	; (113d8 <frexp+0x70>)
   11374:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11378:	2100      	movs	r1, #0
   1137a:	42a3      	cmp	r3, r4
   1137c:	6001      	str	r1, [r0, #0]
   1137e:	dc21      	bgt.n	113c4 <frexp+0x5c>
   11380:	9c00      	ldr	r4, [sp, #0]
   11382:	431c      	orrs	r4, r3
   11384:	d01e      	beq.n	113c4 <frexp+0x5c>
   11386:	4c15      	ldr	r4, [pc, #84]	; (113dc <frexp+0x74>)
   11388:	4014      	ands	r4, r2
   1138a:	b954      	cbnz	r4, 113a2 <frexp+0x3a>
   1138c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 113d0 <frexp+0x68>
   11390:	ee20 7b07 	vmul.f64	d7, d0, d7
   11394:	ed8d 7b00 	vstr	d7, [sp]
   11398:	9a01      	ldr	r2, [sp, #4]
   1139a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1139e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   113a2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   113a6:	e9dd 4500 	ldrd	r4, r5, [sp]
   113aa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   113ae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   113b2:	151b      	asrs	r3, r3, #20
   113b4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   113b8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   113bc:	e9cd 4500 	strd	r4, r5, [sp]
   113c0:	440b      	add	r3, r1
   113c2:	6003      	str	r3, [r0, #0]
   113c4:	ed9d 0b00 	vldr	d0, [sp]
   113c8:	b002      	add	sp, #8
   113ca:	bc30      	pop	{r4, r5}
   113cc:	4770      	bx	lr
   113ce:	bf00      	nop
   113d0:	00000000 	.word	0x00000000
   113d4:	43500000 	.word	0x43500000
   113d8:	7fefffff 	.word	0x7fefffff
   113dc:	7ff00000 	.word	0x7ff00000

000113e0 <__assert_func>:
   113e0:	b500      	push	{lr}
   113e2:	4c0b      	ldr	r4, [pc, #44]	; (11410 <__assert_func+0x30>)
   113e4:	6825      	ldr	r5, [r4, #0]
   113e6:	4614      	mov	r4, r2
   113e8:	68ee      	ldr	r6, [r5, #12]
   113ea:	461a      	mov	r2, r3
   113ec:	b085      	sub	sp, #20
   113ee:	4603      	mov	r3, r0
   113f0:	460d      	mov	r5, r1
   113f2:	b14c      	cbz	r4, 11408 <__assert_func+0x28>
   113f4:	4907      	ldr	r1, [pc, #28]	; (11414 <__assert_func+0x34>)
   113f6:	9500      	str	r5, [sp, #0]
   113f8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   113fc:	4630      	mov	r0, r6
   113fe:	4906      	ldr	r1, [pc, #24]	; (11418 <__assert_func+0x38>)
   11400:	f000 ff54 	bl	122ac <fiprintf>
   11404:	f7f1 ff6c 	bl	32e0 <abort>
   11408:	4904      	ldr	r1, [pc, #16]	; (1141c <__assert_func+0x3c>)
   1140a:	460c      	mov	r4, r1
   1140c:	e7f3      	b.n	113f6 <__assert_func+0x16>
   1140e:	bf00      	nop
   11410:	2000359c 	.word	0x2000359c
   11414:	2000168c 	.word	0x2000168c
   11418:	2000169c 	.word	0x2000169c
   1141c:	200003ec 	.word	0x200003ec

00011420 <_calloc_r>:
   11420:	b538      	push	{r3, r4, r5, lr}
   11422:	fba1 1402 	umull	r1, r4, r1, r2
   11426:	bb8c      	cbnz	r4, 1148c <_calloc_r+0x6c>
   11428:	f7fb fce0 	bl	cdec <_malloc_r>
   1142c:	4605      	mov	r5, r0
   1142e:	b1e0      	cbz	r0, 1146a <_calloc_r+0x4a>
   11430:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11434:	f022 0203 	bic.w	r2, r2, #3
   11438:	3a04      	subs	r2, #4
   1143a:	2a24      	cmp	r2, #36	; 0x24
   1143c:	d817      	bhi.n	1146e <_calloc_r+0x4e>
   1143e:	2a13      	cmp	r2, #19
   11440:	d91a      	bls.n	11478 <_calloc_r+0x58>
   11442:	2a1b      	cmp	r2, #27
   11444:	e9c0 4400 	strd	r4, r4, [r0]
   11448:	d91d      	bls.n	11486 <_calloc_r+0x66>
   1144a:	2a24      	cmp	r2, #36	; 0x24
   1144c:	bf14      	ite	ne
   1144e:	f100 0210 	addne.w	r2, r0, #16
   11452:	f100 0218 	addeq.w	r2, r0, #24
   11456:	f04f 0300 	mov.w	r3, #0
   1145a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1145e:	bf04      	itt	eq
   11460:	6104      	streq	r4, [r0, #16]
   11462:	6144      	streq	r4, [r0, #20]
   11464:	e9c2 3300 	strd	r3, r3, [r2]
   11468:	6093      	str	r3, [r2, #8]
   1146a:	4628      	mov	r0, r5
   1146c:	bd38      	pop	{r3, r4, r5, pc}
   1146e:	4621      	mov	r1, r4
   11470:	f7fc fde8 	bl	e044 <memset>
   11474:	4628      	mov	r0, r5
   11476:	bd38      	pop	{r3, r4, r5, pc}
   11478:	4602      	mov	r2, r0
   1147a:	2300      	movs	r3, #0
   1147c:	e9c2 3300 	strd	r3, r3, [r2]
   11480:	6093      	str	r3, [r2, #8]
   11482:	4628      	mov	r0, r5
   11484:	bd38      	pop	{r3, r4, r5, pc}
   11486:	f100 0208 	add.w	r2, r0, #8
   1148a:	e7f6      	b.n	1147a <_calloc_r+0x5a>
   1148c:	f7fc fed8 	bl	e240 <__errno>
   11490:	230c      	movs	r3, #12
   11492:	2500      	movs	r5, #0
   11494:	6003      	str	r3, [r0, #0]
   11496:	e7e8      	b.n	1146a <_calloc_r+0x4a>

00011498 <quorem>:
   11498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1149c:	6903      	ldr	r3, [r0, #16]
   1149e:	690c      	ldr	r4, [r1, #16]
   114a0:	42a3      	cmp	r3, r4
   114a2:	b083      	sub	sp, #12
   114a4:	f2c0 8087 	blt.w	115b6 <quorem+0x11e>
   114a8:	3c01      	subs	r4, #1
   114aa:	f101 0514 	add.w	r5, r1, #20
   114ae:	00a3      	lsls	r3, r4, #2
   114b0:	f100 0814 	add.w	r8, r0, #20
   114b4:	9300      	str	r3, [sp, #0]
   114b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   114ba:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   114be:	3301      	adds	r3, #1
   114c0:	4681      	mov	r9, r0
   114c2:	429a      	cmp	r2, r3
   114c4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   114c8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   114cc:	9001      	str	r0, [sp, #4]
   114ce:	fbb2 f6f3 	udiv	r6, r2, r3
   114d2:	d33b      	bcc.n	1154c <quorem+0xb4>
   114d4:	f04f 0c00 	mov.w	ip, #0
   114d8:	46ae      	mov	lr, r5
   114da:	4640      	mov	r0, r8
   114dc:	46e2      	mov	sl, ip
   114de:	4663      	mov	r3, ip
   114e0:	f85e bb04 	ldr.w	fp, [lr], #4
   114e4:	6802      	ldr	r2, [r0, #0]
   114e6:	fa1f fc8b 	uxth.w	ip, fp
   114ea:	fb06 330c 	mla	r3, r6, ip, r3
   114ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   114f2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   114f6:	fb06 cc0b 	mla	ip, r6, fp, ip
   114fa:	b29b      	uxth	r3, r3
   114fc:	ebaa 0303 	sub.w	r3, sl, r3
   11500:	fa1f fa8c 	uxth.w	sl, ip
   11504:	fa13 f382 	uxtah	r3, r3, r2
   11508:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1150c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11510:	b29b      	uxth	r3, r3
   11512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11516:	4577      	cmp	r7, lr
   11518:	f840 3b04 	str.w	r3, [r0], #4
   1151c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11520:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11524:	d2dc      	bcs.n	114e0 <quorem+0x48>
   11526:	9b00      	ldr	r3, [sp, #0]
   11528:	f858 3003 	ldr.w	r3, [r8, r3]
   1152c:	b973      	cbnz	r3, 1154c <quorem+0xb4>
   1152e:	9b01      	ldr	r3, [sp, #4]
   11530:	3b04      	subs	r3, #4
   11532:	4598      	cmp	r8, r3
   11534:	d304      	bcc.n	11540 <quorem+0xa8>
   11536:	e007      	b.n	11548 <quorem+0xb0>
   11538:	4598      	cmp	r8, r3
   1153a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   1153e:	d203      	bcs.n	11548 <quorem+0xb0>
   11540:	f853 2904 	ldr.w	r2, [r3], #-4
   11544:	2a00      	cmp	r2, #0
   11546:	d0f7      	beq.n	11538 <quorem+0xa0>
   11548:	f8c9 4010 	str.w	r4, [r9, #16]
   1154c:	4648      	mov	r0, r9
   1154e:	f7ff fb67 	bl	10c20 <__mcmp>
   11552:	2800      	cmp	r0, #0
   11554:	db2b      	blt.n	115ae <quorem+0x116>
   11556:	3601      	adds	r6, #1
   11558:	4641      	mov	r1, r8
   1155a:	2300      	movs	r3, #0
   1155c:	f855 0b04 	ldr.w	r0, [r5], #4
   11560:	f8d1 c000 	ldr.w	ip, [r1]
   11564:	b282      	uxth	r2, r0
   11566:	1a9a      	subs	r2, r3, r2
   11568:	0c03      	lsrs	r3, r0, #16
   1156a:	fa12 f28c 	uxtah	r2, r2, ip
   1156e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   11572:	eb03 4322 	add.w	r3, r3, r2, asr #16
   11576:	b292      	uxth	r2, r2
   11578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1157c:	42af      	cmp	r7, r5
   1157e:	f841 2b04 	str.w	r2, [r1], #4
   11582:	ea4f 4323 	mov.w	r3, r3, asr #16
   11586:	d2e9      	bcs.n	1155c <quorem+0xc4>
   11588:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1158c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11590:	b96a      	cbnz	r2, 115ae <quorem+0x116>
   11592:	3b04      	subs	r3, #4
   11594:	4598      	cmp	r8, r3
   11596:	d304      	bcc.n	115a2 <quorem+0x10a>
   11598:	e007      	b.n	115aa <quorem+0x112>
   1159a:	4598      	cmp	r8, r3
   1159c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   115a0:	d203      	bcs.n	115aa <quorem+0x112>
   115a2:	f853 2904 	ldr.w	r2, [r3], #-4
   115a6:	2a00      	cmp	r2, #0
   115a8:	d0f7      	beq.n	1159a <quorem+0x102>
   115aa:	f8c9 4010 	str.w	r4, [r9, #16]
   115ae:	4630      	mov	r0, r6
   115b0:	b003      	add	sp, #12
   115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b6:	2000      	movs	r0, #0
   115b8:	b003      	add	sp, #12
   115ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115be:	bf00      	nop

000115c0 <_dtoa_r>:
   115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	ed2d 8b02 	vpush	{d8}
   115c8:	b08f      	sub	sp, #60	; 0x3c
   115ca:	ed8d 0b02 	vstr	d0, [sp, #8]
   115ce:	9101      	str	r1, [sp, #4]
   115d0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   115d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   115d4:	9305      	str	r3, [sp, #20]
   115d6:	ec57 6b10 	vmov	r6, r7, d0
   115da:	4604      	mov	r4, r0
   115dc:	4693      	mov	fp, r2
   115de:	b141      	cbz	r1, 115f2 <_dtoa_r+0x32>
   115e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   115e2:	604a      	str	r2, [r1, #4]
   115e4:	2301      	movs	r3, #1
   115e6:	4093      	lsls	r3, r2
   115e8:	608b      	str	r3, [r1, #8]
   115ea:	f7ff f8b9 	bl	10760 <_Bfree>
   115ee:	2300      	movs	r3, #0
   115f0:	63a3      	str	r3, [r4, #56]	; 0x38
   115f2:	f1b7 0800 	subs.w	r8, r7, #0
   115f6:	bfb4      	ite	lt
   115f8:	2301      	movlt	r3, #1
   115fa:	2300      	movge	r3, #0
   115fc:	602b      	str	r3, [r5, #0]
   115fe:	4bbe      	ldr	r3, [pc, #760]	; (118f8 <_dtoa_r+0x338>)
   11600:	bfbc      	itt	lt
   11602:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11606:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1160a:	ea33 0308 	bics.w	r3, r3, r8
   1160e:	f000 809f 	beq.w	11750 <_dtoa_r+0x190>
   11612:	ed9d 8b02 	vldr	d8, [sp, #8]
   11616:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1161e:	d111      	bne.n	11644 <_dtoa_r+0x84>
   11620:	9a05      	ldr	r2, [sp, #20]
   11622:	2301      	movs	r3, #1
   11624:	6013      	str	r3, [r2, #0]
   11626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11628:	2b00      	cmp	r3, #0
   1162a:	f000 823f 	beq.w	11aac <_dtoa_r+0x4ec>
   1162e:	4bb3      	ldr	r3, [pc, #716]	; (118fc <_dtoa_r+0x33c>)
   11630:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11632:	6013      	str	r3, [r2, #0]
   11634:	3b01      	subs	r3, #1
   11636:	9300      	str	r3, [sp, #0]
   11638:	9800      	ldr	r0, [sp, #0]
   1163a:	b00f      	add	sp, #60	; 0x3c
   1163c:	ecbd 8b02 	vpop	{d8}
   11640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11644:	aa0c      	add	r2, sp, #48	; 0x30
   11646:	a90d      	add	r1, sp, #52	; 0x34
   11648:	4620      	mov	r0, r4
   1164a:	eeb0 0b48 	vmov.f64	d0, d8
   1164e:	f7ff fbb3 	bl	10db8 <__d2b>
   11652:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11656:	4605      	mov	r5, r0
   11658:	f040 8092 	bne.w	11780 <_dtoa_r+0x1c0>
   1165c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   11660:	440b      	add	r3, r1
   11662:	f203 4232 	addw	r2, r3, #1074	; 0x432
   11666:	2a20      	cmp	r2, #32
   11668:	f340 82fa 	ble.w	11c60 <_dtoa_r+0x6a0>
   1166c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   11670:	fa08 f802 	lsl.w	r8, r8, r2
   11674:	f203 4212 	addw	r2, r3, #1042	; 0x412
   11678:	40d6      	lsrs	r6, r2
   1167a:	ea48 0206 	orr.w	r2, r8, r6
   1167e:	ee07 2a10 	vmov	s14, r2
   11682:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11686:	1e58      	subs	r0, r3, #1
   11688:	ee17 6a90 	vmov	r6, s15
   1168c:	ec53 2b17 	vmov	r2, r3, d7
   11690:	f04f 0a01 	mov.w	sl, #1
   11694:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11698:	ed9f 3b91 	vldr	d3, [pc, #580]	; 118e0 <_dtoa_r+0x320>
   1169c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 118e8 <_dtoa_r+0x328>
   116a0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 118f0 <_dtoa_r+0x330>
   116a4:	ee06 0a90 	vmov	s13, r0
   116a8:	ec43 2b12 	vmov	d2, r2, r3
   116ac:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   116b0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   116b4:	ee32 6b46 	vsub.f64	d6, d2, d6
   116b8:	eea6 7b03 	vfma.f64	d7, d6, d3
   116bc:	eea4 7b05 	vfma.f64	d7, d4, d5
   116c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   116c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116cc:	ee16 7a90 	vmov	r7, s13
   116d0:	d508      	bpl.n	116e4 <_dtoa_r+0x124>
   116d2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   116d6:	eeb4 6b47 	vcmp.f64	d6, d7
   116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116de:	bf18      	it	ne
   116e0:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   116e4:	2f16      	cmp	r7, #22
   116e6:	f200 8145 	bhi.w	11974 <_dtoa_r+0x3b4>
   116ea:	4b85      	ldr	r3, [pc, #532]	; (11900 <_dtoa_r+0x340>)
   116ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   116f0:	ed93 7b00 	vldr	d7, [r3]
   116f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   116f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116fc:	d557      	bpl.n	117ae <_dtoa_r+0x1ee>
   116fe:	1a09      	subs	r1, r1, r0
   11700:	2300      	movs	r3, #0
   11702:	f1b1 0801 	subs.w	r8, r1, #1
   11706:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   1170a:	930a      	str	r3, [sp, #40]	; 0x28
   1170c:	f100 8139 	bmi.w	11982 <_dtoa_r+0x3c2>
   11710:	2300      	movs	r3, #0
   11712:	9306      	str	r3, [sp, #24]
   11714:	2f00      	cmp	r7, #0
   11716:	da52      	bge.n	117be <_dtoa_r+0x1fe>
   11718:	9b06      	ldr	r3, [sp, #24]
   1171a:	9704      	str	r7, [sp, #16]
   1171c:	1bdb      	subs	r3, r3, r7
   1171e:	9306      	str	r3, [sp, #24]
   11720:	427b      	negs	r3, r7
   11722:	9308      	str	r3, [sp, #32]
   11724:	9b01      	ldr	r3, [sp, #4]
   11726:	2b09      	cmp	r3, #9
   11728:	f04f 0700 	mov.w	r7, #0
   1172c:	d84e      	bhi.n	117cc <_dtoa_r+0x20c>
   1172e:	2b05      	cmp	r3, #5
   11730:	f340 829d 	ble.w	11c6e <_dtoa_r+0x6ae>
   11734:	3b04      	subs	r3, #4
   11736:	9301      	str	r3, [sp, #4]
   11738:	2600      	movs	r6, #0
   1173a:	9b01      	ldr	r3, [sp, #4]
   1173c:	1e9a      	subs	r2, r3, #2
   1173e:	2a03      	cmp	r2, #3
   11740:	f200 8125 	bhi.w	1198e <_dtoa_r+0x3ce>
   11744:	e8df f012 	tbh	[pc, r2, lsl #1]
   11748:	03a703aa 	.word	0x03a703aa
   1174c:	037e039d 	.word	0x037e039d
   11750:	9a05      	ldr	r2, [sp, #20]
   11752:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11756:	f242 730f 	movw	r3, #9999	; 0x270f
   1175a:	ea58 0806 	orrs.w	r8, r8, r6
   1175e:	6013      	str	r3, [r2, #0]
   11760:	d11e      	bne.n	117a0 <_dtoa_r+0x1e0>
   11762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11764:	2b00      	cmp	r3, #0
   11766:	f000 8591 	beq.w	1228c <_dtoa_r+0xccc>
   1176a:	4b66      	ldr	r3, [pc, #408]	; (11904 <_dtoa_r+0x344>)
   1176c:	9300      	str	r3, [sp, #0]
   1176e:	3308      	adds	r3, #8
   11770:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11772:	9800      	ldr	r0, [sp, #0]
   11774:	6013      	str	r3, [r2, #0]
   11776:	b00f      	add	sp, #60	; 0x3c
   11778:	ecbd 8b02 	vpop	{d8}
   1177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11780:	ee18 6a90 	vmov	r6, s17
   11784:	f3c6 0613 	ubfx	r6, r6, #0, #20
   11788:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1178c:	ec53 2b18 	vmov	r2, r3, d8
   11790:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11794:	990c      	ldr	r1, [sp, #48]	; 0x30
   11796:	f04f 0a00 	mov.w	sl, #0
   1179a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1179e:	e77b      	b.n	11698 <_dtoa_r+0xd8>
   117a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   117a2:	2b00      	cmp	r3, #0
   117a4:	f040 833b 	bne.w	11e1e <_dtoa_r+0x85e>
   117a8:	4b57      	ldr	r3, [pc, #348]	; (11908 <_dtoa_r+0x348>)
   117aa:	9300      	str	r3, [sp, #0]
   117ac:	e744      	b.n	11638 <_dtoa_r+0x78>
   117ae:	1a09      	subs	r1, r1, r0
   117b0:	2300      	movs	r3, #0
   117b2:	f1b1 0801 	subs.w	r8, r1, #1
   117b6:	930a      	str	r3, [sp, #40]	; 0x28
   117b8:	f100 80e3 	bmi.w	11982 <_dtoa_r+0x3c2>
   117bc:	9306      	str	r3, [sp, #24]
   117be:	2300      	movs	r3, #0
   117c0:	9308      	str	r3, [sp, #32]
   117c2:	9b01      	ldr	r3, [sp, #4]
   117c4:	9704      	str	r7, [sp, #16]
   117c6:	2b09      	cmp	r3, #9
   117c8:	44b8      	add	r8, r7
   117ca:	d9b0      	bls.n	1172e <_dtoa_r+0x16e>
   117cc:	2300      	movs	r3, #0
   117ce:	2601      	movs	r6, #1
   117d0:	9301      	str	r3, [sp, #4]
   117d2:	9607      	str	r6, [sp, #28]
   117d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   117d8:	469b      	mov	fp, r3
   117da:	2100      	movs	r1, #0
   117dc:	63e1      	str	r1, [r4, #60]	; 0x3c
   117de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   117e2:	4620      	mov	r0, r4
   117e4:	f7fe ff96 	bl	10714 <_Balloc>
   117e8:	9000      	str	r0, [sp, #0]
   117ea:	2800      	cmp	r0, #0
   117ec:	f000 8540 	beq.w	12270 <_dtoa_r+0xcb0>
   117f0:	9b00      	ldr	r3, [sp, #0]
   117f2:	63a3      	str	r3, [r4, #56]	; 0x38
   117f4:	f1b9 0f0e 	cmp.w	r9, #14
   117f8:	f200 80dc 	bhi.w	119b4 <_dtoa_r+0x3f4>
   117fc:	2e00      	cmp	r6, #0
   117fe:	f000 80d9 	beq.w	119b4 <_dtoa_r+0x3f4>
   11802:	9b04      	ldr	r3, [sp, #16]
   11804:	2b00      	cmp	r3, #0
   11806:	f340 83de 	ble.w	11fc6 <_dtoa_r+0xa06>
   1180a:	4a3d      	ldr	r2, [pc, #244]	; (11900 <_dtoa_r+0x340>)
   1180c:	f003 010f 	and.w	r1, r3, #15
   11810:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11814:	ed92 7b00 	vldr	d7, [r2]
   11818:	111a      	asrs	r2, r3, #4
   1181a:	05db      	lsls	r3, r3, #23
   1181c:	f140 8382 	bpl.w	11f24 <_dtoa_r+0x964>
   11820:	493a      	ldr	r1, [pc, #232]	; (1190c <_dtoa_r+0x34c>)
   11822:	ed91 6b08 	vldr	d6, [r1, #32]
   11826:	f002 020f 	and.w	r2, r2, #15
   1182a:	2003      	movs	r0, #3
   1182c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   11830:	b15a      	cbz	r2, 1184a <_dtoa_r+0x28a>
   11832:	4936      	ldr	r1, [pc, #216]	; (1190c <_dtoa_r+0x34c>)
   11834:	07d6      	lsls	r6, r2, #31
   11836:	d504      	bpl.n	11842 <_dtoa_r+0x282>
   11838:	ed91 6b00 	vldr	d6, [r1]
   1183c:	3001      	adds	r0, #1
   1183e:	ee27 7b06 	vmul.f64	d7, d7, d6
   11842:	1052      	asrs	r2, r2, #1
   11844:	f101 0108 	add.w	r1, r1, #8
   11848:	d1f4      	bne.n	11834 <_dtoa_r+0x274>
   1184a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1184e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11850:	b13b      	cbz	r3, 11862 <_dtoa_r+0x2a2>
   11852:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11856:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1185e:	f100 84ae 	bmi.w	121be <_dtoa_r+0xbfe>
   11862:	ee07 0a90 	vmov	s15, r0
   11866:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1186a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1186e:	eea5 7b06 	vfma.f64	d7, d5, d6
   11872:	ee17 2a90 	vmov	r2, s15
   11876:	ec51 0b17 	vmov	r0, r1, d7
   1187a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1187e:	f1b9 0f00 	cmp.w	r9, #0
   11882:	f000 8388 	beq.w	11f96 <_dtoa_r+0x9d6>
   11886:	9e04      	ldr	r6, [sp, #16]
   11888:	464a      	mov	r2, r9
   1188a:	9b07      	ldr	r3, [sp, #28]
   1188c:	2b00      	cmp	r3, #0
   1188e:	f000 8447 	beq.w	12120 <_dtoa_r+0xb60>
   11892:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11896:	4b1a      	ldr	r3, [pc, #104]	; (11900 <_dtoa_r+0x340>)
   11898:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1189c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   118a0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   118a4:	ee36 7b47 	vsub.f64	d7, d6, d7
   118a8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   118ac:	ee83 5b06 	vdiv.f64	d5, d3, d6
   118b0:	ec41 0b16 	vmov	d6, r0, r1
   118b4:	ee14 0a90 	vmov	r0, s9
   118b8:	ee35 5b46 	vsub.f64	d5, d5, d6
   118bc:	9900      	ldr	r1, [sp, #0]
   118be:	eeb4 5bc7 	vcmpe.f64	d5, d7
   118c2:	3030      	adds	r0, #48	; 0x30
   118c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   118c8:	f801 0b01 	strb.w	r0, [r1], #1
   118cc:	f300 84ac 	bgt.w	12228 <_dtoa_r+0xc68>
   118d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   118d4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   118d8:	f04f 0c00 	mov.w	ip, #0
   118dc:	e031      	b.n	11942 <_dtoa_r+0x382>
   118de:	bf00      	nop
   118e0:	636f4361 	.word	0x636f4361
   118e4:	3fd287a7 	.word	0x3fd287a7
   118e8:	8b60c8b3 	.word	0x8b60c8b3
   118ec:	3fc68a28 	.word	0x3fc68a28
   118f0:	509f79fb 	.word	0x509f79fb
   118f4:	3fd34413 	.word	0x3fd34413
   118f8:	7ff00000 	.word	0x7ff00000
   118fc:	200027ad 	.word	0x200027ad
   11900:	200002a8 	.word	0x200002a8
   11904:	20001848 	.word	0x20001848
   11908:	20001854 	.word	0x20001854
   1190c:	20000280 	.word	0x20000280
   11910:	f10c 0c01 	add.w	ip, ip, #1
   11914:	4594      	cmp	ip, r2
   11916:	da4d      	bge.n	119b4 <_dtoa_r+0x3f4>
   11918:	ee27 7b04 	vmul.f64	d7, d7, d4
   1191c:	ee25 5b04 	vmul.f64	d5, d5, d4
   11920:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11924:	ee16 3a90 	vmov	r3, s13
   11928:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1192c:	3330      	adds	r3, #48	; 0x30
   1192e:	ee37 7b43 	vsub.f64	d7, d7, d3
   11932:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1193a:	f801 3b01 	strb.w	r3, [r1], #1
   1193e:	f100 8473 	bmi.w	12228 <_dtoa_r+0xc68>
   11942:	ee32 6b47 	vsub.f64	d6, d2, d7
   11946:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1194e:	d5df      	bpl.n	11910 <_dtoa_r+0x350>
   11950:	9a00      	ldr	r2, [sp, #0]
   11952:	9604      	str	r6, [sp, #16]
   11954:	e002      	b.n	1195c <_dtoa_r+0x39c>
   11956:	428a      	cmp	r2, r1
   11958:	f000 8450 	beq.w	121fc <_dtoa_r+0xc3c>
   1195c:	4689      	mov	r9, r1
   1195e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11962:	2b39      	cmp	r3, #57	; 0x39
   11964:	d0f7      	beq.n	11956 <_dtoa_r+0x396>
   11966:	3301      	adds	r3, #1
   11968:	b2db      	uxtb	r3, r3
   1196a:	700b      	strb	r3, [r1, #0]
   1196c:	9b04      	ldr	r3, [sp, #16]
   1196e:	3301      	adds	r3, #1
   11970:	9304      	str	r3, [sp, #16]
   11972:	e155      	b.n	11c20 <_dtoa_r+0x660>
   11974:	1a09      	subs	r1, r1, r0
   11976:	2301      	movs	r3, #1
   11978:	f1b1 0801 	subs.w	r8, r1, #1
   1197c:	930a      	str	r3, [sp, #40]	; 0x28
   1197e:	f57f aec7 	bpl.w	11710 <_dtoa_r+0x150>
   11982:	f1c1 0301 	rsb	r3, r1, #1
   11986:	9306      	str	r3, [sp, #24]
   11988:	f04f 0800 	mov.w	r8, #0
   1198c:	e6c2      	b.n	11714 <_dtoa_r+0x154>
   1198e:	2600      	movs	r6, #0
   11990:	63e6      	str	r6, [r4, #60]	; 0x3c
   11992:	4631      	mov	r1, r6
   11994:	4620      	mov	r0, r4
   11996:	f7fe febd 	bl	10714 <_Balloc>
   1199a:	9000      	str	r0, [sp, #0]
   1199c:	2800      	cmp	r0, #0
   1199e:	f000 8467 	beq.w	12270 <_dtoa_r+0xcb0>
   119a2:	9b00      	ldr	r3, [sp, #0]
   119a4:	63a3      	str	r3, [r4, #56]	; 0x38
   119a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119aa:	930b      	str	r3, [sp, #44]	; 0x2c
   119ac:	4699      	mov	r9, r3
   119ae:	2301      	movs	r3, #1
   119b0:	46b3      	mov	fp, r6
   119b2:	9307      	str	r3, [sp, #28]
   119b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   119b6:	2a00      	cmp	r2, #0
   119b8:	db55      	blt.n	11a66 <_dtoa_r+0x4a6>
   119ba:	9904      	ldr	r1, [sp, #16]
   119bc:	290e      	cmp	r1, #14
   119be:	dc52      	bgt.n	11a66 <_dtoa_r+0x4a6>
   119c0:	4bb7      	ldr	r3, [pc, #732]	; (11ca0 <_dtoa_r+0x6e0>)
   119c2:	f1bb 0f00 	cmp.w	fp, #0
   119c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   119ca:	ed93 6b00 	vldr	d6, [r3]
   119ce:	da15      	bge.n	119fc <_dtoa_r+0x43c>
   119d0:	f1b9 0f00 	cmp.w	r9, #0
   119d4:	dc12      	bgt.n	119fc <_dtoa_r+0x43c>
   119d6:	f040 82f2 	bne.w	11fbe <_dtoa_r+0x9fe>
   119da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   119de:	ee26 7b07 	vmul.f64	d7, d6, d7
   119e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   119e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   119ea:	46ca      	mov	sl, r9
   119ec:	464e      	mov	r6, r9
   119ee:	f200 826d 	bhi.w	11ecc <_dtoa_r+0x90c>
   119f2:	f8dd 8000 	ldr.w	r8, [sp]
   119f6:	ea6f 0b0b 	mvn.w	fp, fp
   119fa:	e270      	b.n	11ede <_dtoa_r+0x91e>
   119fc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11a00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11a04:	9900      	ldr	r1, [sp, #0]
   11a06:	ee17 3a10 	vmov	r3, s14
   11a0a:	f1b9 0f01 	cmp.w	r9, #1
   11a0e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11a12:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11a16:	f801 3b01 	strb.w	r3, [r1], #1
   11a1a:	eea5 8b46 	vfms.f64	d8, d5, d6
   11a1e:	f000 8334 	beq.w	1208a <_dtoa_r+0xaca>
   11a22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11a26:	2301      	movs	r3, #1
   11a28:	e011      	b.n	11a4e <_dtoa_r+0x48e>
   11a2a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11a2e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11a32:	3301      	adds	r3, #1
   11a34:	ee17 2a10 	vmov	r2, s14
   11a38:	454b      	cmp	r3, r9
   11a3a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   11a3e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11a42:	f801 2b01 	strb.w	r2, [r1], #1
   11a46:	eea5 8b46 	vfms.f64	d8, d5, d6
   11a4a:	f000 831e 	beq.w	1208a <_dtoa_r+0xaca>
   11a4e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11a52:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a5a:	d1e6      	bne.n	11a2a <_dtoa_r+0x46a>
   11a5c:	9b04      	ldr	r3, [sp, #16]
   11a5e:	3301      	adds	r3, #1
   11a60:	9304      	str	r3, [sp, #16]
   11a62:	4689      	mov	r9, r1
   11a64:	e0dc      	b.n	11c20 <_dtoa_r+0x660>
   11a66:	9b07      	ldr	r3, [sp, #28]
   11a68:	b343      	cbz	r3, 11abc <_dtoa_r+0x4fc>
   11a6a:	9b01      	ldr	r3, [sp, #4]
   11a6c:	2b01      	cmp	r3, #1
   11a6e:	f340 8276 	ble.w	11f5e <_dtoa_r+0x99e>
   11a72:	9b08      	ldr	r3, [sp, #32]
   11a74:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   11a78:	4553      	cmp	r3, sl
   11a7a:	f280 823f 	bge.w	11efc <_dtoa_r+0x93c>
   11a7e:	9b08      	ldr	r3, [sp, #32]
   11a80:	f8cd a020 	str.w	sl, [sp, #32]
   11a84:	ebaa 0203 	sub.w	r2, sl, r3
   11a88:	4417      	add	r7, r2
   11a8a:	f04f 0a00 	mov.w	sl, #0
   11a8e:	f1b9 0f00 	cmp.w	r9, #0
   11a92:	f2c0 8325 	blt.w	120e0 <_dtoa_r+0xb20>
   11a96:	9b06      	ldr	r3, [sp, #24]
   11a98:	9309      	str	r3, [sp, #36]	; 0x24
   11a9a:	444b      	add	r3, r9
   11a9c:	44c8      	add	r8, r9
   11a9e:	9306      	str	r3, [sp, #24]
   11aa0:	2101      	movs	r1, #1
   11aa2:	4620      	mov	r0, r4
   11aa4:	f7fe ff08 	bl	108b8 <__i2b>
   11aa8:	4606      	mov	r6, r0
   11aaa:	e00c      	b.n	11ac6 <_dtoa_r+0x506>
   11aac:	4b7d      	ldr	r3, [pc, #500]	; (11ca4 <_dtoa_r+0x6e4>)
   11aae:	9300      	str	r3, [sp, #0]
   11ab0:	9800      	ldr	r0, [sp, #0]
   11ab2:	b00f      	add	sp, #60	; 0x3c
   11ab4:	ecbd 8b02 	vpop	{d8}
   11ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11abc:	9b06      	ldr	r3, [sp, #24]
   11abe:	f8dd a020 	ldr.w	sl, [sp, #32]
   11ac2:	9e07      	ldr	r6, [sp, #28]
   11ac4:	9309      	str	r3, [sp, #36]	; 0x24
   11ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ac8:	b16b      	cbz	r3, 11ae6 <_dtoa_r+0x526>
   11aca:	f1b8 0f00 	cmp.w	r8, #0
   11ace:	dd0a      	ble.n	11ae6 <_dtoa_r+0x526>
   11ad0:	4543      	cmp	r3, r8
   11ad2:	9906      	ldr	r1, [sp, #24]
   11ad4:	461a      	mov	r2, r3
   11ad6:	bfa8      	it	ge
   11ad8:	4642      	movge	r2, r8
   11ada:	1a89      	subs	r1, r1, r2
   11adc:	1a9b      	subs	r3, r3, r2
   11ade:	9106      	str	r1, [sp, #24]
   11ae0:	9309      	str	r3, [sp, #36]	; 0x24
   11ae2:	eba8 0802 	sub.w	r8, r8, r2
   11ae6:	9b08      	ldr	r3, [sp, #32]
   11ae8:	b163      	cbz	r3, 11b04 <_dtoa_r+0x544>
   11aea:	9b07      	ldr	r3, [sp, #28]
   11aec:	2b00      	cmp	r3, #0
   11aee:	f000 82a7 	beq.w	12040 <_dtoa_r+0xa80>
   11af2:	f1ba 0f00 	cmp.w	sl, #0
   11af6:	f300 8204 	bgt.w	11f02 <_dtoa_r+0x942>
   11afa:	9b08      	ldr	r3, [sp, #32]
   11afc:	ebb3 020a 	subs.w	r2, r3, sl
   11b00:	f040 82ff 	bne.w	12102 <_dtoa_r+0xb42>
   11b04:	2101      	movs	r1, #1
   11b06:	4620      	mov	r0, r4
   11b08:	f7fe fed6 	bl	108b8 <__i2b>
   11b0c:	2f00      	cmp	r7, #0
   11b0e:	4682      	mov	sl, r0
   11b10:	f300 80af 	bgt.w	11c72 <_dtoa_r+0x6b2>
   11b14:	9b01      	ldr	r3, [sp, #4]
   11b16:	2b01      	cmp	r3, #1
   11b18:	f340 8187 	ble.w	11e2a <_dtoa_r+0x86a>
   11b1c:	2300      	movs	r3, #0
   11b1e:	9308      	str	r3, [sp, #32]
   11b20:	2001      	movs	r0, #1
   11b22:	2f00      	cmp	r7, #0
   11b24:	f040 80b1 	bne.w	11c8a <_dtoa_r+0x6ca>
   11b28:	4440      	add	r0, r8
   11b2a:	f010 001f 	ands.w	r0, r0, #31
   11b2e:	f000 817a 	beq.w	11e26 <_dtoa_r+0x866>
   11b32:	f1c0 0220 	rsb	r2, r0, #32
   11b36:	2a04      	cmp	r2, #4
   11b38:	f300 8088 	bgt.w	11c4c <_dtoa_r+0x68c>
   11b3c:	f040 81f6 	bne.w	11f2c <_dtoa_r+0x96c>
   11b40:	9b06      	ldr	r3, [sp, #24]
   11b42:	2b00      	cmp	r3, #0
   11b44:	dd05      	ble.n	11b52 <_dtoa_r+0x592>
   11b46:	4629      	mov	r1, r5
   11b48:	461a      	mov	r2, r3
   11b4a:	4620      	mov	r0, r4
   11b4c:	f7fe fff0 	bl	10b30 <__lshift>
   11b50:	4605      	mov	r5, r0
   11b52:	f1b8 0f00 	cmp.w	r8, #0
   11b56:	dd05      	ble.n	11b64 <_dtoa_r+0x5a4>
   11b58:	4651      	mov	r1, sl
   11b5a:	4642      	mov	r2, r8
   11b5c:	4620      	mov	r0, r4
   11b5e:	f7fe ffe7 	bl	10b30 <__lshift>
   11b62:	4682      	mov	sl, r0
   11b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11b66:	2b00      	cmp	r3, #0
   11b68:	f040 813f 	bne.w	11dea <_dtoa_r+0x82a>
   11b6c:	f1b9 0f00 	cmp.w	r9, #0
   11b70:	f340 8125 	ble.w	11dbe <_dtoa_r+0x7fe>
   11b74:	9b07      	ldr	r3, [sp, #28]
   11b76:	2b00      	cmp	r3, #0
   11b78:	f040 80a3 	bne.w	11cc2 <_dtoa_r+0x702>
   11b7c:	9b04      	ldr	r3, [sp, #16]
   11b7e:	3301      	adds	r3, #1
   11b80:	9304      	str	r3, [sp, #16]
   11b82:	f8dd 8000 	ldr.w	r8, [sp]
   11b86:	2701      	movs	r7, #1
   11b88:	e007      	b.n	11b9a <_dtoa_r+0x5da>
   11b8a:	4629      	mov	r1, r5
   11b8c:	2300      	movs	r3, #0
   11b8e:	220a      	movs	r2, #10
   11b90:	4620      	mov	r0, r4
   11b92:	f7fe fdef 	bl	10774 <__multadd>
   11b96:	3701      	adds	r7, #1
   11b98:	4605      	mov	r5, r0
   11b9a:	4651      	mov	r1, sl
   11b9c:	4628      	mov	r0, r5
   11b9e:	f7ff fc7b 	bl	11498 <quorem>
   11ba2:	45b9      	cmp	r9, r7
   11ba4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   11ba8:	f808 0b01 	strb.w	r0, [r8], #1
   11bac:	dced      	bgt.n	11b8a <_dtoa_r+0x5ca>
   11bae:	f1b9 0f00 	cmp.w	r9, #0
   11bb2:	9a00      	ldr	r2, [sp, #0]
   11bb4:	bfcc      	ite	gt
   11bb6:	46cb      	movgt	fp, r9
   11bb8:	f04f 0b01 	movle.w	fp, #1
   11bbc:	4603      	mov	r3, r0
   11bbe:	4493      	add	fp, r2
   11bc0:	2700      	movs	r7, #0
   11bc2:	4629      	mov	r1, r5
   11bc4:	2201      	movs	r2, #1
   11bc6:	4620      	mov	r0, r4
   11bc8:	9301      	str	r3, [sp, #4]
   11bca:	f7fe ffb1 	bl	10b30 <__lshift>
   11bce:	4651      	mov	r1, sl
   11bd0:	4605      	mov	r5, r0
   11bd2:	f7ff f825 	bl	10c20 <__mcmp>
   11bd6:	2800      	cmp	r0, #0
   11bd8:	f340 81af 	ble.w	11f3a <_dtoa_r+0x97a>
   11bdc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11be0:	9a00      	ldr	r2, [sp, #0]
   11be2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   11be6:	e004      	b.n	11bf2 <_dtoa_r+0x632>
   11be8:	455a      	cmp	r2, fp
   11bea:	f000 81b1 	beq.w	11f50 <_dtoa_r+0x990>
   11bee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11bf2:	2b39      	cmp	r3, #57	; 0x39
   11bf4:	f10b 0901 	add.w	r9, fp, #1
   11bf8:	d0f6      	beq.n	11be8 <_dtoa_r+0x628>
   11bfa:	3301      	adds	r3, #1
   11bfc:	f88b 3000 	strb.w	r3, [fp]
   11c00:	4651      	mov	r1, sl
   11c02:	4620      	mov	r0, r4
   11c04:	f7fe fdac 	bl	10760 <_Bfree>
   11c08:	b156      	cbz	r6, 11c20 <_dtoa_r+0x660>
   11c0a:	b12f      	cbz	r7, 11c18 <_dtoa_r+0x658>
   11c0c:	42b7      	cmp	r7, r6
   11c0e:	d003      	beq.n	11c18 <_dtoa_r+0x658>
   11c10:	4639      	mov	r1, r7
   11c12:	4620      	mov	r0, r4
   11c14:	f7fe fda4 	bl	10760 <_Bfree>
   11c18:	4631      	mov	r1, r6
   11c1a:	4620      	mov	r0, r4
   11c1c:	f7fe fda0 	bl	10760 <_Bfree>
   11c20:	4629      	mov	r1, r5
   11c22:	4620      	mov	r0, r4
   11c24:	f7fe fd9c 	bl	10760 <_Bfree>
   11c28:	2300      	movs	r3, #0
   11c2a:	f889 3000 	strb.w	r3, [r9]
   11c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11c32:	601a      	str	r2, [r3, #0]
   11c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11c36:	2b00      	cmp	r3, #0
   11c38:	f43f acfe 	beq.w	11638 <_dtoa_r+0x78>
   11c3c:	9800      	ldr	r0, [sp, #0]
   11c3e:	f8c3 9000 	str.w	r9, [r3]
   11c42:	b00f      	add	sp, #60	; 0x3c
   11c44:	ecbd 8b02 	vpop	{d8}
   11c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c4c:	f1c0 001c 	rsb	r0, r0, #28
   11c50:	9b06      	ldr	r3, [sp, #24]
   11c52:	4403      	add	r3, r0
   11c54:	9306      	str	r3, [sp, #24]
   11c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c58:	4403      	add	r3, r0
   11c5a:	9309      	str	r3, [sp, #36]	; 0x24
   11c5c:	4480      	add	r8, r0
   11c5e:	e76f      	b.n	11b40 <_dtoa_r+0x580>
   11c60:	f1c2 0220 	rsb	r2, r2, #32
   11c64:	fa06 f202 	lsl.w	r2, r6, r2
   11c68:	ee07 2a10 	vmov	s14, r2
   11c6c:	e509      	b.n	11682 <_dtoa_r+0xc2>
   11c6e:	2601      	movs	r6, #1
   11c70:	e563      	b.n	1173a <_dtoa_r+0x17a>
   11c72:	4601      	mov	r1, r0
   11c74:	463a      	mov	r2, r7
   11c76:	4620      	mov	r0, r4
   11c78:	f7fe fefa 	bl	10a70 <__pow5mult>
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	2b01      	cmp	r3, #1
   11c80:	4682      	mov	sl, r0
   11c82:	f340 81c5 	ble.w	12010 <_dtoa_r+0xa50>
   11c86:	2300      	movs	r3, #0
   11c88:	9308      	str	r3, [sp, #32]
   11c8a:	f8da 2010 	ldr.w	r2, [sl, #16]
   11c8e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11c92:	6910      	ldr	r0, [r2, #16]
   11c94:	f7fe fdc0 	bl	10818 <__hi0bits>
   11c98:	f1c0 0020 	rsb	r0, r0, #32
   11c9c:	e744      	b.n	11b28 <_dtoa_r+0x568>
   11c9e:	bf00      	nop
   11ca0:	200002a8 	.word	0x200002a8
   11ca4:	200027ac 	.word	0x200027ac
   11ca8:	4631      	mov	r1, r6
   11caa:	2300      	movs	r3, #0
   11cac:	220a      	movs	r2, #10
   11cae:	4620      	mov	r0, r4
   11cb0:	f7fe fd60 	bl	10774 <__multadd>
   11cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11cb6:	2b00      	cmp	r3, #0
   11cb8:	4606      	mov	r6, r0
   11cba:	f340 82ce 	ble.w	1225a <_dtoa_r+0xc9a>
   11cbe:	9704      	str	r7, [sp, #16]
   11cc0:	4699      	mov	r9, r3
   11cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	dd05      	ble.n	11cd4 <_dtoa_r+0x714>
   11cc8:	4631      	mov	r1, r6
   11cca:	461a      	mov	r2, r3
   11ccc:	4620      	mov	r0, r4
   11cce:	f7fe ff2f 	bl	10b30 <__lshift>
   11cd2:	4606      	mov	r6, r0
   11cd4:	9b08      	ldr	r3, [sp, #32]
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	f040 81eb 	bne.w	120b2 <_dtoa_r+0xaf2>
   11cdc:	46b0      	mov	r8, r6
   11cde:	9b02      	ldr	r3, [sp, #8]
   11ce0:	9f00      	ldr	r7, [sp, #0]
   11ce2:	f003 0201 	and.w	r2, r3, #1
   11ce6:	1e7b      	subs	r3, r7, #1
   11ce8:	444b      	add	r3, r9
   11cea:	9308      	str	r3, [sp, #32]
   11cec:	9b01      	ldr	r3, [sp, #4]
   11cee:	920a      	str	r2, [sp, #40]	; 0x28
   11cf0:	4313      	orrs	r3, r2
   11cf2:	9309      	str	r3, [sp, #36]	; 0x24
   11cf4:	4651      	mov	r1, sl
   11cf6:	4628      	mov	r0, r5
   11cf8:	f7ff fbce 	bl	11498 <quorem>
   11cfc:	4631      	mov	r1, r6
   11cfe:	4683      	mov	fp, r0
   11d00:	4628      	mov	r0, r5
   11d02:	f7fe ff8d 	bl	10c20 <__mcmp>
   11d06:	4642      	mov	r2, r8
   11d08:	4651      	mov	r1, sl
   11d0a:	4681      	mov	r9, r0
   11d0c:	4620      	mov	r0, r4
   11d0e:	f7fe ffa9 	bl	10c64 <__mdiff>
   11d12:	68c2      	ldr	r2, [r0, #12]
   11d14:	4601      	mov	r1, r0
   11d16:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   11d1a:	2a00      	cmp	r2, #0
   11d1c:	d142      	bne.n	11da4 <_dtoa_r+0x7e4>
   11d1e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   11d22:	4628      	mov	r0, r5
   11d24:	f7fe ff7c 	bl	10c20 <__mcmp>
   11d28:	9906      	ldr	r1, [sp, #24]
   11d2a:	9002      	str	r0, [sp, #8]
   11d2c:	4620      	mov	r0, r4
   11d2e:	f7fe fd17 	bl	10760 <_Bfree>
   11d32:	9a02      	ldr	r2, [sp, #8]
   11d34:	9b07      	ldr	r3, [sp, #28]
   11d36:	b91a      	cbnz	r2, 11d40 <_dtoa_r+0x780>
   11d38:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d3a:	2900      	cmp	r1, #0
   11d3c:	f000 827e 	beq.w	1223c <_dtoa_r+0xc7c>
   11d40:	f1b9 0f00 	cmp.w	r9, #0
   11d44:	f2c0 8183 	blt.w	1204e <_dtoa_r+0xa8e>
   11d48:	9901      	ldr	r1, [sp, #4]
   11d4a:	ea49 0901 	orr.w	r9, r9, r1
   11d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11d50:	ea51 0909 	orrs.w	r9, r1, r9
   11d54:	f000 817b 	beq.w	1204e <_dtoa_r+0xa8e>
   11d58:	2a00      	cmp	r2, #0
   11d5a:	f300 81c6 	bgt.w	120ea <_dtoa_r+0xb2a>
   11d5e:	9a08      	ldr	r2, [sp, #32]
   11d60:	703b      	strb	r3, [r7, #0]
   11d62:	f107 0901 	add.w	r9, r7, #1
   11d66:	4297      	cmp	r7, r2
   11d68:	46cb      	mov	fp, r9
   11d6a:	f000 81c4 	beq.w	120f6 <_dtoa_r+0xb36>
   11d6e:	4629      	mov	r1, r5
   11d70:	2300      	movs	r3, #0
   11d72:	220a      	movs	r2, #10
   11d74:	4620      	mov	r0, r4
   11d76:	f7fe fcfd 	bl	10774 <__multadd>
   11d7a:	4546      	cmp	r6, r8
   11d7c:	4605      	mov	r5, r0
   11d7e:	4631      	mov	r1, r6
   11d80:	f04f 0300 	mov.w	r3, #0
   11d84:	f04f 020a 	mov.w	r2, #10
   11d88:	4620      	mov	r0, r4
   11d8a:	d012      	beq.n	11db2 <_dtoa_r+0x7f2>
   11d8c:	f7fe fcf2 	bl	10774 <__multadd>
   11d90:	4641      	mov	r1, r8
   11d92:	4606      	mov	r6, r0
   11d94:	2300      	movs	r3, #0
   11d96:	220a      	movs	r2, #10
   11d98:	4620      	mov	r0, r4
   11d9a:	f7fe fceb 	bl	10774 <__multadd>
   11d9e:	464f      	mov	r7, r9
   11da0:	4680      	mov	r8, r0
   11da2:	e7a7      	b.n	11cf4 <_dtoa_r+0x734>
   11da4:	4620      	mov	r0, r4
   11da6:	9302      	str	r3, [sp, #8]
   11da8:	f7fe fcda 	bl	10760 <_Bfree>
   11dac:	9b02      	ldr	r3, [sp, #8]
   11dae:	2201      	movs	r2, #1
   11db0:	e7c6      	b.n	11d40 <_dtoa_r+0x780>
   11db2:	f7fe fcdf 	bl	10774 <__multadd>
   11db6:	464f      	mov	r7, r9
   11db8:	4606      	mov	r6, r0
   11dba:	4680      	mov	r8, r0
   11dbc:	e79a      	b.n	11cf4 <_dtoa_r+0x734>
   11dbe:	9b01      	ldr	r3, [sp, #4]
   11dc0:	2b02      	cmp	r3, #2
   11dc2:	dc71      	bgt.n	11ea8 <_dtoa_r+0x8e8>
   11dc4:	9b07      	ldr	r3, [sp, #28]
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	f47f af7b 	bne.w	11cc2 <_dtoa_r+0x702>
   11dcc:	9b04      	ldr	r3, [sp, #16]
   11dce:	4651      	mov	r1, sl
   11dd0:	3301      	adds	r3, #1
   11dd2:	4628      	mov	r0, r5
   11dd4:	9304      	str	r3, [sp, #16]
   11dd6:	f7ff fb5f 	bl	11498 <quorem>
   11dda:	f8dd b000 	ldr.w	fp, [sp]
   11dde:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11de2:	f80b 3b01 	strb.w	r3, [fp], #1
   11de6:	2700      	movs	r7, #0
   11de8:	e6eb      	b.n	11bc2 <_dtoa_r+0x602>
   11dea:	4651      	mov	r1, sl
   11dec:	4628      	mov	r0, r5
   11dee:	f7fe ff17 	bl	10c20 <__mcmp>
   11df2:	2800      	cmp	r0, #0
   11df4:	f6bf aeba 	bge.w	11b6c <_dtoa_r+0x5ac>
   11df8:	4629      	mov	r1, r5
   11dfa:	2300      	movs	r3, #0
   11dfc:	220a      	movs	r2, #10
   11dfe:	4620      	mov	r0, r4
   11e00:	f7fe fcb8 	bl	10774 <__multadd>
   11e04:	9b04      	ldr	r3, [sp, #16]
   11e06:	1e5f      	subs	r7, r3, #1
   11e08:	9b07      	ldr	r3, [sp, #28]
   11e0a:	4605      	mov	r5, r0
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	f47f af4b 	bne.w	11ca8 <_dtoa_r+0x6e8>
   11e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11e14:	2b00      	cmp	r3, #0
   11e16:	f340 8218 	ble.w	1224a <_dtoa_r+0xc8a>
   11e1a:	4699      	mov	r9, r3
   11e1c:	e6b1      	b.n	11b82 <_dtoa_r+0x5c2>
   11e1e:	4bbc      	ldr	r3, [pc, #752]	; (12110 <_dtoa_r+0xb50>)
   11e20:	9300      	str	r3, [sp, #0]
   11e22:	3303      	adds	r3, #3
   11e24:	e4a4      	b.n	11770 <_dtoa_r+0x1b0>
   11e26:	201c      	movs	r0, #28
   11e28:	e712      	b.n	11c50 <_dtoa_r+0x690>
   11e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11e2e:	2800      	cmp	r0, #0
   11e30:	f47f ae74 	bne.w	11b1c <_dtoa_r+0x55c>
   11e34:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11e38:	2a00      	cmp	r2, #0
   11e3a:	f000 80f4 	beq.w	12026 <_dtoa_r+0xa66>
   11e3e:	9b02      	ldr	r3, [sp, #8]
   11e40:	9308      	str	r3, [sp, #32]
   11e42:	e66d      	b.n	11b20 <_dtoa_r+0x560>
   11e44:	2301      	movs	r3, #1
   11e46:	9307      	str	r3, [sp, #28]
   11e48:	9b04      	ldr	r3, [sp, #16]
   11e4a:	445b      	add	r3, fp
   11e4c:	f103 0901 	add.w	r9, r3, #1
   11e50:	f1b9 0f01 	cmp.w	r9, #1
   11e54:	46cc      	mov	ip, r9
   11e56:	930b      	str	r3, [sp, #44]	; 0x2c
   11e58:	bfb8      	it	lt
   11e5a:	f04f 0c01 	movlt.w	ip, #1
   11e5e:	2100      	movs	r1, #0
   11e60:	f1bc 0f17 	cmp.w	ip, #23
   11e64:	63e1      	str	r1, [r4, #60]	; 0x3c
   11e66:	f77f acbc 	ble.w	117e2 <_dtoa_r+0x222>
   11e6a:	2001      	movs	r0, #1
   11e6c:	2204      	movs	r2, #4
   11e6e:	0052      	lsls	r2, r2, #1
   11e70:	f102 0314 	add.w	r3, r2, #20
   11e74:	4563      	cmp	r3, ip
   11e76:	4601      	mov	r1, r0
   11e78:	f100 0001 	add.w	r0, r0, #1
   11e7c:	d9f7      	bls.n	11e6e <_dtoa_r+0x8ae>
   11e7e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11e80:	e4af      	b.n	117e2 <_dtoa_r+0x222>
   11e82:	2301      	movs	r3, #1
   11e84:	9307      	str	r3, [sp, #28]
   11e86:	f1bb 0f00 	cmp.w	fp, #0
   11e8a:	dd52      	ble.n	11f32 <_dtoa_r+0x972>
   11e8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11e90:	46d9      	mov	r9, fp
   11e92:	46dc      	mov	ip, fp
   11e94:	e7e3      	b.n	11e5e <_dtoa_r+0x89e>
   11e96:	2300      	movs	r3, #0
   11e98:	9307      	str	r3, [sp, #28]
   11e9a:	e7d5      	b.n	11e48 <_dtoa_r+0x888>
   11e9c:	2300      	movs	r3, #0
   11e9e:	9307      	str	r3, [sp, #28]
   11ea0:	e7f1      	b.n	11e86 <_dtoa_r+0x8c6>
   11ea2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11ea6:	9704      	str	r7, [sp, #16]
   11ea8:	f1b9 0f00 	cmp.w	r9, #0
   11eac:	f47f ada1 	bne.w	119f2 <_dtoa_r+0x432>
   11eb0:	4651      	mov	r1, sl
   11eb2:	464b      	mov	r3, r9
   11eb4:	2205      	movs	r2, #5
   11eb6:	4620      	mov	r0, r4
   11eb8:	f7fe fc5c 	bl	10774 <__multadd>
   11ebc:	4601      	mov	r1, r0
   11ebe:	4682      	mov	sl, r0
   11ec0:	4628      	mov	r0, r5
   11ec2:	f7fe fead 	bl	10c20 <__mcmp>
   11ec6:	2800      	cmp	r0, #0
   11ec8:	f77f ad93 	ble.w	119f2 <_dtoa_r+0x432>
   11ecc:	9b04      	ldr	r3, [sp, #16]
   11ece:	f103 0b01 	add.w	fp, r3, #1
   11ed2:	9b00      	ldr	r3, [sp, #0]
   11ed4:	2231      	movs	r2, #49	; 0x31
   11ed6:	4698      	mov	r8, r3
   11ed8:	f803 2b01 	strb.w	r2, [r3], #1
   11edc:	9300      	str	r3, [sp, #0]
   11ede:	4651      	mov	r1, sl
   11ee0:	4620      	mov	r0, r4
   11ee2:	f7fe fc3d 	bl	10760 <_Bfree>
   11ee6:	f10b 0301 	add.w	r3, fp, #1
   11eea:	f8dd 9000 	ldr.w	r9, [sp]
   11eee:	9304      	str	r3, [sp, #16]
   11ef0:	f8cd 8000 	str.w	r8, [sp]
   11ef4:	2e00      	cmp	r6, #0
   11ef6:	f47f ae8f 	bne.w	11c18 <_dtoa_r+0x658>
   11efa:	e691      	b.n	11c20 <_dtoa_r+0x660>
   11efc:	eba3 0a0a 	sub.w	sl, r3, sl
   11f00:	e5c5      	b.n	11a8e <_dtoa_r+0x4ce>
   11f02:	4631      	mov	r1, r6
   11f04:	4652      	mov	r2, sl
   11f06:	4620      	mov	r0, r4
   11f08:	f7fe fdb2 	bl	10a70 <__pow5mult>
   11f0c:	462a      	mov	r2, r5
   11f0e:	4601      	mov	r1, r0
   11f10:	4606      	mov	r6, r0
   11f12:	4620      	mov	r0, r4
   11f14:	f7fe fcfe 	bl	10914 <__multiply>
   11f18:	4629      	mov	r1, r5
   11f1a:	4605      	mov	r5, r0
   11f1c:	4620      	mov	r0, r4
   11f1e:	f7fe fc1f 	bl	10760 <_Bfree>
   11f22:	e5ea      	b.n	11afa <_dtoa_r+0x53a>
   11f24:	2002      	movs	r0, #2
   11f26:	eeb0 5b48 	vmov.f64	d5, d8
   11f2a:	e481      	b.n	11830 <_dtoa_r+0x270>
   11f2c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11f30:	e68e      	b.n	11c50 <_dtoa_r+0x690>
   11f32:	f04f 0b01 	mov.w	fp, #1
   11f36:	46d9      	mov	r9, fp
   11f38:	e44f      	b.n	117da <_dtoa_r+0x21a>
   11f3a:	d103      	bne.n	11f44 <_dtoa_r+0x984>
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	07db      	lsls	r3, r3, #31
   11f40:	f53f ae4c 	bmi.w	11bdc <_dtoa_r+0x61c>
   11f44:	46d9      	mov	r9, fp
   11f46:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11f4a:	2b30      	cmp	r3, #48	; 0x30
   11f4c:	d0fa      	beq.n	11f44 <_dtoa_r+0x984>
   11f4e:	e657      	b.n	11c00 <_dtoa_r+0x640>
   11f50:	9b04      	ldr	r3, [sp, #16]
   11f52:	9a00      	ldr	r2, [sp, #0]
   11f54:	3301      	adds	r3, #1
   11f56:	9304      	str	r3, [sp, #16]
   11f58:	2331      	movs	r3, #49	; 0x31
   11f5a:	7013      	strb	r3, [r2, #0]
   11f5c:	e650      	b.n	11c00 <_dtoa_r+0x640>
   11f5e:	f1ba 0f00 	cmp.w	sl, #0
   11f62:	f000 8123 	beq.w	121ac <_dtoa_r+0xbec>
   11f66:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11f6a:	9b06      	ldr	r3, [sp, #24]
   11f6c:	9309      	str	r3, [sp, #36]	; 0x24
   11f6e:	4413      	add	r3, r2
   11f70:	f8dd a020 	ldr.w	sl, [sp, #32]
   11f74:	9306      	str	r3, [sp, #24]
   11f76:	4490      	add	r8, r2
   11f78:	e592      	b.n	11aa0 <_dtoa_r+0x4e0>
   11f7a:	ee07 0a90 	vmov	s15, r0
   11f7e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11f82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11f86:	eea6 5b07 	vfma.f64	d5, d6, d7
   11f8a:	ee15 2a90 	vmov	r2, s11
   11f8e:	ec51 0b15 	vmov	r0, r1, d5
   11f92:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11f96:	ec41 0b15 	vmov	d5, r0, r1
   11f9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11f9e:	ee36 7b47 	vsub.f64	d7, d6, d7
   11fa2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11faa:	f300 8137 	bgt.w	1221c <_dtoa_r+0xc5c>
   11fae:	eeb1 5b45 	vneg.f64	d5, d5
   11fb2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fba:	f57f acfb 	bpl.w	119b4 <_dtoa_r+0x3f4>
   11fbe:	f04f 0a00 	mov.w	sl, #0
   11fc2:	4656      	mov	r6, sl
   11fc4:	e515      	b.n	119f2 <_dtoa_r+0x432>
   11fc6:	f000 80f5 	beq.w	121b4 <_dtoa_r+0xbf4>
   11fca:	9b04      	ldr	r3, [sp, #16]
   11fcc:	4951      	ldr	r1, [pc, #324]	; (12114 <_dtoa_r+0xb54>)
   11fce:	425a      	negs	r2, r3
   11fd0:	f002 000f 	and.w	r0, r2, #15
   11fd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11fd8:	ed91 6b00 	vldr	d6, [r1]
   11fdc:	1112      	asrs	r2, r2, #4
   11fde:	ee28 6b06 	vmul.f64	d6, d8, d6
   11fe2:	f000 8142 	beq.w	1226a <_dtoa_r+0xcaa>
   11fe6:	eeb0 7b46 	vmov.f64	d7, d6
   11fea:	494b      	ldr	r1, [pc, #300]	; (12118 <_dtoa_r+0xb58>)
   11fec:	2600      	movs	r6, #0
   11fee:	2002      	movs	r0, #2
   11ff0:	07d3      	lsls	r3, r2, #31
   11ff2:	d505      	bpl.n	12000 <_dtoa_r+0xa40>
   11ff4:	ed91 5b00 	vldr	d5, [r1]
   11ff8:	3001      	adds	r0, #1
   11ffa:	2601      	movs	r6, #1
   11ffc:	ee27 7b05 	vmul.f64	d7, d7, d5
   12000:	1052      	asrs	r2, r2, #1
   12002:	f101 0108 	add.w	r1, r1, #8
   12006:	d1f3      	bne.n	11ff0 <_dtoa_r+0xa30>
   12008:	2e00      	cmp	r6, #0
   1200a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1200e:	e41e      	b.n	1184e <_dtoa_r+0x28e>
   12010:	9b02      	ldr	r3, [sp, #8]
   12012:	2b00      	cmp	r3, #0
   12014:	f47f ae37 	bne.w	11c86 <_dtoa_r+0x6c6>
   12018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1201c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12020:	2a00      	cmp	r2, #0
   12022:	f040 8137 	bne.w	12294 <_dtoa_r+0xcd4>
   12026:	4a3d      	ldr	r2, [pc, #244]	; (1211c <_dtoa_r+0xb5c>)
   12028:	400a      	ands	r2, r1
   1202a:	2a00      	cmp	r2, #0
   1202c:	f000 80fa 	beq.w	12224 <_dtoa_r+0xc64>
   12030:	9b06      	ldr	r3, [sp, #24]
   12032:	3301      	adds	r3, #1
   12034:	9306      	str	r3, [sp, #24]
   12036:	2301      	movs	r3, #1
   12038:	f108 0801 	add.w	r8, r8, #1
   1203c:	9308      	str	r3, [sp, #32]
   1203e:	e56f      	b.n	11b20 <_dtoa_r+0x560>
   12040:	4629      	mov	r1, r5
   12042:	9a08      	ldr	r2, [sp, #32]
   12044:	4620      	mov	r0, r4
   12046:	f7fe fd13 	bl	10a70 <__pow5mult>
   1204a:	4605      	mov	r5, r0
   1204c:	e55a      	b.n	11b04 <_dtoa_r+0x544>
   1204e:	2a00      	cmp	r2, #0
   12050:	dd12      	ble.n	12078 <_dtoa_r+0xab8>
   12052:	4629      	mov	r1, r5
   12054:	2201      	movs	r2, #1
   12056:	4620      	mov	r0, r4
   12058:	9301      	str	r3, [sp, #4]
   1205a:	f7fe fd69 	bl	10b30 <__lshift>
   1205e:	4651      	mov	r1, sl
   12060:	4605      	mov	r5, r0
   12062:	f7fe fddd 	bl	10c20 <__mcmp>
   12066:	2800      	cmp	r0, #0
   12068:	9b01      	ldr	r3, [sp, #4]
   1206a:	f340 80e1 	ble.w	12230 <_dtoa_r+0xc70>
   1206e:	2b39      	cmp	r3, #57	; 0x39
   12070:	f000 80ca 	beq.w	12208 <_dtoa_r+0xc48>
   12074:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   12078:	46b9      	mov	r9, r7
   1207a:	f809 3b01 	strb.w	r3, [r9], #1
   1207e:	9b04      	ldr	r3, [sp, #16]
   12080:	3301      	adds	r3, #1
   12082:	4637      	mov	r7, r6
   12084:	9304      	str	r3, [sp, #16]
   12086:	4646      	mov	r6, r8
   12088:	e5ba      	b.n	11c00 <_dtoa_r+0x640>
   1208a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1208e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   12092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12096:	dc0a      	bgt.n	120ae <_dtoa_r+0xaee>
   12098:	eeb4 8b46 	vcmp.f64	d8, d6
   1209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120a0:	f47f acdc 	bne.w	11a5c <_dtoa_r+0x49c>
   120a4:	ee17 3a10 	vmov	r3, s14
   120a8:	07d8      	lsls	r0, r3, #31
   120aa:	f57f acd7 	bpl.w	11a5c <_dtoa_r+0x49c>
   120ae:	9a00      	ldr	r2, [sp, #0]
   120b0:	e454      	b.n	1195c <_dtoa_r+0x39c>
   120b2:	6871      	ldr	r1, [r6, #4]
   120b4:	4620      	mov	r0, r4
   120b6:	f7fe fb2d 	bl	10714 <_Balloc>
   120ba:	4607      	mov	r7, r0
   120bc:	2800      	cmp	r0, #0
   120be:	f000 80de 	beq.w	1227e <_dtoa_r+0xcbe>
   120c2:	6933      	ldr	r3, [r6, #16]
   120c4:	3302      	adds	r3, #2
   120c6:	009a      	lsls	r2, r3, #2
   120c8:	f106 010c 	add.w	r1, r6, #12
   120cc:	300c      	adds	r0, #12
   120ce:	f7f0 ff3f 	bl	2f50 <memcpy>
   120d2:	4639      	mov	r1, r7
   120d4:	2201      	movs	r2, #1
   120d6:	4620      	mov	r0, r4
   120d8:	f7fe fd2a 	bl	10b30 <__lshift>
   120dc:	4680      	mov	r8, r0
   120de:	e5fe      	b.n	11cde <_dtoa_r+0x71e>
   120e0:	9b06      	ldr	r3, [sp, #24]
   120e2:	eba3 0309 	sub.w	r3, r3, r9
   120e6:	9309      	str	r3, [sp, #36]	; 0x24
   120e8:	e4da      	b.n	11aa0 <_dtoa_r+0x4e0>
   120ea:	2b39      	cmp	r3, #57	; 0x39
   120ec:	f000 808c 	beq.w	12208 <_dtoa_r+0xc48>
   120f0:	46b9      	mov	r9, r7
   120f2:	3301      	adds	r3, #1
   120f4:	e7c1      	b.n	1207a <_dtoa_r+0xaba>
   120f6:	9a04      	ldr	r2, [sp, #16]
   120f8:	3201      	adds	r2, #1
   120fa:	4637      	mov	r7, r6
   120fc:	9204      	str	r2, [sp, #16]
   120fe:	4646      	mov	r6, r8
   12100:	e55f      	b.n	11bc2 <_dtoa_r+0x602>
   12102:	4629      	mov	r1, r5
   12104:	4620      	mov	r0, r4
   12106:	f7fe fcb3 	bl	10a70 <__pow5mult>
   1210a:	4605      	mov	r5, r0
   1210c:	e4fa      	b.n	11b04 <_dtoa_r+0x544>
   1210e:	bf00      	nop
   12110:	20001854 	.word	0x20001854
   12114:	200002a8 	.word	0x200002a8
   12118:	20000280 	.word	0x20000280
   1211c:	7ff00000 	.word	0x7ff00000
   12120:	4b5e      	ldr	r3, [pc, #376]	; (1229c <_dtoa_r+0xcdc>)
   12122:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12126:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1212a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1212e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   12132:	ee36 7b47 	vsub.f64	d7, d6, d7
   12136:	ec41 0b16 	vmov	d6, r0, r1
   1213a:	ee15 1a90 	vmov	r1, s11
   1213e:	ee23 3b06 	vmul.f64	d3, d3, d6
   12142:	9800      	ldr	r0, [sp, #0]
   12144:	3130      	adds	r1, #48	; 0x30
   12146:	2a01      	cmp	r2, #1
   12148:	f800 1b01 	strb.w	r1, [r0], #1
   1214c:	f000 8083 	beq.w	12256 <_dtoa_r+0xc96>
   12150:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12154:	9b00      	ldr	r3, [sp, #0]
   12156:	1899      	adds	r1, r3, r2
   12158:	ee27 7b04 	vmul.f64	d7, d7, d4
   1215c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12160:	ee16 3a90 	vmov	r3, s13
   12164:	3330      	adds	r3, #48	; 0x30
   12166:	f800 3b01 	strb.w	r3, [r0], #1
   1216a:	4281      	cmp	r1, r0
   1216c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   12170:	ee37 7b45 	vsub.f64	d7, d7, d5
   12174:	d1f0      	bne.n	12158 <_dtoa_r+0xb98>
   12176:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1217a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1217e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12186:	f53f abe3 	bmi.w	11950 <_dtoa_r+0x390>
   1218a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1218e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12196:	f77f ac0d 	ble.w	119b4 <_dtoa_r+0x3f4>
   1219a:	4689      	mov	r9, r1
   1219c:	3901      	subs	r1, #1
   1219e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   121a2:	2b30      	cmp	r3, #48	; 0x30
   121a4:	d0f9      	beq.n	1219a <_dtoa_r+0xbda>
   121a6:	1c73      	adds	r3, r6, #1
   121a8:	9304      	str	r3, [sp, #16]
   121aa:	e539      	b.n	11c20 <_dtoa_r+0x660>
   121ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   121b2:	e6da      	b.n	11f6a <_dtoa_r+0x9aa>
   121b4:	2002      	movs	r0, #2
   121b6:	eeb0 6b48 	vmov.f64	d6, d8
   121ba:	f7ff bb48 	b.w	1184e <_dtoa_r+0x28e>
   121be:	f1b9 0f00 	cmp.w	r9, #0
   121c2:	f43f aeda 	beq.w	11f7a <_dtoa_r+0x9ba>
   121c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   121c8:	2a00      	cmp	r2, #0
   121ca:	f77f abf3 	ble.w	119b4 <_dtoa_r+0x3f4>
   121ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   121d2:	ee26 6b04 	vmul.f64	d6, d6, d4
   121d6:	3001      	adds	r0, #1
   121d8:	ee07 0a90 	vmov	s15, r0
   121dc:	9b04      	ldr	r3, [sp, #16]
   121de:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   121e2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   121e6:	eea6 7b05 	vfma.f64	d7, d6, d5
   121ea:	ee17 ca90 	vmov	ip, s15
   121ee:	ec51 0b17 	vmov	r0, r1, d7
   121f2:	1e5e      	subs	r6, r3, #1
   121f4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   121f8:	f7ff bb47 	b.w	1188a <_dtoa_r+0x2ca>
   121fc:	9b04      	ldr	r3, [sp, #16]
   121fe:	3301      	adds	r3, #1
   12200:	9304      	str	r3, [sp, #16]
   12202:	2331      	movs	r3, #49	; 0x31
   12204:	f7ff bbb1 	b.w	1196a <_dtoa_r+0x3aa>
   12208:	9b04      	ldr	r3, [sp, #16]
   1220a:	46bb      	mov	fp, r7
   1220c:	3301      	adds	r3, #1
   1220e:	9304      	str	r3, [sp, #16]
   12210:	2339      	movs	r3, #57	; 0x39
   12212:	4637      	mov	r7, r6
   12214:	f80b 3b01 	strb.w	r3, [fp], #1
   12218:	4646      	mov	r6, r8
   1221a:	e4e1      	b.n	11be0 <_dtoa_r+0x620>
   1221c:	f04f 0a00 	mov.w	sl, #0
   12220:	4656      	mov	r6, sl
   12222:	e653      	b.n	11ecc <_dtoa_r+0x90c>
   12224:	9208      	str	r2, [sp, #32]
   12226:	e47b      	b.n	11b20 <_dtoa_r+0x560>
   12228:	1c73      	adds	r3, r6, #1
   1222a:	9304      	str	r3, [sp, #16]
   1222c:	4689      	mov	r9, r1
   1222e:	e4f7      	b.n	11c20 <_dtoa_r+0x660>
   12230:	f47f af22 	bne.w	12078 <_dtoa_r+0xab8>
   12234:	07da      	lsls	r2, r3, #31
   12236:	f57f af1f 	bpl.w	12078 <_dtoa_r+0xab8>
   1223a:	e718      	b.n	1206e <_dtoa_r+0xaae>
   1223c:	2b39      	cmp	r3, #57	; 0x39
   1223e:	d0e3      	beq.n	12208 <_dtoa_r+0xc48>
   12240:	f1b9 0f00 	cmp.w	r9, #0
   12244:	f73f af16 	bgt.w	12074 <_dtoa_r+0xab4>
   12248:	e716      	b.n	12078 <_dtoa_r+0xab8>
   1224a:	9b01      	ldr	r3, [sp, #4]
   1224c:	2b02      	cmp	r3, #2
   1224e:	f73f ae28 	bgt.w	11ea2 <_dtoa_r+0x8e2>
   12252:	9704      	str	r7, [sp, #16]
   12254:	e5ba      	b.n	11dcc <_dtoa_r+0x80c>
   12256:	4601      	mov	r1, r0
   12258:	e78d      	b.n	12176 <_dtoa_r+0xbb6>
   1225a:	9b01      	ldr	r3, [sp, #4]
   1225c:	2b02      	cmp	r3, #2
   1225e:	f73f ae20 	bgt.w	11ea2 <_dtoa_r+0x8e2>
   12262:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12266:	9704      	str	r7, [sp, #16]
   12268:	e52b      	b.n	11cc2 <_dtoa_r+0x702>
   1226a:	2002      	movs	r0, #2
   1226c:	f7ff baef 	b.w	1184e <_dtoa_r+0x28e>
   12270:	4b0b      	ldr	r3, [pc, #44]	; (122a0 <_dtoa_r+0xce0>)
   12272:	480c      	ldr	r0, [pc, #48]	; (122a4 <_dtoa_r+0xce4>)
   12274:	2200      	movs	r2, #0
   12276:	f240 11af 	movw	r1, #431	; 0x1af
   1227a:	f7ff f8b1 	bl	113e0 <__assert_func>
   1227e:	4b08      	ldr	r3, [pc, #32]	; (122a0 <_dtoa_r+0xce0>)
   12280:	4808      	ldr	r0, [pc, #32]	; (122a4 <_dtoa_r+0xce4>)
   12282:	463a      	mov	r2, r7
   12284:	f240 21ef 	movw	r1, #751	; 0x2ef
   12288:	f7ff f8aa 	bl	113e0 <__assert_func>
   1228c:	4b06      	ldr	r3, [pc, #24]	; (122a8 <_dtoa_r+0xce8>)
   1228e:	9300      	str	r3, [sp, #0]
   12290:	f7ff b9d2 	b.w	11638 <_dtoa_r+0x78>
   12294:	9b02      	ldr	r3, [sp, #8]
   12296:	9308      	str	r3, [sp, #32]
   12298:	e4f7      	b.n	11c8a <_dtoa_r+0x6ca>
   1229a:	bf00      	nop
   1229c:	200002a8 	.word	0x200002a8
   122a0:	200016cc 	.word	0x200016cc
   122a4:	20001858 	.word	0x20001858
   122a8:	20001848 	.word	0x20001848

000122ac <fiprintf>:
   122ac:	b40e      	push	{r1, r2, r3}
   122ae:	b510      	push	{r4, lr}
   122b0:	b083      	sub	sp, #12
   122b2:	ab05      	add	r3, sp, #20
   122b4:	4c06      	ldr	r4, [pc, #24]	; (122d0 <fiprintf+0x24>)
   122b6:	f853 2b04 	ldr.w	r2, [r3], #4
   122ba:	9301      	str	r3, [sp, #4]
   122bc:	4601      	mov	r1, r0
   122be:	6820      	ldr	r0, [r4, #0]
   122c0:	f000 f8c4 	bl	1244c <_vfiprintf_r>
   122c4:	b003      	add	sp, #12
   122c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122ca:	b003      	add	sp, #12
   122cc:	4770      	bx	lr
   122ce:	bf00      	nop
   122d0:	2000359c 	.word	0x2000359c

000122d4 <__ssprint_r>:
   122d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d8:	6893      	ldr	r3, [r2, #8]
   122da:	6817      	ldr	r7, [r2, #0]
   122dc:	b083      	sub	sp, #12
   122de:	4692      	mov	sl, r2
   122e0:	2b00      	cmp	r3, #0
   122e2:	d070      	beq.n	123c6 <__ssprint_r+0xf2>
   122e4:	4681      	mov	r9, r0
   122e6:	688a      	ldr	r2, [r1, #8]
   122e8:	6808      	ldr	r0, [r1, #0]
   122ea:	460c      	mov	r4, r1
   122ec:	3708      	adds	r7, #8
   122ee:	e043      	b.n	12378 <__ssprint_r+0xa4>
   122f0:	89a3      	ldrh	r3, [r4, #12]
   122f2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   122f6:	d02e      	beq.n	12356 <__ssprint_r+0x82>
   122f8:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   122fc:	eba0 0801 	sub.w	r8, r0, r1
   12300:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12304:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   12308:	f108 0001 	add.w	r0, r8, #1
   1230c:	1076      	asrs	r6, r6, #1
   1230e:	4428      	add	r0, r5
   12310:	42b0      	cmp	r0, r6
   12312:	4632      	mov	r2, r6
   12314:	bf84      	itt	hi
   12316:	4606      	movhi	r6, r0
   12318:	4632      	movhi	r2, r6
   1231a:	055b      	lsls	r3, r3, #21
   1231c:	d537      	bpl.n	1238e <__ssprint_r+0xba>
   1231e:	4611      	mov	r1, r2
   12320:	4648      	mov	r0, r9
   12322:	f7fa fd63 	bl	cdec <_malloc_r>
   12326:	9001      	str	r0, [sp, #4]
   12328:	2800      	cmp	r0, #0
   1232a:	d03a      	beq.n	123a2 <__ssprint_r+0xce>
   1232c:	4642      	mov	r2, r8
   1232e:	6921      	ldr	r1, [r4, #16]
   12330:	f7f0 fe0e 	bl	2f50 <memcpy>
   12334:	89a2      	ldrh	r2, [r4, #12]
   12336:	9b01      	ldr	r3, [sp, #4]
   12338:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1233c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12340:	81a2      	strh	r2, [r4, #12]
   12342:	eba6 0208 	sub.w	r2, r6, r8
   12346:	eb03 0008 	add.w	r0, r3, r8
   1234a:	6166      	str	r6, [r4, #20]
   1234c:	60a2      	str	r2, [r4, #8]
   1234e:	6123      	str	r3, [r4, #16]
   12350:	6020      	str	r0, [r4, #0]
   12352:	462e      	mov	r6, r5
   12354:	46a8      	mov	r8, r5
   12356:	4642      	mov	r2, r8
   12358:	4659      	mov	r1, fp
   1235a:	f7fb fdf7 	bl	df4c <memmove>
   1235e:	f8da 3008 	ldr.w	r3, [sl, #8]
   12362:	68a2      	ldr	r2, [r4, #8]
   12364:	6820      	ldr	r0, [r4, #0]
   12366:	1b92      	subs	r2, r2, r6
   12368:	4440      	add	r0, r8
   1236a:	1b5b      	subs	r3, r3, r5
   1236c:	60a2      	str	r2, [r4, #8]
   1236e:	6020      	str	r0, [r4, #0]
   12370:	f8ca 3008 	str.w	r3, [sl, #8]
   12374:	b33b      	cbz	r3, 123c6 <__ssprint_r+0xf2>
   12376:	3708      	adds	r7, #8
   12378:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   1237c:	2d00      	cmp	r5, #0
   1237e:	d0fa      	beq.n	12376 <__ssprint_r+0xa2>
   12380:	42aa      	cmp	r2, r5
   12382:	4616      	mov	r6, r2
   12384:	4690      	mov	r8, r2
   12386:	d9b3      	bls.n	122f0 <__ssprint_r+0x1c>
   12388:	462e      	mov	r6, r5
   1238a:	46a8      	mov	r8, r5
   1238c:	e7e3      	b.n	12356 <__ssprint_r+0x82>
   1238e:	4648      	mov	r0, r9
   12390:	f7fa fff4 	bl	d37c <_realloc_r>
   12394:	4603      	mov	r3, r0
   12396:	2800      	cmp	r0, #0
   12398:	d1d3      	bne.n	12342 <__ssprint_r+0x6e>
   1239a:	6921      	ldr	r1, [r4, #16]
   1239c:	4648      	mov	r0, r9
   1239e:	f7fc fa51 	bl	e844 <_free_r>
   123a2:	89a3      	ldrh	r3, [r4, #12]
   123a4:	220c      	movs	r2, #12
   123a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   123aa:	f8c9 2000 	str.w	r2, [r9]
   123ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   123b2:	81a3      	strh	r3, [r4, #12]
   123b4:	2200      	movs	r2, #0
   123b6:	2300      	movs	r3, #0
   123b8:	f8ca 2008 	str.w	r2, [sl, #8]
   123bc:	f8ca 3004 	str.w	r3, [sl, #4]
   123c0:	b003      	add	sp, #12
   123c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c6:	2000      	movs	r0, #0
   123c8:	2300      	movs	r3, #0
   123ca:	f8ca 3004 	str.w	r3, [sl, #4]
   123ce:	b003      	add	sp, #12
   123d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000123d4 <__sprint_r.part.0>:
   123d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   123da:	049c      	lsls	r4, r3, #18
   123dc:	4690      	mov	r8, r2
   123de:	d52d      	bpl.n	1243c <__sprint_r.part.0+0x68>
   123e0:	6893      	ldr	r3, [r2, #8]
   123e2:	6812      	ldr	r2, [r2, #0]
   123e4:	b343      	cbz	r3, 12438 <__sprint_r.part.0+0x64>
   123e6:	468b      	mov	fp, r1
   123e8:	4606      	mov	r6, r0
   123ea:	f102 0908 	add.w	r9, r2, #8
   123ee:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   123f2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   123f6:	d015      	beq.n	12424 <__sprint_r.part.0+0x50>
   123f8:	3d04      	subs	r5, #4
   123fa:	2400      	movs	r4, #0
   123fc:	e001      	b.n	12402 <__sprint_r.part.0+0x2e>
   123fe:	42a7      	cmp	r7, r4
   12400:	d00e      	beq.n	12420 <__sprint_r.part.0+0x4c>
   12402:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12406:	465a      	mov	r2, fp
   12408:	4630      	mov	r0, r6
   1240a:	f001 f87b 	bl	13504 <_fputwc_r>
   1240e:	1c43      	adds	r3, r0, #1
   12410:	f104 0401 	add.w	r4, r4, #1
   12414:	d1f3      	bne.n	123fe <__sprint_r.part.0+0x2a>
   12416:	2300      	movs	r3, #0
   12418:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1241c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12420:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12424:	f02a 0a03 	bic.w	sl, sl, #3
   12428:	eba3 030a 	sub.w	r3, r3, sl
   1242c:	f8c8 3008 	str.w	r3, [r8, #8]
   12430:	f109 0908 	add.w	r9, r9, #8
   12434:	2b00      	cmp	r3, #0
   12436:	d1da      	bne.n	123ee <__sprint_r.part.0+0x1a>
   12438:	2000      	movs	r0, #0
   1243a:	e7ec      	b.n	12416 <__sprint_r.part.0+0x42>
   1243c:	f7fb faec 	bl	da18 <__sfvwrite_r>
   12440:	2300      	movs	r3, #0
   12442:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12446:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1244a:	bf00      	nop

0001244c <_vfiprintf_r>:
   1244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12450:	ed2d 8b02 	vpush	{d8}
   12454:	b0c5      	sub	sp, #276	; 0x114
   12456:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1245a:	4683      	mov	fp, r0
   1245c:	ee08 1a10 	vmov	s16, r1
   12460:	4616      	mov	r6, r2
   12462:	2100      	movs	r1, #0
   12464:	2208      	movs	r2, #8
   12466:	4650      	mov	r0, sl
   12468:	461c      	mov	r4, r3
   1246a:	9307      	str	r3, [sp, #28]
   1246c:	f7fb fdea 	bl	e044 <memset>
   12470:	f1bb 0f00 	cmp.w	fp, #0
   12474:	d004      	beq.n	12480 <_vfiprintf_r+0x34>
   12476:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1247a:	2b00      	cmp	r3, #0
   1247c:	f000 86a0 	beq.w	131c0 <_vfiprintf_r+0xd74>
   12480:	ee18 2a10 	vmov	r2, s16
   12484:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12486:	07db      	lsls	r3, r3, #31
   12488:	f140 8513 	bpl.w	12eb2 <_vfiprintf_r+0xa66>
   1248c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12490:	b28a      	uxth	r2, r1
   12492:	0495      	lsls	r5, r2, #18
   12494:	d40b      	bmi.n	124ae <_vfiprintf_r+0x62>
   12496:	ee18 3a10 	vmov	r3, s16
   1249a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1249e:	8199      	strh	r1, [r3, #12]
   124a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   124a2:	b28a      	uxth	r2, r1
   124a4:	ee18 1a10 	vmov	r1, s16
   124a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   124ac:	664b      	str	r3, [r1, #100]	; 0x64
   124ae:	0710      	lsls	r0, r2, #28
   124b0:	f140 8105 	bpl.w	126be <_vfiprintf_r+0x272>
   124b4:	ee18 3a10 	vmov	r3, s16
   124b8:	691b      	ldr	r3, [r3, #16]
   124ba:	2b00      	cmp	r3, #0
   124bc:	f000 80ff 	beq.w	126be <_vfiprintf_r+0x272>
   124c0:	f002 031a 	and.w	r3, r2, #26
   124c4:	2b0a      	cmp	r3, #10
   124c6:	f000 810a 	beq.w	126de <_vfiprintf_r+0x292>
   124ca:	2300      	movs	r3, #0
   124cc:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   124d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   124d4:	aa1b      	add	r2, sp, #108	; 0x6c
   124d6:	930c      	str	r3, [sp, #48]	; 0x30
   124d8:	9218      	str	r2, [sp, #96]	; 0x60
   124da:	4691      	mov	r9, r2
   124dc:	930b      	str	r3, [sp, #44]	; 0x2c
   124de:	9305      	str	r3, [sp, #20]
   124e0:	46b0      	mov	r8, r6
   124e2:	4644      	mov	r4, r8
   124e4:	4ba8      	ldr	r3, [pc, #672]	; (12788 <_vfiprintf_r+0x33c>)
   124e6:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   124ea:	f7fb fe75 	bl	e1d8 <__locale_mb_cur_max>
   124ee:	4622      	mov	r2, r4
   124f0:	4603      	mov	r3, r0
   124f2:	a912      	add	r1, sp, #72	; 0x48
   124f4:	f8cd a000 	str.w	sl, [sp]
   124f8:	4658      	mov	r0, fp
   124fa:	47a8      	blx	r5
   124fc:	2800      	cmp	r0, #0
   124fe:	f000 8145 	beq.w	1278c <_vfiprintf_r+0x340>
   12502:	f2c0 8139 	blt.w	12778 <_vfiprintf_r+0x32c>
   12506:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12508:	2a25      	cmp	r2, #37	; 0x25
   1250a:	4603      	mov	r3, r0
   1250c:	d001      	beq.n	12512 <_vfiprintf_r+0xc6>
   1250e:	441c      	add	r4, r3
   12510:	e7e8      	b.n	124e4 <_vfiprintf_r+0x98>
   12512:	ebb4 0608 	subs.w	r6, r4, r8
   12516:	4605      	mov	r5, r0
   12518:	f040 813c 	bne.w	12794 <_vfiprintf_r+0x348>
   1251c:	2300      	movs	r3, #0
   1251e:	7861      	ldrb	r1, [r4, #1]
   12520:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12524:	f104 0801 	add.w	r8, r4, #1
   12528:	9306      	str	r3, [sp, #24]
   1252a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1252e:	461e      	mov	r6, r3
   12530:	242b      	movs	r4, #43	; 0x2b
   12532:	f108 0801 	add.w	r8, r8, #1
   12536:	f1a1 0320 	sub.w	r3, r1, #32
   1253a:	2b5a      	cmp	r3, #90	; 0x5a
   1253c:	f200 8178 	bhi.w	12830 <_vfiprintf_r+0x3e4>
   12540:	e8df f013 	tbh	[pc, r3, lsl #1]
   12544:	017602b5 	.word	0x017602b5
   12548:	02b00176 	.word	0x02b00176
   1254c:	01760176 	.word	0x01760176
   12550:	006a0176 	.word	0x006a0176
   12554:	01760176 	.word	0x01760176
   12558:	028d027d 	.word	0x028d027d
   1255c:	02880176 	.word	0x02880176
   12560:	01760297 	.word	0x01760297
   12564:	005b0292 	.word	0x005b0292
   12568:	005b005b 	.word	0x005b005b
   1256c:	005b005b 	.word	0x005b005b
   12570:	005b005b 	.word	0x005b005b
   12574:	005b005b 	.word	0x005b005b
   12578:	01760176 	.word	0x01760176
   1257c:	01760176 	.word	0x01760176
   12580:	01760176 	.word	0x01760176
   12584:	01760176 	.word	0x01760176
   12588:	025c0176 	.word	0x025c0176
   1258c:	01760084 	.word	0x01760084
   12590:	01760176 	.word	0x01760176
   12594:	01760176 	.word	0x01760176
   12598:	01760176 	.word	0x01760176
   1259c:	01760176 	.word	0x01760176
   125a0:	00e80176 	.word	0x00e80176
   125a4:	01760176 	.word	0x01760176
   125a8:	02330176 	.word	0x02330176
   125ac:	02da0176 	.word	0x02da0176
   125b0:	01760176 	.word	0x01760176
   125b4:	0176058b 	.word	0x0176058b
   125b8:	01760176 	.word	0x01760176
   125bc:	01760176 	.word	0x01760176
   125c0:	01760176 	.word	0x01760176
   125c4:	01760176 	.word	0x01760176
   125c8:	025c0176 	.word	0x025c0176
   125cc:	01760086 	.word	0x01760086
   125d0:	01760176 	.word	0x01760176
   125d4:	008602cd 	.word	0x008602cd
   125d8:	0176007f 	.word	0x0176007f
   125dc:	017602c0 	.word	0x017602c0
   125e0:	00ea02fd 	.word	0x00ea02fd
   125e4:	007f02ed 	.word	0x007f02ed
   125e8:	02330176 	.word	0x02330176
   125ec:	0569007c 	.word	0x0569007c
   125f0:	01760176 	.word	0x01760176
   125f4:	0176056b 	.word	0x0176056b
   125f8:	007c      	.short	0x007c
   125fa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   125fe:	2200      	movs	r2, #0
   12600:	f818 1b01 	ldrb.w	r1, [r8], #1
   12604:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12608:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1260c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12610:	2b09      	cmp	r3, #9
   12612:	d9f5      	bls.n	12600 <_vfiprintf_r+0x1b4>
   12614:	9206      	str	r2, [sp, #24]
   12616:	e78e      	b.n	12536 <_vfiprintf_r+0xea>
   12618:	4658      	mov	r0, fp
   1261a:	f7fe fe09 	bl	11230 <_localeconv_r>
   1261e:	6843      	ldr	r3, [r0, #4]
   12620:	930d      	str	r3, [sp, #52]	; 0x34
   12622:	4618      	mov	r0, r3
   12624:	f7fc f80c 	bl	e640 <strlen>
   12628:	900e      	str	r0, [sp, #56]	; 0x38
   1262a:	4605      	mov	r5, r0
   1262c:	4658      	mov	r0, fp
   1262e:	f7fe fdff 	bl	11230 <_localeconv_r>
   12632:	6883      	ldr	r3, [r0, #8]
   12634:	930b      	str	r3, [sp, #44]	; 0x2c
   12636:	2d00      	cmp	r5, #0
   12638:	f040 84d6 	bne.w	12fe8 <_vfiprintf_r+0xb9c>
   1263c:	f898 1000 	ldrb.w	r1, [r8]
   12640:	e777      	b.n	12532 <_vfiprintf_r+0xe6>
   12642:	f898 1000 	ldrb.w	r1, [r8]
   12646:	f046 0620 	orr.w	r6, r6, #32
   1264a:	e772      	b.n	12532 <_vfiprintf_r+0xe6>
   1264c:	f046 0610 	orr.w	r6, r6, #16
   12650:	06b4      	lsls	r4, r6, #26
   12652:	f140 818e 	bpl.w	12972 <_vfiprintf_r+0x526>
   12656:	9b07      	ldr	r3, [sp, #28]
   12658:	3307      	adds	r3, #7
   1265a:	f023 0307 	bic.w	r3, r3, #7
   1265e:	461a      	mov	r2, r3
   12660:	6859      	ldr	r1, [r3, #4]
   12662:	f852 3b08 	ldr.w	r3, [r2], #8
   12666:	9207      	str	r2, [sp, #28]
   12668:	460a      	mov	r2, r1
   1266a:	2900      	cmp	r1, #0
   1266c:	f2c0 8470 	blt.w	12f50 <_vfiprintf_r+0xb04>
   12670:	1c79      	adds	r1, r7, #1
   12672:	f000 85a2 	beq.w	131ba <_vfiprintf_r+0xd6e>
   12676:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1267a:	9103      	str	r1, [sp, #12]
   1267c:	ea53 0102 	orrs.w	r1, r3, r2
   12680:	f000 843f 	beq.w	12f02 <_vfiprintf_r+0xab6>
   12684:	2b0a      	cmp	r3, #10
   12686:	f172 0100 	sbcs.w	r1, r2, #0
   1268a:	f080 8541 	bcs.w	13110 <_vfiprintf_r+0xcc4>
   1268e:	3330      	adds	r3, #48	; 0x30
   12690:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12694:	9e03      	ldr	r6, [sp, #12]
   12696:	2301      	movs	r3, #1
   12698:	9304      	str	r3, [sp, #16]
   1269a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1269e:	9b04      	ldr	r3, [sp, #16]
   126a0:	42bb      	cmp	r3, r7
   126a2:	bfb8      	it	lt
   126a4:	463b      	movlt	r3, r7
   126a6:	9303      	str	r3, [sp, #12]
   126a8:	2300      	movs	r3, #0
   126aa:	9308      	str	r3, [sp, #32]
   126ac:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   126b0:	2b00      	cmp	r3, #0
   126b2:	f000 80cb 	beq.w	1284c <_vfiprintf_r+0x400>
   126b6:	9b03      	ldr	r3, [sp, #12]
   126b8:	3301      	adds	r3, #1
   126ba:	9303      	str	r3, [sp, #12]
   126bc:	e0c6      	b.n	1284c <_vfiprintf_r+0x400>
   126be:	ee18 1a10 	vmov	r1, s16
   126c2:	4658      	mov	r0, fp
   126c4:	ee18 5a10 	vmov	r5, s16
   126c8:	f7fb fbaa 	bl	de20 <__swsetup_r>
   126cc:	2800      	cmp	r0, #0
   126ce:	f040 8652 	bne.w	13376 <_vfiprintf_r+0xf2a>
   126d2:	89aa      	ldrh	r2, [r5, #12]
   126d4:	f002 031a 	and.w	r3, r2, #26
   126d8:	2b0a      	cmp	r3, #10
   126da:	f47f aef6 	bne.w	124ca <_vfiprintf_r+0x7e>
   126de:	ee18 1a10 	vmov	r1, s16
   126e2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   126e6:	2b00      	cmp	r3, #0
   126e8:	f6ff aeef 	blt.w	124ca <_vfiprintf_r+0x7e>
   126ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   126ee:	07db      	lsls	r3, r3, #31
   126f0:	d402      	bmi.n	126f8 <_vfiprintf_r+0x2ac>
   126f2:	0597      	lsls	r7, r2, #22
   126f4:	f140 8612 	bpl.w	1331c <_vfiprintf_r+0xed0>
   126f8:	ee18 1a10 	vmov	r1, s16
   126fc:	4623      	mov	r3, r4
   126fe:	4632      	mov	r2, r6
   12700:	4658      	mov	r0, fp
   12702:	f000 fe69 	bl	133d8 <__sbprintf>
   12706:	9005      	str	r0, [sp, #20]
   12708:	9805      	ldr	r0, [sp, #20]
   1270a:	b045      	add	sp, #276	; 0x114
   1270c:	ecbd 8b02 	vpop	{d8}
   12710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12714:	f046 0610 	orr.w	r6, r6, #16
   12718:	f016 0220 	ands.w	r2, r6, #32
   1271c:	f000 8136 	beq.w	1298c <_vfiprintf_r+0x540>
   12720:	9b07      	ldr	r3, [sp, #28]
   12722:	3307      	adds	r3, #7
   12724:	f023 0307 	bic.w	r3, r3, #7
   12728:	4619      	mov	r1, r3
   1272a:	685a      	ldr	r2, [r3, #4]
   1272c:	f851 3b08 	ldr.w	r3, [r1], #8
   12730:	9107      	str	r1, [sp, #28]
   12732:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12736:	9103      	str	r1, [sp, #12]
   12738:	2100      	movs	r1, #0
   1273a:	2000      	movs	r0, #0
   1273c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12740:	1c78      	adds	r0, r7, #1
   12742:	f000 8210 	beq.w	12b66 <_vfiprintf_r+0x71a>
   12746:	9803      	ldr	r0, [sp, #12]
   12748:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1274c:	ea53 0002 	orrs.w	r0, r3, r2
   12750:	f040 8208 	bne.w	12b64 <_vfiprintf_r+0x718>
   12754:	2f00      	cmp	r7, #0
   12756:	f040 8538 	bne.w	131ca <_vfiprintf_r+0xd7e>
   1275a:	2900      	cmp	r1, #0
   1275c:	f040 83d5 	bne.w	12f0a <_vfiprintf_r+0xabe>
   12760:	9b03      	ldr	r3, [sp, #12]
   12762:	f013 0301 	ands.w	r3, r3, #1
   12766:	9304      	str	r3, [sp, #16]
   12768:	f000 8411 	beq.w	12f8e <_vfiprintf_r+0xb42>
   1276c:	2330      	movs	r3, #48	; 0x30
   1276e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12772:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12776:	e792      	b.n	1269e <_vfiprintf_r+0x252>
   12778:	2208      	movs	r2, #8
   1277a:	2100      	movs	r1, #0
   1277c:	4650      	mov	r0, sl
   1277e:	f7fb fc61 	bl	e044 <memset>
   12782:	2301      	movs	r3, #1
   12784:	441c      	add	r4, r3
   12786:	e6ad      	b.n	124e4 <_vfiprintf_r+0x98>
   12788:	20003014 	.word	0x20003014
   1278c:	ebb4 0608 	subs.w	r6, r4, r8
   12790:	4605      	mov	r5, r0
   12792:	d01b      	beq.n	127cc <_vfiprintf_r+0x380>
   12794:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12798:	3301      	adds	r3, #1
   1279a:	4432      	add	r2, r6
   1279c:	2b07      	cmp	r3, #7
   1279e:	e9c9 8600 	strd	r8, r6, [r9]
   127a2:	921a      	str	r2, [sp, #104]	; 0x68
   127a4:	9319      	str	r3, [sp, #100]	; 0x64
   127a6:	dd1c      	ble.n	127e2 <_vfiprintf_r+0x396>
   127a8:	2a00      	cmp	r2, #0
   127aa:	f000 83a6 	beq.w	12efa <_vfiprintf_r+0xaae>
   127ae:	ee18 1a10 	vmov	r1, s16
   127b2:	aa18      	add	r2, sp, #96	; 0x60
   127b4:	4658      	mov	r0, fp
   127b6:	f7ff fe0d 	bl	123d4 <__sprint_r.part.0>
   127ba:	bb20      	cbnz	r0, 12806 <_vfiprintf_r+0x3ba>
   127bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127c0:	9b05      	ldr	r3, [sp, #20]
   127c2:	4433      	add	r3, r6
   127c4:	9305      	str	r3, [sp, #20]
   127c6:	2d00      	cmp	r5, #0
   127c8:	f47f aea8 	bne.w	1251c <_vfiprintf_r+0xd0>
   127cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   127ce:	2b00      	cmp	r3, #0
   127d0:	f040 85c1 	bne.w	13356 <_vfiprintf_r+0xf0a>
   127d4:	ee18 3a10 	vmov	r3, s16
   127d8:	2200      	movs	r2, #0
   127da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   127de:	9219      	str	r2, [sp, #100]	; 0x64
   127e0:	e015      	b.n	1280e <_vfiprintf_r+0x3c2>
   127e2:	f109 0908 	add.w	r9, r9, #8
   127e6:	e7eb      	b.n	127c0 <_vfiprintf_r+0x374>
   127e8:	ee18 1a10 	vmov	r1, s16
   127ec:	aa18      	add	r2, sp, #96	; 0x60
   127ee:	4658      	mov	r0, fp
   127f0:	f7ff fdf0 	bl	123d4 <__sprint_r.part.0>
   127f4:	2800      	cmp	r0, #0
   127f6:	f000 80a6 	beq.w	12946 <_vfiprintf_r+0x4fa>
   127fa:	9b08      	ldr	r3, [sp, #32]
   127fc:	b11b      	cbz	r3, 12806 <_vfiprintf_r+0x3ba>
   127fe:	9908      	ldr	r1, [sp, #32]
   12800:	4658      	mov	r0, fp
   12802:	f7fc f81f 	bl	e844 <_free_r>
   12806:	ee18 3a10 	vmov	r3, s16
   1280a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1280e:	ee18 2a10 	vmov	r2, s16
   12812:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12814:	f012 0f01 	tst.w	r2, #1
   12818:	b29a      	uxth	r2, r3
   1281a:	f000 80a0 	beq.w	1295e <_vfiprintf_r+0x512>
   1281e:	0650      	lsls	r0, r2, #25
   12820:	f100 85b2 	bmi.w	13388 <_vfiprintf_r+0xf3c>
   12824:	9805      	ldr	r0, [sp, #20]
   12826:	b045      	add	sp, #276	; 0x114
   12828:	ecbd 8b02 	vpop	{d8}
   1282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12830:	2900      	cmp	r1, #0
   12832:	d0cb      	beq.n	127cc <_vfiprintf_r+0x380>
   12834:	2300      	movs	r3, #0
   12836:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1283a:	2301      	movs	r3, #1
   1283c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12840:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12844:	ac2b      	add	r4, sp, #172	; 0xac
   12846:	2300      	movs	r3, #0
   12848:	9308      	str	r3, [sp, #32]
   1284a:	461f      	mov	r7, r3
   1284c:	f016 0302 	ands.w	r3, r6, #2
   12850:	9309      	str	r3, [sp, #36]	; 0x24
   12852:	d002      	beq.n	1285a <_vfiprintf_r+0x40e>
   12854:	9b03      	ldr	r3, [sp, #12]
   12856:	3302      	adds	r3, #2
   12858:	9303      	str	r3, [sp, #12]
   1285a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1285e:	930a      	str	r3, [sp, #40]	; 0x28
   12860:	d105      	bne.n	1286e <_vfiprintf_r+0x422>
   12862:	9b06      	ldr	r3, [sp, #24]
   12864:	9a03      	ldr	r2, [sp, #12]
   12866:	1a9d      	subs	r5, r3, r2
   12868:	2d00      	cmp	r5, #0
   1286a:	f300 827b 	bgt.w	12d64 <_vfiprintf_r+0x918>
   1286e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12872:	1c41      	adds	r1, r0, #1
   12874:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12878:	b182      	cbz	r2, 1289c <_vfiprintf_r+0x450>
   1287a:	2201      	movs	r2, #1
   1287c:	3301      	adds	r3, #1
   1287e:	f8c9 2004 	str.w	r2, [r9, #4]
   12882:	2907      	cmp	r1, #7
   12884:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12888:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1288c:	f8c9 2000 	str.w	r2, [r9]
   12890:	f300 824a 	bgt.w	12d28 <_vfiprintf_r+0x8dc>
   12894:	4608      	mov	r0, r1
   12896:	f109 0908 	add.w	r9, r9, #8
   1289a:	3101      	adds	r1, #1
   1289c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1289e:	b1e2      	cbz	r2, 128da <_vfiprintf_r+0x48e>
   128a0:	aa11      	add	r2, sp, #68	; 0x44
   128a2:	3302      	adds	r3, #2
   128a4:	f8c9 2000 	str.w	r2, [r9]
   128a8:	2907      	cmp	r1, #7
   128aa:	f04f 0202 	mov.w	r2, #2
   128ae:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   128b2:	f8c9 2004 	str.w	r2, [r9, #4]
   128b6:	f340 8250 	ble.w	12d5a <_vfiprintf_r+0x90e>
   128ba:	2b00      	cmp	r3, #0
   128bc:	f000 8343 	beq.w	12f46 <_vfiprintf_r+0xafa>
   128c0:	ee18 1a10 	vmov	r1, s16
   128c4:	aa18      	add	r2, sp, #96	; 0x60
   128c6:	4658      	mov	r0, fp
   128c8:	f7ff fd84 	bl	123d4 <__sprint_r.part.0>
   128cc:	2800      	cmp	r0, #0
   128ce:	d194      	bne.n	127fa <_vfiprintf_r+0x3ae>
   128d0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   128d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   128d8:	1c41      	adds	r1, r0, #1
   128da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   128dc:	2a80      	cmp	r2, #128	; 0x80
   128de:	f000 8184 	beq.w	12bea <_vfiprintf_r+0x79e>
   128e2:	9a04      	ldr	r2, [sp, #16]
   128e4:	1abd      	subs	r5, r7, r2
   128e6:	2d00      	cmp	r5, #0
   128e8:	f300 81d7 	bgt.w	12c9a <_vfiprintf_r+0x84e>
   128ec:	9a04      	ldr	r2, [sp, #16]
   128ee:	f8c9 4000 	str.w	r4, [r9]
   128f2:	4413      	add	r3, r2
   128f4:	2907      	cmp	r1, #7
   128f6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   128fa:	f8c9 2004 	str.w	r2, [r9, #4]
   128fe:	f340 816e 	ble.w	12bde <_vfiprintf_r+0x792>
   12902:	2b00      	cmp	r3, #0
   12904:	f000 8275 	beq.w	12df2 <_vfiprintf_r+0x9a6>
   12908:	ee18 1a10 	vmov	r1, s16
   1290c:	aa18      	add	r2, sp, #96	; 0x60
   1290e:	4658      	mov	r0, fp
   12910:	f7ff fd60 	bl	123d4 <__sprint_r.part.0>
   12914:	2800      	cmp	r0, #0
   12916:	f47f af70 	bne.w	127fa <_vfiprintf_r+0x3ae>
   1291a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1291c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12920:	0775      	lsls	r5, r6, #29
   12922:	d505      	bpl.n	12930 <_vfiprintf_r+0x4e4>
   12924:	9a06      	ldr	r2, [sp, #24]
   12926:	9903      	ldr	r1, [sp, #12]
   12928:	1a54      	subs	r4, r2, r1
   1292a:	2c00      	cmp	r4, #0
   1292c:	f300 826b 	bgt.w	12e06 <_vfiprintf_r+0x9ba>
   12930:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12934:	9803      	ldr	r0, [sp, #12]
   12936:	4281      	cmp	r1, r0
   12938:	bfac      	ite	ge
   1293a:	1852      	addge	r2, r2, r1
   1293c:	1812      	addlt	r2, r2, r0
   1293e:	9205      	str	r2, [sp, #20]
   12940:	2b00      	cmp	r3, #0
   12942:	f47f af51 	bne.w	127e8 <_vfiprintf_r+0x39c>
   12946:	9908      	ldr	r1, [sp, #32]
   12948:	2300      	movs	r3, #0
   1294a:	9319      	str	r3, [sp, #100]	; 0x64
   1294c:	2900      	cmp	r1, #0
   1294e:	f000 8149 	beq.w	12be4 <_vfiprintf_r+0x798>
   12952:	4658      	mov	r0, fp
   12954:	f7fb ff76 	bl	e844 <_free_r>
   12958:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1295c:	e5c1      	b.n	124e2 <_vfiprintf_r+0x96>
   1295e:	059c      	lsls	r4, r3, #22
   12960:	f53f af5d 	bmi.w	1281e <_vfiprintf_r+0x3d2>
   12964:	ee18 4a10 	vmov	r4, s16
   12968:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1296a:	f7fb fe11 	bl	e590 <__retarget_lock_release_recursive>
   1296e:	89a2      	ldrh	r2, [r4, #12]
   12970:	e755      	b.n	1281e <_vfiprintf_r+0x3d2>
   12972:	06f0      	lsls	r0, r6, #27
   12974:	9a07      	ldr	r2, [sp, #28]
   12976:	f100 831f 	bmi.w	12fb8 <_vfiprintf_r+0xb6c>
   1297a:	0671      	lsls	r1, r6, #25
   1297c:	f140 8319 	bpl.w	12fb2 <_vfiprintf_r+0xb66>
   12980:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12984:	9207      	str	r2, [sp, #28]
   12986:	17da      	asrs	r2, r3, #31
   12988:	4611      	mov	r1, r2
   1298a:	e66e      	b.n	1266a <_vfiprintf_r+0x21e>
   1298c:	f016 0310 	ands.w	r3, r6, #16
   12990:	9907      	ldr	r1, [sp, #28]
   12992:	f040 8309 	bne.w	12fa8 <_vfiprintf_r+0xb5c>
   12996:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1299a:	f000 8301 	beq.w	12fa0 <_vfiprintf_r+0xb54>
   1299e:	461a      	mov	r2, r3
   129a0:	f851 3b04 	ldr.w	r3, [r1], #4
   129a4:	9107      	str	r1, [sp, #28]
   129a6:	b29b      	uxth	r3, r3
   129a8:	e6c3      	b.n	12732 <_vfiprintf_r+0x2e6>
   129aa:	9b07      	ldr	r3, [sp, #28]
   129ac:	461a      	mov	r2, r3
   129ae:	2300      	movs	r3, #0
   129b0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   129b4:	4613      	mov	r3, r2
   129b6:	f853 4b04 	ldr.w	r4, [r3], #4
   129ba:	9303      	str	r3, [sp, #12]
   129bc:	2c00      	cmp	r4, #0
   129be:	f000 8412 	beq.w	131e6 <_vfiprintf_r+0xd9a>
   129c2:	2953      	cmp	r1, #83	; 0x53
   129c4:	f000 8365 	beq.w	13092 <_vfiprintf_r+0xc46>
   129c8:	f016 0510 	ands.w	r5, r6, #16
   129cc:	f040 8361 	bne.w	13092 <_vfiprintf_r+0xc46>
   129d0:	1c7b      	adds	r3, r7, #1
   129d2:	f000 84b3 	beq.w	1333c <_vfiprintf_r+0xef0>
   129d6:	463a      	mov	r2, r7
   129d8:	4629      	mov	r1, r5
   129da:	4620      	mov	r0, r4
   129dc:	f7fb fde0 	bl	e5a0 <memchr>
   129e0:	9008      	str	r0, [sp, #32]
   129e2:	2800      	cmp	r0, #0
   129e4:	f000 849f 	beq.w	13326 <_vfiprintf_r+0xeda>
   129e8:	1b03      	subs	r3, r0, r4
   129ea:	9a03      	ldr	r2, [sp, #12]
   129ec:	9304      	str	r3, [sp, #16]
   129ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   129f2:	462f      	mov	r7, r5
   129f4:	9207      	str	r2, [sp, #28]
   129f6:	9303      	str	r3, [sp, #12]
   129f8:	9508      	str	r5, [sp, #32]
   129fa:	e657      	b.n	126ac <_vfiprintf_r+0x260>
   129fc:	2943      	cmp	r1, #67	; 0x43
   129fe:	d002      	beq.n	12a06 <_vfiprintf_r+0x5ba>
   12a00:	06f5      	lsls	r5, r6, #27
   12a02:	f140 832d 	bpl.w	13060 <_vfiprintf_r+0xc14>
   12a06:	9d07      	ldr	r5, [sp, #28]
   12a08:	2208      	movs	r2, #8
   12a0a:	2100      	movs	r1, #0
   12a0c:	a816      	add	r0, sp, #88	; 0x58
   12a0e:	ac2b      	add	r4, sp, #172	; 0xac
   12a10:	f7fb fb18 	bl	e044 <memset>
   12a14:	ab16      	add	r3, sp, #88	; 0x58
   12a16:	f855 2b04 	ldr.w	r2, [r5], #4
   12a1a:	4621      	mov	r1, r4
   12a1c:	4658      	mov	r0, fp
   12a1e:	f7fe fc71 	bl	11304 <_wcrtomb_r>
   12a22:	4603      	mov	r3, r0
   12a24:	3301      	adds	r3, #1
   12a26:	9004      	str	r0, [sp, #16]
   12a28:	f000 84b3 	beq.w	13392 <_vfiprintf_r+0xf46>
   12a2c:	9b04      	ldr	r3, [sp, #16]
   12a2e:	9507      	str	r5, [sp, #28]
   12a30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12a34:	9303      	str	r3, [sp, #12]
   12a36:	2300      	movs	r3, #0
   12a38:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12a3c:	e703      	b.n	12846 <_vfiprintf_r+0x3fa>
   12a3e:	9b07      	ldr	r3, [sp, #28]
   12a40:	f853 2b04 	ldr.w	r2, [r3], #4
   12a44:	9206      	str	r2, [sp, #24]
   12a46:	2a00      	cmp	r2, #0
   12a48:	f280 829c 	bge.w	12f84 <_vfiprintf_r+0xb38>
   12a4c:	9a06      	ldr	r2, [sp, #24]
   12a4e:	4252      	negs	r2, r2
   12a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12a54:	f898 1000 	ldrb.w	r1, [r8]
   12a58:	f046 0604 	orr.w	r6, r6, #4
   12a5c:	e569      	b.n	12532 <_vfiprintf_r+0xe6>
   12a5e:	f898 1000 	ldrb.w	r1, [r8]
   12a62:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12a66:	e564      	b.n	12532 <_vfiprintf_r+0xe6>
   12a68:	f898 1000 	ldrb.w	r1, [r8]
   12a6c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12a70:	e55f      	b.n	12532 <_vfiprintf_r+0xe6>
   12a72:	4642      	mov	r2, r8
   12a74:	f812 1b01 	ldrb.w	r1, [r2], #1
   12a78:	292a      	cmp	r1, #42	; 0x2a
   12a7a:	f000 8496 	beq.w	133aa <_vfiprintf_r+0xf5e>
   12a7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a82:	2b09      	cmp	r3, #9
   12a84:	4690      	mov	r8, r2
   12a86:	f04f 0700 	mov.w	r7, #0
   12a8a:	f63f ad54 	bhi.w	12536 <_vfiprintf_r+0xea>
   12a8e:	f818 1b01 	ldrb.w	r1, [r8], #1
   12a92:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12a96:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12a9a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a9e:	2b09      	cmp	r3, #9
   12aa0:	d9f5      	bls.n	12a8e <_vfiprintf_r+0x642>
   12aa2:	e548      	b.n	12536 <_vfiprintf_r+0xea>
   12aa4:	f898 1000 	ldrb.w	r1, [r8]
   12aa8:	f046 0601 	orr.w	r6, r6, #1
   12aac:	e541      	b.n	12532 <_vfiprintf_r+0xe6>
   12aae:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ab2:	2b00      	cmp	r3, #0
   12ab4:	f47f adc2 	bne.w	1263c <_vfiprintf_r+0x1f0>
   12ab8:	2320      	movs	r3, #32
   12aba:	f898 1000 	ldrb.w	r1, [r8]
   12abe:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12ac2:	e536      	b.n	12532 <_vfiprintf_r+0xe6>
   12ac4:	f898 1000 	ldrb.w	r1, [r8]
   12ac8:	296c      	cmp	r1, #108	; 0x6c
   12aca:	bf03      	ittte	eq
   12acc:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12ad0:	f046 0620 	orreq.w	r6, r6, #32
   12ad4:	f108 0801 	addeq.w	r8, r8, #1
   12ad8:	f046 0610 	orrne.w	r6, r6, #16
   12adc:	e529      	b.n	12532 <_vfiprintf_r+0xe6>
   12ade:	f898 1000 	ldrb.w	r1, [r8]
   12ae2:	2968      	cmp	r1, #104	; 0x68
   12ae4:	bf03      	ittte	eq
   12ae6:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12aea:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12aee:	f108 0801 	addeq.w	r8, r8, #1
   12af2:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12af6:	e51c      	b.n	12532 <_vfiprintf_r+0xe6>
   12af8:	f046 0310 	orr.w	r3, r6, #16
   12afc:	9303      	str	r3, [sp, #12]
   12afe:	9b03      	ldr	r3, [sp, #12]
   12b00:	f013 0220 	ands.w	r2, r3, #32
   12b04:	f000 8206 	beq.w	12f14 <_vfiprintf_r+0xac8>
   12b08:	9b07      	ldr	r3, [sp, #28]
   12b0a:	3307      	adds	r3, #7
   12b0c:	f023 0307 	bic.w	r3, r3, #7
   12b10:	4619      	mov	r1, r3
   12b12:	685a      	ldr	r2, [r3, #4]
   12b14:	f851 3b08 	ldr.w	r3, [r1], #8
   12b18:	9107      	str	r1, [sp, #28]
   12b1a:	2101      	movs	r1, #1
   12b1c:	e60d      	b.n	1273a <_vfiprintf_r+0x2ee>
   12b1e:	9a07      	ldr	r2, [sp, #28]
   12b20:	f046 0302 	orr.w	r3, r6, #2
   12b24:	9303      	str	r3, [sp, #12]
   12b26:	f852 3b04 	ldr.w	r3, [r2], #4
   12b2a:	9207      	str	r2, [sp, #28]
   12b2c:	f647 0230 	movw	r2, #30768	; 0x7830
   12b30:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12b34:	4ab8      	ldr	r2, [pc, #736]	; (12e18 <_vfiprintf_r+0x9cc>)
   12b36:	920c      	str	r2, [sp, #48]	; 0x30
   12b38:	2102      	movs	r1, #2
   12b3a:	2200      	movs	r2, #0
   12b3c:	e5fd      	b.n	1273a <_vfiprintf_r+0x2ee>
   12b3e:	06b7      	lsls	r7, r6, #26
   12b40:	f100 8248 	bmi.w	12fd4 <_vfiprintf_r+0xb88>
   12b44:	06f5      	lsls	r5, r6, #27
   12b46:	f100 8346 	bmi.w	131d6 <_vfiprintf_r+0xd8a>
   12b4a:	0674      	lsls	r4, r6, #25
   12b4c:	f100 83d5 	bmi.w	132fa <_vfiprintf_r+0xeae>
   12b50:	05b0      	lsls	r0, r6, #22
   12b52:	f140 8340 	bpl.w	131d6 <_vfiprintf_r+0xd8a>
   12b56:	9b07      	ldr	r3, [sp, #28]
   12b58:	9905      	ldr	r1, [sp, #20]
   12b5a:	f853 2b04 	ldr.w	r2, [r3], #4
   12b5e:	9307      	str	r3, [sp, #28]
   12b60:	7011      	strb	r1, [r2, #0]
   12b62:	e4be      	b.n	124e2 <_vfiprintf_r+0x96>
   12b64:	9603      	str	r6, [sp, #12]
   12b66:	2901      	cmp	r1, #1
   12b68:	f43f ad8c 	beq.w	12684 <_vfiprintf_r+0x238>
   12b6c:	2902      	cmp	r1, #2
   12b6e:	ac44      	add	r4, sp, #272	; 0x110
   12b70:	d111      	bne.n	12b96 <_vfiprintf_r+0x74a>
   12b72:	980c      	ldr	r0, [sp, #48]	; 0x30
   12b74:	f003 010f 	and.w	r1, r3, #15
   12b78:	091b      	lsrs	r3, r3, #4
   12b7a:	5c41      	ldrb	r1, [r0, r1]
   12b7c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12b80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12b84:	0912      	lsrs	r2, r2, #4
   12b86:	ea53 0102 	orrs.w	r1, r3, r2
   12b8a:	d1f3      	bne.n	12b74 <_vfiprintf_r+0x728>
   12b8c:	9e03      	ldr	r6, [sp, #12]
   12b8e:	ab44      	add	r3, sp, #272	; 0x110
   12b90:	1b1b      	subs	r3, r3, r4
   12b92:	9304      	str	r3, [sp, #16]
   12b94:	e583      	b.n	1269e <_vfiprintf_r+0x252>
   12b96:	f003 0107 	and.w	r1, r3, #7
   12b9a:	08db      	lsrs	r3, r3, #3
   12b9c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12ba0:	08d2      	lsrs	r2, r2, #3
   12ba2:	3130      	adds	r1, #48	; 0x30
   12ba4:	ea53 0502 	orrs.w	r5, r3, r2
   12ba8:	4620      	mov	r0, r4
   12baa:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12bae:	d1f2      	bne.n	12b96 <_vfiprintf_r+0x74a>
   12bb0:	9e03      	ldr	r6, [sp, #12]
   12bb2:	07f3      	lsls	r3, r6, #31
   12bb4:	d5eb      	bpl.n	12b8e <_vfiprintf_r+0x742>
   12bb6:	2930      	cmp	r1, #48	; 0x30
   12bb8:	d0e8      	beq.n	12b8c <_vfiprintf_r+0x740>
   12bba:	2330      	movs	r3, #48	; 0x30
   12bbc:	3802      	subs	r0, #2
   12bbe:	f804 3c01 	strb.w	r3, [r4, #-1]
   12bc2:	ab44      	add	r3, sp, #272	; 0x110
   12bc4:	1a1b      	subs	r3, r3, r0
   12bc6:	9e03      	ldr	r6, [sp, #12]
   12bc8:	9304      	str	r3, [sp, #16]
   12bca:	4604      	mov	r4, r0
   12bcc:	e567      	b.n	1269e <_vfiprintf_r+0x252>
   12bce:	9b04      	ldr	r3, [sp, #16]
   12bd0:	941b      	str	r4, [sp, #108]	; 0x6c
   12bd2:	2201      	movs	r2, #1
   12bd4:	931c      	str	r3, [sp, #112]	; 0x70
   12bd6:	931a      	str	r3, [sp, #104]	; 0x68
   12bd8:	9219      	str	r2, [sp, #100]	; 0x64
   12bda:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bde:	f109 0908 	add.w	r9, r9, #8
   12be2:	e69d      	b.n	12920 <_vfiprintf_r+0x4d4>
   12be4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12be8:	e47b      	b.n	124e2 <_vfiprintf_r+0x96>
   12bea:	9a06      	ldr	r2, [sp, #24]
   12bec:	9d03      	ldr	r5, [sp, #12]
   12bee:	1b55      	subs	r5, r2, r5
   12bf0:	2d00      	cmp	r5, #0
   12bf2:	f77f ae76 	ble.w	128e2 <_vfiprintf_r+0x496>
   12bf6:	2d10      	cmp	r5, #16
   12bf8:	f340 83bb 	ble.w	13372 <_vfiprintf_r+0xf26>
   12bfc:	9409      	str	r4, [sp, #36]	; 0x24
   12bfe:	ee18 4a10 	vmov	r4, s16
   12c02:	e007      	b.n	12c14 <_vfiprintf_r+0x7c8>
   12c04:	f100 0c02 	add.w	ip, r0, #2
   12c08:	f109 0908 	add.w	r9, r9, #8
   12c0c:	4610      	mov	r0, r2
   12c0e:	3d10      	subs	r5, #16
   12c10:	2d10      	cmp	r5, #16
   12c12:	dd1e      	ble.n	12c52 <_vfiprintf_r+0x806>
   12c14:	4981      	ldr	r1, [pc, #516]	; (12e1c <_vfiprintf_r+0x9d0>)
   12c16:	f8c9 1000 	str.w	r1, [r9]
   12c1a:	1c42      	adds	r2, r0, #1
   12c1c:	3310      	adds	r3, #16
   12c1e:	2110      	movs	r1, #16
   12c20:	2a07      	cmp	r2, #7
   12c22:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12c26:	f8c9 1004 	str.w	r1, [r9, #4]
   12c2a:	ddeb      	ble.n	12c04 <_vfiprintf_r+0x7b8>
   12c2c:	aa18      	add	r2, sp, #96	; 0x60
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d074      	beq.n	12d1c <_vfiprintf_r+0x8d0>
   12c32:	4621      	mov	r1, r4
   12c34:	4658      	mov	r0, fp
   12c36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c3a:	f7ff fbcb 	bl	123d4 <__sprint_r.part.0>
   12c3e:	2800      	cmp	r0, #0
   12c40:	f47f addb 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12c44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c48:	3d10      	subs	r5, #16
   12c4a:	2d10      	cmp	r5, #16
   12c4c:	f100 0c01 	add.w	ip, r0, #1
   12c50:	dce0      	bgt.n	12c14 <_vfiprintf_r+0x7c8>
   12c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12c54:	4a71      	ldr	r2, [pc, #452]	; (12e1c <_vfiprintf_r+0x9d0>)
   12c56:	f8c9 5004 	str.w	r5, [r9, #4]
   12c5a:	442b      	add	r3, r5
   12c5c:	f1bc 0f07 	cmp.w	ip, #7
   12c60:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12c64:	f8c9 2000 	str.w	r2, [r9]
   12c68:	f340 8194 	ble.w	12f94 <_vfiprintf_r+0xb48>
   12c6c:	2b00      	cmp	r3, #0
   12c6e:	f000 831f 	beq.w	132b0 <_vfiprintf_r+0xe64>
   12c72:	ee18 1a10 	vmov	r1, s16
   12c76:	aa18      	add	r2, sp, #96	; 0x60
   12c78:	4658      	mov	r0, fp
   12c7a:	f7ff fbab 	bl	123d4 <__sprint_r.part.0>
   12c7e:	2800      	cmp	r0, #0
   12c80:	f47f adbb 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12c84:	9a04      	ldr	r2, [sp, #16]
   12c86:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c8a:	1abd      	subs	r5, r7, r2
   12c8c:	2d00      	cmp	r5, #0
   12c8e:	f100 0101 	add.w	r1, r0, #1
   12c92:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c96:	f77f ae29 	ble.w	128ec <_vfiprintf_r+0x4a0>
   12c9a:	2d10      	cmp	r5, #16
   12c9c:	dd29      	ble.n	12cf2 <_vfiprintf_r+0x8a6>
   12c9e:	9409      	str	r4, [sp, #36]	; 0x24
   12ca0:	2710      	movs	r7, #16
   12ca2:	ee18 4a10 	vmov	r4, s16
   12ca6:	e007      	b.n	12cb8 <_vfiprintf_r+0x86c>
   12ca8:	f100 0c02 	add.w	ip, r0, #2
   12cac:	f109 0908 	add.w	r9, r9, #8
   12cb0:	4610      	mov	r0, r2
   12cb2:	3d10      	subs	r5, #16
   12cb4:	2d10      	cmp	r5, #16
   12cb6:	dd1a      	ble.n	12cee <_vfiprintf_r+0x8a2>
   12cb8:	1c42      	adds	r2, r0, #1
   12cba:	4958      	ldr	r1, [pc, #352]	; (12e1c <_vfiprintf_r+0x9d0>)
   12cbc:	3310      	adds	r3, #16
   12cbe:	2a07      	cmp	r2, #7
   12cc0:	e9c9 1700 	strd	r1, r7, [r9]
   12cc4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12cc8:	ddee      	ble.n	12ca8 <_vfiprintf_r+0x85c>
   12cca:	aa18      	add	r2, sp, #96	; 0x60
   12ccc:	b303      	cbz	r3, 12d10 <_vfiprintf_r+0x8c4>
   12cce:	4621      	mov	r1, r4
   12cd0:	4658      	mov	r0, fp
   12cd2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12cd6:	f7ff fb7d 	bl	123d4 <__sprint_r.part.0>
   12cda:	2800      	cmp	r0, #0
   12cdc:	f47f ad8d 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12ce0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ce4:	3d10      	subs	r5, #16
   12ce6:	2d10      	cmp	r5, #16
   12ce8:	f100 0c01 	add.w	ip, r0, #1
   12cec:	dce4      	bgt.n	12cb8 <_vfiprintf_r+0x86c>
   12cee:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12cf0:	4661      	mov	r1, ip
   12cf2:	4a4a      	ldr	r2, [pc, #296]	; (12e1c <_vfiprintf_r+0x9d0>)
   12cf4:	f8c9 5004 	str.w	r5, [r9, #4]
   12cf8:	442b      	add	r3, r5
   12cfa:	2907      	cmp	r1, #7
   12cfc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d00:	f8c9 2000 	str.w	r2, [r9]
   12d04:	f300 80e7 	bgt.w	12ed6 <_vfiprintf_r+0xa8a>
   12d08:	f109 0908 	add.w	r9, r9, #8
   12d0c:	3101      	adds	r1, #1
   12d0e:	e5ed      	b.n	128ec <_vfiprintf_r+0x4a0>
   12d10:	f04f 0c01 	mov.w	ip, #1
   12d14:	4618      	mov	r0, r3
   12d16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d1a:	e7ca      	b.n	12cb2 <_vfiprintf_r+0x866>
   12d1c:	f04f 0c01 	mov.w	ip, #1
   12d20:	4618      	mov	r0, r3
   12d22:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d26:	e772      	b.n	12c0e <_vfiprintf_r+0x7c2>
   12d28:	2b00      	cmp	r3, #0
   12d2a:	f000 8104 	beq.w	12f36 <_vfiprintf_r+0xaea>
   12d2e:	ee18 1a10 	vmov	r1, s16
   12d32:	aa18      	add	r2, sp, #96	; 0x60
   12d34:	4658      	mov	r0, fp
   12d36:	f7ff fb4d 	bl	123d4 <__sprint_r.part.0>
   12d3a:	2800      	cmp	r0, #0
   12d3c:	f47f ad5d 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12d40:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12d44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d48:	1c41      	adds	r1, r0, #1
   12d4a:	e5a7      	b.n	1289c <_vfiprintf_r+0x450>
   12d4c:	2302      	movs	r3, #2
   12d4e:	aa11      	add	r2, sp, #68	; 0x44
   12d50:	931c      	str	r3, [sp, #112]	; 0x70
   12d52:	921b      	str	r2, [sp, #108]	; 0x6c
   12d54:	2101      	movs	r1, #1
   12d56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d5a:	4608      	mov	r0, r1
   12d5c:	f109 0908 	add.w	r9, r9, #8
   12d60:	1c41      	adds	r1, r0, #1
   12d62:	e5ba      	b.n	128da <_vfiprintf_r+0x48e>
   12d64:	2d10      	cmp	r5, #16
   12d66:	f340 82e5 	ble.w	13334 <_vfiprintf_r+0xee8>
   12d6a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12d6e:	940f      	str	r4, [sp, #60]	; 0x3c
   12d70:	4608      	mov	r0, r1
   12d72:	ee18 4a10 	vmov	r4, s16
   12d76:	e007      	b.n	12d88 <_vfiprintf_r+0x93c>
   12d78:	f100 0c02 	add.w	ip, r0, #2
   12d7c:	f109 0908 	add.w	r9, r9, #8
   12d80:	4610      	mov	r0, r2
   12d82:	3d10      	subs	r5, #16
   12d84:	2d10      	cmp	r5, #16
   12d86:	dd1d      	ble.n	12dc4 <_vfiprintf_r+0x978>
   12d88:	4925      	ldr	r1, [pc, #148]	; (12e20 <_vfiprintf_r+0x9d4>)
   12d8a:	f8c9 1000 	str.w	r1, [r9]
   12d8e:	1c42      	adds	r2, r0, #1
   12d90:	3310      	adds	r3, #16
   12d92:	2110      	movs	r1, #16
   12d94:	2a07      	cmp	r2, #7
   12d96:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12d9a:	f8c9 1004 	str.w	r1, [r9, #4]
   12d9e:	ddeb      	ble.n	12d78 <_vfiprintf_r+0x92c>
   12da0:	aa18      	add	r2, sp, #96	; 0x60
   12da2:	b303      	cbz	r3, 12de6 <_vfiprintf_r+0x99a>
   12da4:	4621      	mov	r1, r4
   12da6:	4658      	mov	r0, fp
   12da8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12dac:	f7ff fb12 	bl	123d4 <__sprint_r.part.0>
   12db0:	2800      	cmp	r0, #0
   12db2:	f47f ad22 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12db6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12dba:	3d10      	subs	r5, #16
   12dbc:	2d10      	cmp	r5, #16
   12dbe:	f100 0c01 	add.w	ip, r0, #1
   12dc2:	dce1      	bgt.n	12d88 <_vfiprintf_r+0x93c>
   12dc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   12dc6:	4660      	mov	r0, ip
   12dc8:	4a15      	ldr	r2, [pc, #84]	; (12e20 <_vfiprintf_r+0x9d4>)
   12dca:	f8c9 5004 	str.w	r5, [r9, #4]
   12dce:	442b      	add	r3, r5
   12dd0:	2807      	cmp	r0, #7
   12dd2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12dd6:	f8c9 2000 	str.w	r2, [r9]
   12dda:	f300 80c1 	bgt.w	12f60 <_vfiprintf_r+0xb14>
   12dde:	f109 0908 	add.w	r9, r9, #8
   12de2:	1c41      	adds	r1, r0, #1
   12de4:	e546      	b.n	12874 <_vfiprintf_r+0x428>
   12de6:	4618      	mov	r0, r3
   12de8:	f04f 0c01 	mov.w	ip, #1
   12dec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12df0:	e7c7      	b.n	12d82 <_vfiprintf_r+0x936>
   12df2:	0776      	lsls	r6, r6, #29
   12df4:	9319      	str	r3, [sp, #100]	; 0x64
   12df6:	d553      	bpl.n	12ea0 <_vfiprintf_r+0xa54>
   12df8:	9a06      	ldr	r2, [sp, #24]
   12dfa:	9903      	ldr	r1, [sp, #12]
   12dfc:	1a54      	subs	r4, r2, r1
   12dfe:	2c00      	cmp	r4, #0
   12e00:	dd4e      	ble.n	12ea0 <_vfiprintf_r+0xa54>
   12e02:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e06:	2c10      	cmp	r4, #16
   12e08:	f340 82b0 	ble.w	1336c <_vfiprintf_r+0xf20>
   12e0c:	9919      	ldr	r1, [sp, #100]	; 0x64
   12e0e:	ee18 6a10 	vmov	r6, s16
   12e12:	2510      	movs	r5, #16
   12e14:	e00d      	b.n	12e32 <_vfiprintf_r+0x9e6>
   12e16:	bf00      	nop
   12e18:	200018cc 	.word	0x200018cc
   12e1c:	20002e68 	.word	0x20002e68
   12e20:	2000190c 	.word	0x2000190c
   12e24:	1c88      	adds	r0, r1, #2
   12e26:	f109 0908 	add.w	r9, r9, #8
   12e2a:	4611      	mov	r1, r2
   12e2c:	3c10      	subs	r4, #16
   12e2e:	2c10      	cmp	r4, #16
   12e30:	dd1a      	ble.n	12e68 <_vfiprintf_r+0xa1c>
   12e32:	1c4a      	adds	r2, r1, #1
   12e34:	48b3      	ldr	r0, [pc, #716]	; (13104 <_vfiprintf_r+0xcb8>)
   12e36:	3310      	adds	r3, #16
   12e38:	2a07      	cmp	r2, #7
   12e3a:	e9c9 0500 	strd	r0, r5, [r9]
   12e3e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12e42:	ddef      	ble.n	12e24 <_vfiprintf_r+0x9d8>
   12e44:	aa18      	add	r2, sp, #96	; 0x60
   12e46:	b333      	cbz	r3, 12e96 <_vfiprintf_r+0xa4a>
   12e48:	4631      	mov	r1, r6
   12e4a:	4658      	mov	r0, fp
   12e4c:	f7ff fac2 	bl	123d4 <__sprint_r.part.0>
   12e50:	2800      	cmp	r0, #0
   12e52:	f47f acd2 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12e56:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12e5a:	3c10      	subs	r4, #16
   12e5c:	2c10      	cmp	r4, #16
   12e5e:	f101 0001 	add.w	r0, r1, #1
   12e62:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e66:	dce4      	bgt.n	12e32 <_vfiprintf_r+0x9e6>
   12e68:	4aa6      	ldr	r2, [pc, #664]	; (13104 <_vfiprintf_r+0xcb8>)
   12e6a:	f8c9 4004 	str.w	r4, [r9, #4]
   12e6e:	4423      	add	r3, r4
   12e70:	2807      	cmp	r0, #7
   12e72:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12e76:	f8c9 2000 	str.w	r2, [r9]
   12e7a:	f77f ad59 	ble.w	12930 <_vfiprintf_r+0x4e4>
   12e7e:	b17b      	cbz	r3, 12ea0 <_vfiprintf_r+0xa54>
   12e80:	ee18 1a10 	vmov	r1, s16
   12e84:	aa18      	add	r2, sp, #96	; 0x60
   12e86:	4658      	mov	r0, fp
   12e88:	f7ff faa4 	bl	123d4 <__sprint_r.part.0>
   12e8c:	2800      	cmp	r0, #0
   12e8e:	f47f acb4 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12e92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12e94:	e54c      	b.n	12930 <_vfiprintf_r+0x4e4>
   12e96:	2001      	movs	r0, #1
   12e98:	4619      	mov	r1, r3
   12e9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e9e:	e7c5      	b.n	12e2c <_vfiprintf_r+0x9e0>
   12ea0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12ea4:	9903      	ldr	r1, [sp, #12]
   12ea6:	428a      	cmp	r2, r1
   12ea8:	bfac      	ite	ge
   12eaa:	189b      	addge	r3, r3, r2
   12eac:	185b      	addlt	r3, r3, r1
   12eae:	9305      	str	r3, [sp, #20]
   12eb0:	e549      	b.n	12946 <_vfiprintf_r+0x4fa>
   12eb2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12eb6:	058f      	lsls	r7, r1, #22
   12eb8:	ee18 3a10 	vmov	r3, s16
   12ebc:	b28a      	uxth	r2, r1
   12ebe:	f53f aae8 	bmi.w	12492 <_vfiprintf_r+0x46>
   12ec2:	ee18 5a10 	vmov	r5, s16
   12ec6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12ec8:	f7fb fb60 	bl	e58c <__retarget_lock_acquire_recursive>
   12ecc:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   12ed0:	b28a      	uxth	r2, r1
   12ed2:	f7ff bade 	b.w	12492 <_vfiprintf_r+0x46>
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	f43f ae79 	beq.w	12bce <_vfiprintf_r+0x782>
   12edc:	ee18 1a10 	vmov	r1, s16
   12ee0:	aa18      	add	r2, sp, #96	; 0x60
   12ee2:	4658      	mov	r0, fp
   12ee4:	f7ff fa76 	bl	123d4 <__sprint_r.part.0>
   12ee8:	2800      	cmp	r0, #0
   12eea:	f47f ac86 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12eee:	9919      	ldr	r1, [sp, #100]	; 0x64
   12ef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12ef2:	3101      	adds	r1, #1
   12ef4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ef8:	e4f8      	b.n	128ec <_vfiprintf_r+0x4a0>
   12efa:	9219      	str	r2, [sp, #100]	; 0x64
   12efc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f00:	e45e      	b.n	127c0 <_vfiprintf_r+0x374>
   12f02:	2f00      	cmp	r7, #0
   12f04:	f47f abc3 	bne.w	1268e <_vfiprintf_r+0x242>
   12f08:	9e03      	ldr	r6, [sp, #12]
   12f0a:	2700      	movs	r7, #0
   12f0c:	9704      	str	r7, [sp, #16]
   12f0e:	ac44      	add	r4, sp, #272	; 0x110
   12f10:	f7ff bbc5 	b.w	1269e <_vfiprintf_r+0x252>
   12f14:	9b03      	ldr	r3, [sp, #12]
   12f16:	f013 0310 	ands.w	r3, r3, #16
   12f1a:	d154      	bne.n	12fc6 <_vfiprintf_r+0xb7a>
   12f1c:	9a03      	ldr	r2, [sp, #12]
   12f1e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12f22:	f000 816b 	beq.w	131fc <_vfiprintf_r+0xdb0>
   12f26:	9907      	ldr	r1, [sp, #28]
   12f28:	461a      	mov	r2, r3
   12f2a:	f851 3b04 	ldr.w	r3, [r1], #4
   12f2e:	9107      	str	r1, [sp, #28]
   12f30:	b29b      	uxth	r3, r3
   12f32:	2101      	movs	r1, #1
   12f34:	e401      	b.n	1273a <_vfiprintf_r+0x2ee>
   12f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12f38:	2a00      	cmp	r2, #0
   12f3a:	d164      	bne.n	13006 <_vfiprintf_r+0xbba>
   12f3c:	4618      	mov	r0, r3
   12f3e:	2101      	movs	r1, #1
   12f40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f44:	e4c9      	b.n	128da <_vfiprintf_r+0x48e>
   12f46:	2101      	movs	r1, #1
   12f48:	4618      	mov	r0, r3
   12f4a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f4e:	e4c4      	b.n	128da <_vfiprintf_r+0x48e>
   12f50:	425b      	negs	r3, r3
   12f52:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12f56:	9603      	str	r6, [sp, #12]
   12f58:	202d      	movs	r0, #45	; 0x2d
   12f5a:	2101      	movs	r1, #1
   12f5c:	f7ff bbee 	b.w	1273c <_vfiprintf_r+0x2f0>
   12f60:	2b00      	cmp	r3, #0
   12f62:	f000 8088 	beq.w	13076 <_vfiprintf_r+0xc2a>
   12f66:	ee18 1a10 	vmov	r1, s16
   12f6a:	aa18      	add	r2, sp, #96	; 0x60
   12f6c:	4658      	mov	r0, fp
   12f6e:	f7ff fa31 	bl	123d4 <__sprint_r.part.0>
   12f72:	2800      	cmp	r0, #0
   12f74:	f47f ac41 	bne.w	127fa <_vfiprintf_r+0x3ae>
   12f78:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f7c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f80:	1c41      	adds	r1, r0, #1
   12f82:	e477      	b.n	12874 <_vfiprintf_r+0x428>
   12f84:	f898 1000 	ldrb.w	r1, [r8]
   12f88:	9307      	str	r3, [sp, #28]
   12f8a:	f7ff bad2 	b.w	12532 <_vfiprintf_r+0xe6>
   12f8e:	ac44      	add	r4, sp, #272	; 0x110
   12f90:	f7ff bb85 	b.w	1269e <_vfiprintf_r+0x252>
   12f94:	f109 0908 	add.w	r9, r9, #8
   12f98:	f10c 0101 	add.w	r1, ip, #1
   12f9c:	4660      	mov	r0, ip
   12f9e:	e4a0      	b.n	128e2 <_vfiprintf_r+0x496>
   12fa0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12fa4:	f040 8197 	bne.w	132d6 <_vfiprintf_r+0xe8a>
   12fa8:	f851 3b04 	ldr.w	r3, [r1], #4
   12fac:	9107      	str	r1, [sp, #28]
   12fae:	f7ff bbc0 	b.w	12732 <_vfiprintf_r+0x2e6>
   12fb2:	05b3      	lsls	r3, r6, #22
   12fb4:	f100 8188 	bmi.w	132c8 <_vfiprintf_r+0xe7c>
   12fb8:	f852 3b04 	ldr.w	r3, [r2], #4
   12fbc:	9207      	str	r2, [sp, #28]
   12fbe:	17da      	asrs	r2, r3, #31
   12fc0:	4611      	mov	r1, r2
   12fc2:	f7ff bb52 	b.w	1266a <_vfiprintf_r+0x21e>
   12fc6:	9907      	ldr	r1, [sp, #28]
   12fc8:	f851 3b04 	ldr.w	r3, [r1], #4
   12fcc:	9107      	str	r1, [sp, #28]
   12fce:	2101      	movs	r1, #1
   12fd0:	f7ff bbb3 	b.w	1273a <_vfiprintf_r+0x2ee>
   12fd4:	9b07      	ldr	r3, [sp, #28]
   12fd6:	9805      	ldr	r0, [sp, #20]
   12fd8:	f853 1b04 	ldr.w	r1, [r3], #4
   12fdc:	9307      	str	r3, [sp, #28]
   12fde:	17c2      	asrs	r2, r0, #31
   12fe0:	e9c1 0200 	strd	r0, r2, [r1]
   12fe4:	f7ff ba7d 	b.w	124e2 <_vfiprintf_r+0x96>
   12fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12fea:	2b00      	cmp	r3, #0
   12fec:	f43f ab26 	beq.w	1263c <_vfiprintf_r+0x1f0>
   12ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	f43f ab21 	beq.w	1263c <_vfiprintf_r+0x1f0>
   12ffa:	f898 1000 	ldrb.w	r1, [r8]
   12ffe:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13002:	f7ff ba96 	b.w	12532 <_vfiprintf_r+0xe6>
   13006:	2302      	movs	r3, #2
   13008:	aa11      	add	r2, sp, #68	; 0x44
   1300a:	931c      	str	r3, [sp, #112]	; 0x70
   1300c:	921b      	str	r2, [sp, #108]	; 0x6c
   1300e:	2001      	movs	r0, #1
   13010:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13014:	e6a2      	b.n	12d5c <_vfiprintf_r+0x910>
   13016:	9603      	str	r6, [sp, #12]
   13018:	e571      	b.n	12afe <_vfiprintf_r+0x6b2>
   1301a:	4b3b      	ldr	r3, [pc, #236]	; (13108 <_vfiprintf_r+0xcbc>)
   1301c:	930c      	str	r3, [sp, #48]	; 0x30
   1301e:	f016 0220 	ands.w	r2, r6, #32
   13022:	d059      	beq.n	130d8 <_vfiprintf_r+0xc8c>
   13024:	9b07      	ldr	r3, [sp, #28]
   13026:	3307      	adds	r3, #7
   13028:	f023 0307 	bic.w	r3, r3, #7
   1302c:	4618      	mov	r0, r3
   1302e:	685a      	ldr	r2, [r3, #4]
   13030:	f850 3b08 	ldr.w	r3, [r0], #8
   13034:	9007      	str	r0, [sp, #28]
   13036:	07f4      	lsls	r4, r6, #31
   13038:	d509      	bpl.n	1304e <_vfiprintf_r+0xc02>
   1303a:	ea53 0002 	orrs.w	r0, r3, r2
   1303e:	d006      	beq.n	1304e <_vfiprintf_r+0xc02>
   13040:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13044:	2130      	movs	r1, #48	; 0x30
   13046:	f046 0602 	orr.w	r6, r6, #2
   1304a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1304e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13052:	9103      	str	r1, [sp, #12]
   13054:	2102      	movs	r1, #2
   13056:	f7ff bb70 	b.w	1273a <_vfiprintf_r+0x2ee>
   1305a:	4b2c      	ldr	r3, [pc, #176]	; (1310c <_vfiprintf_r+0xcc0>)
   1305c:	930c      	str	r3, [sp, #48]	; 0x30
   1305e:	e7de      	b.n	1301e <_vfiprintf_r+0xbd2>
   13060:	9b07      	ldr	r3, [sp, #28]
   13062:	2101      	movs	r1, #1
   13064:	f853 2b04 	ldr.w	r2, [r3], #4
   13068:	9103      	str	r1, [sp, #12]
   1306a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1306e:	9307      	str	r3, [sp, #28]
   13070:	9104      	str	r1, [sp, #16]
   13072:	ac2b      	add	r4, sp, #172	; 0xac
   13074:	e4df      	b.n	12a36 <_vfiprintf_r+0x5ea>
   13076:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1307a:	2a00      	cmp	r2, #0
   1307c:	f040 8132 	bne.w	132e4 <_vfiprintf_r+0xe98>
   13080:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13082:	2a00      	cmp	r2, #0
   13084:	f47f ae62 	bne.w	12d4c <_vfiprintf_r+0x900>
   13088:	4618      	mov	r0, r3
   1308a:	2101      	movs	r1, #1
   1308c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13090:	e427      	b.n	128e2 <_vfiprintf_r+0x496>
   13092:	2100      	movs	r1, #0
   13094:	2208      	movs	r2, #8
   13096:	a816      	add	r0, sp, #88	; 0x58
   13098:	9413      	str	r4, [sp, #76]	; 0x4c
   1309a:	f7fa ffd3 	bl	e044 <memset>
   1309e:	1c79      	adds	r1, r7, #1
   130a0:	f000 80bc 	beq.w	1321c <_vfiprintf_r+0xdd0>
   130a4:	2500      	movs	r5, #0
   130a6:	9407      	str	r4, [sp, #28]
   130a8:	462c      	mov	r4, r5
   130aa:	e00c      	b.n	130c6 <_vfiprintf_r+0xc7a>
   130ac:	a92b      	add	r1, sp, #172	; 0xac
   130ae:	4658      	mov	r0, fp
   130b0:	f7fe f928 	bl	11304 <_wcrtomb_r>
   130b4:	1c42      	adds	r2, r0, #1
   130b6:	4420      	add	r0, r4
   130b8:	f000 816b 	beq.w	13392 <_vfiprintf_r+0xf46>
   130bc:	42b8      	cmp	r0, r7
   130be:	dc08      	bgt.n	130d2 <_vfiprintf_r+0xc86>
   130c0:	f000 8170 	beq.w	133a4 <_vfiprintf_r+0xf58>
   130c4:	4604      	mov	r4, r0
   130c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   130c8:	5952      	ldr	r2, [r2, r5]
   130ca:	ab16      	add	r3, sp, #88	; 0x58
   130cc:	3504      	adds	r5, #4
   130ce:	2a00      	cmp	r2, #0
   130d0:	d1ec      	bne.n	130ac <_vfiprintf_r+0xc60>
   130d2:	9404      	str	r4, [sp, #16]
   130d4:	9c07      	ldr	r4, [sp, #28]
   130d6:	e0af      	b.n	13238 <_vfiprintf_r+0xdec>
   130d8:	f016 0310 	ands.w	r3, r6, #16
   130dc:	9807      	ldr	r0, [sp, #28]
   130de:	d10c      	bne.n	130fa <_vfiprintf_r+0xcae>
   130e0:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   130e4:	d005      	beq.n	130f2 <_vfiprintf_r+0xca6>
   130e6:	461a      	mov	r2, r3
   130e8:	f850 3b04 	ldr.w	r3, [r0], #4
   130ec:	9007      	str	r0, [sp, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	e7a1      	b.n	13036 <_vfiprintf_r+0xbea>
   130f2:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   130f6:	f040 80e1 	bne.w	132bc <_vfiprintf_r+0xe70>
   130fa:	f850 3b04 	ldr.w	r3, [r0], #4
   130fe:	9007      	str	r0, [sp, #28]
   13100:	e799      	b.n	13036 <_vfiprintf_r+0xbea>
   13102:	bf00      	nop
   13104:	2000190c 	.word	0x2000190c
   13108:	200018cc 	.word	0x200018cc
   1310c:	200018e0 	.word	0x200018e0
   13110:	9903      	ldr	r1, [sp, #12]
   13112:	9704      	str	r7, [sp, #16]
   13114:	ac44      	add	r4, sp, #272	; 0x110
   13116:	469e      	mov	lr, r3
   13118:	ee08 ba90 	vmov	s17, fp
   1311c:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13120:	f04f 0c00 	mov.w	ip, #0
   13124:	4623      	mov	r3, r4
   13126:	e006      	b.n	13136 <_vfiprintf_r+0xcea>
   13128:	f1be 0f0a 	cmp.w	lr, #10
   1312c:	f172 0200 	sbcs.w	r2, r2, #0
   13130:	d339      	bcc.n	131a6 <_vfiprintf_r+0xd5a>
   13132:	46a6      	mov	lr, r4
   13134:	462a      	mov	r2, r5
   13136:	49a6      	ldr	r1, [pc, #664]	; (133d0 <_vfiprintf_r+0xf84>)
   13138:	eb1e 0002 	adds.w	r0, lr, r2
   1313c:	f140 0000 	adc.w	r0, r0, #0
   13140:	460f      	mov	r7, r1
   13142:	fba1 1400 	umull	r1, r4, r1, r0
   13146:	f024 0103 	bic.w	r1, r4, #3
   1314a:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1314e:	1a40      	subs	r0, r0, r1
   13150:	ebbe 0100 	subs.w	r1, lr, r0
   13154:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   13158:	f162 0400 	sbc.w	r4, r2, #0
   1315c:	fb05 f501 	mul.w	r5, r5, r1
   13160:	fb07 5504 	mla	r5, r7, r4, r5
   13164:	fba1 4107 	umull	r4, r1, r1, r7
   13168:	440d      	add	r5, r1
   1316a:	2705      	movs	r7, #5
   1316c:	f004 0101 	and.w	r1, r4, #1
   13170:	fba1 1b07 	umull	r1, fp, r1, r7
   13174:	1809      	adds	r1, r1, r0
   13176:	0864      	lsrs	r4, r4, #1
   13178:	3130      	adds	r1, #48	; 0x30
   1317a:	f803 1c01 	strb.w	r1, [r3, #-1]
   1317e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13182:	f10c 0c01 	add.w	ip, ip, #1
   13186:	3b01      	subs	r3, #1
   13188:	086d      	lsrs	r5, r5, #1
   1318a:	2e00      	cmp	r6, #0
   1318c:	d0cc      	beq.n	13128 <_vfiprintf_r+0xcdc>
   1318e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13190:	7809      	ldrb	r1, [r1, #0]
   13192:	4561      	cmp	r1, ip
   13194:	d1c8      	bne.n	13128 <_vfiprintf_r+0xcdc>
   13196:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1319a:	d0c5      	beq.n	13128 <_vfiprintf_r+0xcdc>
   1319c:	f1be 0f0a 	cmp.w	lr, #10
   131a0:	f172 0200 	sbcs.w	r2, r2, #0
   131a4:	d26c      	bcs.n	13280 <_vfiprintf_r+0xe34>
   131a6:	461c      	mov	r4, r3
   131a8:	ab44      	add	r3, sp, #272	; 0x110
   131aa:	1b1b      	subs	r3, r3, r4
   131ac:	9f04      	ldr	r7, [sp, #16]
   131ae:	9e03      	ldr	r6, [sp, #12]
   131b0:	9304      	str	r3, [sp, #16]
   131b2:	ee18 ba90 	vmov	fp, s17
   131b6:	f7ff ba72 	b.w	1269e <_vfiprintf_r+0x252>
   131ba:	9603      	str	r6, [sp, #12]
   131bc:	f7ff ba62 	b.w	12684 <_vfiprintf_r+0x238>
   131c0:	4658      	mov	r0, fp
   131c2:	f7fa fb7d 	bl	d8c0 <__sinit>
   131c6:	f7ff b95b 	b.w	12480 <_vfiprintf_r+0x34>
   131ca:	2901      	cmp	r1, #1
   131cc:	9603      	str	r6, [sp, #12]
   131ce:	f47f accd 	bne.w	12b6c <_vfiprintf_r+0x720>
   131d2:	f7ff ba5c 	b.w	1268e <_vfiprintf_r+0x242>
   131d6:	9b07      	ldr	r3, [sp, #28]
   131d8:	9905      	ldr	r1, [sp, #20]
   131da:	f853 2b04 	ldr.w	r2, [r3], #4
   131de:	6011      	str	r1, [r2, #0]
   131e0:	9307      	str	r3, [sp, #28]
   131e2:	f7ff b97e 	b.w	124e2 <_vfiprintf_r+0x96>
   131e6:	2f06      	cmp	r7, #6
   131e8:	463b      	mov	r3, r7
   131ea:	9a03      	ldr	r2, [sp, #12]
   131ec:	4c79      	ldr	r4, [pc, #484]	; (133d4 <_vfiprintf_r+0xf88>)
   131ee:	9207      	str	r2, [sp, #28]
   131f0:	bf28      	it	cs
   131f2:	2306      	movcs	r3, #6
   131f4:	9304      	str	r3, [sp, #16]
   131f6:	9303      	str	r3, [sp, #12]
   131f8:	f7ff bb25 	b.w	12846 <_vfiprintf_r+0x3fa>
   131fc:	9b03      	ldr	r3, [sp, #12]
   131fe:	9907      	ldr	r1, [sp, #28]
   13200:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13204:	bf14      	ite	ne
   13206:	f851 3b04 	ldrne.w	r3, [r1], #4
   1320a:	f851 3b04 	ldreq.w	r3, [r1], #4
   1320e:	9107      	str	r1, [sp, #28]
   13210:	bf1c      	itt	ne
   13212:	4602      	movne	r2, r0
   13214:	b2db      	uxtbne	r3, r3
   13216:	2101      	movs	r1, #1
   13218:	f7ff ba8f 	b.w	1273a <_vfiprintf_r+0x2ee>
   1321c:	ab16      	add	r3, sp, #88	; 0x58
   1321e:	9300      	str	r3, [sp, #0]
   13220:	2300      	movs	r3, #0
   13222:	4619      	mov	r1, r3
   13224:	aa13      	add	r2, sp, #76	; 0x4c
   13226:	4658      	mov	r0, fp
   13228:	f7fe f892 	bl	11350 <_wcsrtombs_r>
   1322c:	4603      	mov	r3, r0
   1322e:	3301      	adds	r3, #1
   13230:	9004      	str	r0, [sp, #16]
   13232:	f000 80ae 	beq.w	13392 <_vfiprintf_r+0xf46>
   13236:	9413      	str	r4, [sp, #76]	; 0x4c
   13238:	9b04      	ldr	r3, [sp, #16]
   1323a:	2b00      	cmp	r3, #0
   1323c:	d030      	beq.n	132a0 <_vfiprintf_r+0xe54>
   1323e:	2b63      	cmp	r3, #99	; 0x63
   13240:	dc63      	bgt.n	1330a <_vfiprintf_r+0xebe>
   13242:	2300      	movs	r3, #0
   13244:	9308      	str	r3, [sp, #32]
   13246:	ac2b      	add	r4, sp, #172	; 0xac
   13248:	2208      	movs	r2, #8
   1324a:	2100      	movs	r1, #0
   1324c:	a816      	add	r0, sp, #88	; 0x58
   1324e:	f7fa fef9 	bl	e044 <memset>
   13252:	9d04      	ldr	r5, [sp, #16]
   13254:	ab16      	add	r3, sp, #88	; 0x58
   13256:	9300      	str	r3, [sp, #0]
   13258:	aa13      	add	r2, sp, #76	; 0x4c
   1325a:	462b      	mov	r3, r5
   1325c:	4621      	mov	r1, r4
   1325e:	4658      	mov	r0, fp
   13260:	f7fe f876 	bl	11350 <_wcsrtombs_r>
   13264:	4285      	cmp	r5, r0
   13266:	f040 80ab 	bne.w	133c0 <_vfiprintf_r+0xf74>
   1326a:	9b03      	ldr	r3, [sp, #12]
   1326c:	9a04      	ldr	r2, [sp, #16]
   1326e:	9307      	str	r3, [sp, #28]
   13270:	2300      	movs	r3, #0
   13272:	54a3      	strb	r3, [r4, r2]
   13274:	461f      	mov	r7, r3
   13276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1327a:	9303      	str	r3, [sp, #12]
   1327c:	f7ff ba16 	b.w	126ac <_vfiprintf_r+0x260>
   13280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13282:	990d      	ldr	r1, [sp, #52]	; 0x34
   13284:	1a9b      	subs	r3, r3, r2
   13286:	4618      	mov	r0, r3
   13288:	9308      	str	r3, [sp, #32]
   1328a:	f7fa ff73 	bl	e174 <strncpy>
   1328e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13290:	9b08      	ldr	r3, [sp, #32]
   13292:	784a      	ldrb	r2, [r1, #1]
   13294:	b10a      	cbz	r2, 1329a <_vfiprintf_r+0xe4e>
   13296:	3101      	adds	r1, #1
   13298:	910b      	str	r1, [sp, #44]	; 0x2c
   1329a:	f04f 0c00 	mov.w	ip, #0
   1329e:	e748      	b.n	13132 <_vfiprintf_r+0xce6>
   132a0:	9b03      	ldr	r3, [sp, #12]
   132a2:	9307      	str	r3, [sp, #28]
   132a4:	9b04      	ldr	r3, [sp, #16]
   132a6:	9303      	str	r3, [sp, #12]
   132a8:	461f      	mov	r7, r3
   132aa:	9308      	str	r3, [sp, #32]
   132ac:	f7ff b9fe 	b.w	126ac <_vfiprintf_r+0x260>
   132b0:	2101      	movs	r1, #1
   132b2:	4618      	mov	r0, r3
   132b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132b8:	f7ff bb13 	b.w	128e2 <_vfiprintf_r+0x496>
   132bc:	f850 3b04 	ldr.w	r3, [r0], #4
   132c0:	9007      	str	r0, [sp, #28]
   132c2:	4622      	mov	r2, r4
   132c4:	b2db      	uxtb	r3, r3
   132c6:	e6b6      	b.n	13036 <_vfiprintf_r+0xbea>
   132c8:	f912 3b04 	ldrsb.w	r3, [r2], #4
   132cc:	9207      	str	r2, [sp, #28]
   132ce:	17da      	asrs	r2, r3, #31
   132d0:	4611      	mov	r1, r2
   132d2:	f7ff b9ca 	b.w	1266a <_vfiprintf_r+0x21e>
   132d6:	f851 3b04 	ldr.w	r3, [r1], #4
   132da:	9107      	str	r1, [sp, #28]
   132dc:	4602      	mov	r2, r0
   132de:	b2db      	uxtb	r3, r3
   132e0:	f7ff ba27 	b.w	12732 <_vfiprintf_r+0x2e6>
   132e4:	2301      	movs	r3, #1
   132e6:	931c      	str	r3, [sp, #112]	; 0x70
   132e8:	2101      	movs	r1, #1
   132ea:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   132ee:	931b      	str	r3, [sp, #108]	; 0x6c
   132f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132f4:	460b      	mov	r3, r1
   132f6:	f7ff bacd 	b.w	12894 <_vfiprintf_r+0x448>
   132fa:	9b07      	ldr	r3, [sp, #28]
   132fc:	9905      	ldr	r1, [sp, #20]
   132fe:	f853 2b04 	ldr.w	r2, [r3], #4
   13302:	9307      	str	r3, [sp, #28]
   13304:	8011      	strh	r1, [r2, #0]
   13306:	f7ff b8ec 	b.w	124e2 <_vfiprintf_r+0x96>
   1330a:	1c59      	adds	r1, r3, #1
   1330c:	4658      	mov	r0, fp
   1330e:	f7f9 fd6d 	bl	cdec <_malloc_r>
   13312:	4604      	mov	r4, r0
   13314:	2800      	cmp	r0, #0
   13316:	d03c      	beq.n	13392 <_vfiprintf_r+0xf46>
   13318:	9008      	str	r0, [sp, #32]
   1331a:	e795      	b.n	13248 <_vfiprintf_r+0xdfc>
   1331c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1331e:	f7fb f937 	bl	e590 <__retarget_lock_release_recursive>
   13322:	f7ff b9e9 	b.w	126f8 <_vfiprintf_r+0x2ac>
   13326:	9b03      	ldr	r3, [sp, #12]
   13328:	9307      	str	r3, [sp, #28]
   1332a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1332e:	9f08      	ldr	r7, [sp, #32]
   13330:	f7ff b9bc 	b.w	126ac <_vfiprintf_r+0x260>
   13334:	9819      	ldr	r0, [sp, #100]	; 0x64
   13336:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13338:	3001      	adds	r0, #1
   1333a:	e545      	b.n	12dc8 <_vfiprintf_r+0x97c>
   1333c:	9b03      	ldr	r3, [sp, #12]
   1333e:	9307      	str	r3, [sp, #28]
   13340:	4620      	mov	r0, r4
   13342:	f7fb f97d 	bl	e640 <strlen>
   13346:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1334a:	462f      	mov	r7, r5
   1334c:	9004      	str	r0, [sp, #16]
   1334e:	9303      	str	r3, [sp, #12]
   13350:	9508      	str	r5, [sp, #32]
   13352:	f7ff b9ab 	b.w	126ac <_vfiprintf_r+0x260>
   13356:	ee18 1a10 	vmov	r1, s16
   1335a:	aa18      	add	r2, sp, #96	; 0x60
   1335c:	4658      	mov	r0, fp
   1335e:	f7ff f839 	bl	123d4 <__sprint_r.part.0>
   13362:	2800      	cmp	r0, #0
   13364:	f43f aa36 	beq.w	127d4 <_vfiprintf_r+0x388>
   13368:	f7ff ba4d 	b.w	12806 <_vfiprintf_r+0x3ba>
   1336c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1336e:	3001      	adds	r0, #1
   13370:	e57a      	b.n	12e68 <_vfiprintf_r+0xa1c>
   13372:	468c      	mov	ip, r1
   13374:	e46e      	b.n	12c54 <_vfiprintf_r+0x808>
   13376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13378:	07d9      	lsls	r1, r3, #31
   1337a:	d405      	bmi.n	13388 <_vfiprintf_r+0xf3c>
   1337c:	89ab      	ldrh	r3, [r5, #12]
   1337e:	059a      	lsls	r2, r3, #22
   13380:	d402      	bmi.n	13388 <_vfiprintf_r+0xf3c>
   13382:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13384:	f7fb f904 	bl	e590 <__retarget_lock_release_recursive>
   13388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1338c:	9305      	str	r3, [sp, #20]
   1338e:	f7ff ba49 	b.w	12824 <_vfiprintf_r+0x3d8>
   13392:	ee18 2a10 	vmov	r2, s16
   13396:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1339a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1339e:	8193      	strh	r3, [r2, #12]
   133a0:	f7ff ba35 	b.w	1280e <_vfiprintf_r+0x3c2>
   133a4:	9c07      	ldr	r4, [sp, #28]
   133a6:	9704      	str	r7, [sp, #16]
   133a8:	e746      	b.n	13238 <_vfiprintf_r+0xdec>
   133aa:	9b07      	ldr	r3, [sp, #28]
   133ac:	f898 1001 	ldrb.w	r1, [r8, #1]
   133b0:	f853 7b04 	ldr.w	r7, [r3], #4
   133b4:	9307      	str	r3, [sp, #28]
   133b6:	4690      	mov	r8, r2
   133b8:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   133bc:	f7ff b8b9 	b.w	12532 <_vfiprintf_r+0xe6>
   133c0:	ee18 2a10 	vmov	r2, s16
   133c4:	8993      	ldrh	r3, [r2, #12]
   133c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133ca:	8193      	strh	r3, [r2, #12]
   133cc:	f7ff ba15 	b.w	127fa <_vfiprintf_r+0x3ae>
   133d0:	cccccccd 	.word	0xcccccccd
   133d4:	200018f4 	.word	0x200018f4

000133d8 <__sbprintf>:
   133d8:	b570      	push	{r4, r5, r6, lr}
   133da:	460c      	mov	r4, r1
   133dc:	8989      	ldrh	r1, [r1, #12]
   133de:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   133e2:	f021 0102 	bic.w	r1, r1, #2
   133e6:	f8ad 1014 	strh.w	r1, [sp, #20]
   133ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
   133ec:	911b      	str	r1, [sp, #108]	; 0x6c
   133ee:	89e1      	ldrh	r1, [r4, #14]
   133f0:	f8ad 1016 	strh.w	r1, [sp, #22]
   133f4:	69e1      	ldr	r1, [r4, #28]
   133f6:	9109      	str	r1, [sp, #36]	; 0x24
   133f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   133fa:	910b      	str	r1, [sp, #44]	; 0x2c
   133fc:	a91c      	add	r1, sp, #112	; 0x70
   133fe:	9102      	str	r1, [sp, #8]
   13400:	9106      	str	r1, [sp, #24]
   13402:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13406:	4606      	mov	r6, r0
   13408:	9104      	str	r1, [sp, #16]
   1340a:	9107      	str	r1, [sp, #28]
   1340c:	a818      	add	r0, sp, #96	; 0x60
   1340e:	2100      	movs	r1, #0
   13410:	e9cd 3200 	strd	r3, r2, [sp]
   13414:	9108      	str	r1, [sp, #32]
   13416:	f7fb f8b5 	bl	e584 <__retarget_lock_init_recursive>
   1341a:	e9dd 3200 	ldrd	r3, r2, [sp]
   1341e:	a902      	add	r1, sp, #8
   13420:	4630      	mov	r0, r6
   13422:	f7ff f813 	bl	1244c <_vfiprintf_r>
   13426:	1e05      	subs	r5, r0, #0
   13428:	db07      	blt.n	1343a <__sbprintf+0x62>
   1342a:	a902      	add	r1, sp, #8
   1342c:	4630      	mov	r0, r6
   1342e:	f7fd fe29 	bl	11084 <_fflush_r>
   13432:	2800      	cmp	r0, #0
   13434:	bf18      	it	ne
   13436:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   1343a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1343e:	065b      	lsls	r3, r3, #25
   13440:	d503      	bpl.n	1344a <__sbprintf+0x72>
   13442:	89a3      	ldrh	r3, [r4, #12]
   13444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13448:	81a3      	strh	r3, [r4, #12]
   1344a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1344c:	f7fb f89c 	bl	e588 <__retarget_lock_close_recursive>
   13450:	4628      	mov	r0, r5
   13452:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   13456:	bd70      	pop	{r4, r5, r6, pc}

00013458 <__fputwc>:
   13458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1345c:	b082      	sub	sp, #8
   1345e:	4682      	mov	sl, r0
   13460:	4688      	mov	r8, r1
   13462:	4614      	mov	r4, r2
   13464:	f7fa feb8 	bl	e1d8 <__locale_mb_cur_max>
   13468:	2801      	cmp	r0, #1
   1346a:	d103      	bne.n	13474 <__fputwc+0x1c>
   1346c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   13470:	2bfe      	cmp	r3, #254	; 0xfe
   13472:	d936      	bls.n	134e2 <__fputwc+0x8a>
   13474:	f10d 0904 	add.w	r9, sp, #4
   13478:	4642      	mov	r2, r8
   1347a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1347e:	4649      	mov	r1, r9
   13480:	4650      	mov	r0, sl
   13482:	f7fd ff3f 	bl	11304 <_wcrtomb_r>
   13486:	1c42      	adds	r2, r0, #1
   13488:	4606      	mov	r6, r0
   1348a:	d032      	beq.n	134f2 <__fputwc+0x9a>
   1348c:	b320      	cbz	r0, 134d8 <__fputwc+0x80>
   1348e:	f89d c004 	ldrb.w	ip, [sp, #4]
   13492:	2500      	movs	r5, #0
   13494:	e009      	b.n	134aa <__fputwc+0x52>
   13496:	6823      	ldr	r3, [r4, #0]
   13498:	1c5a      	adds	r2, r3, #1
   1349a:	6022      	str	r2, [r4, #0]
   1349c:	f883 c000 	strb.w	ip, [r3]
   134a0:	3501      	adds	r5, #1
   134a2:	42b5      	cmp	r5, r6
   134a4:	d218      	bcs.n	134d8 <__fputwc+0x80>
   134a6:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   134aa:	68a3      	ldr	r3, [r4, #8]
   134ac:	3b01      	subs	r3, #1
   134ae:	2b00      	cmp	r3, #0
   134b0:	60a3      	str	r3, [r4, #8]
   134b2:	daf0      	bge.n	13496 <__fputwc+0x3e>
   134b4:	69a7      	ldr	r7, [r4, #24]
   134b6:	42bb      	cmp	r3, r7
   134b8:	4661      	mov	r1, ip
   134ba:	4622      	mov	r2, r4
   134bc:	4650      	mov	r0, sl
   134be:	db02      	blt.n	134c6 <__fputwc+0x6e>
   134c0:	f1bc 0f0a 	cmp.w	ip, #10
   134c4:	d1e7      	bne.n	13496 <__fputwc+0x3e>
   134c6:	f7fd fe5b 	bl	11180 <__swbuf_r>
   134ca:	1c43      	adds	r3, r0, #1
   134cc:	d1e8      	bne.n	134a0 <__fputwc+0x48>
   134ce:	4606      	mov	r6, r0
   134d0:	4630      	mov	r0, r6
   134d2:	b002      	add	sp, #8
   134d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134d8:	4646      	mov	r6, r8
   134da:	4630      	mov	r0, r6
   134dc:	b002      	add	sp, #8
   134de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134e2:	fa5f fc88 	uxtb.w	ip, r8
   134e6:	f88d c004 	strb.w	ip, [sp, #4]
   134ea:	4606      	mov	r6, r0
   134ec:	f10d 0904 	add.w	r9, sp, #4
   134f0:	e7cf      	b.n	13492 <__fputwc+0x3a>
   134f2:	89a3      	ldrh	r3, [r4, #12]
   134f4:	4630      	mov	r0, r6
   134f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   134fa:	81a3      	strh	r3, [r4, #12]
   134fc:	b002      	add	sp, #8
   134fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13502:	bf00      	nop

00013504 <_fputwc_r>:
   13504:	b530      	push	{r4, r5, lr}
   13506:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13508:	f013 0f01 	tst.w	r3, #1
   1350c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13510:	4614      	mov	r4, r2
   13512:	b083      	sub	sp, #12
   13514:	4605      	mov	r5, r0
   13516:	b29a      	uxth	r2, r3
   13518:	d101      	bne.n	1351e <_fputwc_r+0x1a>
   1351a:	0598      	lsls	r0, r3, #22
   1351c:	d51c      	bpl.n	13558 <_fputwc_r+0x54>
   1351e:	0490      	lsls	r0, r2, #18
   13520:	d406      	bmi.n	13530 <_fputwc_r+0x2c>
   13522:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1352c:	81a3      	strh	r3, [r4, #12]
   1352e:	6662      	str	r2, [r4, #100]	; 0x64
   13530:	4622      	mov	r2, r4
   13532:	4628      	mov	r0, r5
   13534:	f7ff ff90 	bl	13458 <__fputwc>
   13538:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1353a:	07da      	lsls	r2, r3, #31
   1353c:	4605      	mov	r5, r0
   1353e:	d402      	bmi.n	13546 <_fputwc_r+0x42>
   13540:	89a3      	ldrh	r3, [r4, #12]
   13542:	059b      	lsls	r3, r3, #22
   13544:	d502      	bpl.n	1354c <_fputwc_r+0x48>
   13546:	4628      	mov	r0, r5
   13548:	b003      	add	sp, #12
   1354a:	bd30      	pop	{r4, r5, pc}
   1354c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1354e:	f7fb f81f 	bl	e590 <__retarget_lock_release_recursive>
   13552:	4628      	mov	r0, r5
   13554:	b003      	add	sp, #12
   13556:	bd30      	pop	{r4, r5, pc}
   13558:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1355a:	9101      	str	r1, [sp, #4]
   1355c:	f7fb f816 	bl	e58c <__retarget_lock_acquire_recursive>
   13560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13564:	9901      	ldr	r1, [sp, #4]
   13566:	b29a      	uxth	r2, r3
   13568:	e7d9      	b.n	1351e <_fputwc_r+0x1a>
   1356a:	bf00      	nop

0001356c <_wcsnrtombs_l>:
   1356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13570:	b08b      	sub	sp, #44	; 0x2c
   13572:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13576:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13578:	9103      	str	r1, [sp, #12]
   1357a:	4681      	mov	r9, r0
   1357c:	9205      	str	r2, [sp, #20]
   1357e:	461e      	mov	r6, r3
   13580:	f1b8 0f00 	cmp.w	r8, #0
   13584:	d05c      	beq.n	13640 <_wcsnrtombs_l+0xd4>
   13586:	9b03      	ldr	r3, [sp, #12]
   13588:	2b00      	cmp	r3, #0
   1358a:	d05e      	beq.n	1364a <_wcsnrtombs_l+0xde>
   1358c:	9b05      	ldr	r3, [sp, #20]
   1358e:	681d      	ldr	r5, [r3, #0]
   13590:	2f00      	cmp	r7, #0
   13592:	d06a      	beq.n	1366a <_wcsnrtombs_l+0xfe>
   13594:	1e74      	subs	r4, r6, #1
   13596:	b34e      	cbz	r6, 135ec <_wcsnrtombs_l+0x80>
   13598:	9b03      	ldr	r3, [sp, #12]
   1359a:	9304      	str	r3, [sp, #16]
   1359c:	3d04      	subs	r5, #4
   1359e:	2600      	movs	r6, #0
   135a0:	9501      	str	r5, [sp, #4]
   135a2:	e00b      	b.n	135bc <_wcsnrtombs_l+0x50>
   135a4:	9b03      	ldr	r3, [sp, #12]
   135a6:	bb2b      	cbnz	r3, 135f4 <_wcsnrtombs_l+0x88>
   135a8:	9b01      	ldr	r3, [sp, #4]
   135aa:	681a      	ldr	r2, [r3, #0]
   135ac:	2a00      	cmp	r2, #0
   135ae:	d03a      	beq.n	13626 <_wcsnrtombs_l+0xba>
   135b0:	45bc      	cmp	ip, r7
   135b2:	d25c      	bcs.n	1366e <_wcsnrtombs_l+0x102>
   135b4:	3c01      	subs	r4, #1
   135b6:	1c63      	adds	r3, r4, #1
   135b8:	4666      	mov	r6, ip
   135ba:	d017      	beq.n	135ec <_wcsnrtombs_l+0x80>
   135bc:	f8d8 3000 	ldr.w	r3, [r8]
   135c0:	9302      	str	r3, [sp, #8]
   135c2:	9b01      	ldr	r3, [sp, #4]
   135c4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   135c8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   135cc:	9301      	str	r3, [sp, #4]
   135ce:	a907      	add	r1, sp, #28
   135d0:	4643      	mov	r3, r8
   135d2:	4648      	mov	r0, r9
   135d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
   135d8:	47a8      	blx	r5
   135da:	1c42      	adds	r2, r0, #1
   135dc:	d03a      	beq.n	13654 <_wcsnrtombs_l+0xe8>
   135de:	eb00 0c06 	add.w	ip, r0, r6
   135e2:	45bc      	cmp	ip, r7
   135e4:	d9de      	bls.n	135a4 <_wcsnrtombs_l+0x38>
   135e6:	9b02      	ldr	r3, [sp, #8]
   135e8:	e9c8 3b00 	strd	r3, fp, [r8]
   135ec:	4630      	mov	r0, r6
   135ee:	b00b      	add	sp, #44	; 0x2c
   135f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f4:	2800      	cmp	r0, #0
   135f6:	dd0e      	ble.n	13616 <_wcsnrtombs_l+0xaa>
   135f8:	9b04      	ldr	r3, [sp, #16]
   135fa:	9d01      	ldr	r5, [sp, #4]
   135fc:	4418      	add	r0, r3
   135fe:	1e5a      	subs	r2, r3, #1
   13600:	a907      	add	r1, sp, #28
   13602:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   13606:	f811 3b01 	ldrb.w	r3, [r1], #1
   1360a:	f802 3f01 	strb.w	r3, [r2, #1]!
   1360e:	4572      	cmp	r2, lr
   13610:	d1f9      	bne.n	13606 <_wcsnrtombs_l+0x9a>
   13612:	9501      	str	r5, [sp, #4]
   13614:	9004      	str	r0, [sp, #16]
   13616:	9b05      	ldr	r3, [sp, #20]
   13618:	681a      	ldr	r2, [r3, #0]
   1361a:	3204      	adds	r2, #4
   1361c:	601a      	str	r2, [r3, #0]
   1361e:	9b01      	ldr	r3, [sp, #4]
   13620:	681a      	ldr	r2, [r3, #0]
   13622:	2a00      	cmp	r2, #0
   13624:	d1c4      	bne.n	135b0 <_wcsnrtombs_l+0x44>
   13626:	9b03      	ldr	r3, [sp, #12]
   13628:	b10b      	cbz	r3, 1362e <_wcsnrtombs_l+0xc2>
   1362a:	9b05      	ldr	r3, [sp, #20]
   1362c:	601a      	str	r2, [r3, #0]
   1362e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   13632:	2200      	movs	r2, #0
   13634:	4630      	mov	r0, r6
   13636:	f8c8 2000 	str.w	r2, [r8]
   1363a:	b00b      	add	sp, #44	; 0x2c
   1363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13640:	9b03      	ldr	r3, [sp, #12]
   13642:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13646:	2b00      	cmp	r3, #0
   13648:	d1a0      	bne.n	1358c <_wcsnrtombs_l+0x20>
   1364a:	9b05      	ldr	r3, [sp, #20]
   1364c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13650:	681d      	ldr	r5, [r3, #0]
   13652:	e79f      	b.n	13594 <_wcsnrtombs_l+0x28>
   13654:	4606      	mov	r6, r0
   13656:	218a      	movs	r1, #138	; 0x8a
   13658:	2200      	movs	r2, #0
   1365a:	4630      	mov	r0, r6
   1365c:	f8c9 1000 	str.w	r1, [r9]
   13660:	f8c8 2000 	str.w	r2, [r8]
   13664:	b00b      	add	sp, #44	; 0x2c
   13666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366a:	463e      	mov	r6, r7
   1366c:	e7be      	b.n	135ec <_wcsnrtombs_l+0x80>
   1366e:	4666      	mov	r6, ip
   13670:	e7bc      	b.n	135ec <_wcsnrtombs_l+0x80>
   13672:	bf00      	nop

00013674 <_wcsnrtombs_r>:
   13674:	b510      	push	{r4, lr}
   13676:	b084      	sub	sp, #16
   13678:	4c05      	ldr	r4, [pc, #20]	; (13690 <_wcsnrtombs_r+0x1c>)
   1367a:	9806      	ldr	r0, [sp, #24]
   1367c:	9000      	str	r0, [sp, #0]
   1367e:	9807      	ldr	r0, [sp, #28]
   13680:	9001      	str	r0, [sp, #4]
   13682:	4804      	ldr	r0, [pc, #16]	; (13694 <_wcsnrtombs_r+0x20>)
   13684:	6800      	ldr	r0, [r0, #0]
   13686:	9402      	str	r4, [sp, #8]
   13688:	f7ff ff70 	bl	1356c <_wcsnrtombs_l>
   1368c:	b004      	add	sp, #16
   1368e:	bd10      	pop	{r4, pc}
   13690:	20003014 	.word	0x20003014
   13694:	2000359c 	.word	0x2000359c

00013698 <___reboot_Teensyduino__veneer>:
   13698:	f85f f000 	ldr.w	pc, [pc]	; 1369c <___reboot_Teensyduino__veneer+0x4>
   1369c:	60001d8d 	.word	0x60001d8d

000136a0 <___init_veneer>:
   136a0:	f85f f000 	ldr.w	pc, [pc]	; 136a4 <___init_veneer+0x4>
   136a4:	60001e35 	.word	0x60001e35
	...

Disassembly of section .fini:

000136b0 <_fini>:
   136b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136b2:	bf00      	nop
